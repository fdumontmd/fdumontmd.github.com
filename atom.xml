<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2012-05-02T16:29:24+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Now I'm blushing...]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/05/02/now-im-blushing-dot-dot-dot/"/>
    <updated>2012-05-02T16:14:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/05/02/now-im-blushing-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Eric Redmond, one of the authors of
<a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a>
apparently found my blog, read it and posted a nice comment on
<a href="http://sevenweeks.org/">his blog</a>.</p>

<p>Now I have no choice but to urge all my three readers (that includes
you, Mom) to go and by this great book. Even if you already own a
copy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 2 Homework Exercises]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/05/02/concrete-mathematics-chapter-2-homework-exercises/"/>
    <updated>2012-05-02T13:13:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/05/02/concrete-mathematics-chapter-2-homework-exercises</id>
    <content type="html"><![CDATA[<p>It has been a long time since I wrote about this book; I had worked
the solutions more than a month ago, but then life happened, and I
could not find the time (or, perhaps, more accurately the courage) to
typeset my notes&#8230;</p>

<p>Anyway, I do have time now and am eager to go on with Chapter 3; but
first let&#8217;s finish Chapter 2. Today the homework exercises, and very
soon the exams and bonus (at least the ones I could do) exercises.</p>

<!--more-->


<h2>Homework</h2>

<h3>$2T_n = nT_{n-1}+3\cdot n!$</h3>

<p>This exercise is not tricky in anyway; just follow the method and
the result is guaranteed.</p>

<p>The recurrence equations are</p>

<div markdown="0">
\begin{align}
T_0 &amp; = 5&#92;&#92;
2T_n &amp; = nT_{n-1}+3\cdot n!&#92;&#92;
\end{align}
</div>


<p>The $a_n$, $b_n$ and $c_n$ series are:</p>

<div markdown="0">
\begin{align}
a_n &amp; = 2&#92;&#92;
b_n &amp; = n&#92;&#92;
c_n &amp; = 3\cdot n!&#92;&#92;
\end{align}
</div>


<p>The summation factor</p>

<div markdown="0">
\begin{align}
s_n &amp; = \frac{a_{n-1}\dots a_1}{b_n\dots b_2}s_1&#92;&#92;
&amp; = \frac{2^{n-1}}{n!}s_1&#92;&#92;
\end{align}
</div>


<p>After experimenting a bit, I found that $s_1 = 2$ is slightly easier
to work with, so the summation factor is $s_n = \frac{2^n}{n!}$.</p>

<p>With $S_n = \frac{2^n+1}{n!} T_n$, the recurrence equation becomes</p>

<div markdown="0">
\begin{align}
S_n &amp; = S_{n-1} + 3\cdot 2^n&#92;&#92;
&amp; = S_0 + 3\sum_{k=1}^n 2^k&#92;&#92;
\end{align}
</div>


<p>The sum is well-known, with $\sum_{k=0}^n 2^k = 2^{n+1}-1$, so
$\sum_{k=1}^n 2^k = 2^{n+1}-2$.</p>

<p>Going back to $T_n$, we have</p>

<div markdown="0">
\begin{align}
T_n &amp; = \frac{n!(10+3(2^{n+1}-2))}{2^{n+1}}&#92;&#92;
&amp; = \frac{n!(5+3(2^n-1))}{2^n}&#92;&#92;
&amp; = \frac{n!(5 + 3\cdot 2^n - 3)}{2^n}&#92;&#92;
&amp; = \frac{n!(3\cdot 2^n + 2)}{2^n}&#92;&#92;
&amp; = 3\cdot n! + \frac{n!}{2^{n-1}}&#92;&#92;
\end{align}
</div>


<h3>$\sum_{k=0}^n kH_k$</h3>

<p>Using the perturbation method:</p>

<div markdown="0">
\begin{align}
S_{n+1} = S_n + (n+1) H_{n+1} &amp; = 0 + \sum_{k=1}^{n+1} k H_k&#92;&#92;
&amp; = \sum_{k+1=1}^{n+1}(k+1)H_{k+1}&amp;&amp;k\leftarrow k+1&#92;&#92;
&amp; = \sum_{k=0}^n (k+1) (H_k + \frac{1}{k+1})&#92;&#92;
&amp; = \sum_{k=0}^n k H_k + \sum_{k=0}^n \frac{k}{k+1} 
+ \sum_{k=0}^n H_k + \sum_{k=0}^n \frac{1}{k+1}&#92;&#92;
&amp; = S_n + \sum_{k=0}^n\frac{k+1}{k+1} + \sum_{k_0}^n H_k&#92;&#92;
&amp; = S_n + n+1 + \sum_{k=0}^n H_k&#92;&#92;
\end{align}
</div>


<p>so $\sum_{k=0}^n H_k$ is</p>

<div markdown="0">
\begin{align}
\sum_{k=0}^n H_k &amp; = (n+1)H_{n+1} - (n + 1)&#92;&#92;
&amp; = (n+1)H_n + (n+1)\frac{1}{n+1} - n - 1&#92;&#92;
&amp; = (n+1)H_n + 1 - n - 1&#92;&#92;
&amp; = (n+1)H_n - n&#92;&#92;
\end{align}
</div>


<h3>More perturbation method</h3>

<p>This exercise is just tricky in the very first step (working out the
exact meaning of $S_{n+1}$), as the sign of the terms change depending
of whether $n$ is odd or even.</p>

<p>This means that instead of the book equation (2.24)
$S_{n+1} = S_n + a_{n+1}$, we find something like
$S_{n+1} = a_{n+1} - S_n$.</p>

<h4>$S_n = \sum_{k=0}^n (-1)^{n-k}$</h4>

<p>First, the left hand part of the equation:</p>

<div markdown="0">
\begin{align}
S_{n+1} &amp; = \sum_{k=0}^n (-1)^{n+1-k} + (-1)^{n+1-n-1}&#92;&#92;
&amp; = -\sum_{k=0}^n (-1)^{n-k} + 1&#92;&#92;
&amp; = 1 - S_n&#92;&#92;
\end{align}
</div>


<p>Then, the right hand part:</p>

<div markdown="0">
\begin{align}
S_{n+1} &amp; = (-1)^{n+1} + \sum_{k=1}^{n+1} (-1)^{n+1-k}&#92;&#92;
&amp; =
(-1)^{n+1}+\sum_{k+1=1}^{n+1}(-1)^{n+1-k-1}&amp;&amp;k\leftarrow k+1&#92;&#92;
&amp; = (-1)^{n+1} + \sum_{k=0}^n(-1)^{n-k}&#92;&#92;
&amp; = (-1)^{n+1} + S_n&#92;&#92;
\end{align}
</div>


<p>Putting both together, $S_n = \frac{1-(-1)^{n+1}}{2}$, or, as the book
states, $S_n = [\text{\(n\) is even}]$.</p>

<h4>$T_n = \sum_{k=0}^n (-1)^{n-k}k$</h4>

<p>Using the same approach as above:</p>

<div markdown="0">
\begin{align}
T_{n+1} &amp; = \sum_{k=0}^{n+1}(-1)^{n+1-k}k&#92;&#92;
&amp; = -\sum_{k=0}^n(-1)^{n-k}k + (-1){n+1-n-1}(n+1)&#92;&#92;
&amp; = n+1-T_n&#92;&#92;
\end{align}
</div>


<p>and</p>

<div markdown="0">
\begin{align}
T_{n+1} &amp; = \sum_{k=0}^{n+1}(-1)^{n+1-k}k&#92;&#92;
&amp; = (-1)^{n+1}0 + \sum_{k=1}^{n+1}(-1)^{n+1-k}k&#92;&#92;
&amp; = 0 + \sum_{k+1=1}^{n+1}(-1)^{n+1-k-1}{k+1}&amp;&amp;k\leftarrow k+1&#92;&#92;
&amp; = \sum_{k=0}^n(-1)^{n-k}k + \sum_{k=0}^n(-1)^{n-k}&#92;&#92;
&amp; = T_n + S_n&#92;&#92;
\end{align}
</div>


<p>Together:</p>

<div markdown="0">
\begin{align}
T_n &amp; = \frac{n+1-S_n}{2}&#92;&#92;
&amp; = \frac{1}{2}\left(n+[\text{\(n\) is odd}] \right)&#92;&#92;
&amp; = \left\lceil \frac{n}{2} \right\rceil&#92;&#92;
\end{align}
</div>


<p>The last version uses the ceiling operator from Chapter 3.</p>

<h4>$U_n = \sum_{k=0}^n (-1)^{n-k}k^2$</h4>

<p>It will probably not be a surprised to find $U_n$ expressed in terms
of $S_n$ and $T_n$.</p>

<div markdown="0">
\begin{align}
U_{n+1} &amp; = \sum_{k=0}^{n+1}(-1)^{n+1-k}k^2&#92;&#92;
&amp; = \sum_{k=0}^n(-1)^{n+1-k}k^2 + (-1)^{n+1-n-1}(n+1)^2&#92;&#92;
&amp; = -1\sum_{k=0}^n(-1)^{n-k}k^2 + (n+1)^2&#92;&#92;
&amp; = (n+1)^2 - U_n&#92;&#92;
\end{align}
</div>


<p>and</p>

<div markdown="0">
\begin{align}
U_{n+1} &amp; = \sum_{k=0}^{n+1}(-1)^{n+1-k}k^2&#92;&#92;
&amp; = (-1)^{n+1}0 + \sum_{k=1}^{n+1}(-1)^{n+1-k}k^2&#92;&#92;
&amp; = 0 + \sum_{k+1=1}^{n+1}(-1)^{n+1-k-2}(k+1)^2&amp;&amp;
k\leftarrow k+1&#92;&#92;
&amp; = \sum_{k=0}^n(-1)^{n-k}(k^2+2k+1)&#92;&#92;
&amp; = U_n + 2T_n + S_n&#92;&#92;
\end{align}
</div>


<p>With $2T_n = n+1-S_n$, this produces $U_{n+1} = U_n + n + 1$, which
gives the answer away, but let&#8217;s just continue with the current
method.</p>

<p>Putting both side together:</p>

<div markdown="0">
\begin{align}
U_n &amp = \frac{(n+1)^2 - (n+1)}{2}&#92;&#92;
&amp; = \frac{(n+1)(n+1) - (n+1)}{2}&#92;&#92;
&amp; = \frac{n(n+1)}{2}&#92;&#92;
\end{align}
</div>


<h3>Lagrange&#8217;s Identity</h3>

<p>First, I look for a usable double sum. I use the fact that for any
$j, k$, $j &lt; k$, $(a_jb_k - a_kb_j) = -(a_kb_j - a_jb_k)$ and
$(A_jB_k - A_kB_j)= - (A_kB_j - A_jB_k)$. This means that, with
$s_{j,k} = (a_jb_k - a_kb_j)(A_jB_k - A_kB_j)$, $s_{j,k} = s_{k,j}$.</p>

<p>There is also the fact that $s_{j,j} = 0$, so now I can complete the
sum to the whole rectangle:</p>

<div markdown="0">
\begin{align}
\sum_{1\le j,k\le n}s_{j,k} &amp; = \sum_{1\le j\lt k\le n}s_{j,k}
+ \sum_{1\le j = k \le n} s_{j,k} + \sum_{1\le k \lt j \le
n}s_{k,j}&#92;&#92;
&amp; = \sum_{1\le j \lt k \le n}s_{j,k} + 0
+ \sum_{1\le j \lt k \le n}s_{j,k}&#92;&#92;
&amp; = 2\sum_{1\le j \lt k \le n}s_{j,k}&#92;&#92;
\end{align}
</div>


<p>The expansion of $s_{j,k}$ is
$a_jA_jb_kB_k - a_jB_jA_kb_k - A_jb_ja_kB_k + b_jB_ja_kA_k$. Showing
the summation just for the first one (the other three are identical):</p>

<div markdown="0">
\begin{align}
\sum_{1\le j, k \le n} a_jA_jb_kB_k &amp; = \sum_{j=1}^n\sum_{k=1}^n a_jA_jb_kB_k&#92;&#92;
&amp; = \sum_{j=1}^n a_jA_j \left(\sum_{k=1}^n b_kB_k \right)&#92;&#92;
&amp; = \left(\sum_{j=1}^n a_jA_j\right)\left(\sum_{k=1}^n b_kB_k \right)&#92;&#92;
&amp; = \left(\sum_{k=1}^n a_kA_k\right)\left(\sum_{k=1}^n b_kB_k \right)&#92;&#92;
\end{align}
</div>


<p>Putting it all together:</p>

<div markdown="0">
\begin{align}
\sum_{1\le j\lt k\le n}(a_jb_k - a_kb_j)(A_jB_k - A_kB_j) &amp; =
\left(\sum_{k=1}^n a_kA_k\right)\left(\sum_{k=1}^n b_kB_k\right) -
\left(\sum_{k=1}^n a_kB_k\right)\left(\sum_{k=1}^n A_kb_k\right)&#92;&#92;
\end{align}
</div>


<p>In particular, with $a_k = A_k$ and $b_k = B_k$, the sum is
$\left(\sum_{k=1}^n a_k^2 \right)\left(\sum_{k=1}^n b_k^2 \right) - 2 \left(\sum_{k=1}^n a_kb_k \right)$.</p>

<h3>$\sum_{k=1}^n \frac{2k+1}{k(k+1)}$</h3>

<h4>Partial fractions</h4>

<div markdown="0">
\begin{align}
\sum_{k=1}^n\frac{2k+1}{k(k+1)}
&amp; = \sum_{k=1}^n(k+(k+1))\left(\frac{1}{k}-\frac{1}{k+1} \right)&#92;&#92;
&amp; = \sum_{k=1}^n\left(\frac{k}{k} + \frac{k+1}{k} - \frac{k}{k+1} - \frac{k+1}{k+1} \right)&#92;&#92;
&amp; = \sum_{k=1}^n \frac{k+1}{k} - \sum_{k=1}^n \frac{k}{k+1}&#92;&#92;
&amp; = n + H_n - \sum_{k=1}^n \frac{k}{k+1} -
\sum_{k=1}^n\frac{1}{k+1} + \sum_{k=1}^n\frac{1}{k+1}&#92;&#92;
&amp; = n + H_n - \sum_{k=1}^n \frac{k+1}{k+1} + \sum_{k=1}^n
\frac{1}{k+1}&#92;&#92;
&amp; = H_n + \sum_{k-1=1}^n \frac{1}{k}&amp;&amp;k\leftarrow k-1&#92;&#92;
&amp; = H_n + \sum_{k=2}^{n+1} \frac{1}{k}&#92;&#92;
&amp; = H_n + H_{n+1} - 1&#92;&#92;
&amp; = H_h + H_n + \frac{1}{n+1} - \frac{n+1}{n+1}&#92;&#92;
&amp; = 2H_n - \frac{n}{n+1}&#92;&#92;
\end{align}
</div>


<h4>Sum by parts</h4>

<p>Using</p>

<div markdown="0">
\begin{align}
\Delta v &amp; = \frac{1}{k(k+1)} = (k-1)^{\underline{-2}}&#92;&#92;
v &amp; = -(k-1)^{\underline{-1}}&#92;&#92;
Ev &amp; = -k^{\underline{-1}}&#92;&#92;
u &amp; = 2k+1&#92;&#92;
\Delta u &amp; = 2&#92;&#92;
\end{align}
</div>


<p>First the sum by part</p>

<div markdown="0">
\begin{align}
\sum \frac{2x+1}{x(x+1)}\delta x &amp; = 
-(2x+1)(x-1)^{\underline{-1}} + 2 \sum x^{\underline{-1}} \delta x + c&#92;&#92;
&amp; = -\frac{2x+1}{x} + 2 H_x + c&#92;&#92;
\end{align}
</div>


<p>Then the evaluation</p>

<div markdown="0">
\begin{align}
\sum_{k=1}^n\frac{2k+1}{k(k+1)} &amp; = \left. -\frac{2x+1}{x}+2H_x\right|_1^{n+1}&#92;&#92;
&amp; = -\frac{2(n+1)+1}{n+1} + 2 H_{n+1} + 2 + 1 - 2&#92;&#92;
&amp; = 2 H_{n+1} + 1 - 2 - \frac{1}{n+1}&#92;&#92;
&amp; = H_{n+1} + H_n - 1&#92;&#92;
&amp; = 2H_n - \frac{n}{n+1}&#92;&#92;
\end{align}
</div>


<h3>$\sum_{1\le k \lt n}\frac{H_k}{(k+1)(k+2)}$</h3>

<p>For the sum by part, I use</p>

<div markdown="0">
\begin{align}
\Delta v &amp; = x^{\underline{-2}}&#92;&#92;
v &amp; = -x^{\underline{-1}}&#92;&#92;
Ev &amp; = -(x+1)^{\underline{-1}}&#92;&#92;
u &amp; = H_x&#92;&#92;
\Delta u &amp; = x^{\underline{-1}}&#92;&#92;
\end{align}
</div>


<p>The sum by part</p>

<div markdown="0">
\begin{align}
\sum_{k=1}^n H_x x^{\underline{-2}} \delta x
&amp; = -H_x x^{\underline{-1}} + \sum
(x+1)^{\underline{-1}}x^{\underline{-1}}\delta x + c&#92;&#92;
&amp; = -H_x x^{\underline{-1}} + \sum x^{\underline{-2}} \delta x + c&#92;&#92;
&amp; = -H_x x^{\underline{-1}} - x^{\underline{-1}} + c&#92;&#92;
&amp; = -(H_x + 1) x^{\underline{-1}} + c&#92;&#92;
\end{align}
</div>


<p>The evaluation is</p>

<div markdown="0">
\begin{align}
\sum_{0\le k \lt n} \frac{H_k}{(k+1)(k+2)} &amp; =
\left. -\frac{H_x + 1}{x+1} \right|_0^n&#92;&#92;
&amp; = 1 - \frac{H_n + 1}{n+1}&#92;&#92;
\end{align}
</div>


<h3>Product laws</h3>

<p>I don&#8217;t think I listed all the laws for this exercise, as the only
complete list for the sum laws in the book is in the answer for this
exercise.</p>

<p>I will not repeat it here; suffice to say that when we replace sum by
product, the laws can be updated by replacing product by
exponentiation, and sum by product.</p>

<h3>$\prod_{1\le j \le k \le n}a_ja_k$</h3>

<p>While it took me a few false starts, I eventually found that the
triangular completion used for (2.32) works here as well.</p>

<div markdown="0">
\begin{align}
\left(\prod_{1\le j\le k \le n} a_ja_k \right)^2 &amp; = 
\left(\prod_{1\le j,k \le n}a_ja_k \right)
\left(\prod_{1\le j=k \le n}a_ja_k\right)&#92;&#92;
&amp; = \left(\prod_{1\le j,k \le n} a_j\right)
\left(\prod_{1\le j,k \le n} a_k\right)
\left(\prod_{1\le k \le n}a_k^2\right)&#92;&#92;
&amp; = \left(\prod_{1\le k \le n} a_k^n\right)
\left(\prod_{1\le j \le n} a_j^n\right)
\left(\prod_{1\le k \le n}a_k^2\right)&#92;&#92;
&amp; = \prod_{1\le k\le} a_k^{2n+2}&#92;&#92;
\end{align}
</div>


<p>So
$\prod_{1\le j \le k \le n}a_ja_k = \left(\prod_{1\le k\le} a_k\right)^{n+1}$.</p>

<h3>$\sum_{k=1}^n \frac{(-2)^{\underline k}}{k}$</h3>

<p>As suggested, I worked out $\Delta c^{\underline x}$:</p>

<div markdown="0">
\begin{align}
\Delta c^{\underline x} &amp; = c^{\underline{x+1}} - c^{\underline x}&#92;&#92;
&amp; = c(c-1)\cdots (c-x+1)(c-x) - c(c-1)\cdots (c-x+1)&#92;&#92;
&amp; = c^{\underline x}(c-x-1)&#92;&#92;
\end{align}
</div>


<p>I did not immediately saw the relation between this and the original
sum. First I rewrote the original sum to remove the division:</p>

<div markdown="0">
\begin{align}
\sum_{k=1}^n \frac{(-2)^{\underline k}}{k}
&amp; = \sum_{k=1}^n \frac{(-2)^{\underline{k-1}}(-2-k+1)}{k}&#92;&#92;
&amp; = -\sum_{k=1}^n \frac{(-2)^{\underline{k-2}(k+1)(-2-k+2)}}{k}&#92;&#92;
&amp; = \sum_{k=1}^n \frac{(-2)^{\underline{k-2}(k+1)(k)}}{k}&#92;&#92;
&amp; = \sum_{k=1}^n (-2)^{\underline{k-2}}(k+1)&#92;&#92;
\end{align}
</div>


<p>Now the relation is visible. So we have</p>

<div markdown="0">
\begin{align}
\sum_1^{n+1}\frac{(-2)^{\underline x}}{x}\delta x &amp; = \sum_1^{n+1}(-2)^{\underline x}(x+1)\delta x&#92;&#92;
x &amp; = \left. - (-2)^{\underline{x-2}}\right|_1^{n+1}&#92;&#92;
&amp; = (-2)^{\underline{-1}} - (-2)^{\underline{n-1}}&#92;&#92;
&amp; = -1 - (-2)(-3) \cdots (-n)&#92;&#92;
&amp; = (-1)^n n! - 1&#92;&#92;
\end{align}
</div>


<h3>Incorrect derivation</h3>

<p>As stated in the book, the infinite sums do no converge, so the third
step is invalid.</p>

<p>And that&#8217;s all for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning in Action - Naïve Bayes]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/04/09/machine-learning-in-action-naive-bayes/"/>
    <updated>2012-04-09T13:51:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/04/09/machine-learning-in-action-naive-bayes</id>
    <content type="html"><![CDATA[<p>I am currently reading
<a href="http://www.manning.com/pharrington/">Machine Learning in Action</a>, as
I need something light between sessions with
<a href="http://www-cs-faculty.stanford.edu/~uno/gkp.html">Concrete Mathematics</a>. This
book introduces a number of important machine learning algorithms,
each time with a complete implementation and one or more test data sets; it also
explains the underlying mathematics, and provides information about
additional reference material (mostly heavier and more expensive books).</p>

<p>However, in Chapter 4 about Naïve Bayes classifiers, I didn&#8217;t see how
the implementation derived by the maths. Eventually, I confirm that it
could not, and try to correct it.</p>

<!-- more -->


<p>It is of course possible that the implementation is eventually
correct, and derives from more advanced theoretical concepts or
practical concerns, but the book mentions neither; on the other hands,
I found papers
(<a href="http://trevorstone.org/school/spamfiltering.pdf">here</a> or
<a href="http://www.cs.cmu.edu/%7Etom/mlbook/NBayesLogReg.pdf">here</a>) that
seem to confirm my corrections.</p>

<p>Everything that follows assumes the book&#8217;s implementation was
wrong. Humble and groveling apologies to the author if it was not.</p>

<h2>What exactly is the model</h2>

<p>The book introduces the concept of conditional probability using balls
in buckets. This makes the explanation clearer, but this is just one
possible model; each model (or
<a href="http://en.wikipedia.org/wiki/Probability_distribution">distribution</a>)
uses dedicated formulas.</p>

<p>The problem is that the book then uses set of words or bags of words
as it these were the same underlying model, which they are not.</p>

<h3>Set of words</h3>

<p>If we are only interested in whether a given word is present in a
message or not, then the correct model is that of a biased coin where
tails indicate the absence of the word, and heads its presence.</p>

<p>This is also known as a
<a href="http://en.wikipedia.org/wiki/Bernoulli_trial">Bernoulli trial</a>,
and the estimator for the probability of presence is the mean
presence: the number of documents in which the word is present,
divided by the total number of documents.</p>

<p>The book algorithm does not implement this model correctly, as its
numerator is the count of documents in which the word is present
(correct), but the denominator is the total number of words
(incorrect).</p>

<h3>Bag of words</h3>

<p>If we want to consider the number of times a word is present in
messages, then the balls in buckets model is correct (it is a
also known as
<a href="http://en.wikipedia.org/wiki/Categorical_distribution">Categorical distribution</a>),
and the code in the book adequately implements it.</p>

<h2>There is a word for it: Additive Smoothing</h2>

<p>The book then improves the algorithm in two different ways. One is the
use of logarithms to prevent underflow. The other is to always use one
as the basic count for words, whether they are present or not.</p>

<p>This is in fact not so much a trick as a concept called
<a href="http://en.wikipedia.org/wiki/Additive_smoothing">Additive smoothing</a>,
where a basic estimator $\theta_i = \frac{w_i}{N}$ is replaced by
$\hat{\theta}_i = \frac{w_i + \alpha}{N + \alpha d}$</p>

<p>$\alpha$ is a so-called smoothing parameter, and $d$ is the total
number of words.</p>

<p>If the model is Bernoulli trial, $w_i$ is the number of documents
where word $i$ is present, and $N$ is the total number of documents.</p>

<p>If the model is categorical distribution, $w_i$ is the total count of
word $i$ is the documents and $N$ is the total count of words in the documents.</p>

<p>As we are interested in $P(w_i|C_j)$ (with $C_0, C_1$ the two
classes we are building a classifier for), $N$ above is restricted to
documents in the relevant class; $\alpha$ and $d$ are independent of
classes.</p>

<p>So the correct formula becomes</p>

<div markdown="0">
\begin{align}
\hat{\theta}_{i,j} = \frac{x_i,j+\alpha}{N_j+\alpha d}&#92;&#92;
\end{align}
</div>


<p>With $\alpha=1$ as a smoothing parameter, the book should have used
<code>numWords</code> instead of <code>2.0</code> as an initial value for both <code>p0Denom</code> and
<code>p1Denom</code>.</p>

<h2>Putting it together</h2>

<p>The differences with the code from the book are minor: first I
introduce a flag to indicates whether I&#8217;m using set of words
(Bernoulli trials)  or bags of words (categorical distribution) as a
model. Then I initialise <code>p0Denom</code> and <code>p1Denom</code> with <code>numWords</code> as
explained above; finally I check the <code>bag</code> flag to know what to add to
either denominators.</p>

<figure class='code'><figcaption><span>new trainingNB0  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">trainNB0</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">,</span> <span class="n">trainCategory</span><span class="p">,</span> <span class="n">bag</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>    <span class="n">numTrainDocs</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">)</span>
</span><span class='line'>    <span class="n">numWords</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>    <span class="n">pAbusive</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">trainCategory</span><span class="p">)</span><span class="o">/</span><span class="nb">float</span><span class="p">(</span><span class="n">numTrainDocs</span><span class="p">)</span>
</span><span class='line'>    <span class="n">p0Num</span> <span class="o">=</span> <span class="n">ones</span><span class="p">(</span><span class="n">numWords</span><span class="p">);</span> <span class="n">p1Num</span> <span class="o">=</span> <span class="n">ones</span><span class="p">(</span><span class="n">numWords</span><span class="p">)</span>
</span><span class='line'>    <span class="n">p0Denom</span> <span class="o">=</span> <span class="n">numWords</span><span class="p">;</span> <span class="n">p1Denom</span> <span class="o">=</span> <span class="n">numWords</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numTrainDocs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">trainCategory</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">p1Num</span> <span class="o">+=</span> <span class="n">trainMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bag</span><span class="p">:</span>
</span><span class='line'>                <span class="n">p1Denom</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">p1Denom</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">p0Num</span> <span class="o">+=</span> <span class="n">trainMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bag</span><span class="p">:</span>
</span><span class='line'>                <span class="n">p0Denom</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">p0Denom</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">p1Vect</span> <span class="o">=</span> <span class="n">log</span><span class="p">(</span><span class="n">p1Num</span><span class="o">/</span><span class="p">(</span><span class="n">p1Denom</span><span class="o">+</span><span class="n">numWords</span><span class="p">))</span>
</span><span class='line'>    <span class="n">p0Vect</span> <span class="o">=</span> <span class="n">log</span><span class="p">(</span><span class="n">p0Num</span><span class="o">/</span><span class="p">(</span><span class="n">p0Denom</span><span class="o">+</span><span class="n">numWords</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p0Vect</span><span class="p">,</span> <span class="n">p1Vect</span><span class="p">,</span> <span class="n">pAbusive</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Evaluation</h2>

<p>For the Spam test, the book version has an average error of 6%. The
rewritten version has an error between 3% and 4%. The Spam test uses
messages as set, for which my version is the most different.</p>

<p>For the New-York/San Francisco messages classification, I did not
measure any difference in error rates; this test uses messages as
bags, for which the book version was mostly correct (the only
difference was in the denominators).</p>

<h2>So what?</h2>

<p>OK, well, but the book algorithm still works, at least on the original
data.</p>

<p>But how well exactly would it work with other data? As the algorithm
does not seem to implement any kind of sound model, is there any way
to quantify the error we can expect? By building on theoretical
foundations, at least we can quantify the outcome, and rely on the
work of all the brilliant minds who improved that theory.</p>

<p>Theories (the scientific kind, not the hunch kind) provide well
studied abstractions. There are always cases where they do not apply,
and other cases where they do, but only partially or imperfectly. This
should be expected as abstractions ignore part of the real world
problem to make it tractable.</p>

<p>Using a specific theory to address a problem is very much similar to
looking for lost keys under a lamppost: maybe the keys are not there,
but that&#8217;s where the light is brightest, so there is little chance to
find them anywhere else anyway.</p>

<h2>A bad book then?</h2>

<p>So far, this was the only chapter where I had anything bad to
say about the book. And even then, it was not that bad.</p>

<p>The rest of the book is very good; the underlying concepts are well
explained (indeed, that&#8217;s how I found the problem in the first place),
there is always data to play with, and the choice of language and
libraries (<a href="http://www.python.org/">Python</a>,
<a href="http://numpy.scipy.org/">Numpy</a> and
<a href="http://matplotlib.sourceforge.net/">matplotlib</a>) is very well
suited to the kind of exploratory programming that makes learning
much easier.</p>

<p>So I would recommend this book as an introduction to this subject, and
I&#8217;m certainly glad I bought it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Wrapping Up]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/03/15/seven-databases-in-seven-weeks-wrapping-up/"/>
    <updated>2012-03-15T10:57:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/03/15/seven-databases-in-seven-weeks-wrapping-up</id>
    <content type="html"><![CDATA[<p>This has lasted a little bit longer than seven weeks (the release
schedule of the beta versions did not help; my day job did not help
either), but finally I finished the book.</p>

<!--more-->


<h3>Pro</h3>

<p>I liked that the book started with PostgreSQL. All too often, I am put
of by the amazingly uninformed criticisms of the NoSQL crowd about
relational databases; this left me with the general impression that a
younger generation of engineers was just too ignorant to figure SQL
out, so they build something new (without the benefits of decades of
experience&#8230;).</p>

<p>By having a balance approach, the book cleared this misconception
(<a href="http://shop.oreilly.com/product/0636920010388.do">Hadoop, the Definitive Guide</a>
also has a balance coverage in its introduction).</p>

<p>Each database&#8217;s strengths and weaknesses are correctly (as far as I
can tell) reported, along with its position in the CAP triangle, and
intended or ideal usage.</p>

<p>A recapitulative (but already partially incorrect, at least in the 5.0
beta version) overview of all the databases properties in Appendix A
is also very useful.</p>

<h3>Cons</h3>

<p>Well, this is not exactly a problem of the book itself, but rather of
the tools it covers: the rapid and sometimes radical changes in some
of the databases meant that the technical information in the book was
already obsolete.</p>

<p>The book&#8217;s intention is not to be a detailed tutorial; for instance,
they skip installations (really, most technical books should skip
installation and go straight to setup and use; think of the number of
trees that would save), but the search for corrections was heavily
taxing my already sparse free time.</p>

<p>All this will eventually improve, as the tools and documentation
mature; right now using them is a bit too involved for the broad but
shallow approach this book follows.</p>

<p>Compared to
<a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">Seven Languages in Seven Weeks</a>,
I found this book more challenging. But this is perhaps a consequence
of my prior exposure to a variety of languages and programming
concepts; I suspect many people may find this book much easier.</p>

<h3>Recommendation</h3>

<p>Of all the books I have read recently, this is the one that changed
and enlarged my views the most.</p>

<p>If you are, like me, a traditional software engineer with years of
experience in relational databases but little exposure to newer kind
of storage, you will benefit from this presentation of many databases and
solution designs.</p>

<p>If, however, you already come from the NoSQL database and have
experience in a few of the covered tools, this one book might not be
the ideal one to convince you of the strengths of PostgreSQL. The
problem with relational databases is that, having been the defacto
standard storage solutions for decades, nobody remember why they
became popular in the first place (they actually replaced databases
that looked pretty much like document or graph databases, only much
more primitive).</p>

<p>Still, given its price, as a broad introduction to many different
data tools and techniques, this book is hard to beat. I certainly am
glad for having read it, and I think you would be too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Redis Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/03/14/seven-databases-in-seven-weeks-redis-day-3/"/>
    <updated>2012-03-14T15:48:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/03/14/seven-databases-in-seven-weeks-redis-day-3</id>
    <content type="html"><![CDATA[<p>Wow, almost two months since I wrote
<a href="http://blog.wakatta.jp/blog/2012/01/21/seven-databases-in-seven-weeks-redis-day-2/">Day 2</a>,
and more than one since the last post in this series&#8230; Time to bring
it to an end.</p>

<!--more-->


<p>Today is less about Redis (indeed, it is hardly used at all), and more
about a concept: Polyglot Persistence, and about an implementation
that showcases the concept.</p>

<p>In fact, I spent most of my time browsing the documentation of
<a href="http://nodejs.org/">Node.js</a>, the library/framework the authors used
to build the demo application.</p>

<h2>Polyglot Persistence</h2>

<p>Polyglot Persistence, the use of several kinds of storage systems in a
project, makes even more sense than Polyglot Programming (the
use of several languages in a project).</p>

<p>While languages are, by and large, equivalent in expressive power, and
mostly a matter of choice, culture, or comparative advantage (some
languages favour small teams, other large ones), storage systems are
sufficiently different that they are not interchangeable.</p>

<p>Once the idea of eventual consistency takes root, it is only a simple
extension to view the data as services available from a number of
sources, each optimised for its intended use (instead of a single,
default source that only partially meets the more specialised needs),
and with its own update cycles.</p>

<p>The problem, of course, is that it introduces several levels of
complexity: development, deployment, monitoring, and a dizzying range
of potential errors, failures, &#8230;</p>

<h2>Polyglot Persistent Service</h2>

<p>The implementation described in the book is small enough to fit in
less than 15 pages, yet rich enough to show what is possible.</p>

<p>The databases are (with the versions I used):</p>

<ul>
<li>Redis 2.4.8</li>
<li>CouchDB 1.1.1</li>
<li>Neo4j Community 1.6.1</li>
</ul>


<p>and the glue language is Node.js.</p>

<h3>Redis</h3>

<p>Redis is used first as initial storage for the first data take-on. It
is then used to track the transfer of data between CouchDB and the
other databases, and finally to support auto-completion of band names.</p>

<h3>CouchDB</h3>

<p>CouchDB is intended as the System Of Records (i.e. master database)
for the system. Data is meant to be loaded into CouchDB first, then
propagated to the other databases.</p>

<p>Beside that, it is not used much, and after the exercises, not used at all&#8230;</p>

<h3>Neo4j</h3>

<p>Neo4j keeps a graph of bands, members, and instruments (or roles), and
their relationships.</p>

<h3>Node.js</h3>

<p>Node.js is a framework/library for JavaScript based on the concept of
event-based programming (similar to, but perhaps more radical than,
Erlang). All I/O is done in continuation-passing style, which means
that whenever a I/O operation is initiated, one of the argument is a
function to handle whatever the operation produces (or deal with the
errors).</p>

<p>This is good from a performance point of view, but it is of course
more complex to design and code with. Still, it looks like a fun tool
to glue various servers together.</p>

<h3>Book Code Fixes</h3>

<p>I had to fix some of the code from the authors (nothing serious, and
all reported in the <a href="http://pragprog.com/titles/rwdata/errata">errata</a>):</p>

<ul>
<li><code>populate_couch.js</code>: the <code>trackLineCount</code> has an off-by-one
error. The check for completion should be <code>totalBands &lt;=
processedBands</code></li>
<li><code>bands.js</code>: the initialisation of <code>membersQuery</code> in the function
for the <code>/band</code> route has a syntax error. It should be</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>membersQuery = 'g.V[[name:"'+bandName+'"]]' 
</span><span class='line'>             + '.out("member").in("member").uniqueObject.name';</span></code></pre></td></tr></table></div></figure>


<h3>Updating the Code</h3>

<p>The book uses a now dated version of Neo4j, so the queries do not
work. The shortcut to access a node by index does not work anymore,
and the <code>uniqueObject</code> step has been replaced by <code>dedup</code>.</p>

<p>Here are the updated relevant portions:</p>

<figure class='code'><figcaption><span>/band Route  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">membersQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;bands&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">bandName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span>
</span><span class='line'>             <span class="o">+</span> <span class="s1">&#39;.out(&quot;member&quot;).in(&quot;member&quot;).dedup.name&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span>/artist Route  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rolesQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]].out(&quot;plays&quot;).role.dedup&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">bandsQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]].in(&quot;member&quot;).name.dedup&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Exercises</h2>

<p>I&#8217;m not sure what the second homework exercise was supposed to be
about: Neo4j already contains information about members and
memberships. Perhaps it dates from an early draft, before this
chapter&#8217;s code evolved into what it is now. In any case, the first
exercise had enough Neo4j anyway.</p>

<h3>Adding Band Member&#8217;s start and end dates</h3>

<p>The start and end dates for memberships in bands is sometimes
provided; the purpose of this exercise is to use this information.</p>

<h4>Pre-populate</h4>

<p>I load the start and end dates into their own key in Redis. The key
format are <code>from:bandName:artistName</code> and <code>to:bandName:artistName</code>.</p>

<p>First I take the data from the relevant columns:</p>

<figure class='code'><figcaption><span>Extracting Data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">artist</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">band</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">roles</span> <span class="o">=</span> <span class="nx">buildRoles</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]),</span>
</span><span class='line'>  <span class="nx">from</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">to</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, if they&#8217;re not empty, I create the keys in Redis:</p>

<figure class='code'><figcaption><span>Updating Redis  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">from</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;from:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">from</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">to</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;to:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>CouchDB</h4>

<p>Adding the information to CouchDB is not hard; the main difficulty is
to figure out how to modify the <code>populate_couch.js</code> script
(continuation-passing style is <em>hard</em>).</p>

<p>Eventually, I just reused the <code>roleBatch</code> (therefore renamed
<code>artistInfoBatch</code>) to retrieve the roles, from and to information.</p>

<figure class='code'><figcaption><span>Retrieving the Information  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">artistInfoBatch</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artistName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;smembers&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;artist:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>  <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;from:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>  <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;to:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The putting it in CouchDB is trivial:</p>

<figure class='code'><figcaption><span>Building Documents  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artistName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">artist</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">artistName</span><span class="p">,</span> <span class="nx">role</span> <span class="o">:</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">]</span> <span class="p">},</span>
</span><span class='line'>      <span class="nx">from</span> <span class="o">=</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">to</span> <span class="o">=</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">from</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;from&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">from</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">to</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;to&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">to</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">artistDocs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">artist</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Neo4j</h4>

<p>Neo4j was the hardest piece of the puzzle: I didn&#8217;t know, and could
not find any definitive documentation on, how to relationship
properties at creation time. Eventually I found that adding them to
the <code>data</code> attribute passed at creation time did the trick (although
it still took me more time to understand how to use them).</p>

<p>The problem to do so is that the <code>neo4j_caching_client.js</code> library
does not support adding properties to relationships, but it was easy
enough to modify this library to add this feature.</p>

<figure class='code'><figcaption><span>Relationship properties  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createRelationship</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fromNode</span><span class="p">,</span> <span class="nx">toNode</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fromPath</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fromNode</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^.*?\/db\/data\//</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">rel</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">to</span><span class="o">:</span> <span class="nx">toNode</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">type</span> <span class="p">};</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">rel</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">fromPath</span><span class="p">,</span> <span class="s1">&#39;relationships&#39;</span><span class="p">],</span> <span class="nx">rel</span><span class="p">,</span> <span class="nx">callback</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>then the relevant properties can be passed to the function above in
the <code>graph_sync.js</code> script:</p>

<figure class='code'><figcaption><span>Passing from and to properties  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;artist&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">from</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">props</span><span class="p">.</span><span class="nx">from</span> <span class="o">=</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">from</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">to</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">props</span><span class="p">.</span><span class="nx">to</span> <span class="o">=</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">to</span><span class="p">;</span>
</span><span class='line'><span class="nx">relate</span><span class="p">(</span><span class="nx">bandNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="nx">artistNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="s1">&#39;member&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;member&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="nx">props</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Using the new data</h4>

<p>To make use of the new data, I tried to differentiate between current
and old members of a band. I simply define a current member as one
whose <code>to</code> property is null.</p>

<p>Figuring how to write a Gremlin query that extracted the information I
needed was challenging: the documentation is often sparse, and many
concepts barely explained.</p>

<p>I found that I could collect nodes or relationships along a path by
naming them (with the step <code>as</code>), and then gather all of them in a
single row of a
<a href="http://docs.neo4j.org/chunked/stable/gremlin-plugin.html#rest-api-returning-nested-pipes"><code>Table</code></a>.
I used this to get both the <code>from</code>, <code>to</code>
properties and the artist <code>name</code> property in a single query. However,
I spent some time tracking a bug in my filters where apparently, null
<code>to</code> would not be returned as current members. I finally realise that
when a given node or relationship is given two different names, these
names will appear in reverse order in the <code>Table</code>.</p>

<p>So in my case, the query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g.idx("bands")[["name":"Nine Inch Nails"]].outE("member").as("from").as("to")
</span><span class='line'>.filter{it.to != null}.inV.as("name")
</span><span class='line'>.table(new Table()).{it.to}{it.from}{it.name}.cap()</span></code></pre></td></tr></table></div></figure>


<p>I give the names <code>from</code> and <code>to</code> to the relationship, but used them in
reverse order in the <code>Table</code> closures. Is this the intended behaviour
or a bug? Does anybody know?</p>

<p>It seems like a common problem with some NoSQL databases: the query
language feels very much adhoc, and not entirely sound or fully
thought through. Despite its many defects, SQL was at least based (if
sometimes remotely) on the relational calculus, which gave a precise
meaning to queries. It was further specified in different standards,
so that even its defects were fully clarified (XPath/XQuery is another
pretty well specified query language). When playing with NoSQL
databases that pretend to have a query language, I often find it
difficult to go beyond the simpler examples, precisely because of this
linguistic fuzziness.</p>

<p>But I solved it for this case, so now I have my <code>Table</code>. It is an
object with two properties: <code>columns</code> is an array of column names, and
<code>data</code> is an array of arrays (each one being a row). To convert them
to an array of objects, I use the following code:</p>

<figure class='code'><figcaption><span>Convert Table data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">columns</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;null&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">obj</span><span class="p">[</span><span class="nx">columns</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of the code is just the nested Node.js event functions, and
the formatting using the <a href="http://mustache.github.com/"><code>mustache</code></a>
(which was pretty cool and easy to use).</p>

<h4>Full Code</h4>

<figure class='code'><figcaption><span> (pre_populate.js)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/day3/from-to/pre_populate.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="c1">// The band data file name in tab-seperated form</span>
</span><span class='line'>  <span class="nx">tsvFileName</span> <span class="o">=</span> <span class="s1">&#39;group_membership.tsv&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// track how many file lines we&#39;ve processed</span>
</span><span class='line'>  <span class="nx">processedLines</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">csv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;csv&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">redis_client</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A helper function that splits up the comma-seperated list of roles and</span>
</span><span class='line'><span class="cm"> * converts it to an array. If no valid roles exist, return an empty array.</span>
</span><span class='line'><span class="cm"> * @param string the CSV to split into a role array</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">buildRoles</span><span class="p">(</span> <span class="nx">string</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">roles</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">roles</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">roles</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="nx">roles</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">roles</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Utility function that increments the total number</span>
</span><span class='line'><span class="cm"> * of lines (artists) processed and outputs every 1000.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">trackLineCount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="o">++</span><span class="nx">processedLines</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Lines Processed: &#39;</span> <span class="o">+</span> <span class="nx">processedLines</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Does all heavy lifting. Loops through the CSV file</span>
</span><span class='line'><span class="cm"> * and populate Redis with the given values.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">populateRedis</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">csv</span><span class="p">().</span>
</span><span class='line'>  <span class="nx">fromPath</span><span class="p">(</span> <span class="nx">tsvFileName</span><span class="p">,</span> <span class="p">{</span> <span class="nx">delimiter</span><span class="o">:</span> <span class="s1">&#39;\t&#39;</span><span class="p">,</span> <span class="nx">quote</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span>
</span><span class='line'>      <span class="nx">artist</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">band</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">roles</span> <span class="o">=</span> <span class="nx">buildRoles</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">from</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">to</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">band</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span> <span class="o">||</span> <span class="nx">artist</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">trackLineCount</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">redis_client</span><span class="p">.</span><span class="nx">sadd</span><span class="p">(</span><span class="s1">&#39;band:&#39;</span> <span class="o">+</span> <span class="nx">band</span><span class="p">,</span> <span class="nx">artist</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">roles</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">redis_client</span><span class="p">.</span><span class="nx">sadd</span><span class="p">(</span><span class="s1">&#39;artist:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">role</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">from</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;from:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">from</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">to</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;to:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">trackLineCount</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">total_lines</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Total Lines Processed: &#39;</span> <span class="o">+</span> <span class="nx">processedLines</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">redis_client</span><span class="p">.</span><span class="nx">quit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">populateRedis</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (populate_couch.js)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/day3/from-to/populate_couch.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="c1">// how many bands we expect to process</span>
</span><span class='line'>  <span class="nx">totalBands</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// and keep track of how many bands we have processed</span>
</span><span class='line'>  <span class="nx">processedBands</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// The name of the couch database</span>
</span><span class='line'>  <span class="nx">couchDBpath</span> <span class="o">=</span> <span class="s1">&#39;/bands&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">couchClient</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">5984</span><span class="p">,</span> <span class="s1">&#39;localhost&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A helper function that builds a good CouchDB key</span>
</span><span class='line'><span class="cm"> * @param string the unicode string being keyified</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">couchKeyify</span><span class="p">(</span> <span class="nx">string</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// remove bad chars, and disallow starting with an underscore</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">string</span><span class="p">.</span>
</span><span class='line'>    <span class="nx">replace</span><span class="p">(</span><span class="sr">/[\t \?\#\\\-\+\.\,&#39;&quot;()*&amp;!\/]+/g</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">replace</span><span class="p">(</span><span class="sr">/^_+/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Keep track of the number of bands processed, output every 1000 loaded,</span>
</span><span class='line'><span class="cm"> * and close the Redis client when we&#39;ve loaded them all.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">trackLineCount</span><span class="p">(</span> <span class="nx">increment</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">processedBands</span> <span class="o">+=</span> <span class="nx">increment</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// output once every 1000 lines</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">processedBands</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Bands Loaded: &#39;</span> <span class="o">+</span> <span class="nx">processedBands</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// close the Redis Client when complete</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">totalBands</span> <span class="o">&lt;=</span> <span class="nx">processedBands</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Total Bands Loaded: &#39;</span> <span class="o">+</span> <span class="nx">processedBands</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">redisClient</span><span class="p">.</span><span class="nx">quit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Post one or more documents into CouchDB.</span>
</span><span class='line'><span class="cm"> * @param url is where we POST to.</span>
</span><span class='line'><span class="cm"> * @param docString a stringified JSON document.</span>
</span><span class='line'><span class="cm"> * @param count the number of documents being inserted.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">postDoc</span><span class="p">(</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">docsString</span><span class="p">,</span> <span class="nx">count</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">couchClient</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">:</span> <span class="s1">&#39;application/json&#39;</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span> <span class="nx">docsString</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">==</span> <span class="mi">201</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">trackLineCount</span><span class="p">(</span> <span class="nx">count</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;postDoc Got error: &#39;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Loop through all of the bands populated in Redis. We expect</span>
</span><span class='line'><span class="cm"> * the format of each key to be &#39;band:Band Name&#39; having the value</span>
</span><span class='line'><span class="cm"> * as a set of artist names. The artists each have the list of roles</span>
</span><span class='line'><span class="cm"> * they play in each band, keyed by &#39;artist:Band Name:Artist Name&#39;.</span>
</span><span class='line'><span class="cm"> * The band name, set of artists, and set of roles each artist plays</span>
</span><span class='line'><span class="cm"> * populates the CouchDB documents. eg:</span>
</span><span class='line'><span class="cm">  {</span>
</span><span class='line'><span class="cm">    name:&quot;Nirvana&quot;,</span>
</span><span class='line'><span class="cm">    artists:[{</span>
</span><span class='line'><span class="cm">      name: &quot;Kurt Cobain&quot;,</span>
</span><span class='line'><span class="cm">      roles:[&quot;Lead Vocals&quot;, &quot;Guitar&quot;]</span>
</span><span class='line'><span class="cm">    },...]</span>
</span><span class='line'><span class="cm">  }</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">populateBands</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// First, create the couch database</span>
</span><span class='line'>  <span class="nx">couchClient</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="s1">&#39;PUT&#39;</span><span class="p">,</span> <span class="nx">couchDBpath</span><span class="p">).</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">redisClient</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="s1">&#39;band:*&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">bandKeys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">totalBands</span> <span class="o">=</span> <span class="nx">bandKeys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span>
</span><span class='line'>      <span class="nx">readBands</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">bandsBatch</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">bandKeys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">bandKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// substring of &#39;band:&#39;.length gives us the band name</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">bandName</span> <span class="o">=</span> <span class="nx">bandKey</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">redisClient</span><span class="p">.</span><span class="nx">smembers</span><span class="p">(</span><span class="nx">bandKey</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">artists</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// batch the Redis calls to get all artists&#39; information at once</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">artistInfoBatch</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artistName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
</span><span class='line'>            <span class="s1">&#39;smembers&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;artist:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'>          <span class="p">]);</span>
</span><span class='line'>          <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
</span><span class='line'>            <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;from:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'>          <span class="p">]);</span>
</span><span class='line'>          <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
</span><span class='line'>            <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;to:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'>          <span class="p">]);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// batch up each band member to find the roles they play</span>
</span><span class='line'>        <span class="nx">redisClient</span><span class="p">.</span>
</span><span class='line'>          <span class="nx">multi</span><span class="p">(</span><span class="nx">artistInfoBatch</span><span class="p">).</span>
</span><span class='line'>          <span class="nx">exec</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">artistInfo</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span>
</span><span class='line'>              <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">artistDocs</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// build the artists sub-documents</span>
</span><span class='line'>            <span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artistName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">artist</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">artistName</span><span class="p">,</span> <span class="nx">role</span> <span class="o">:</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">]</span> <span class="p">},</span>
</span><span class='line'>                  <span class="nx">from</span> <span class="o">=</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">],</span>
</span><span class='line'>                  <span class="nx">to</span> <span class="o">=</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">from</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;from&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">from</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">to</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;to&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">to</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">artistDocs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">artist</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// add this new band document to the batch to be executed later</span>
</span><span class='line'>            <span class="nx">bandsBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">_id</span><span class="o">:</span> <span class="nx">couchKeyify</span><span class="p">(</span> <span class="nx">bandName</span> <span class="p">),</span>
</span><span class='line'>              <span class="nx">name</span><span class="o">:</span> <span class="nx">bandName</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">artists</span><span class="o">:</span> <span class="nx">artistDocs</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="c1">// keep track of the total number of bands read</span>
</span><span class='line'>            <span class="nx">readBands</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// upload batches of 50 values to couch, or the remaining values left</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">bandsBatch</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mi">50</span> <span class="o">||</span> <span class="nx">totalBands</span> <span class="o">-</span> <span class="nx">readBands</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">postDoc</span><span class="p">(</span>
</span><span class='line'>                <span class="nx">couchDBpath</span><span class="o">+</span><span class="s1">&#39;/_bulk_docs&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="nx">docs</span> <span class="o">:</span> <span class="nx">bandsBatch</span> <span class="p">}),</span>
</span><span class='line'>                <span class="nx">bandsBatch</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// empty out the batch array to be filled again</span>
</span><span class='line'>              <span class="nx">bandsBatch</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// expose couchKeyify function</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">couchKeyify</span> <span class="o">=</span> <span class="nx">couchKeyify</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// start populating bands if running as main script</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">module</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">populateBands</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (graph_sync.js)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/day3/from-to/graph_sync.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">events</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">esc</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;querystring&#39;</span><span class="p">).</span><span class="nx">escape</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// custom libraries</span>
</span><span class='line'>  <span class="nx">couch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./watch_changes_continuous.js&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4j</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./neo4j_caching_client.js&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">neo4jClient</span> <span class="o">=</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">createClient</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">limit</span><span class="o">:</span> <span class="mi">10</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>  <span class="nx">couchWatcher</span> <span class="o">=</span> <span class="nx">couch</span><span class="p">.</span><span class="nx">createWatcher</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">db</span><span class="o">:</span> <span class="s1">&#39;bands&#39;</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>  <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// feed band information into redis for autocompleter</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">feedBandToRedis</span><span class="p">(</span><span class="nx">band</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">redisClient</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;band-name:&#39;</span> <span class="o">+</span> <span class="nx">band</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">band</span><span class="p">.</span><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">redisClient</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;artist-name:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">artist</span><span class="p">.</span><span class="nx">role</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">role</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">redisClient</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;role-name:&#39;</span> <span class="o">+</span> <span class="nx">role</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * feed band membership and artist/role content from couch to neo4j.</span>
</span><span class='line'><span class="cm"> * @param band A band document from CouchDB.</span>
</span><span class='line'><span class="cm"> * @param progress EventEmitter to emit progress events.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">feedBandToNeo4j</span><span class="p">(</span><span class="nx">band</span><span class="p">,</span> <span class="nx">progress</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span>
</span><span class='line'>    <span class="nx">lookup</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">lookupOrCreateNode</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">relate</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createRelationship</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;bands&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">band</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bandNode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;band&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">band</span><span class="p">.</span><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;artists&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artistNode</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;artist&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">from</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">props</span><span class="p">.</span><span class="nx">from</span> <span class="o">=</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">from</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">to</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">props</span><span class="p">.</span><span class="nx">to</span> <span class="o">=</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">to</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">relate</span><span class="p">(</span><span class="nx">bandNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="nx">artistNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="s1">&#39;member&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;member&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="nx">props</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">artist</span><span class="p">.</span><span class="nx">role</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">role</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;roles&#39;</span><span class="p">,</span> <span class="s1">&#39;role&#39;</span><span class="p">,</span> <span class="nx">role</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">roleNode</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;role&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">relate</span><span class="p">(</span><span class="nx">artistNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="nx">roleNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="s1">&#39;plays&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>              <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;plays&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// process only interesting bands (ones with artists who have roles)</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processBand</span><span class="p">(</span><span class="nx">band</span><span class="p">,</span> <span class="nx">progress</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// change this to true to process all bands</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">addBand</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">band</span><span class="p">.</span><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artist</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">role</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">addBand</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">addBand</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">feedBandToRedis</span><span class="p">(</span><span class="nx">band</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">feedBandToNeo4j</span><span class="p">(</span><span class="nx">band</span><span class="p">,</span> <span class="nx">progress</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// progress reporting measures (how much work has been done)</span>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">stats</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">doc</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">band</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">artist</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">member</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">role</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">plays</span><span class="o">:</span><span class="mi">0</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">progress</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">events</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stats</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">progress</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">stats</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">stats</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// start watching couch and processing bands as they come in</span>
</span><span class='line'><span class="nx">couchWatcher</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;doc&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">processBand</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">progress</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (neo4j_caching_client.js)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/day3/from-to/neo4j_caching_client.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">events</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">esc</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;querystring&#39;</span><span class="p">).</span><span class="nx">escape</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4j</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./neo4j_driver.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">createClient</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span>
</span><span class='line'>    <span class="nx">neo4jClient</span> <span class="o">=</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="nx">options</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">pending</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">events</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">pending</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// unlimited</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">expiry</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">expiry</span> <span class="o">||</span> <span class="mi">300</span><span class="p">;</span> <span class="c1">// default 5 min</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Run a gremlin script against the server.</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">runGremlin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">script</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ext/GremlinPlugin/graphdb/execute_script&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="p">{</span> <span class="nx">script</span> <span class="o">:</span> <span class="nx">script</span> <span class="p">},</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// lookup a key/value node by index.</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">lookupNode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;index/node&#39;</span><span class="p">,</span> <span class="nx">esc</span><span class="p">(</span><span class="nx">index</span><span class="p">),</span> <span class="nx">esc</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">esc</span><span class="p">(</span><span class="nx">value</span><span class="p">)];</span>
</span><span class='line'>    <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create a key/value node and index it.</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createNode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">input</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;node&#39;</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">uri</span><span class="o">:</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="nx">key</span><span class="o">:</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">value</span> <span class="p">};</span>
</span><span class='line'>      <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">([</span><span class="s1">&#39;index/node&#39;</span><span class="p">,</span> <span class="nx">esc</span><span class="p">(</span><span class="nx">index</span><span class="p">)],</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// lookup a node or create/index and cache it</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">lookupOrCreateNode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span>
</span><span class='line'>      <span class="nx">cacheKey</span> <span class="o">=</span> <span class="s1">&#39;lookup:&#39;</span> <span class="o">+</span> <span class="nx">index</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">ex</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">expiry</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// only one pending lookup for a given index/key/value allowed at a time</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">pending</span><span class="p">.</span><span class="nx">listeners</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// check redis first</span>
</span><span class='line'>      <span class="nx">redisClient</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">text</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span> <span class="o">&amp;&amp;</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// found in redis cache, use it and refresh</span>
</span><span class='line'>          <span class="nx">pending</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">text</span><span class="p">));</span>
</span><span class='line'>          <span class="nx">redisClient</span><span class="p">.</span><span class="nx">expire</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">ex</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// missed redis cache, lookup in neo4j index</span>
</span><span class='line'>          <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">lookupNode</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">list</span> <span class="o">&amp;&amp;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// found in index, use it and cache</span>
</span><span class='line'>              <span class="nx">pending</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>              <span class="nx">redisClient</span><span class="p">.</span><span class="nx">setex</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">ex</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// missed index, create it and cache it</span>
</span><span class='line'>              <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createNode</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">pending</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">redisClient</span><span class="p">.</span><span class="nx">setex</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">ex</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">pending</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create a relationship between two nodes</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createRelationship</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fromNode</span><span class="p">,</span> <span class="nx">toNode</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fromPath</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fromNode</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^.*?\/db\/data\//</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">rel</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">to</span><span class="o">:</span> <span class="nx">toNode</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">type</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">rel</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">fromPath</span><span class="p">,</span> <span class="s1">&#39;relationships&#39;</span><span class="p">],</span> <span class="nx">rel</span><span class="p">,</span> <span class="nx">callback</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">neo4jClient</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (bands.js)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/day3/from-to/bands.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">jsonHeader</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span><span class="s1">&#39;application/json&#39;</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">bricks</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bricks&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">mustache</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mustache&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// custom libraries</span>
</span><span class='line'>  <span class="nx">couchUtil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./populate_couch.js&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4j</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./neo4j_caching_client.js&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">couchClient</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">5984</span><span class="p">,</span> <span class="s1">&#39;localhost&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4jClient</span> <span class="o">=</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">gremlin</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">runGremlin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A convenience function for wrapping the</span>
</span><span class='line'><span class="cm"> * reading of JSON reponse data chunks.</span>
</span><span class='line'><span class="cm"> * @param response A Node HTTP response object.</span>
</span><span class='line'><span class="cm"> * @param callback the function to populate and call on completion.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processBuffer</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">callback</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">buffer</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">buffer</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;null&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Post one or more documents into CouchDB.</span>
</span><span class='line'><span class="cm"> * @param url is where we POST to.</span>
</span><span class='line'><span class="cm"> * @param docString a stringified JSON document.</span>
</span><span class='line'><span class="cm"> * @param count the number of documents being inserted.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">getCouchDoc</span><span class="p">(</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="nx">callback</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">couchClient</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">jsonHeader</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">response</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">!=</span> <span class="mi">200</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Value not found&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">processBuffer</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">couchObj</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span> <span class="nx">couchObj</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;postDoc Got error: &#39;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Wraps a block of HTML with a standard template. HTML lives in template.html.</span>
</span><span class='line'><span class="cm"> * @innerHtml populates the body of the template</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">htmlTemplate</span><span class="p">(</span> <span class="nx">innerHtml</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">file_data</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span> <span class="s1">&#39;template.html&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">file_data</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;[[YIELD]]&quot;</span><span class="p">,</span> <span class="nx">innerHtml</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">innerHtml</span><span class="p">,</span> <span class="nx">values</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">mustache</span><span class="p">.</span><span class="nx">to_html</span><span class="p">(</span> <span class="nx">htmlTemplate</span><span class="p">(</span> <span class="nx">innerHtml</span> <span class="p">),</span> <span class="nx">values</span> <span class="p">));</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">columns</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;null&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">obj</span><span class="p">[</span><span class="nx">columns</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// A Nodejs web app utility setup</span>
</span><span class='line'><span class="nx">appServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bricks</span><span class="p">.</span><span class="nx">appserver</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// attach request plugin to easily extract params</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">request</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Just display a blank form if no band is given.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Find a band&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Accepts a band name and displays all artists in the band.</span>
</span><span class='line'><span class="cm"> * Also displays a list of suggested bands where at least</span>
</span><span class='line'><span class="cm"> * one artist has played at one time.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Gremlin: aliases introduced for the same node and/or</span>
</span><span class='line'><span class="cm"> * relationship appear to be used in reverse order in</span>
</span><span class='line'><span class="cm"> * Tables.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/band$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bandName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">bandNodePath</span> <span class="o">=</span> <span class="s1">&#39;/bands/&#39;</span> <span class="o">+</span> <span class="nx">couchUtil</span><span class="p">.</span><span class="nx">couchKeyify</span><span class="p">(</span> <span class="nx">bandName</span> <span class="p">),</span>
</span><span class='line'>      <span class="nx">queryPrefix</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;bands&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">bandName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">otherBandsQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.out(&quot;member&quot;).in(&quot;member&quot;).dedup.name&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">currentMembersQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.outE(&quot;member&quot;).as(&quot;from&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.filter{it.to == null}.inV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table()){it.from}{it.name}.cap()&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">otherMembersQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.outE(&quot;member&quot;).as(&quot;from&quot;).as(&quot;to&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.filter{it.to != null}.inV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table())&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;{it.to}{it.from}{it.name}.cap()&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">gremlin</span><span class="p">(</span><span class="nx">otherBandsQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">graphData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">gremlin</span><span class="p">(</span><span class="nx">currentMembersQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentMembers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">gremlin</span><span class="p">(</span><span class="nx">otherMembersQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">otherMembers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">{</span><span class="nx">band</span><span class="o">:</span> <span class="nx">bandName</span><span class="p">,</span> <span class="nx">bands</span><span class="o">:</span> <span class="nx">graphData</span><span class="p">,</span>
</span><span class='line'>                             <span class="nx">currents</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">currentMembers</span><span class="p">),</span>
</span><span class='line'>                             <span class="nx">others</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">otherMembers</span><span class="p">)};</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;&lt;h2&gt;Current {{band}} Band Members&lt;/h2&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">currentMembers</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#currents}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/artist?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/currents}}&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s2">&quot;&lt;p&gt;No current member (dead band?)&lt;/p&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">otherMembers</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;Other members&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#others}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/artist?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#to}} to {{to}}{{/to}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/others}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;You may also like&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#bands}}&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/band?name={{.}}&quot;&gt;{{.}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/bands}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">values</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Accepts an artist name and displays band and role information</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/artist$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artistName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">queryPrefix</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">rolesQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span> <span class="o">+</span><span class="s1">&#39;.out(&quot;plays&quot;).role.dedup&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">bandsQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.inE(&quot;member&quot;).as(&quot;to&quot;).as(&quot;from&quot;).outV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table()){it.from}{it.to}{it.name}.cap()&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">gremlin</span><span class="p">(</span> <span class="nx">rolesQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">roles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">gremlin</span><span class="p">(</span> <span class="nx">bandsQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">artist</span><span class="o">:</span> <span class="nx">artistName</span><span class="p">,</span> <span class="nx">roles</span><span class="o">:</span> <span class="nx">roles</span><span class="p">,</span>
</span><span class='line'>                           <span class="nx">bands</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;&lt;h3&gt;{{artist}} Performs these Roles&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#roles}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;{{.}}&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/roles}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;Play in Bands&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#bands}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/band?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#to}} to {{to}}{{/to}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/bands}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">values</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * A band name search. Used for autocompletion.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/search$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">redisClient</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="s2">&quot;band-name:&quot;</span><span class="o">+</span><span class="nx">query</span><span class="o">+</span><span class="s2">&quot;*&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bands</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">keys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">bands</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;band-name:&quot;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// catch all unknown routes with a 404</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;.+&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">fourohfour</span><span class="p">);</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;.+&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">loghandler</span><span class="p">,</span> <span class="p">{</span> <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;final&quot;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// start up the server</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Starting Server on port &quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">createServer</span><span class="p">().</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Add Music Samples</h3>

<p>The book (in beta 5.0) suggested to use Riak&#8217;s Luwak, but this
component has recently been removed, and there seems to be no
replacement at this time. So I went with MongoDB&#8217;s
<a href="http://www.mongodb.org/display/DOCS/GridFS">GridFS</a> instead. This is
a little more complex than a simple replacement of the client
libraries: MongoDB does not have an HTTP ReST API for GridFS, so I
need to stream the content of the file through the server.</p>

<h4>Overview</h4>

<p>To keep things simple, I load only on sample per band; the file name
must be the same as the CouchDB key, followed by &#8216;.mp3&#8217;.</p>

<p>To access MongoDB from Node.js, I use
<a href="http://github.com/christkv/node-mongodb-native">node-mongodb-native</a>,
which can be installed with <code>npm</code>. It has all the expected features of
a client, including GridFS support (with one caveat, see below).</p>

<p>To stream the file from the server, I use a dedicated port, for no
better reason than because
<a href="http://bricksjs.com/index.html">Brick.js</a>, that the authors used to
build the service, was giving me trouble, while the standard <code>http</code>
module did not.</p>

<p>When displaying the band information, I check whether a file exists
with the same name as the band&#8217;s key: if it does, I add a link to the
dedicated streaming port, passing the key as parameter:</p>

<figure class='code'><figcaption><span>Adding Sample Link  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mongoClient</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mongodb</span><span class="p">.</span><span class="nx">GridStore</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">bandKey</span> <span class="o">+</span> <span class="s1">&#39;.mp3&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">exist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">exist</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;a href=&quot;http://&#39;</span><span class="o">+</span><span class="nx">host</span><span class="o">+</span><span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">streamPort</span><span class="o">+</span><span class="s1">&#39;?band=&quot;&gt;Sample&lt;/a&gt;&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, I create a new <code>http</code> server to send the music:</p>

<figure class='code'><figcaption><span>Streaming Files from GridFS  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">band</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">).</span><span class="nx">query</span><span class="p">.</span><span class="nx">band</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">mongoClient</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">gs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongodb</span><span class="p">.</span><span class="nx">GridStore</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">band</span><span class="o">+</span><span class="s1">&#39;.mp3&#39;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">gs</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">gs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;streaming...&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">response</span><span class="p">.</span><span class="nx">writeHeader</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;Content-type&#39;</span><span class="o">:</span> <span class="s1">&#39;audio/mpeg, audio/x-mpeg, audio/x-mpeg-3, audio/mpeg3&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="c1">// magic headers to stream mp3...</span>
</span><span class='line'>                <span class="s1">&#39;X-Pad&#39;</span><span class="o">:</span> <span class="s1">&#39;avoid browser bug&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;Cache-Control&#39;</span><span class="o">:</span> <span class="s1">&#39;no-cache&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;Content-Length&#39;</span><span class="o">:</span> <span class="nx">gs</span><span class="p">.</span><span class="nx">length</span><span class="p">});</span>
</span><span class='line'><span class="c1">// cannot use gridstore streams; somehow file always</span>
</span><span class='line'><span class="c1">// truncated - load in memory instead</span>
</span><span class='line'><span class="c1">//            gs.stream(true).pipe(response);</span>
</span><span class='line'>            <span class="nx">gs</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">gs</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">streamPort</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only problem I had (but it took me a while to figure it out) was
that the stream support in the MongoDB client for GridFS content is
(as far as I can tell) defective: it will close the stream after just
one or two chunks&#8217; worth of data
(<a href="https://github.com/christkv/node-mongodb-native/issues/540">Issue in Github</a>).</p>

<p>So instead I have to load the whole file in memory then write it in
the response&#8230; Clearly not the best approach, but hey, it works!</p>

<h4>Full Code</h4>

<figure class='code'><figcaption><span> (bands.js)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/day3/mp3/bands.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">streamPort</span> <span class="o">=</span> <span class="mi">8089</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">host</span> <span class="o">=</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">jsonHeader</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span><span class="s1">&#39;application/json&#39;</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">bricks</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bricks&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">mustache</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mustache&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// mongodb</span>
</span><span class='line'>  <span class="nx">mongodb</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// custom libraries</span>
</span><span class='line'>  <span class="nx">couchUtil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./populate_couch.js&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4j</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./neo4j_caching_client.js&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">couchClient</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">5984</span><span class="p">,</span> <span class="s1">&#39;localhost&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4jClient</span> <span class="o">=</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">mongoClient</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">mongodb</span><span class="p">.</span><span class="nx">Db</span><span class="p">(</span><span class="s1">&#39;music&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="k">new</span> <span class="nx">mongodb</span><span class="p">.</span><span class="nx">Server</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>                                      <span class="nx">mongodb</span><span class="p">.</span><span class="nx">Connection</span><span class="p">.</span><span class="nx">DEFAULT_PORT</span><span class="p">,</span> <span class="p">{}),</span>
</span><span class='line'>                   <span class="p">{</span><span class="nx">native_parser</span><span class="o">:</span><span class="kc">true</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">gremlin</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">runGremlin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A convenience function for wrapping the</span>
</span><span class='line'><span class="cm"> * reading of JSON reponse data chunks.</span>
</span><span class='line'><span class="cm"> * @param response A Node HTTP response object.</span>
</span><span class='line'><span class="cm"> * @param callback the function to populate and call on completion.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processBuffer</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">callback</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">buffer</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">buffer</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;null&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Post one or more documents into CouchDB.</span>
</span><span class='line'><span class="cm"> * @param url is where we POST to.</span>
</span><span class='line'><span class="cm"> * @param docString a stringified JSON document.</span>
</span><span class='line'><span class="cm"> * @param count the number of documents being inserted.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">getCouchDoc</span><span class="p">(</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="nx">callback</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">couchClient</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">jsonHeader</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">response</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">!=</span> <span class="mi">200</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Value not found&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">processBuffer</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">couchObj</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span> <span class="nx">couchObj</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;postDoc Got error: &#39;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Wraps a block of HTML with a standard template. HTML lives in template.html.</span>
</span><span class='line'><span class="cm"> * @innerHtml populates the body of the template</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">htmlTemplate</span><span class="p">(</span> <span class="nx">innerHtml</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">file_data</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span> <span class="s1">&#39;template.html&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">file_data</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;[[YIELD]]&quot;</span><span class="p">,</span> <span class="nx">innerHtml</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">innerHtml</span><span class="p">,</span> <span class="nx">values</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">mustache</span><span class="p">.</span><span class="nx">to_html</span><span class="p">(</span> <span class="nx">htmlTemplate</span><span class="p">(</span> <span class="nx">innerHtml</span> <span class="p">),</span> <span class="nx">values</span> <span class="p">));</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">columns</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;null&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">obj</span><span class="p">[</span><span class="nx">columns</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// A Nodejs web app utility setup</span>
</span><span class='line'><span class="nx">appServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bricks</span><span class="p">.</span><span class="nx">appserver</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// attach request plugin to easily extract params</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">request</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Just display a blank form if no band is given.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Find a band&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Accepts a band name and displays all artists in the band.</span>
</span><span class='line'><span class="cm"> * Also displays a list of suggested bands where at least</span>
</span><span class='line'><span class="cm"> * one artist has played at one time.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Gremlin: aliases introduced for the same node and/or</span>
</span><span class='line'><span class="cm"> * relationship appear to be used in reverse order in</span>
</span><span class='line'><span class="cm"> * Tables.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/band$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bandName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">bandKey</span> <span class="o">=</span> <span class="nx">couchUtil</span><span class="p">.</span><span class="nx">couchKeyify</span><span class="p">(</span> <span class="nx">bandName</span> <span class="p">),</span>
</span><span class='line'>      <span class="nx">bandNodePath</span> <span class="o">=</span> <span class="s1">&#39;/bands/&#39;</span> <span class="o">+</span> <span class="nx">bandKey</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">queryPrefix</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;bands&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">bandName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">otherBandsQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.out(&quot;member&quot;).in(&quot;member&quot;).dedup.name&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">currentMembersQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.outE(&quot;member&quot;).as(&quot;from&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.filter{it.to == null}.inV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table()){it.from}{it.name}.cap()&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">otherMembersQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.outE(&quot;member&quot;).as(&quot;from&quot;).as(&quot;to&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.filter{it.to != null}.inV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table())&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;{it.to}{it.from}{it.name}.cap()&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">gremlin</span><span class="p">(</span><span class="nx">otherBandsQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">graphData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">gremlin</span><span class="p">(</span><span class="nx">currentMembersQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentMembers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">gremlin</span><span class="p">(</span><span class="nx">otherMembersQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">otherMembers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">{</span><span class="nx">band</span><span class="o">:</span> <span class="nx">bandName</span><span class="p">,</span> <span class="nx">bands</span><span class="o">:</span> <span class="nx">graphData</span><span class="p">,</span>
</span><span class='line'>                             <span class="nx">currents</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">currentMembers</span><span class="p">),</span>
</span><span class='line'>                             <span class="nx">others</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">otherMembers</span><span class="p">),</span>
</span><span class='line'>                             <span class="nx">bandK</span><span class="o">:</span> <span class="nx">bandKey</span><span class="p">};</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;&lt;h2&gt;Current {{band}} Band Members&lt;/h2&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">currentMembers</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#currents}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/artist?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/currents}}&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s2">&quot;&lt;p&gt;No current member (dead band?)&lt;/p&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">mongoClient</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">mongodb</span><span class="p">.</span><span class="nx">GridStore</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">bandKey</span> <span class="o">+</span> <span class="s1">&#39;.mp3&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">exist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">exist</span><span class="p">)</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;a href=&quot;http://&#39;</span><span class="o">+</span><span class="nx">host</span><span class="o">+</span><span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">streamPort</span><span class="o">+</span><span class="s1">&#39;?band={{bandK}}&quot;&gt;Sample&lt;/a&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">otherMembers</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;Other members&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#others}}&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/artist?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#to}} to {{to}}{{/to}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/others}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;You may also like&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#bands}}&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/band?name={{.}}&quot;&gt;{{.}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/bands}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">values</span> <span class="p">);</span>
</span><span class='line'>                        <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>                    <span class="p">});</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Accepts an artist name and displays band and role information</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/artist$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artistName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">queryPrefix</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">rolesQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span> <span class="o">+</span><span class="s1">&#39;.out(&quot;plays&quot;).role.dedup&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">bandsQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.inE(&quot;member&quot;).as(&quot;to&quot;).as(&quot;from&quot;).outV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table()){it.from}{it.to}{it.name}.cap()&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">gremlin</span><span class="p">(</span> <span class="nx">rolesQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">roles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">gremlin</span><span class="p">(</span> <span class="nx">bandsQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">artist</span><span class="o">:</span> <span class="nx">artistName</span><span class="p">,</span> <span class="nx">roles</span><span class="o">:</span> <span class="nx">roles</span><span class="p">,</span>
</span><span class='line'>                           <span class="nx">bands</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;&lt;h3&gt;{{artist}} Performs these Roles&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#roles}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;{{.}}&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/roles}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;Play in Bands&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#bands}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/band?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#to}} to {{to}}{{/to}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/bands}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">values</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * A band name search. Used for autocompletion.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/search$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">redisClient</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="s2">&quot;band-name:&quot;</span><span class="o">+</span><span class="nx">query</span><span class="o">+</span><span class="s2">&quot;*&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bands</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">keys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">bands</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;band-name:&quot;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// cannot seem to get bricks to stream data back</span>
</span><span class='line'><span class="c1">// use simple default http server</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">band</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">).</span><span class="nx">query</span><span class="p">.</span><span class="nx">band</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">mongoClient</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">gs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongodb</span><span class="p">.</span><span class="nx">GridStore</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">band</span><span class="o">+</span><span class="s1">&#39;.mp3&#39;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">gs</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">gs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;streaming...&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">response</span><span class="p">.</span><span class="nx">writeHeader</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;Content-type&#39;</span><span class="o">:</span> <span class="s1">&#39;audio/mpeg, audio/x-mpeg, audio/x-mpeg-3, audio/mpeg3&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="c1">// magic headers to stream mp3...</span>
</span><span class='line'>                <span class="s1">&#39;X-Pad&#39;</span><span class="o">:</span> <span class="s1">&#39;avoid browser bug&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;Cache-Control&#39;</span><span class="o">:</span> <span class="s1">&#39;no-cache&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;Content-Length&#39;</span><span class="o">:</span> <span class="nx">gs</span><span class="p">.</span><span class="nx">length</span><span class="p">});</span>
</span><span class='line'><span class="c1">// cannot use gridstore streams; somehow file always</span>
</span><span class='line'><span class="c1">// truncated - load in memory instead</span>
</span><span class='line'><span class="c1">//            gs.stream(true).pipe(response);</span>
</span><span class='line'>            <span class="nx">gs</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">gs</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">streamPort</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// catch all unknown routes with a 404</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;.+&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">fourohfour</span><span class="p">);</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;.+&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">loghandler</span><span class="p">,</span> <span class="p">{</span> <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;final&quot;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// start up the server</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Starting Server on port &quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">createServer</span><span class="p">().</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up</h2>

<p>Well, that was a long day. I should have enjoyed it, but the lack of
maturity in some of the tools (Neo4j&#8217;s always evolving query language
and the GridFS streaming bug) caused hours of frustration. The main
cause, however, was missing knowledge: faced with an unexpected
behaviour, I had no idea whether it was a bug (find a workaround) or
an incorrect invocation (rework the query to correct it).</p>

<p>The exposition of polyglot persistence through the music information
service were pretty good, given the space constraint. Of course it
skipped the really ugly and tedious parts (how to incrementally keep
the databases in sync when the main records are updated, not merely
created); given the variation in data models, data manipulation (or
lack thereof) and query between the different databases, this can
easily become a nightmare (especially if incremental updates are not
part of the initial design).</p>

<p>Another upcoming book, <a href="http://www.manning.com/marz/">Big Data</a>, takes
a very different approach (no updates, only appends). I look forward
to reading it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 2 Basics]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/03/10/concrete-mathematics-chapter-2-basics/"/>
    <updated>2012-03-10T11:10:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/03/10/concrete-mathematics-chapter-2-basics</id>
    <content type="html"><![CDATA[<p>This second batch of exercises builds on the
<a href="http://blog.wakatta.jp/blog/2012/02/28/concrete-mathematics-chapter-2-warmups/">previous one</a>. Once
again, there are no complex manipulations, and very often the solution
just follows from the definitions.</p>

<!--more-->


<h2>Basics</h2>

<h3>$\sum_{0\le k\lt n}(a_{k+1}-a_k)b_k$</h3>

<p>To show that</p>

<div markdown="0">
\begin{align}
\sum_{0\le k\lt n}(a_{k+1}-a_k)b_k &amp; = a_n b_n - a_0 b_0 - \sum_{0 \le k \lt n} a_{k+1}(b_{k+1} - b_k)&amp;&amp;n\ge 0&#92;&#92;
\end{align}
</div>


<p>I start by rewriting the sum in the right side of the equation:</p>

<div markdown="0">
\begin{align}
\sum_{0 \le k \lt n} a_{k+1}(b_{k+1} - b_k) &amp; = \sum_{0 \le k \lt n} (a_{k+1}b_{k+1} +  a_{k+1} b_k)&#92;&#92;
&amp; = \sum_{0 \le k \lt n} a_{k+1}b_{k+1} +  \sum_{0 \le k \lt n} a_{k+1} b_k&amp;&amp;\text{associative law}&#92;&#92;
&amp; = \sum_{0 \le k-1 \lt n} a_k b_k +  \sum_{0 \le k \lt n} a_{k+1} b_k&amp;&amp;k\leftarrow k-1&#92;&#92;
&amp; = \sum_{1 \le k \le n} a_k b_k +  \sum_{0 \le k \lt n} a_{k+1} b_k&#92;&#92;
\end{align}
</div>


<p>This latest value can now be put back into the original right:</p>

<div markdown="0">
\begin{align}
a_n b_n - a_0 b_0 - \sum_{1 \le k \le n} a_k b_k +  \sum_{0 \le k \lt n} a_{k+1} b_k &amp; = \sum_{0\le k \lt n} a_{k+1} b_k - (a_0 b_0 + \sum_{1 \le k \le n} a_k b_k - a_n b_n)&#92;&#92;
&amp; = \sum_{0\le k \lt n} a_{k+1} b_k - \sum_{0\le k \lt n} a_k b_k&#92;&#92;
&amp; = \sum_{0\le k \lt n} (a_{k+1} b_k - a_k b_k)&#92;&#92;
&amp; = \sum_{0\le k \lt n} (a_{k+1} - a_k) b_k&#92;&#92;
\end{align}
</div>


<p>which is indeed the left side of the equation (the but-last step is
permitted under the associative law, but that didn&#8217;t fit in the margin).</p>

<h3>$p(k) = k + (-1)^k c$</h3>

<p>It is clear that there is a single $p(k)$ for every possible (integer)
$k$. So I need to show that for every $m$, there is a single $k$ such
that $p(k)=m$, defining $p^{-1}$.</p>

<p>The book method is smart, mine clearly less so, but as far as I can
tell, still correct: for $m$, I consider $m-c$ and $m+c$. The
difference is $2c$, so they&#8217;re either both even, or both
odd.</p>

<p>If they&#8217;re both even, then $m-c+(-1)^{m-c}c=m$, so $k=m-c$. If they&#8217;re
both odd, then $m+c+(-1)^{m+c}c=m$, so $k=m+c$. So $k$ is always well
defined for every $m$, and $p$ is indeed a permutation.</p>

<h3>$\sum_{k=0}^n (-1)^k k^2$</h3>

<p>While I found the closed formula for the sum, I could not do it with
the repertoire method.</p>

<p>Solving the sum is not really difficult (although a little bit than
the repertoire method, if you know how to do the latter); one way is
to solve the positive and negative sums separately (they can be broken
down to already solved sums); another one is to compute the sum of an
even number of terms (one positive and one negative), then to compute
sums of odd number of terms (by adding a term to the previous
solution), and finally combining both to find the closed formula.</p>

<p>In both attempts above, I tried to remove the $(-1)^k$ factor from the
terms; when using the repertoire method I tried to do the same, which
is why I failed.</p>

<p>The repertoire method relies on a good intuition: one must have a
sense of general shape of the parametric functions. In retrospect, it
seems obvious, but I just couldn&#8217;t see it, blinded as I was by$(-1)^k$.</p>

<p>Expressing the sum as a recurrence is easy:</p>

<div markdown="0">
\begin{align}
R_0 &amp; = 0&#92;&#92;
R_n &amp; = R_{n-1} + (-1)^n n^2&#92;&#92;
\end{align}
</div>


<p>Also, looking at the first few terms of the sum,
$-1, 3, -6, 10, -15, \dots$, it is natural to consider solutions of
the form $(-1)^n F(n)$; it is a little bit trickier to see where a good
generalisation of the recurrence above should put the additional
terms:</p>

<div markdown="0">
\begin{align}
R_0 &amp; = \alpha&#92;&#92;
R_n &amp; = R_{n-1} + (-1)^n \left(\beta + \gamma n + \delta n^2 \right)&#92;&#92;
\end{align}
</div>


<p>With such a form, plugging in solutions $(-1)^nF(n)$ will
simplify to $F(n) = \beta + \gamma n + \delta n^2 - F(n-1)$.</p>

<p>At this stage, it becomes very easy to find the $A(n)$, $B(n)$, $C(n)$
and $D(n)$ functions (the latter being the solution we are looking
for). In fact, if all you care about is $D(n)$, then it is enough to
use $R_n = (-1)^n n$ and $R_n = (-1)^n n^2$:</p>

<h4>$R_n = (-1)^n n$</h4>

<div markdown="0">
\begin{align}
R_0 &amp; = 0&amp;&amp;\alpha = 0&#92;&#92;
n &amp; = \beta + \gamma n + \delta n^n - n + 1&#92;&#92;
2n - 1 &amp; = \beta + \gamma n&amp;&amp;\beta = -1, \gamma = 2&#92;&#92;
\end{align}
</div>


<p>which gives $-B(n)+2C(n) = (-1)^n n$.</p>

<h4>$R_n = (-1)^n n^2$</h4>

<div markdown="0">
\begin{align}
R_0 &amp; = 0&amp;&amp;\alpha = 0&#92;&#92;
n^2 &amp; = \beta + \gamma n + \delta n^2 - (n-1) ^2&#92;&#92;
2 n^2 - 2n + 1 &amp; = \beta + \gamma n + \delta n^2&amp;&amp;\beta = 1, \gamma = -2, \delta = 2&#92;&#92;
\end{align}
</div>


<p>which gives $B(n)-2C(n)+2D(n) = (-1)^n n^2$. Combining with the
previous answer, we have $2D(n) = (-1)^n (n^2-n)$, or
$D(n) = (-1)^n \frac{n^2-n}{2}$.</p>

<h4>Wrapping up this exercise</h4>

<p>In hindsight, these steps could have helped me solve this
exercise as intended:</p>

<ul>
<li>compute the first few terms to see if there is something obvious
about their shape; in this case, the $(-1)^n$ factor</li>
<li>at first, write the recurrence equations as simply as possible,
with all the &#8220;inconvenient&#8221; parts; comparing them to the &#8220;shapes&#8221;
identified in the previous step might give some insight about the
general solutions, and possibly removed these difficult parts</li>
<li>only then, consider how to generalise the recurrence equations. The
base case is always $R_0 = \alpha$; the recurrent case should add
parameters to each term, and additional terms (with their own
parameters) to complete some basic classes of problems (for instance,
if there are any polynomial, there should be a term for each power
smaller than the largest power of the original problem; another basic
class is the generalised radix-based Josephus problem)</li>
<li>each class of problems can be solved independently; this makes it
easier to find potential solutions and to combine them.</li>
</ul>


<h3>$\sum_{k=1}^n k2^k$</h3>

<p>Not overly complicated; at least the introduction of $j$ is not a
mystery (unlike the next exercise).</p>

<div markdown="0">
\begin{align}
\sum_{1\le k\le n}k 2^k &amp; = \sum_{1\le k\le n} 2^k \sum_{1\le j\le k}1&#92;&#92;
&amp; = \sum_{1\le k\le n} \sum_{1\le j\le k} 2^k&#92;&#92;
&amp; = \sum_{1\le j\le k \le n} 2^k&#92;&#92;
&amp; = \sum_{1\le j\le n} \sum_{j\le k\le n}2^k&#92;&#92;
\end{align}
</div>


<p>The inner sum can be rewritten as</p>

<div markdown="0">
\begin{align}
\sum_{j\le k\le n}2^k &amp; = \sum_{1\le k\le n}2^k - \sum_{1\le k\lt j}2^k&#92;&#92;
&amp; = 2^{n+1} - 2 - 2^j + 2&#92;&#92;
&amp; = 2^{n+1} - 2^j&#92;&#92;
\end{align}
</div>


<p>Here I use the already known
sum $\sum 2^k$. Putting this last result
in the original sum</p>

<div markdown="0">
\begin{align}
\sum_{1\le j\le n} 2^{n+1} - 2^j &amp; = n2^{n+1} - (2^{n+1} -2)&#92;&#92;
\end{align}
</div>


<h3>$\sum_{k=1}^n k^3$</h3>

<p>It took me some time to convince myself that the original rewrite was
legitimate; eventually I did it by induction (the book version is much
shorter, and once you see it, much easier). Clearly it works for
$n=1$, so assuming it does for $n-1$, we have</p>

<div markdown="0">
\begin{align}
2\sum_{1\le j\le k\le n} jk &amp; = 2\sum_{1\le j\le k\le n-1} jk + 2\sum_{1\le j\le k=n} jk&#92;&#92;
&amp; = \sum_{1\le k\lt n}(k^3+k^2) + 2n\sum_{1\le j\le n} j&#92;&#92;
&amp; = \sum_{1\le k\lt n}(k^3+k^2) + n^2(n+1)&#92;&#92;
&amp; = \sum_{1\le k\lt n}(k^3+k^2) + n^3+n^2&#92;&#92;
\end{align}
</div>


<p>So the rewrite is correct. At this stage, (2.33) pretty much finishes it:</p>

<div markdown="0">
\begin{align}
\sum_{1\le k\le n}(k^3+k^2) &amp; = (\sum_{1\le k\le n}k)+\sum_{1\le k\le n}k^2&#92;&#92;
\end{align}
</div>


<p>so $\sum_{1\le k\le n}k^3=\frac{n^2(n+1)^2}{4}$.</p>

<h3>$\frac{x^{\underline m}}{(x-n)^{\underline m}} = \frac{x^{\underline n}}{(x-m)^{\underline n}}$</h3>

<p>This follows directly from
$\frac{a}{b} = \frac{c}{d} \implies ad = bc$, and the use of equation (2.52).</p>

<h3>Rising and Falling Factorial Powers Conversions</h3>

<p>I&#8217;ll just do the conversion from raising factorial power to falling
factorial power; the other conversion is just the same.</p>

<p>$x^{\overline m} = \frac{1}{(x-1)^{\underline m}}$ follows from (2.51)
and (2.52).</p>

<p>For the other equalities, by induction on $m$, and using (2.52) and
its raising factorial powers equivalent:</p>

<div markdown="0">
\begin{align}
x^{\underline m} &amp; = x^{\underline{m-1}}(x-m+1)&#92;&#92;
&amp; = x^{\underline 1}(x-1)^{\underline{m-1}}&#92;&#92;
&amp; = x(x-1)^{\underline{m-1}}&#92;&#92;
x^{\overline m} &amp; = x^{\overline{m-1}}(x+m-1)&#92;&#92;
&amp; = x^{\overline 1}(x+1)^{\overline{m-1}}&#92;&#92;
&amp; = x(x+1)^{\overline{m-1}}&#92;&#92;
\end{align}
</div>


<h4>Base case $m=0$</h4>

<p>They all follow from definition:</p>

<div markdown="0">
\begin{align}
x^{\overline 0} &amp; = 1&#92;&#92;
(-1)^0 (-x)^{\underline 0} &amp; = 1&#92;&#92;
(x+0-1)^{\underline 0} &amp; = 1&#92;&#92;
\end{align}
</div>


<h4>Other positive $m$</h4>

<p>Assuming the relations hold for all $k, 0\le k\lt m$:</p>

<div markdown="0">
\begin{align}
(-1)^m(-x)^{\underline m} &amp; = -\left((-1)^{m-1}(-x)^{\underline{m-1}}(-x-m+1)\right)&#92;&#92;
&amp; = (x^{\overline{m-1}})(x+m-1)&#92;&#92;
(x+m-1)^{\underline m} &amp; = (x+m-1)^{\underline{m-1}}x&#92;&#92;
&amp; = (x+1+(m-1)-1)^{\underline{m-1}}x&#92;&#92;
&amp; = (x+1)^{\overline{m-1}}x&#92;&#92;
\end{align}
</div>


<h4>Negative $m$</h4>

<p>Using the recurrence relations derived from (2.52) and its raising
factorial power equivalent:</p>

<div markdown="0">
\begin{align}
x^{\underline m} &amp; = x^{\underline{(m+1)+(-1)}}&#92;&#92;
&amp; = x^{\underline{-1}}(x+1)^{\underline{m+1}}&#92;&#92;
&amp; = \frac{(x+1)^{\underline{m+1}}}{x+1}&#92;&#92;
&amp; = x^{\underline{m+1}}(x-m-1)^{\underline{-1}}&#92;&#92;
&amp; = \frac{x^{\underline{m+1}}}{x-m}&#92;&#92;
x^{\overline m} &amp; = x^{\overline{(m+1)+(-1)}}&#92;&#92;
&amp; = x^{\overline{-1}}(x-1)^{\overline{m+1}}&#92;&#92;
&amp; = \frac{(x-1)^{\overline{m+1}}}{x-1}&#92;&#92;
&amp; = x^{\overline{m+1}}(x+m+1)^{\overline{-1}}&#92;&#92;
&amp; = \frac{x^{\overline{m+1}}}{x+m}&#92;&#92;
\end{align}
</div>


<p>Assuming the relations hold for all $k, m\lt k\le 0$:</p>

<div markdown="0">
\begin{align}
(-1)^m(-x)^{\underline m} &amp; = -\frac{(-1)^{m+1}(-x)^{\underline{m+1}}}{-x-m}&#92;&#92;
&amp; = \frac{x^{\overline{m+1}}}{x+m}&#92;&#92;
(x+m-1)^{\underline m} &amp; = \frac{(x+m)^{\underline{m+1}}}{x+m-1-m}&#92;&#92;
&amp; = \frac{(x-1)^{\overline{m+1}}}{x-1}&#92;&#92;
\end{align}
</div>


<p>So the main difficulties is to derive two equalities from (2.52) (four
if we count the negative cases as well), and the identification of the
recurrence equation in the induction step (especially for
$(x+m-1)^{\underline{m\pm 1}}$).</p>

<h3>Absolute Convergence of Complex Sums</h3>

<p>I suppose I could say it follows directly from the equivalence of the
metric functions (if my memory of metric space terminology is correct).</p>

<p>More basically, the equivalence of the propositions follows from the
relationships based on the hypotenuse formula:
$\sqrt{(Rz)^2+(Iz)^2}\le |Rz| + |Iz|$, so the absolute convergence of
the real and imaginary parts implies the absolute convergence of the
absolute value. Conversely, $|Rz|,|Iz|\le\sqrt{(Rz)^2+(Iz)^2}$, so the
absolute convergence of the absolute value also implies the absolute
convergence of both the real and imaginary parts.</p>

<h3>Wrapping up</h3>

<p>This time, I found a solution to all the exercises, which is a
progress of some sort. I still have trouble with the repertoire method,
or perhaps not with the method itself but in identifying suitable
generalisations and candidate solutions. This is something that can
only be developed with practice, so I just have to be patient and
keep trying (I hope I&#8217;ll get there eventually).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 2 Warmups]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/28/concrete-mathematics-chapter-2-warmups/"/>
    <updated>2012-02-28T19:18:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/28/concrete-mathematics-chapter-2-warmups</id>
    <content type="html"><![CDATA[<p>This first batch of exercises is meant to develop familiarity with
the various concepts and notations introduced in this chapter. There
is no complex manipulation, but the trick is to be aware of the often
unmentioned assumptions about the precise meaning of the expressions.</p>

<!--more-->


<h2>Warmups</h2>

<h3>$\sum_{k=4}^0 q_k$</h3>

<p>The meaning of such an expression is not clear, so there is no real
way to fail this exercise.</p>

<p>A first interpretation, maybe the common one, is that the sum is zero
because the range is empty. In other words, the sum is
$\sum_{4\le k\le 0} q_k$.</p>

<p>A second interpretation, perhaps for those used to programming
languages with very flexible loops could argue that the sum is
$q_4 + q_3 + q_2 + q_1 + q_0$.</p>

<p>I toyed briefly with a negative sum, similar to integrals with
reversed bounds, but I did not come up with the nice book solution
of $\sum_{k=m}^n = \sum_{k\le n} - \sum_{k\lt m}$, which is consistent
with and extends the first interpretation.</p>

<h3>Simplify $x([x\gt 0] - [x\lt 0])$</h3>

<p>It is easy to see that the expression has the same value as $|x|$:</p>

<div markdown="0">
\begin{align}
x([x\gt 0] - [x\lt 0]) &amp; = x (1-0)&amp;&amp;\text{when \(x\gt 0\)}&#92;&#92;
&amp; = x&#92;&#92;
x([x\gt 0] - [x\lt 0]) &amp; = x (0-1)&amp;&amp;\text{when \(x\lt 0\)}&#92;&#92;
&amp; = -x&#92;&#92;
x([x\gt 0] - [x\lt 0]) &amp; = 0&amp;&amp;\text{when \(x = 0\)}&#92;&#92;
\end{align}
</div>


<h3>Writing out sums</h3>

<p>The first one is easy:</p>

<div markdown="0">
\begin{align}
\sum_{0\le k\le 5}a_k = a_0+a_1+a_2+a_3+a_4+a_5&#92;&#92;
\end{align}
</div>


<p>The second one is tricky, is more than one way. One problem is that
$k$ is not explicitly defined, and I had assumed it was a natural,
when the authors thought of it as a integer; now the latter is in line
with the book conventions, so I was wrong and had missing terms. The
right answer is:</p>

<div markdown="0">
\begin{align}
\sum_{0\le k^2 \le 5}a_k = a_4 + a_1 + a_0 + a_1 + a_4&#92;&#92;
\end{align}
</div>


<h3>Triple Sum</h3>

<p>Here it is important to restrict the bounds as much as possible (but
no more); otherwise there is a risk of introducing spurious terms.</p>

<div markdown="0">
\begin{align}
\sum_{1\le i \lt j \lt k \le n}a_{ijk} &amp; = \sum_{i=1}^2 \sum_{j=i+1}^3 \sum_{k=j+1}^4 a_{ijk}&#92;&#92;
&amp; = \left((a_{123} + a_{124}) + a_{134} \right) + a_{234}&#92;&#92;
&amp; = \sum_{k=3}^4 \sum_{j=2}^{k-1} \sum_{i=1}^{j-1} a_{ijk}&#92;&#92;
&amp; = a_{123}+\left(a_{124} + (a_{134} + a_{234})\right)&#92;&#92;
\end{align}
</div>


<p>The terms appear in the same order, but are grouped in sums differently.</p>

<h3>Incorrect derivation</h3>

<p>The problem is the step</p>

<div markdown="0">
\begin{align}
\sum_{j=1}^n \sum_{k=1}^n = \frac{a_j}{a_k}\sum_{k=1}^n \sum_{k=1}^n \frac{a_k}{a_k}&#92;&#92;
\end{align}
</div>


<p>$k$ is already bound in the inner sum, so it is invalid to replace $j$
by $k$ in the outer.</p>

<h3>$\sum_k [1\le j\le k\le n]$</h3>

<p>This can be worked explicitly:</p>

<div markdown="0">
\begin{align}
\sum_k [1 \le j \le k \le n] &amp = \sum_k [1 \le j \le n] [j \le k \le n]&#92;&#92;
&amp; = \sum_{j\le k \le n} [1 \le j \le n]&#92;&#92;
&amp; = [1 \le j \le n] \sum_{j\le k \le n} 1&#92;&#92;
&amp; = [1 \le j \le n] (n-j+1)&#92;&#92;
\end{align}
</div>


<h3>$\bigtriangledown f(x)$</h3>

<p>The result is not surprising:</p>

<div markdown="0">
\begin{align}
\bigtriangledown x^{\overline{m}} &amp; = x^{\overline{m}} - (x-1)^{\overline{m}}&#92;&#92;
&amp; = x(x+1)\cdots(x+m-1) - (x-1)x\cdots(x+m-2)&#92;&#92;
&amp; = x(x+1)\cdots(x+m-2)(x+m-1-(x-1))&#92;&#92;
&amp; = m x^{\overline{m-1}}&#92;&#92;
\end{align}
</div>


<p>So $\bigtriangledown f(x)$ is the difference operator to use with
rising factorials.</p>

<h3>$0^{\overline{m}}$</h3>

<p>Clearly, when $m\lt 0$, $0^{\overline{m}} = 0$; when $m = 0$,
$0^{\overline{m}} = 1$ (to make the expression
$x^{\underline{1+0}}=x^{\underline 1}(x-1)^{\underline 0}$ work when $x=1$); I
had forgotten about $m&lt;0$, which was perhaps the easiest case, as $\frac{1}{m!}$
(it follows directly from the definition of falling factorials with negative
powers).</p>

<h3>Law of exponents for rising factorials</h3>

<p>It is easy to see that $x^{\overline{m+n}} = x^{\overline m}(x+m)^{\overline n}$:</p>

<div markdown="0">
\begin{align}
x^{\overline{m+n}} &amp; = x\cdots(x+m-1)(x+m)\cdots(x+m+n-1)&#92;&#92;
&amp; = \left( x\cdots(x+m-1) \right) \left( (x+m)\cdots(x+m+n-1) \right)&#92;&#92;
&amp; = x^{\overline m}(x+m)^{\overline n}&#92;&#92;
\end{align}
</div>


<p>From there, the value of rising factorials for negative powers follows quickly:</p>

<div markdown="0">
\begin{align}
1 = x^{\overline{-n+n}} &amp; = x^{\overline{-n}} (x-n)^\overline{n}&#92;&#92;
x^{\overline{-1}} &amp; = \frac{1}{(x-n)^\overline{n}}&#92;&#92;
&amp; = \frac{1}{(x-n)\cdots(x-1)}&#92;&#92;
&amp; = \frac{1}{(x-1)^{\underline{n}}}&#92;&#92;
\end{align}
</div>


<h3>Symmetric difference of a product</h3>

<p>To start, I quickly looked up the proof of the original derivative
product rule on
<a href="http://en.wikipedia.org/wiki/Product_rule#Proof_of_the_product_rule">Wikipedia</a>;
the geometric nature of the proof was illuminating (I believe I was
taught the so called
<a href="http://en.wikipedia.org/wiki/Product_rule#A_Brief_Proof">Brief Proof</a>
both in high-school and at university).</p>

<p>This geometric proof can be used for both the infinite and the finite
calculus, and its symmetric nature (there are two ways to compute the
area of the big rectangle:
$f(x)g(x)+(f(w)-f(x))g(w) + f(x)(g(w)-g(x))$ and
$f(x)g(x)+f(w)(g(w)-g(x)) + (f(w)-f(x))g(x)$) can be used in the
finite case. The symmetry (and equality) is restored
because in the infinite calculus, $\lim_{w\rightarrow x}f(w) = f(x)$
and $\lim_{w\rightarrow x}g(w) = g(x)$, a restoration that is not
possible in the finite calculus.</p>

<p>However, the equivalent finite calculus formulas,
$\bigtriangleup(uv) = u\bigtriangleup v + Ev\bigtriangleup u$ and
$\bigtriangleup(uv) = Eu\bigtriangleup v + v\bigtriangleup u$, have
together the symmetry they lack on their own.</p>

<h3>Wrapping up</h3>

<p>OK, that was not entirely bad (two small mistakes, both about negative
numbers blindness). Next step, the basic exercises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 2 Notes]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/27/concrete-mathematics-chapter-2-notes/"/>
    <updated>2012-02-27T10:54:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/27/concrete-mathematics-chapter-2-notes</id>
    <content type="html"><![CDATA[<p>After a long but busy silence, I have now a few notes on the second
chapter, Sums. As with
<a href="http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics-chapter-1-notes/">Chapter 1</a>,
these are nothing revolutionary; just some clarifications of the
points that were not obvious to me, as well as other, random
observations.</p>

<!--more-->


<p>Overall, this chapter felt less overwhelming than the first, despite
being much longer and introducing very powerful techniques. I have yet
to do the exercises, though, so I may still revise this judgement.</p>

<h3>Notation</h3>

<p>The authors mentions that the Sigma-notation is &#8220;&#8230; impressive to
family and friends&#8221;. I can confirm that assessment.</p>

<p>The remark on keeping bounds simple actually goes beyond resisting
&#8220;premature optimisation&#8221;, that is, removing terms just because they
are equal to zero. Sometimes, it is worth adding a zero term if it
simplifies the bounds. Such a trick is used in solving
$\sum_{1\le j\lt k\le n} \frac{1}{k-j}$, and I&#8217;ll get back to this
point when I go over this solution.</p>

<p>The Iverson notation (or Iversonian) is a very useful tool, as is the
general Sigma-notation. About the latter, it already simplifies
variable changes a lot, but I found it useful (and less error prone)
to always write the variable change on the right margin (for instance
as $k \leftarrow k+1$) and to keep that change as the only one in a
given line of the rewrite; otherwise, no matter how trivial the
change, any error I make at that time will be hard to locate (I know;
I tried).</p>

<h3>Sums and Recurrence</h3>

<p>First we see how easy it is to use the repertoire method to build
solutions to common (or slightly generalised) sums. The only problem
with the repertoire method is it requires a well furnished repertoire
of solutions to basic recurrences; I&#8217;m sure I would never have come up
with the radix-change solution to the generalised Josephus
problem. And given that there is an infinite number of functions one
could try, a more directed method is sometimes necessary.</p>

<p>This section also shows how to turn some recurrence equations (such as
the Tower of Hanoi one) into a sum; this method involve a choice
($s_1$ can be any non-zero value), which could either simplify or
complicate the solution. I haven&#8217;t done the exercises yet, so I don&#8217;t
know to what extent the choice is obvious or tricky.</p>

<p>Finally it shows how to turn a recurrence expressed as a sum of all
the previous values into a simpler recurrence by computing the
difference between two successive values. This is one instance of a
more general simplification using a linear combination of a few
successive values.</p>

<h3>Manipulation of Sums</h3>

<p>Unsurprisingly, sums have the same basic properties as common
additions: distributive, associative and commutative laws. Only the
latter is really tricky, as it involves a change to the index
variable. As mentioned above, I found useful to make such changes
really clear and isolated in any reasoning.</p>

<p>With these laws confirmed, it is possible to build the first method
for solving sums: the perturbation method. It is very simple, and
while it does not always work, when it does it is very quick.</p>

<h3>Multiple Sums</h3>

<p>This is perhaps the first section where I had to slow down; basically
multiple sums are not different from simple sums, and manipulations
are defined by the distributive law, but index variable changes
(especially the rocky road variety) require special attention. This,
combined with &#8220;obvious&#8221; simplifications (obvious to the authors, and
sometimes in retrospect to the reader as well), gave me some
difficulties.</p>

<p>For instance, the solution to</p>

<div markdown="0">
\begin{align}
\sum_{1\le j\lt k\le n} \frac{1}{k-j}
\end{align}
</div>


<p>The index variable change $k \leftarrow k+j$ is explained as a
specific instance of the simplification of $k+f(j)$; more perplexing
are the ranges for $j$ and $k$ when the sum is replaced by a sum of sum:</p>

<div markdown="0">
\begin{align}
\sum_{1\le k\le n} \sum_{1\le j \le n-k} \frac{1}{k}
\end{align}
</div>


<p>The range for $j$ is built from $1\le j$ and $k+j\le n$, so there is
nothing really strange here.</p>

<p>The range for $k$, however, looks like a typo: certainly the authors
meant $1\le k\lt n$. A margin graffiti confirms the range, but it does
not really explain it.</p>

<p>The fact is, it is safe to let $k\le n$ here, because the sum over $j$
when $k=n$ is zero: not only the expression
$\sum_{1\le j \le k-n = 0} \frac{1}{k}$ is zero because there is no
$j$ that can satisfies the range predicate, but the closed form
of this sum, $\frac{k-n}{k}$, is also zero when $k=n$.</p>

<p>With the closed form checked, it is safe to add extra terms to
simplify the range of $k$.</p>

<p>What happens if you don&#8217;t see this possible simplification? As
expected, the answer remains the same:</p>

<div markdown="0">
\begin{align}
\sum_{1\le k\lt n} \sum_{1\le j \le n-k} \frac{1}{k} &amp; = \sum_{1\le k\lt n} \frac{n-k}{k}&#92;&#92;
&amp; = \sum_{1\le k\lt n} \frac{n}{k} - \sum_{1\le k\lt n} \frac{k}{k}&#92;&#92;
&amp; = \sum_{1\le k\lt n} \frac{n}{k} - (n-1)&#92;&#92;
&amp; = \sum_{1\le k\lt n} \frac{n}{k} + \frac{n}{n} - n&#92;&#92;
&amp; = \sum_{1\le k\le n} \frac{n}{k} - n&#92;&#92;
&amp; = nH_n - n&#92;&#92;
\end{align}
</div>


<p>So to expend on the original advice of keeping the bounds as simple as
possible: sometimes it is possible to extend the bounds (in order to
simplify them), as long as the extra terms in closed form evaluate to
zero. If the extra terms are still defined as sums, just checking that
the range is empty might not be enough.</p>

<h3>General Methods</h3>

<p>A cool and fun section on the various ways to solve a given sum.</p>

<p>Method 0 is to look it up. This book, written before the rise of
Internet (I remember Internet in the early 1990&#8217;s; most of it was still
indexed manually on the CERN index pages&#8230;), suggests a few books as
resources.</p>

<p>Fortunately, some of them have migrated to the
<a href="https://oeis.org/">Web</a>, which is a more suitable tool than books for
such knowledge; the combination of searches and instant updates is
hard to beat (a book remains best for a content that is mostly linear
and somewhat independent of time; a novel, or textbook, for
instance. References are better on Internet, free if possible, for
a subscription otherwise).</p>

<p>Method 1 is guessing then proving; proving in fact should be a
complement for all the other methods (except perhaps Method 0). Having
two independents proofs is always good.</p>

<p>Method 2 is the perturbation method. In this section example, we see
how an apparent failure can still be exploited by being imaginative.</p>

<p>Method 3 is the repertoire method. In this chapter it is usually much
simpler than in the first.</p>

<p>Method 4 uses calculus to get a first approximation, then uses other
methods to solve the equations for the error function.</p>

<p>Method 5 is a clever rewriting of the problem into a sum of sums;
like the repertoire method but unlike the others, it requires some
intuition to find a solution (perhaps more than the repertoire
method); I have bad memories of trying such a method to solve problems
at university, always somehow ending up right where I started. I guess
I will try other methods if I can.</p>

<p>Method 6 is the topic of the next section; method 7 is for another
chapter.</p>

<h3>Finite and Infinite Calculus</h3>

<p>This section was surprising and exciting, but not really that
complex. It really is a matter of adapting regular calculus reflexes to the
finite version. I have to see how it works in practice.</p>

<p>One thing that is causing me some trouble is the falling-power version
of the law of exponents:</p>

<div markdown="0">
\begin{align}
x^{\underline{m+n}} &amp; = x^{\underline m}(x-m)^{\underline n}&#92;&#92;
\end{align}
</div>


<p>While the rule is easy to prove and to remember, it is less easy than
the general one to recognise in practice; I failed to see it when it
came up in the solution to</p>

<div markdown="0">
\begin{align}
\Sigma xH_x\delta x&#92;&#92;
\end{align}
</div>


<p>Worse, even the explanation in the book, I had to write it down, play
with it, before seeing it.</p>

<p>So I&#8217;m thinking about a notation that would bring out the rule more
clearly, an extension of the <em>shift operator</em> $E$:</p>

<div markdown="0">
\begin{align}
E_k f(x) &amp; = f(x-k)&#92;&#92;
\end{align}
</div>


<p>This would turn the exponent law into</p>

<div markdown="0">
\begin{align}
x^{\underline{m+n}} &amp; = x^{\underline m} E_m x^{\underline n}&#92;&#92;
\end{align}
</div>


<p>Whether this is useful, or whether I&#8217;ll get used to the original
notation anyway, we&#8217;ll see in the exercises&#8230;</p>

<h3>Infinite Sums</h3>

<p>The last section is about infinite sums. The authors quite sensibly
restrict the scope to absolutely convergent sums, which have the
advantage that the three basic laws and the manipulations they allow
are still valid.</p>

<p>Once again, this was not overly difficult; the only point I had
trouble understanding was the existence of the subsets $F_j$ such that
$\sum_{k\in F_j} a_{j,k} \gt (A/A&#8217;)A_j$ when
$\sum_{j\in G} A_j = A&#8217; \gt A$. But this last equation means that
$A/A&#8217; \lt 1$, so $(A/A&#8217;)A_j \lt A_j$. The first equation is therefore
just a consequence of the fact that $A_j$ is a least upper bound.</p>

<p>Next post, the warmups.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Psychic Modeling (fast version)]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/13/psychic-modeling-fast-version/"/>
    <updated>2012-02-13T20:23:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/13/psychic-modeling-fast-version</id>
    <content type="html"><![CDATA[<p>In <a href="http://blog.wakatta.jp/blog/2012/02/10/psychic-modeling/">Psychic Modeling</a>, I described
a reasonably understandable implementation of a ticket generator for
the
<a href="http://www8.cs.umu.se/kurser/TDBAfl/VT06/algorithms/BOOK/BOOK/NODE19.HTM">Psychic Modeling Problem</a>. While
this version is not overly slow, it is not amazingly fast either.</p>

<p>As I&#8217;m refreshing my C skills, I thought it would be interesting to
try and implement a version as fast as possible.</p>

<!-- more -->


<h3>Design</h3>

<p>I represent a subset as bit patterns in a 32-bits integer. This means
I am limited to 32 different values (in other words, $n$ must be no
larger than 32). The upside is that I have extremely fast intersection
(<code>&amp;</code>) and union (<code>|</code>) operations, among others.</p>

<h3>Memory Management</h3>

<p>I use a work memory allocated at the beginning of the search;
additional memory is allocated on the stack (using C99 features), and
the selected tickets are just printed to avoid having to remember
them.</p>

<p>The work memory is large enough to store $1 + \beta$ times a block
large that can hold the complete set of $j$-subsets. The first block
keeps the remaining $j$-subsets, and there&#8217;s an extra block for each
random ticket: each time (for a total of $\beta$) a random ticket is
generated, the $j$-subsets that are not covered yet is computed for
this ticket; after I have generated $\beta$ tickets, I copy the work
block of the best one over the first one.</p>

<p>I could have use just 3 blocks, a reference, the best so far, and one
for the current random ticket, and copy from the current to the best
each time the current ticket is better. There would be more copy
operations, but perhaps less movement between the cache and the
memory. The current design requires less than 2M, and only one copy
operation per random ticket.</p>

<h3>Non portable features</h3>

<p>I am using a few GCC
<a href="http://gcc.gnu.org/onlinedocs/gcc-4.6.2/gcc/Other-Builtins.html">built-in</a>
bit-level operations (number of bits, index of least significant 1
bit, and count of trailing zeroes);
<a href="http://www-graphics.stanford.edu/~seander/bithacks.html">Bit Twiddling Hacks</a>
and <a href="http://www.hackersdelight.org/">Hacker&#8217;s Delight</a> have portable
alternatives.</p>

<p>I also use <code>/dev/random</code> as a source of random numbers; replacing
<code>dev_random</code> by <code>random</code> would restore portability (but the output
would always be the same, and the random state is reset when the
program starts).</p>

<h3>Performance</h3>

<p>So, is it fast?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time ./psychic 18 10 7 6 &gt; output.txt 
</span><span class='line'>
</span><span class='line'>real    0m0.289s
</span><span class='line'>user    0m0.238s
</span><span class='line'>sys     0m0.050s</span></code></pre></td></tr></table></div></figure>


<p>The program found 71 tickets covering all 7-subsets with at least 6
numbers in less than a second. Even when the conditions are not that
good, it remains fast:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time ./psychic 18 7 7 6 &gt; output.txt 
</span><span class='line'>
</span><span class='line'>real    0m5.445s
</span><span class='line'>user    0m5.007s
</span><span class='line'>sys     0m0.430s</span></code></pre></td></tr></table></div></figure>


<p>Here it generated 1077 tickets using the smaller ticket size from
<a href="http://www.cs.sunysb.edu/~skiena/papers/lotto.doc">Younas and Skiena paper</a>;
the paper had a 1080 tickets solution, so my version is effective.</p>

<p>Of course, it would be useless and unfair to compare the speed of this
version against the numbers from the paper; more relevant is the
difference with the Haskell version: while the latter was not meant to
be fast, it is hundreds of times slower. I suppose it would be
interesting to try and make it faster, but I suspect it would be just
as ugly or uglier than the C version. And I like to keep using Haskell as a
design and exploratory tool.</p>

<h3>Overview of the code</h3>

<h4><code>solve</code></h4>

<p>The main function, <code>solve</code>, is more complex than in the Haskell
version. It allocates the work memory, and fills it with <code>init</code>. A
first ticket is used in <code>init</code> to filter out $j$-subsets.</p>

<p>Then the loop for the other tickets starts. It of course stops when
there are no remaining $j$-subsets.</p>

<p>The subset of remaining numbers is computed with <code>funion</code> (fold
union), and the <code>digits</code> array prepared to be used in <code>sample</code>. It
consists of the individual bits of the number representing the
remaining numbers subset. It is computed by repeatedly isolating the
rightmost 1 bit (with <code>d &amp; -d</code>), then clearing this bit (with <code>d &amp;= d -1</code>).</p>

<p>A first ticket is randomly generated and its uncovered set
computed. It is also set as the best new ticket (and indeed is the
best so far). Then for the remaining $\beta-1$ new tickets, the
uncovered set is computed as well, and if the new set is smaller than
the best&#8217;s, the new ticket becomes the best as well.</p>

<p>The best ticket is printed, the main work memory is updated with the
best uncovered set, and if there are any remaining $j$-subsets to
find, we loop.</p>

<figure class='code'><figcaption><span>solve  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">solve</span><span class="p">(</span><span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">j</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="n">combi</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="o">*</span><span class="n">work</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">BETA</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">t</span> <span class="o">=</span> <span class="n">first_perm</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">show_set</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">init</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">d</span> <span class="o">=</span> <span class="n">funion</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">bc</span> <span class="o">=</span> <span class="n">bits_count</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">digits</span><span class="p">[</span><span class="n">bc</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span> <span class="o">&amp;</span> <span class="o">-</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">&amp;=</span> <span class="n">d</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">best_ticket</span><span class="p">,</span> <span class="n">best_remaining</span><span class="p">,</span> <span class="n">best_pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">best_ticket</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">bc</span><span class="p">,</span> <span class="n">digits</span><span class="p">);</span>
</span><span class='line'>        <span class="n">best_remaining</span> <span class="o">=</span> <span class="n">check_cover</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">best_ticket</span><span class="p">,</span> <span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">BETA</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">UINT</span> <span class="n">new_ticket</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">bc</span><span class="p">,</span> <span class="n">digits</span><span class="p">);</span>
</span><span class='line'>            <span class="n">UINT</span> <span class="n">new_remaining</span> <span class="o">=</span> <span class="n">check_cover</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">new_ticket</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">new_remaining</span> <span class="o">&lt;</span> <span class="n">best_remaining</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">best_ticket</span> <span class="o">=</span> <span class="n">new_ticket</span><span class="p">;</span>
</span><span class='line'>                <span class="n">best_remaining</span> <span class="o">=</span> <span class="n">new_remaining</span><span class="p">;</span>
</span><span class='line'>                <span class="n">best_pos</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">show_set</span><span class="p">(</span><span class="n">best_ticket</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">best_remaining</span><span class="p">)</span>
</span><span class='line'>            <span class="n">memcpy</span><span class="p">(</span><span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="p">(</span><span class="n">best_pos</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">)</span> <span class="o">*</span> <span class="n">best_remaining</span><span class="p">);</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">best_remaining</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>init</code></h4>

<p><code>init</code>&#8217;s purpose it to avoid wasting a loop over the $j$-subsets by
merging the generation of $j$-subsets with the coverage of a first
permutation (defined as <code>[1..k]</code> in <code>solve</code>). The returned value is
not size of the not yet covered set of $j$-subsets.</p>

<p>If all tickets had to be generated randomly, 0 could be passed instead
of a ticket to keep all $j$-subsets.</p>

<figure class='code'><figcaption><span>init  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">UINT</span> <span class="nf">init</span><span class="p">(</span><span class="n">UINT</span> <span class="n">c</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">w</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">v</span> <span class="o">=</span> <span class="n">first_perm</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">c</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bits_count</span><span class="p">(</span><span class="n">v</span> <span class="o">&amp;</span> <span class="n">k</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>            <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">next_perm</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>check_cover</code></h4>

<p><code>check_cover</code> has a similar design as <code>init</code>, but reads the
$j$-subsets from the work memory <code>from</code> instead of generating them.</p>

<figure class='code'><figcaption><span>check_cover  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">UINT</span> <span class="nf">check_cover</span><span class="p">(</span><span class="n">UINT</span> <span class="n">r</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">t</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">from</span><span class="p">[],</span> <span class="n">UINT</span> <span class="n">to</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bits_count</span><span class="p">(</span><span class="n">from</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>            <span class="n">to</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">from</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>sample</code></h4>

<p><code>sample</code> is very similar to the Hashell version (indeed they are both
based on the same algorithm); here the <code>digits</code> array plays the role
that <code>ds</code> played in the Haskell version.</p>

<figure class='code'><figcaption><span>sample  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">UINT</span> <span class="nf">sample</span><span class="p">(</span><span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">ds</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">ds</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">p</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="n">randomR</span><span class="p">(</span><span class="n">n</span><span class="p">)];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ds</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">|</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span> <span class="o">|</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>next_perm</code></h4>

<p>The <code>next_perm</code> is from <a href="http://graphics.stanford.edu/~seander/bithacks.html#NextBitPermutation">Bit Twiddling Hacks</a>, and explained <a href="http://www.alexbowe.com/generating-binary-permutations-in-popcount-or">here</a>.</p>

<figure class='code'><figcaption><span>next_perm  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">UINT</span> <span class="nf">next_perm</span><span class="p">(</span><span class="n">UINT</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">t</span> <span class="o">=</span> <span class="n">v</span> <span class="o">|</span> <span class="p">(</span><span class="n">v</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(((</span><span class="o">~</span><span class="n">t</span> <span class="o">&amp;</span> <span class="o">-~</span><span class="n">t</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">__builtin_ctz</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Compiling and running</h4>

<p>Using <code>gcc</code>, the necessary option is <code>-std=c99</code> to activate C99
support; <code>-O3</code> gives much (really) better performance, while <code>-Wall</code>
is in general a good idea:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc-4.6.2 -Wall -O3 -std=c99 psychic.c -o psychic</span></code></pre></td></tr></table></div></figure>


<p>To run it, just pass the $n$, $k$, $j$ and $l$ parameters on the
command line. There is no checks, so avoid mistakes. The program
outputs the generated tickets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./psychic 5 3 3 2
</span><span class='line'>1, 2, 3
</span><span class='line'>1, 4, 5</span></code></pre></td></tr></table></div></figure>


<h3>Wrapping up</h3>

<p>After I completed the Haskell version, I found it not overly difficult
to implement the C one. I was lucky to have discovered Bit Twiddling
Hacks the week before; the code fragments there were very helpful in
writing efficient set oriented functions over words.</p>

<p>Surprisingly, I had just one bug to track (I was using a variable both
as parameter and temporary storage in one of the function); that was
lucky as I&#8217;m not sure I could have debugged such code.</p>

<h3>Complete Code</h3>

<figure class='code'><figcaption><span>Psychic Modeling Fast Version  (psychic.c)</span> <a href='http://blog.wakatta.jp/downloads/code/algo-design-manual/psychic.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdbool.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">UINT</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define BETA 100</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define first_perm(n) ((1 &lt;&lt; n) - 1);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Mac OS X/Linux specific */</span>
</span><span class='line'><span class="kt">FILE</span> <span class="o">*</span><span class="n">drand</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">UINT</span> <span class="nf">def_random</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">drand</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define _random() def_random()</span>
</span><span class='line'>
</span><span class='line'><span class="cp">/* GCC specific definitions */</span>
</span><span class='line'><span class="cp">#define bits_count(v) __builtin_popcount(v)</span>
</span><span class='line'><span class="cp">#define least_one(v) __builtin_ffs(v)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* http://www-graphics.stanford.edu/~seander/bithacks.html#NextBitPermutation */</span>
</span><span class='line'><span class="cm">/* return next lexicographic permutation */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">next_perm</span><span class="p">(</span><span class="n">UINT</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">t</span> <span class="o">=</span> <span class="n">v</span> <span class="o">|</span> <span class="p">(</span><span class="n">v</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(((</span><span class="o">~</span><span class="n">t</span> <span class="o">&amp;</span> <span class="o">-~</span><span class="n">t</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">__builtin_ctz</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* following</span>
</span><span class='line'><span class="cm">   http://mikeash.com/pyblog/friday-qa-2011-03-18-random-numbers.html */</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * return a random UINT 0 &lt;= r &lt; n</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">randomR</span><span class="p">(</span><span class="n">UINT</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">two31</span> <span class="o">=</span> <span class="mi">1U</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">max</span> <span class="o">=</span> <span class="p">(</span><span class="n">two31</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="n">_random</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="n">max</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">r</span> <span class="o">%</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* http://rosettacode.org/wiki/Evaluate_binomial_coefficients#C */</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * binomial coefficient</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">combi</span><span class="p">(</span><span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">d</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">k</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">*=</span> <span class="n">n</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">d</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">r</span> <span class="o">%</span> <span class="n">d</span><span class="p">))</span>
</span><span class='line'>            <span class="n">r</span> <span class="o">/=</span> <span class="n">d</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * select k digits from ds. n is length of ds</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">sample</span><span class="p">(</span><span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">ds</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">ds</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">p</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="n">randomR</span><span class="p">(</span><span class="n">n</span><span class="p">)];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ds</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">|</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span> <span class="o">|</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * displays subset expressed as bit positions</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">show_set</span><span class="p">(</span><span class="n">UINT</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">bool</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">least_one</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class='line'>        <span class="n">f</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">&amp;=</span> <span class="n">v</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * union of all subsets</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">funion</span><span class="p">(</span><span class="n">UINT</span> <span class="n">c</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">w</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">|=</span> <span class="n">w</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * init work memory with subsets that are far from</span>
</span><span class='line'><span class="cm"> * initial ticket (defined as first_perm)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">init</span><span class="p">(</span><span class="n">UINT</span> <span class="n">c</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">w</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">v</span> <span class="o">=</span> <span class="n">first_perm</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">c</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bits_count</span><span class="p">(</span><span class="n">v</span> <span class="o">&amp;</span> <span class="n">k</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>            <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">next_perm</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * copies subsets that are far from passed ticket</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">check_cover</span><span class="p">(</span><span class="n">UINT</span> <span class="n">r</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">t</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">from</span><span class="p">[],</span> <span class="n">UINT</span> <span class="n">to</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bits_count</span><span class="p">(</span><span class="n">from</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>            <span class="n">to</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">from</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">solve</span><span class="p">(</span><span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">j</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="n">combi</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="o">*</span><span class="n">work</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">BETA</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">t</span> <span class="o">=</span> <span class="n">first_perm</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">show_set</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">init</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">d</span> <span class="o">=</span> <span class="n">funion</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">bc</span> <span class="o">=</span> <span class="n">bits_count</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">digits</span><span class="p">[</span><span class="n">bc</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span> <span class="o">&amp;</span> <span class="o">-</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">&amp;=</span> <span class="n">d</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">best_ticket</span><span class="p">,</span> <span class="n">best_remaining</span><span class="p">,</span> <span class="n">best_pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">best_ticket</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">bc</span><span class="p">,</span> <span class="n">digits</span><span class="p">);</span>
</span><span class='line'>        <span class="n">best_remaining</span> <span class="o">=</span> <span class="n">check_cover</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">best_ticket</span><span class="p">,</span> <span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">BETA</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">UINT</span> <span class="n">new_ticket</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">bc</span><span class="p">,</span> <span class="n">digits</span><span class="p">);</span>
</span><span class='line'>            <span class="n">UINT</span> <span class="n">new_remaining</span> <span class="o">=</span> <span class="n">check_cover</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">new_ticket</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">new_remaining</span> <span class="o">&lt;</span> <span class="n">best_remaining</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">best_ticket</span> <span class="o">=</span> <span class="n">new_ticket</span><span class="p">;</span>
</span><span class='line'>                <span class="n">best_remaining</span> <span class="o">=</span> <span class="n">new_remaining</span><span class="p">;</span>
</span><span class='line'>                <span class="n">best_pos</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">show_set</span><span class="p">(</span><span class="n">best_ticket</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">best_remaining</span><span class="p">)</span>
</span><span class='line'>            <span class="n">memcpy</span><span class="p">(</span><span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="p">(</span><span class="n">best_pos</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">)</span> <span class="o">*</span> <span class="n">best_remaining</span><span class="p">);</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">best_remaining</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sscanf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;%u&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sscanf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="s">&quot;%u&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sscanf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="s">&quot;%u&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sscanf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="s">&quot;%u&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">l</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drand</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;/dev/random&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">l</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fclose</span><span class="p">(</span><span class="n">drand</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Psychic Modeling]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/10/psychic-modeling/"/>
    <updated>2012-02-10T12:26:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/10/psychic-modeling</id>
    <content type="html"><![CDATA[<p>In the <a href="http://www.algorist.com/">Algorithm Design Manual</a>, Stephen
Skiena entertains, edifies and educates his readers with so called
&#8220;War Stories&#8221;, that is, interesting implementation challenges from his
own experience.</p>

<p>The first War Story is
<a href="http://www8.cs.umu.se/kurser/TDBAfl/VT06/algorithms/BOOK/BOOK/NODE19.HTM">Psychic Modeling</a>,
an attempt to exploit &#8220;precognition&#8221; to improve the chances of winning
the lottery.</p>

<!-- more -->


<p>This war story is also the subject of one of the first implementation
projects. In chapter 1.  A few years ago, when I bought the book, I
had easily solved the previous exercises, but then I reached this
implementation project, and I got stuck. I could not even get a
high level sketch of what a solution would look like.</p>

<p>Certainly, if I was unable to solve an exercise of the first chapter
of this book, it was hopelessly beyond my reach&#8230;</p>

<p>Still, I had the ambition of one day resuming my reading, and I would
from time to time give this problem another attempt.</p>

<p>Recently, it feels like all the pieces finally fell into places, and
after a few hours of coding I had an (naive) implementation. Yet I
still have doubts, as the only reference I have to compare my solution
with, Skiena&#8217;s own paper
(<a href="http://www.cs.sunysb.edu/~skiena/papers/lotto.doc">Randomized Algorithms for Identifying Minimal Lottery Ticket Sets</a>),
apparently is worse (in terms of necessary tickets) than my solution&#8230;</p>

<p>Note on this paper: unfortunately it is in Word format, and I found
that some characters are not properly displayed on non MS Word text
processing tools (such as Open Office). So you might have to open it
with MS Word or MS Word Viewer.</p>

<h3>The problem</h3>

<p>I will use the notation from the book rather than the paper. The
problem is defined as this:</p>

<ul>
<li>a lottery ticket has $k$ numbers</li>
<li>a win requires $j$ numbers from the winning ticket</li>
<li>the psychic visualises $n$ numbers</li>
<li>of which $j$ are &#8220;guaranteed&#8221; to be on the winning ticket.</li>
</ul>


<h3>Defining &#8220;sufficient coverage&#8221;</h3>

<p>A first difference between the paper&#8217;s approach and mine is that I&#8217;m
using the notion of coverage size rather than distance: I measure how
similar two subsets are by defining their cover as the size of their
intersection; in their paper the authors use a notion of distance defined as
the size of the difference of the two subsets (perhaps to help with
the design of heuristics in the backtracking version of their algorithm).</p>

<p>Now, clearly the two approaches are equivalent; it is less clear that
the formulas derived from either are indeed the same.</p>

<p>For a given $j$-subset, how many $j$-subsets have a coverage of at
least $l$ with the first one? The covered $j$-subsets must have at
least $l$ numbers (between $l$ and $j$, to be precise) in common with
the first one, and the rest taken from the $n-j$ other numbers. This gives</p>

<div markdown="0">
\begin{align}
\sum_{l \le i \le j} \binom{j}{i} \binom{n-j}{j-i}
\end{align}
</div>


<p>For a given $j$-subset, how many $j$-subsets are within $j-l$ distance
of the first one? We can choose at most $j-l$ numbers out of the $n-j$
rest; and complete with numbers from the first subset. This gives</p>

<div markdown="0">
\begin{align}
\sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{j-i} = \sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{i}
\end{align}
</div>


<p>It took me a while to confirm it, but the formulas are indeed the
same:</p>

<div markdown="0">
\begin{align}
\sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{i} &amp; = \sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{j-i}&#92;&#92;
&amp; = \sum_{l-j \le i \le 0} \binom{n-j}{-i} \binom{j}{j+i}&amp;&amp;\text{changing the sign of \(i\)}&#92;&#92;
&amp; = \sum_{l \le j+i \le j} \binom{n-j}{-i} \binom{j}{j+i}&#92;&#92;
&amp; = \sum_{l \le i \le j} \binom{n-j}{j-i} \binom{j}{i}&amp;&amp;\text{replacing \(j+i\) by \(i\)}&#92;&#92;
\end{align}
</div>


<h3>Size of a ticket</h3>

<p>Note that I do not use the $k$ size of a ticket. In fact, in my
original design, I used it but ignored $j$; reading the paper I
realised that $j$ was indeed critical: one of the $j$-subsets will be
on the winning ticket, so they are the ones we need to cover. However,
I could not understand why the paper did not use the potentially
larger size of a ticket to cover more $j$-subsets.</p>

<p>Restated with a complete ticket, the coverage formula becomes</p>

<div markdown="0">
\begin{align}
\sum_{l \le i \le j} \binom{k}{i} \binom{n-k}{j-i}
\end{align}
</div>


<p>This apparent small change actually reduces the lower bound of the
necessary tickets significantly. For $n=15$, $k=6$, $j=5$, $l=4$, for
instance, will the paper offers as a lower bound $58$, the formula
above gives $22$.</p>

<p>So the question is: is it valid to use the possibly larger value $k$
when generating tickets? I could not think of any reason not too, and
if I&#8217;m right, this gives each ticket a much larger cover, and
therefore a lower number of necessary tickets.</p>

<h2>Implementation</h2>

<p>For a first effort, I chose to code in Haskell, and favoured simplicity
over speed. The code is indeed both simple, and wasteful, but Moore&#8217;s
Law says that computers have become about 1000 times faster since the
time the paper was written, so I have some margin.</p>

<p>To keep things simple, sets and subsets are just lists.</p>

<h3>Support functions</h3>

<p>Such functions ought to belong to a dedicated library (and perhaps
they do); I include them to keep the implementation mostly
self-contained.</p>

<figure class='code'><figcaption><span>Support functions  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fact</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">product</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'><span class="nf">combi</span> <span class="n">n</span> <span class="n">c</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fact</span> <span class="n">n</span><span class="p">)</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="p">(</span><span class="n">fact</span> <span class="n">c</span> <span class="o">*</span> <span class="n">fact</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nf">remainingNumbers</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="n">union</span> <span class="kt">[]</span> <span class="n">js</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>fact</code> is just the factorial; <code>combi</code> computes the binomial
coefficient, and <code>remainingNumbers</code> is just the union of all the
passed $j$-subsets.</p>

<figure class='code'><figcaption><span>Generating Combinations  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">genCombi</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="n">k</span> <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">=</span> <span class="p">[</span><span class="n">l</span><span class="kt">:</span><span class="n">cs</span> <span class="o">|</span> <span class="n">cs</span> <span class="ow">&lt;-</span> <span class="n">genCombi</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">ls</span><span class="p">]</span> <span class="o">++</span>
</span><span class='line'>                    <span class="n">genCombi</span> <span class="n">k</span> <span class="n">ls</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>genCombi k s</code> generates the $k$-subsets of $s$.</p>

<h3>Lower Bound Estimate</h3>

<p>These are simple implementations of the formula above.</p>

<figure class='code'><figcaption><span>Lower Bound Estimates  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="n">sum</span> <span class="p">[</span> <span class="p">(</span><span class="n">combi</span> <span class="n">k</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span>
</span><span class='line'>                            <span class="p">(</span><span class="n">combi</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">)</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="p">))</span> <span class="o">|</span> <span class="n">i</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="n">l</span><span class="o">..</span><span class="n">j</span><span class="p">]]</span>
</span><span class='line'><span class="nf">lowerBound</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">combi</span> <span class="n">n</span> <span class="n">j</span><span class="p">)</span> <span class="o">/</span>
</span><span class='line'>                     <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ticketCover</code> just implements the coverage estimate I defined above
(the one that uses $k$); <code>lowerBound</code> computes the lower bound for a
single win.</p>

<h3>Coverage</h3>

<p>As stated above, I define the cover between two subsets as the size of
their intersection, and define sufficient coverage as the cover being
larger than $l$.</p>

<figure class='code'><figcaption><span>Defining Coverage  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">cover</span> <span class="n">l1</span> <span class="n">l2</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">intersect</span> <span class="n">l1</span> <span class="n">l2</span>
</span><span class='line'>
</span><span class='line'><span class="nf">coveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&lt;=</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'><span class="nf">notCoveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'>
</span><span class='line'><span class="nf">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">notCoveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span><span class='line'><span class="nf">notCoveredBatch</span> <span class="n">l</span> <span class="n">ts</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="n">notCovered</span> <span class="n">l</span><span class="p">)</span> <span class="n">js</span> <span class="n">ts</span>
</span><span class='line'>
</span><span class='line'><span class="nf">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>cover</code> implements the cover definition; <code>coveredP</code> and <code>notCoveredP</code>
are predicates that check for (or against) sufficient coverage.</p>

<p><code>notCovered</code> and <code>notCoveredBatch</code> computes the subsets that are not covered by a single ticket or a set
of tickets, respectively; they are used to compute what is left to
cover after selecting a ticket, and to check solutions.</p>

<p>Finally <code>coverageScore</code> computes the size of of the covered subsets by
a ticket. This function is used to compare potential tickets and
select the one with the best (i.e. largest) coverage.</p>

<figure class='code'><figcaption><span>Checking the estimates  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">checkFormula</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">candidates</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>      <span class="n">ticket</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>      <span class="n">covered</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">ticket</span><span class="p">)</span> <span class="n">candidates</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">length</span> <span class="n">covered</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>checkFormula</code> computes the size of the coverage of a single ticket;
it can be used to confirm the value of <code>ticketCover</code> above (and as far
as I can tell from my checks, it does).</p>

<h3>Solution Loop</h3>

<p>The solution loop takes the parameters and a ticket candidate
generating function; it then gets one ticket at a time, computes the
$j$-subsets not covered yet, and repeat until the remaining
$j$-subsets set becomes empty.</p>

<figure class='code'><figcaption><span>Solution Loop  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">solve</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">gc</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">jtuples</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">loop</span> <span class="n">jtuples</span>
</span><span class='line'> <span class="kr">where</span> <span class="n">loop</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'>       <span class="n">loop</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>         <span class="n">t</span> <span class="ow">&lt;-</span> <span class="n">gc</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span>
</span><span class='line'>         <span class="n">ts</span> <span class="ow">&lt;-</span> <span class="n">loop</span> <span class="o">$</span> <span class="n">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span>
</span><span class='line'>         <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>solve</code> function expects the candidate generation function to be a
monad; this is to make it possible to use random number generators.</p>

<h3>Naive Ticket Selection</h3>

<p>I do not really know how to navigate subsets, so I won&#8217;t try to
implement a backtracking solution as describe in the paper. Instead, I
have what is really the simplest greedy algorithm: when a new ticket
is needed, get the one that has the best coverage among all the
possible tickets:</p>

<figure class='code'><figcaption><span>Naive Ticket Selection  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">getCandidate</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>      <span class="n">tickets</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">k</span> <span class="n">numbers</span>
</span><span class='line'>      <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span></code></pre></td></tr></table></div></figure>


<p>So for each $j$-subsets set, generate all the $k$-subsets, and compare
their coverage.</p>

<p>Needless to say, this function does not return anything anytime soon
for even slightly large values of $n$.</p>

<h3>Randomised Ticket Selection</h3>

<p>To improve the performance (well, to get a result in my lifetime), I
am using what I understand to be the same approach as in the paper:
generates $\beta$ tickets, compare their coverage of the remaining
subsets, and keep the best one.</p>

<p>The different with the paper, as mentioned before, is that my tickets
are $k$-subsets rather than $j$-subsets themselves.</p>

<p>I first need a function to generate a random combination. I&#8217;m using a
method derived from Knuth (no reference as I don&#8217;t have Volume 4 just yet).</p>

<figure class='code'><figcaption><span>Sample Generation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">sample</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="n">k</span> <span class="n">ds</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">s</span> <span class="ow">&lt;-</span> <span class="n">sample</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">p</span> <span class="ow">&lt;-</span> <span class="n">randomRIO</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">length</span> <span class="n">ds</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">t</span> <span class="ow">=</span> <span class="n">ds</span><span class="o">!!</span><span class="n">p</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">not</span> <span class="p">(</span><span class="n">t</span> <span class="p">`</span><span class="n">elem</span><span class="p">`</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">then</span> <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">else</span> <span class="n">return</span> <span class="p">(</span><span class="n">head</span> <span class="n">ds</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The generating function is very similar to the naive one</p>

<figure class='code'><figcaption><span>Randomised Generating Function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">getCandidateRandom</span> <span class="n">beta</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>  <span class="n">tickets</span> <span class="ow">&lt;-</span> <span class="n">replicateM</span> <span class="n">beta</span> <span class="p">(</span><span class="n">sample</span> <span class="n">k</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference is the <code>tickets</code> candidate set: the naive function
generates them all; the randomised one selects $\beta$ randomly.</p>

<h3>Compatibility with the paper version</h3>

<p>By using <code>solve n j j l</code> instead of <code>solve n k j l</code>, my implementation
should compute subset coverage the same way the paper&#8217;s implementation
does.</p>

<h3>Testing and Results</h3>

<p>I will not compare speed, as this would be meaningless. But I can check
whether different values for ticket size can indeed help reduce the size of
the covering set.</p>

<p>Let&#8217;s start with a very simple problem, where $n=5$, $k=3$, $j=3$ and
$l=2$.</p>

<p>I don&#8217;t really need to generate the $j$-subsets, but if I do I can
check the solution.</p>

<p>The solution itself is computed by passing a ticket generating
function; I could have used <code>getCandidate</code>, but here I&#8217;m passing
<code>getCandidateRandom</code> with a $\beta=100$.</p>

<p>The <code>notCovered</code> set is empty, so the solution is at least a covering one.</p>

<p>The solution has two tickets, and the lower bound confirms it is
pretty good.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Main&gt; let problem = genCombi 3 [1..5]
</span><span class='line'>*Main&gt; solution &lt;- solve 5 3 3 2 (getCandidateRandom 100)
</span><span class='line'>*Main&gt; solution
</span><span class='line'>[[3,4,5],[1,2,4]]
</span><span class='line'>*Main&gt; notCoveredBatch 2 solution problem 
</span><span class='line'>[]
</span><span class='line'>*Main&gt; lowerBound 5 3 3 2
</span><span class='line'>1.4285714285714286</span></code></pre></td></tr></table></div></figure>


<p>Next test, with $n=15$, $k=5$, $j=5$ and $l=4$. The paper reports that
they found a solution with $137$ tickets. As $k=j$, my algorithm
cannot really beat that (and indeed finds a solution of the same size,
if I try a couple of times):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Main&gt; let problem = genCombi 5 [1..15]
</span><span class='line'>*Main&gt; solution &lt;- solve 15 5 5 4 (getCandidateRandom 100)
</span><span class='line'>*Main&gt; length solution
</span><span class='line'>137
</span><span class='line'>*Main&gt; notCoveredBatch  4 solution problem
</span><span class='line'>[]
</span><span class='line'>*Main&gt; lowerBound 15 5 5 4
</span><span class='line'>58.88235294117647</span></code></pre></td></tr></table></div></figure>


<p>For the next test, I should have a better solution than the paper, as
$k$ is larger than $j$: $n=15$, $k=6$, $j=5$, $l=4$.</p>

<p>The paper has a lower bound of $58$, and a solution of size $138$, but my
lower bound is $22$, and my solution has size $57$.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Main&gt; let problem = genCombi 5 [1..15]
</span><span class='line'>*Main&gt; solution &lt;- solve 15 6 5 4 (getCandidateRandom  100)
</span><span class='line'>*Main&gt; length solution
</span><span class='line'>57
</span><span class='line'>*Main&gt; notCoveredBatch 4 solution problem
</span><span class='line'>[]
</span><span class='line'>*Main&gt; lowerBound 15 6 5 4
</span><span class='line'>21.29787234042553</span></code></pre></td></tr></table></div></figure>


<p>When the difference between $k$ and $j$ becomes large, the solution
improves significantly: with $n=18$, $k=10$, $j=7$, $l=6$, the paper
has a lower bound of $408$, mine is $18$. The paper&#8217;s solution has
size $1080$, but mine is just $73$.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Main&gt; let problem = genCombi 7 [1..18]
</span><span class='line'>*Main&gt; solution &lt;- solve 18 10 7 6 (getCandidateRandom 100)
</span><span class='line'>*Main&gt; length solution
</span><span class='line'>73
</span><span class='line'>*Main&gt; notCoveredBatch 6 solution problem
</span><span class='line'>[]
</span><span class='line'>*Main&gt; lowerBound 18 10 7 6
</span><span class='line'>17.68</span></code></pre></td></tr></table></div></figure>


<h3>Wrapping up</h3>

<p>Even if my approach is ultimately wrong, I can say I must be close to
an actual solution. I could (and probably will, given time) try to
rewrite my solution in C, and focus on performance.</p>

<p>So I declare this problem conquered, I will resume my reading.</p>

<h3>Complete code</h3>

<figure class='code'><figcaption><span>Psychic Modeling Implementation (psychic.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/algo-design-manual/psychic.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Ord</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- helpers functions</span>
</span><span class='line'><span class="nf">fact</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">product</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'><span class="nf">combi</span> <span class="n">n</span> <span class="n">c</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fact</span> <span class="n">n</span><span class="p">)</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="p">(</span><span class="n">fact</span> <span class="n">c</span> <span class="o">*</span> <span class="n">fact</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nf">remainingNumbers</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="n">union</span> <span class="kt">[]</span> <span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- generate combinations</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="n">k</span> <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">=</span> <span class="p">[</span><span class="n">l</span><span class="kt">:</span><span class="n">cs</span> <span class="o">|</span> <span class="n">cs</span> <span class="ow">&lt;-</span> <span class="n">genCombi</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">ls</span><span class="p">]</span> <span class="o">++</span>
</span><span class='line'>                    <span class="n">genCombi</span> <span class="n">k</span> <span class="n">ls</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- estimates for the solution size</span>
</span><span class='line'><span class="nf">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="n">sum</span> <span class="p">[</span> <span class="p">(</span><span class="n">combi</span> <span class="n">k</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span>
</span><span class='line'>                            <span class="p">(</span><span class="n">combi</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">)</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="p">))</span> <span class="o">|</span> <span class="n">i</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="n">l</span><span class="o">..</span><span class="n">j</span><span class="p">]]</span>
</span><span class='line'><span class="nf">lowerBound</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">combi</span> <span class="n">n</span> <span class="n">j</span><span class="p">)</span> <span class="o">/</span>
</span><span class='line'>                     <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- definition of coverage measure</span>
</span><span class='line'><span class="nf">cover</span> <span class="n">l1</span> <span class="n">l2</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">intersect</span> <span class="n">l1</span> <span class="n">l2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- predicate functions: check cover between ticket and j-subset</span>
</span><span class='line'><span class="nf">coveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&lt;=</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'><span class="nf">notCoveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- keep only j-subsets that are not covered by tickets</span>
</span><span class='line'><span class="nf">notCoveredBatch</span> <span class="n">l</span> <span class="n">ts</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="n">notCovered</span> <span class="n">l</span><span class="p">)</span> <span class="n">js</span> <span class="n">ts</span>
</span><span class='line'><span class="nf">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">notCoveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- length of j-subsets from js that are sufficiently covered by t</span>
</span><span class='line'><span class="nf">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- check the coverage of a single k number ticket on the C_j^n</span>
</span><span class='line'><span class="c1">-- potentials; can be compared against ticketCover estimate</span>
</span><span class='line'><span class="nf">checkFormula</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">candidates</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>      <span class="n">ticket</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>      <span class="n">covered</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">ticket</span><span class="p">)</span> <span class="n">candidates</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">length</span> <span class="n">covered</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- compute solution given a candidate generator</span>
</span><span class='line'><span class="nf">solve</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">gc</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">jtuples</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">loop</span> <span class="n">jtuples</span>
</span><span class='line'> <span class="kr">where</span> <span class="n">loop</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'>       <span class="n">loop</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>         <span class="n">t</span> <span class="ow">&lt;-</span> <span class="n">gc</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span>
</span><span class='line'>         <span class="n">ts</span> <span class="ow">&lt;-</span> <span class="n">loop</span> <span class="o">$</span> <span class="n">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span>
</span><span class='line'>         <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">ts</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- naive candidate generator</span>
</span><span class='line'><span class="nf">getCandidate</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>      <span class="n">tickets</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">k</span> <span class="n">numbers</span>
</span><span class='line'>      <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Knuth method for generating combination</span>
</span><span class='line'><span class="c1">-- adapted for arbitrary set</span>
</span><span class='line'><span class="nf">sample</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="n">k</span> <span class="n">ds</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">s</span> <span class="ow">&lt;-</span> <span class="n">sample</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">p</span> <span class="ow">&lt;-</span> <span class="n">randomRIO</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">length</span> <span class="n">ds</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">t</span> <span class="ow">=</span> <span class="n">ds</span><span class="o">!!</span><span class="n">p</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">not</span> <span class="p">(</span><span class="n">t</span> <span class="p">`</span><span class="n">elem</span><span class="p">`</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">then</span> <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">else</span> <span class="n">return</span> <span class="p">(</span><span class="n">head</span> <span class="n">ds</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- random candidate generator</span>
</span><span class='line'><span class="nf">getCandidateRandom</span> <span class="n">beta</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>  <span class="n">tickets</span> <span class="ow">&lt;-</span> <span class="n">replicateM</span> <span class="n">beta</span> <span class="p">(</span><span class="n">sample</span> <span class="n">k</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Exam Problems]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/05/concrete-mathematics-chapter-1-exam-problems/"/>
    <updated>2012-02-05T12:27:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/05/concrete-mathematics-chapter-1-exam-problems</id>
    <content type="html"><![CDATA[<p>It took me longer than I thought, and the outcome is slightly
disappointing: I failed to solve two of the problems, and I solved the
remaining ones way too slowly, so in a real exam conditions I probably
would have solved just one or two&#8230;</p>

<!-- more -->


<h2>Exam Problems</h2>

<h3>4 Pegs Tower of Hanoi</h3>

<p>First, it helps to see that the indices of the recurrence are actually
$S_n$:</p>

<div markdown="0">
\begin{align}
W_{n(n+1)/2}&amp;= W_{S_n}&#92;&#92;
W_{n(n-1)/2}&amp;= W_{S_{n-1}}
\end{align}
</div>


<p>And of course, $S_n = S_{n-1} + n$.</p>

<p>Setting $m=S_{n-1}$, we try to show:</p>

<div markdown="0">
\begin{align}
W_{m+n} &amp; \le 2W_{m} + T_n&#92;&#92;
\end{align}
</div>


<p>Now, obviously, if we have $m+n$ discs, we can move the $m$ top ones
from $A$ to $C$ using $B$ and $D$ as transfer pegs, then move the
bottom $n$ ones from $A$ to $B$ using $D$ as transfer peg, and finally
move the top $m$ ones from $C$ to $B$.</p>

<p>The first step takes $W_m$ moves, the second one is the classic Tower
of Hanoi problem (as we can no longer use peg $C$, we only have three
pegs), so it takes $T_n$ moves, and the last step takes $W_m$  moves again.</p>

<p>This is only one possible solution; the optimal one must be equal or
better, so we have</p>

<div markdown="0">
\begin{align}
W_{m+n} &amp; \le 2W_m + T_n&#92;&#92;
\end{align}
</div>


<p>This is true for any $m+n$ discs, and in particular for
$S_n = S_{n-1} + n$ ones.</p>

<h3>Specific Zigs</h3>

<p>I could not solve this problem. I had found that the half-lines did
intersect, but then I failed to show that their intersections were all
distinct.</p>

<p>Even with the solution from the book, it took me a while before I
finally had a complete understanding.</p>

<p>One problem I had was that lines in a graph are basic college level
mathematics, but college was a long, long time ago. I pretty much had
to work from first principles.</p>

<p>Following the book in writing the positions as $(x_j, 0)$ and
$(x_j - a_j, 1)$, I need to find $\alpha$ and $\beta$ such that
$y=\alpha x + \beta$ is true for both points above.</p>

<div markdown="0">
\begin{align}
0 &amp; = \alpha x_j + \beta &#92;&#92;
\beta &amp; = - \alpha x_j&#92;&#92;
1 &amp; = \alpha (x_j - a_j) - \alpha x_j&#92;&#92;
&amp; = \alpha x_j - \alpha a_j - \alpha x_j&#92;&#92;
&amp; = - \alpha a_j&#92;&#92;
\alpha &amp; = \frac{-1}{a_j}&#92;&#92;
y &amp; = \frac{x_j - x}{a_j}&#92;&#92;
\end{align}
</div>


<p>With this given, I can try to find the intersection of lines from
different zigs, $j$ and $k$:</p>

<div markdown="0">
\begin{align}
\frac{x_j - x}{a_j} &amp; = \frac{x_k - x}{a_k}&#92;&#92;
a_k (x_j - x) &amp; = a_j (x_k - x)&#92;&#92;
a_k x_j - a_k x &amp; = a_j x_k - a_j x&#92;&#92;
a_k x_j - a_j x_k &amp; = (a_k - a_j) x&#92;&#92;
\end{align}
</div>


<p>Now, still following the book, I replace $x$ by $t$ with
$x=x_j - t a_j$:</p>

<div markdown="0">
\begin{align}
a_k x_j - a_j x_k &amp; = (a_k - a_j) (x_j - t a_j)&#92;&#92;
a_k x_j - a_j x_k &amp; = a_k x_j - a_j x_j - t a_j a_k + t a_j^2&#92;&#92;
- a_j x_k &amp; = t a_j^ 2 - a_j x_j - t a_j a_k&#92;&#92;
- x_k &amp; = t a_j - x_j -t a_k&amp;&amp;\text{dividing by \(a_j\)}&#92;&#92;
x_j - x_k &amp; = t (a_j - a_k)&#92;&#92;
t &amp; = \frac{x_j - x_k}{a_j - a_k}&#92;&#92;
\end{align}
</div>


<p>Somehow, I have a faint memory of such a result; I need to check a
college math book.</p>

<p>To complete, I need to show that $y = t$:</p>

<div markdown="0">
\begin{align}
y &amp; = \frac{x_j - x}{a_j}&#92;&#92;
&amp; = \frac{x_j - x_j + t a_j}{a_j}&#92;&#92;
&amp; = \frac{t a_j}{a_j}&#92;&#92;
&amp; = t&#92;&#92;
\end{align}
</div>


<p>So the intersection of any two pair of half-lines from different zigs
is $(x_j - t a_j, t)$. Note that $t$ has the same value whether
$j \gt k$ or $k \gt j$. To simplify further computations, I set
$j \gt k$.</p>

<p>There are two remaining steps: show that $t$ is different for
different pairs of $j$, $k$ (with $j \ne k$); and then show that the
four intersections for a pair $j$, $k$ are also distinct.</p>

<p>$a_j$ can be of two forms: $n^j$ and $n^j + n^{-n}$. So $a_j - a_k$
can be one of</p>

<div markdown="0">
\begin{align}
&amp; n^j - n^k&#92;&#92;
&amp; n^j + n^{-n} - n^k&#92;&#92;
&amp; n^j - n^k - n^{-n}&#92;&#92;
n^j + n^{-n} - n^k - n^{-n} = &amp; n^j - n^k&#92;&#92;
\end{align}
</div>


<p>So there are three different forms for $a_j - a_k$, which I will
simply write $n^j - n^k + \epsilon$ where $|\epsilon| \lt 1$.</p>

<div markdown="0">
\begin{align}
t &amp; = \frac{n^{2j} - n^{2k}}{n^j - n^k + \epsilon}&#92;&#92;
&amp; = \frac{(n^j - n^k)(n^j + n^k)}{n^j - n^k + \epsilon}&#92;&#92;
\end{align}
</div>


<p>Let&#8217;s show that $n^j+n^k - 1 \lt t \lt n^j+n^k + 1$: multiply the
whole inequality by $n^j - n^k + \epsilon$. As</p>

<div markdown"0">
\begin{align}
n^j - n^k &amp; \ge n&#92;&#92;
&amp; \ge 2&#92;&#92;
&amp; \gt |\epsilon|&#92;&#92;
\end{align}
</div>


<p>so $n^j - n^k + \epsilon \gt 0$. Defining</p>

<div markdown="0">
\begin{align}
N_{jk} &amp; = n^j + n^k&#92;&#92;
N&#8217;_{jk} &amp; = n^j - n^k&#92;&#92;
\end{align}
</div>


<p>the left and right inequalities become</p>

<div markdown="0">
\begin{align}
(N_{jk} - 1) (N&#8217;_{jk} + \epsilon) &amp; = N_{jk}N&#8217;_{jk} - N&#8217;_{jk} + \epsilon N_{jk} - \epsilon&#92;&#92;
(N_{jk} + 1) (N&#8217;_{jk} + \epsilon) &amp; = N_{jk}N&#8217;_{jk} + N&#8217;_{jk} + \epsilon N_{jk} + \epsilon&#92;&#92;
\end{align}
</div>


<p>Subtracting $N_{jk}N&#8217;_{jk} = (n^j-n^k)(n^j+n^k)$ from the original inequality:</p>

<div markdown="0">
\begin{align}
-N&#8217;_{jk}+\epsilon N_jk - \epsilon \lt 0 \lt N&#8217;_{jk} + \epsilon N_{jk} + \epsilon&#92;&#92;
\end{align}
</div>


<p>I need to prove the following inequality</p>

<div markdown"0">
\begin{align}
(n^j - n^k) &amp; \gt |\epsilon| + |\epsilon| (n^j - n^k)&#92;&#92;
\end{align}
</div>


<p>We already know $|\epsilon| \lt 1$, so looking at the second term (and
assuming $\epsilon \ne 0$, as this case is trivial)</p>

<div markdown"0">
\begin{align}
|\epsilon| (n^j-n^k) &amp; = n^{-n} (n^j - n^k)&#92;&#92;
&amp; = n^{j-n} - n^{k-n}&#92;&#92;
&amp;\lt 1&#92;&#92;
\end{align}
</div>


<p>and we have</p>

<div markdown"0">
\begin{align}
n^j - n^k &amp; \ge 2
&amp; \gt |\epsilon| + |\epsilon (n^j - n^k)|&#92;&#92;
\end{align}
</div>


<p>So the inequalities are established. $N_{jk}$ can be seen as a number
in based $n$ where the digits are all zeroes except the $j$ and $k$ ones,
$N_{jk} = N_{j&#8217;k&#8217;} \implies j=j&#8217;, k=k&#8217;$, and therefore $t$ uniquely
defines $j$ and $k$ or, two pairs of zigs must have different $t$.</p>

<p>I still need to show that for a given pair, when $t$ is the same, the
intersections are different. There are three different values of
$t$, so two intersections points have the same height. This happens
for</p>

<div markdown="0">
\begin{align}
t &amp; = \frac{n^{2j} - n^{2k}}{n^j - n^k}&#92;&#92;
\end{align}
</div>


<p>which happens when $a_j = n^j$, $a_k = n^k$ and $a_j = n^j + n^{-n}$,
$a_k = n^k + n^{-n}$. But the $x = x_j - t a_j$ value for
intersections is different: $t n^j$ and $t (n^j + n^{-n})$, so there
are indeed four distinct intersection points.</p>

<h3>30 degrees Zigs</h3>

<p>I could not solve this problem. Once again, my lack of intuition with
geometry was to blame.</p>

<p>But if we have two zigs with half-lines angles $\phi$, $\phi + 30^{\circ}$
and $\theta$, $\theta + 30^{\circ}$, then for any two pairs of
half-lines from the two zigs to intersect, their angles must be
between $0^{\circ}$ and $180^{\circ}$. Taken together, these
constraints give $0^{\circ} \lt |\phi - \theta| \lt 150^{\circ}$.</p>

<p>This means there cannot be more than $5$ such pairs (and to be honest,
I would have said 4, but the book says it&#8217;s indeed 5).</p>

<h3>Recurrence Equations</h3>

<h3>Good and Bad Persons in Josephus Problem</h3>

<p>It took me a while, as I was trying to find a recurrence equation of
some sort which would help me with this problem and the bonus one
(where Josephus&#8217; position is fixed but he can pick $m$). Eventually I
found one, which did not help me with the bonus problem, but led me to
a solution for this problem.</p>

<p>Obviously, if we have $k$ persons and want to remove the last one in
the first round, we can choose $m=k$ and that will work. Actually, any
multiple $m=ak$ works as well.</p>

<p>This shows that at each round, if we have $k$ persons left, and we
start counting on the first one, when $m=ak$ we will remove the $k^{th}$
person then start counting from the first one again.</p>

<p>Back to the original problem: there are $2n$ persons, and we want to
get rid of the $n+1, \cdots, 2n$ first. If we take
$m=lcm(n+1,\cdots, 2n)$, then for the first $n$ rounds the last (bad)
person will be remove, leaving only the good ones at the end.</p>

<p>When first solving the problem, I picked $m=\prod_{i=1}^n (n+i)$,
which has the same property as the least common multiple, but is
larger. Perhaps a smaller number is better for the nerves of the
participants.</p>

<h3>Bonus Problems</h3>

<p>I tried to solve the bonus questions, but after repeatedly failing, I
had a glimpse at the solutions: they obviously require either
knowledge of later chapters, or other concepts I know nothing about,
so I will get back to these bonus problems after I finish the book.</p>

<p>I am now working through Chapter 2. It is a much larger chapter than
the first, so it will take me some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks CouchDB Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/01/seven-databases-in-seven-weeks-couchdb-day-3/"/>
    <updated>2012-02-01T18:06:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/01/seven-databases-in-seven-weeks-couchdb-day-3</id>
    <content type="html"><![CDATA[<p>Today is a bit juicier than the previous days (together). On the menu,
advanced views (full MapReduce), replication, conflict management, and
change monitoring.</p>

<!-- more -->


<h3>Advanced views</h3>

<p><a href="http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views">Advanced views</a>
in CouchDB are, as noted yesterday, materialized output of MapReduce
computations.</p>

<p>This has a cost: such computations are saved, so they take more time
than with other implementations, the first time at least.</p>

<p>Updating the views, on the other hand, is fairly fast (CouchDB
recomputes only what is necessary). Views have to be planned, but
once there they are fairly cheap. For exploratory queries, other databases
might be more appropriate.</p>

<p>CouchDB&#8217;s reduce functions distinguishes between the first invocation,
and the following ones (on values that have already gone through the
reduce function). This makes it possible to implement a <code>_count</code>
function which counts the number of values (the first invocation
transforms values into numbers, and the following ones add the numbers
up).</p>

<h3>Replication</h3>

<p><a href="http://wiki.apache.org/couchdb/Replication">Replication</a> is the
one-way process of replicating the changes of one database on
another. Replication can be between any two databases, whether on the
same server or on different ones. It can be one time, or
continuous. The documents to replicate can be filtered, or selected by
<code>_id</code>.</p>

<p>Replication is a lower level mechanism than what MongoDB, for
instance, proposes (where there is a strict hierarchy of masters and
slaves), and closer to the flexible approach or Riak.</p>

<p>Of course, when concurrent writes are permitted, conflicts can occur,
and CouchDB handles them.</p>

<h3>Conflicts</h3>

<p><a href="http://wiki.apache.org/couchdb/Replication_and_conflicts">Concurrent updates</a>
can cause conflicts, and CouchDB detects them so they can be dealt
with.</p>

<p>First, conflicts cannot happen on a single server: updates to a
document must refer to the latest revision, otherwise the update
fails. So clients are directly aware that they need to resubmit the
(merged) document.</p>

<p>When replication is enabled, conflicts result from concurrent updates
in two replicated databases. At the next replication, one version will
be selected as winning, and replicated to other databases. The other
versions are still accessible from the <code>_conflicts</code> attribute
(initially, only in the losing databases).</p>

<p>If two ways replications are in place, eventually, all databases will
have the <code>_conflicts</code> attribute populated (with all the losing
revisions, if there are more than one).</p>

<p>This makes it possible to implement a remedial action; it is possible
to have views with only documents in conflicts, or to filter changes
for conflicts, and implement merging actions in monitoring scripts.</p>

<p>CouchDB documentation helpfully provides some
<a href="http://wiki.apache.org/couchdb/How_to_design_for_replication">advice</a>
for designing conflict-aware applications.</p>

<h3>Changes</h3>

<p>Changes are dedicated views that contains a list of updates for a
specific database. The
<a href="http://wiki.apache.org/couchdb/HTTP_database_API#Changes">parameters</a>
support starting at a given revision (in this case, a database
revision, not a document revision), filtering documents, and keeping
the stream open in several ways.</p>

<p>This makes it possible (easy, even) to monitor (interesting or
relevant) changes, to synchronize with other systems, or to
automatically resolve conflicts, for instance.</p>

<p>When using Long-Polling, I found that one very large datasets, the
<code>JSON.parse</code> invocation could take a long time, and would suggest to
always use a <code>limit</code> parameter on the query, to cut the dataset down
to manageable chunks.</p>

<h2>Exercises</h2>

<h3>Built-in Reduce Functions</h3>

<p>There are three, documented on the
<a href="http://wiki.apache.org/couchdb/Built-In_Reduce_Functions">Wiki</a>.</p>

<p>They are implemented directly in Erlang, so they have a better
performance than JavaScript functions.</p>

<h4><code>_sum</code></h4>

<p>This function behaves just as the reduce function from the book; it
sums the values by key. It is useful when the map functions uses
<code>emit(key, 1);</code> (or some other numeric value).</p>

<h4><code>_count</code></h4>

<p>It is similar to <code>_sum</code>, but it counts the number of values rather
than merely summing them. It is useful when the value is not a number.</p>

<h4><code>_stat</code></h4>

<p>This is an extension of <code>_sum</code> which computes additional statistics
(minimum, maximum, &#8230;) on the numeric values.</p>

<h3>Filtering <code>_changes</code> output</h3>

<p>Filters are nicely described in
<a href="http://guide.couchdb.org/draft/notifications.html#filters">CouchDB The Definitive Guide</a>.</p>

<p>To create a new filter, I first create a design document to store the function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X PUT http://localhost:5984/music/_design/filters \
</span><span class='line'>-d '{ "filters": { "by_country": "function(doc, req) {
</span><span class='line'>return doc.country == req.query.country; }" } }'</span></code></pre></td></tr></table></div></figure>


<p>The <code>by_country</code> function retrieves a <code>country</code> parameter from the
request, and compares it against the record <code>country</code> attribute; only
the matching records are returned.</p>

<p>To monitor only updates to bands from Spain, for instance, I can use</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:5984/music/_changes?filter=filters/by_country\&country=ESP</span></code></pre></td></tr></table></div></figure>


<p>To monitor for conflicts, I have the following design document:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="s2">&quot;_design/filters&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_rev&quot;</span><span class="o">:</span> <span class="s2">&quot;3-ec032384bf365d3caef0ed91185ae45a&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;filters&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;by_country&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc, req) { return doc.country == req.query.country; }&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;conflicts&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc, req) { return doc._conflicts; }&quot;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that, I can then listen for changes, keeping only the conflicts:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music-repl/_changes?filter=filters/conflicts\&since=26000
</span><span class='line'>{"results":[
</span><span class='line'>{"seq":26994,"id":"theconflicts","changes":[{"rev":"2-cab47bf4444a20d6a2d2204330fdce2a"}]}
</span><span class='line'>],
</span><span class='line'>"last_seq":27000}</span></code></pre></td></tr></table></div></figure>


<p>Because CouchDB only set the <code>_conflicts</code> attribute on the
losing database; the winner database (the one in which the winning
revision was initially created) does not know about conflicts. This
means I must check against <code>music-repl</code> instead of <code>music</code>.</p>

<h3>Replication HTTP API</h3>

<p>The API is documented
<a href="http://www.couchbase.org/sites/default/files/uploads/all/documentation/couchbase-api-misc.html#couchbase-api-misc_replicate_post">here</a>.</p>

<p>To use it, simply pass the <code>source</code> and <code>target</code> databases to the
<code>_replicate</code> URL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST http://localhost:5984/_replicate \
</span><span class='line'>-H 'Content-Type: application/json' \
</span><span class='line'>-H 'Accept: application/json' -d \
</span><span class='line'>'{ "source" : "music", "target" : "music-repl" }'</span></code></pre></td></tr></table></div></figure>


<h3><code>_replicator</code> database</h3>

<p>The
<a href="http://docs.couchbase.org/couchdb-release-1.1/couchb-release-1.1-replicatordb.html"><code>_replicator</code> database</a>
is an alternative to the use of the
<code>_replicate</code> URL above: documents inserted in the <code>_replicator</code>
database will, if properly formed, cause a replication job to be
started (either one-off, or continuous).</p>

<p>Deleting the document will cancel the replication job.</p>

<p>Document describing replications are updated to reflect the progress
of the job.</p>

<p>The command below triggers a replication from <code>music</code> to <code>music-repl</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X PUT http://localhost:5984/_replicator/music-rep \
</span><span class='line'>-H 'Content-type: application/json' \
</span><span class='line'>-d '{ "source" : "music", "target" : "music-repl" }'
</span><span class='line'>{"ok":true,"id":"music-rep","rev":"1-ba761c16b5ca36848b2474758cbc4b22"}</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>watch_changes_longpolling_impl.js</code> script on the <code>_replicator</code>
database, it is possible to monitor the replication job:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node watch_changes_longpolling_impl.js _replicator
</span><span class='line'>... elided ...
</span><span class='line'>{ seq: 2,
</span><span class='line'>  id: 'music-rep',
</span><span class='line'>  changes: [ { rev: '1-ba761c16b5ca36848b2474758cbc4b22' } ],
</span><span class='line'>  doc: 
</span><span class='line'>   { _id: 'music-rep',
</span><span class='line'>     _rev: '1-ba761c16b5ca36848b2474758cbc4b22',
</span><span class='line'>     source: 'music',
</span><span class='line'>     target: 'music-repl' } }
</span><span class='line'>{ seq: 3,
</span><span class='line'>  id: 'music-rep',
</span><span class='line'>  changes: [ { rev: '2-d1b4fc9da1ef17d43fa91dd7b345a9e6' } ],
</span><span class='line'>  doc: 
</span><span class='line'>   { _id: 'music-rep',
</span><span class='line'>     _rev: '2-d1b4fc9da1ef17d43fa91dd7b345a9e6',
</span><span class='line'>     source: 'music',
</span><span class='line'>     target: 'music-repl',
</span><span class='line'>     _replication_state: 'triggered',
</span><span class='line'>     _replication_state_time: '2012-02-02T10:23:44+09:00',
</span><span class='line'>     _replication_id: 'ab65eb4c4ca880bf65e02626573ef683' } }
</span><span class='line'>{ seq: 4,
</span><span class='line'>  id: 'music-rep',
</span><span class='line'>  changes: [ { rev: '3-b6d32c3ce979af8dc2190735aa39d4f3' } ],
</span><span class='line'>  doc: 
</span><span class='line'>   { _id: 'music-rep',
</span><span class='line'>     _rev: '3-b6d32c3ce979af8dc2190735aa39d4f3',
</span><span class='line'>     source: 'music',
</span><span class='line'>     target: 'music-repl',
</span><span class='line'>     _replication_state: 'completed',
</span><span class='line'>     _replication_state_time: '2012-02-02T10:23:46+09:00',
</span><span class='line'>     _replication_id: 'ab65eb4c4ca880bf65e02626573ef683' } }
</span><span class='line'>... elided ...</span></code></pre></td></tr></table></div></figure>


<p>The first change is when the document is created; the second when the
job starts, and the third when it successfully completes.</p>

<p>Unlike the <code>_replicate</code> based API, continuous jobs stored in
<code>_replicator</code> will resume when the database is restarted.</p>

<h3>Continuous watcher skeleton</h3>

<p>The approach is to keep input in a buffer, then extract as many line
from the buffer as possible (if the last line is incomplete, it is put
back into the buffer), and parse each line as a JSON object.</p>

<p>The format of each parsed object is different: each change is in its
own object, so there is no <code>results</code> attribute any more.</p>

<figure class='code'><figcaption><span>watch_changes_continuous.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">http_options</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">host</span><span class="o">:</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">port</span><span class="o">:</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">db</span> <span class="o">+</span> <span class="s1">&#39;/_changes&#39;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s1">&#39;?feed=continuous&amp;include_docs=true&amp;since=&#39;</span> <span class="o">+</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">last_seq</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">processLine</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">line</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">line</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">output</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// don&#39;t emit last_seq</span>
</span><span class='line'>            <span class="c1">// watcher.last_seq not used in this code</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">last_seq</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">watcher</span><span class="p">.</span><span class="nx">last_seq</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">last_seq</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="nx">watcher</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="nx">output</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">watcher</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">line</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">checkForData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">lines</span> <span class="o">=</span> <span class="nx">buffer</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// if the last character is line return</span>
</span><span class='line'>    <span class="c1">// use the last line; otherwise put it back</span>
</span><span class='line'>    <span class="c1">// into the buffer to be completed later</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;\n&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">buffer</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// process the remaining lines one at a time</span>
</span><span class='line'>    <span class="nx">lines</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">processLine</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">buffer</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">http_options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">buffer</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">checkForData</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">checkForData</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">watcher</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Continuous watcher implementation</h3>

<p>I just inserted the code block above in the original
<code>watch_changes_skeleton.js</code>; no other modifications were required.</p>

<p>With the code block above, both the long polling and the continuous
outputs are identical.</p>

<h3>Conflicts view</h3>

<p>As I said above, conflicts are only created in the losing database, so
to test this I must use the <code>music-repl</code> database.</p>

<p>Otherwise, the code is simple: iterate on the <code>_conflicts</code> attribute,
and for each revision it contains, emit that revision mapped to the
document <code>_id</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="s2">&quot;_design/conflicts&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_rev&quot;</span><span class="o">:</span> <span class="s2">&quot;4-1f5c35d83a4cfc7783d60f665946dc6d&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;language&quot;</span><span class="o">:</span> <span class="s2">&quot;javascript&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;views&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;conflicts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>           <span class="s2">&quot;map&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc) { (doc._conflicts || []).forEach(function(rev) { emit(rev, doc._id); }); }&quot;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music-repl/_design/conflicts/_view/conflicts | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   129    0   129    0     0  37478      0 --:--:-- --:--:-- --:--:-- 64500
</span><span class='line'>{
</span><span class='line'>    "offset": 0, 
</span><span class='line'>    "rows": [
</span><span class='line'>        {
</span><span class='line'>            "id": "theconflicts", 
</span><span class='line'>            "key": "2-0c969fbfa76eb7fcdf6412ef219fcac5", 
</span><span class='line'>            "value": "theconflicts"
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "total_rows": 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 3 and this overview of CouchDB.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks CouchDB Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-2/"/>
    <updated>2012-01-30T18:58:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-2</id>
    <content type="html"><![CDATA[<p>Day 2 is about Views in CouchDB, which serve as an introduction to the
more general MapReduce support.</p>

<p>It is another fairly short day, as much of this section is actually
about the complexities of XML parsing&#8230;</p>

<!-- more -->


<p>Like Riak and MongoDB, CouchDB is scripted with JavaScript, so today has
a feeling of déjà vu.</p>

<h3>View concept</h3>

<p>A View is just a mapping of a key to a value. Keys and values are
extracted from documents; there can be more than one key for each
document, as in MongoDB.</p>

<p>Once the view has been built and updated for the documents it applies
to, it can be accessed by key using optimized methods (all based on
some form of lexicographical order).</p>

<h3>View performance</h3>

<p>A View in CouchDB is essentially the equivalent of a
<a href="http://en.wikipedia.org/wiki/Materialized_view">materialized view</a>
in relational databases.</p>

<p>Access to the view causes it to be updated (i.e. recomputed) if
necessary, which can be a painfully slow experience. I had imported
the whole content of the music database (26990 records), and each time
I tested a Temporary View or saved a Permanent one, I had to wait for
CouchDB to finish the refresh (fortunately not too long on this
dataset).</p>

<p>It interesting to note that while relational databases require the
schema to be designed ahead of time, but support arbitrary queries,
CouchDB let you ignore the schema, but need you to design the
queries ahead of time.</p>

<h2>Exercises</h2>

<h3><code>emit</code> function</h3>

<p>The key can be
<a href="http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Complex_Keys">any JSON object</a>,
although I would say that only strings and arrays of strings have
sensible semantics.</p>

<p>Arrays can be used with reduce functions to provide query time custom
grouping, as explained
<a href="http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Grouping">here</a>.</p>

<p>For instance, to compute the number of records by date, I used the
<code>releasedate</code> of each album to create a key array
<code>[year, month, date]</code>, and a value of <code>1</code> (1 for each album):</p>

<figure class='code'><figcaption><span>Album by Date  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">album</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;releasedate&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">album</span><span class="p">.</span><span class="nx">releasedate</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">d</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">(),</span>
</span><span class='line'>                               <span class="nx">d</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">(),</span>
</span><span class='line'>                               <span class="nx">d</span><span class="p">.</span><span class="nx">getDate</span><span class="p">()];</span>
</span><span class='line'>                    <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I intend to use grouping, I also need a reduce function:</p>

<figure class='code'><figcaption><span>Reduce Function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">values</span><span class="p">,</span> <span class="nx">rereduce</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">values</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each document in the view is now a date as an array, with a single
number for the record made that date (there are as many identical keys
as there were records for a given day).</p>

<p>When querying, by default, the reduce function will be called on
identical keys to get a single value:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/count/_view/album_by_date?limit=5\&group=true
</span><span class='line'>{"rows":[
</span><span class='line'>{"key":[2004,11,18],"value":2},
</span><span class='line'>{"key":[2004,11,21],"value":1},
</span><span class='line'>{"key":[2004,11,22],"value":1},
</span><span class='line'>{"key":[2004,11,28],"value":1},
</span><span class='line'>{"key":[2004,11,29],"value":2}
</span><span class='line'>]}</span></code></pre></td></tr></table></div></figure>


<p>(month is 0 based&#8230;)</p>

<p>With the <code>group_level</code> parameter, I can control whether I want to
group by day (<code>group=true</code> or <code>group_level=3</code>, as above), by month
(<code>group_level=2</code>), or year (<code>group_level=1</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/count/_view/album_by_date?limit=5\&group_level=2
</span><span class='line'>{"rows":[
</span><span class='line'>{"key":[2004,11],"value":7},
</span><span class='line'>{"key":[2005,0],"value":3},
</span><span class='line'>{"key":[2005,1],"value":3},
</span><span class='line'>{"key":[2005,2],"value":5},
</span><span class='line'>{"key":[2005,3],"value":15}
</span><span class='line'>]}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/count/_view/album_by_date?limit=5\&group_level=1
</span><span class='line'>{"rows":[
</span><span class='line'>{"key":[2004],"value":7},
</span><span class='line'>{"key":[2005],"value":306},
</span><span class='line'>{"key":[2006],"value":1277},
</span><span class='line'>{"key":[2007],"value":3454},
</span><span class='line'>{"key":[2008],"value":7330}
</span><span class='line'>]}</span></code></pre></td></tr></table></div></figure>


<h3>View request parameters</h3>

<p>There are quite a few of them listed
<a href="http://wiki.apache.org/couchdb/HTTP_view_API?action=show&amp;redirect=HttpViewApi">here</a>.</p>

<h3>Random artist script</h3>

<p>The code is essentially the same as the one mapping names to ids, but
here it associates <code>random</code> to <code>name</code>.</p>

<figure class='code'><figcaption><span>Random Artist  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;random&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Random artist URL</h3>

<p>The URL below returns the first artist whose random number is greater
than the random one generated by Ruby.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/artist?limit=1\&startkey=`ruby -e 'p rand'`
</span><span class='line'>{"total_rows":26987,"offset":23180,"rows":[
</span><span class='line'>{"id":"364215","key":0.8581072409917536,"value":"rakombiacje"}
</span><span class='line'>]}</span></code></pre></td></tr></table></div></figure>


<p>As expected, if given a value too large (for instance, 1), the query
returns nothing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/artist?limit=1\&startkey=1
</span><span class='line'>{"total_rows":26987,"offset":26987,"rows":[]}</span></code></pre></td></tr></table></div></figure>


<h3>Random everything</h3>

<p>The code of each script is similar, in a way Russian Dolls are
similar: each one is an extension of the previous, digging deeper into
the nested structure of the original document.</p>

<h4>Random Album</h4>

<figure class='code'><figcaption><span>Random Album  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">album</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;random&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">album</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">by</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">album</span><span class="o">:</span> <span class="nx">album</span><span class="p">.</span><span class="nx">name</span> <span class="p">};</span>
</span><span class='line'>                <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/album?limit=1\&startkey=`ruby -e 'p rand'` | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   142    0   142    0     0  36419      0 --:--:-- --:--:-- --:--:-- 71000
</span><span class='line'>{
</span><span class='line'>    "offset": 19416, 
</span><span class='line'>    "rows": [
</span><span class='line'>        {
</span><span class='line'>            "id": "357995", 
</span><span class='line'>            "key": 0.35656765622628905, 
</span><span class='line'>            "value": {
</span><span class='line'>                "album": "Demo Releses", 
</span><span class='line'>                "by": "SilvanestY"
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "total_rows": 54669
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Random Track</h4>

<figure class='code'><figcaption><span>Random Track  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;tracks&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">album</span><span class="p">.</span><span class="nx">tracks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">track</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">by</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                  <span class="nx">album</span><span class="o">:</span> <span class="nx">album</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                  <span class="nx">track</span><span class="o">:</span> <span class="nx">track</span><span class="p">.</span><span class="nx">name</span> <span class="p">};</span>
</span><span class='line'>                        <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/track?limit=1\&startkey=`ruby -e 'p rand'` | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   163    0   163    0     0  10294      0 --:--:-- --:--:-- --:--:-- 11642
</span><span class='line'>{
</span><span class='line'>    "offset": 118485, 
</span><span class='line'>    "rows": [
</span><span class='line'>        {
</span><span class='line'>            "id": "370935", 
</span><span class='line'>            "key": 0.3460755726665503, 
</span><span class='line'>            "value": {
</span><span class='line'>                "album": "Mako Yama", 
</span><span class='line'>                "by": "Mako Yama", 
</span><span class='line'>                "track": "Kinu No Tsuki"
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "total_rows": 342013
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Random Tag</h4>

<figure class='code'><figcaption><span>Random Tag  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;tracks&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">album</span><span class="p">.</span><span class="nx">tracks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">track</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;tags&#39;</span> <span class="k">in</span> <span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">track</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;idstr&#39;</span> <span class="k">in</span> <span class="nx">tag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span>
</span><span class='line'>                                <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">by</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="nx">album</span><span class="o">:</span> <span class="nx">album</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="nx">track</span><span class="o">:</span> <span class="nx">track</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="nx">tag</span><span class="o">:</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">idstr</span> <span class="p">};</span>
</span><span class='line'>                                <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">});</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/tag?limit=1\&startkey=`ruby -e 'p rand'` | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   218    0   218    0     0   9717      0 --:--:-- --:--:-- --:--:-- 10380
</span><span class='line'>{
</span><span class='line'>    "offset": 151963, 
</span><span class='line'>    "rows": [
</span><span class='line'>        {
</span><span class='line'>            "id": "340779", 
</span><span class='line'>            "key": 0.2788540070246309, 
</span><span class='line'>            "value": {
</span><span class='line'>                "album": "CABACA-5", 
</span><span class='line'>                "by": "CC Asia Band", 
</span><span class='line'>                "tag": "electricguitar", 
</span><span class='line'>                "track": "CC Asia Band - CABACA - 35 CCilly Love Song"
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "total_rows": 545892
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it for Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks CouchDB Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-1/"/>
    <updated>2012-01-30T13:57:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-1</id>
    <content type="html"><![CDATA[<p>Another beta version of the book, finally with the chapter on
<a href="http://couchdb.apache.org/">CouchDB</a>. I was going through
the Redis chapter, but the third day uses other databases, in
particular CouchDB. So I&#8217;ll get back to Redis after I&#8217;m done with
CouchDB.</p>

<!--more-->


<p>Today is just a short introduction: CouchDB is (yet another) key-value
store; it has a ReST API, stores JSON data, and, like Riak, only
supports full updates. Unlike Riak, however, it does not support
concurrent updates; instead it requires the client to only update from
the latest version of the data.</p>

<p>I thought at first that the data was versioned, like in HBase, but
this is not the case: the version id (<code>_rev</code>) is there to ensure that
updates occur sequentially, not concurrently. CouchDB can keep
previous versions of documents, but the retention is unreliable as
explained <a href="http://wiki.apache.org/couchdb/Document_revisions">here</a>.</p>

<p>Besides the HTTP based ReST API, CouchDB also provides a web
interface; among other tools, there is a complete test suite, which is
always nice to check the installation.</p>

<h2>Exercises</h2>

<h3>CouchDB HTTP Document API documentation</h3>

<p>The documentation is
<a href="http://wiki.apache.org/couchdb/HTTP_Document_API">here</a>; there is
also a <a href="http://wiki.apache.org/couchdb/Complete_HTTP_API_Reference">reference</a></p>

<h3>HTTP commands</h3>

<p>Besides the basic CRUD <code>POST</code> <code>GET</code> <code>PUT</code> and <code>DELETE</code>, there is also
<code>HEAD</code> (for basic information on a document):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -I -X HEAD http://localhost:5984/music/ee6637073ab24aaeeda094dcb3749a22 
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: CouchDB/1.1.1 (Erlang OTP/R15B)
</span><span class='line'>Etag: "4-e70582ded641cebc5b259da96805344b"
</span><span class='line'>Date: Mon, 30 Jan 2012 09:18:44 GMT
</span><span class='line'>Content-Type: text/plain;charset=utf-8
</span><span class='line'>Content-Length: 246
</span><span class='line'>Cache-Control: must-revalidate</span></code></pre></td></tr></table></div></figure>


<p>When using <code>cURL</code>, the command <code>HEAD</code> must be used with the flag <code>-I</code>,
otherwise <code>cURL</code> will wait (endlessly) for data after the headers.</p>

<p>Finally, there is a <code>COPY</code> command, which as expected copies a
document (without having to retrieve it first):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X COPY  http://localhost:5984/music/ee6637073ab24aaeeda094dcb3749a22 \
</span><span class='line'>-H 'Destination: beatles'
</span><span class='line'>{"id":"beatles","rev":"1-6ea1608de6609c9985ff06aa9bc23a16"}
</span><span class='line'>$ curl http://localhost:5984/music/beatles | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   221  100   221    0     0  78396      0 --:--:-- --:--:-- --:--:--  215k
</span><span class='line'>{
</span><span class='line'>    "_id": "beatles", 
</span><span class='line'>    "_rev": "1-6ea1608de6609c9985ff06aa9bc23a16", 
</span><span class='line'>    "albums": [
</span><span class='line'>        {
</span><span class='line'>            "title": "Help!", 
</span><span class='line'>            "year": 1965
</span><span class='line'>        }, 
</span><span class='line'>        {
</span><span class='line'>            "title": "Sgt. Pepper's Lonely Hearts Club Band", 
</span><span class='line'>            "year": 1967
</span><span class='line'>        }, 
</span><span class='line'>        {
</span><span class='line'>            "title": "Abbey Road", 
</span><span class='line'>            "year": 1969
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "name": "The Beatles"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3><code>PUT</code> a new document with a specific <code>_id</code></h3>

<p>It is just a matter of specifying an id when creating the document:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -X PUT http://localhost:5984/music/sonic_youth \
</span><span class='line'>-H "Content-Type: application/json" --data @-
</span><span class='line'>{
</span><span class='line'>        "name": "Sonic Youth",
</span><span class='line'>        "albums": [
</span><span class='line'>                { "title": "Bad Moon Rising", "year": 1985
</span><span class='line'>                },
</span><span class='line'>                { "title": "Daydream Nation", "year": 1988
</span><span class='line'>                },
</span><span class='line'>                { "title": "Goo", "year": 1990
</span><span class='line'>                }
</span><span class='line'>]               
</span><span class='line'>}       
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Server: CouchDB/1.1.1 (Erlang OTP/R15B)
</span><span class='line'>Location: http://localhost:5984/music/sonic_youth
</span><span class='line'>Etag: "1-69886eb003b1f007cabaac678d5edc16"
</span><span class='line'>Date: Mon, 30 Jan 2012 09:35:37 GMT
</span><span class='line'>Content-Type: text/plain;charset=utf-8
</span><span class='line'>Content-Length: 74
</span><span class='line'>Cache-Control: must-revalidate
</span><span class='line'>
</span><span class='line'>{"ok":true,"id":"sonic_youth","rev":"1-69886eb003b1f007cabaac678d5edc16"}</span></code></pre></td></tr></table></div></figure>


<h3>Document with a text attachment</h3>

<p>To create an attachment, it is necessary to know the version of the
document, as it is considered an update. The URL for the attachment is
just the URL for its document, with any suffix (the suffix naming the
attachment). The <code>_rev</code> is specified by passing a <code>rev</code> parameter.</p>

<p>Using the document with <code>_id</code> &#8216;beatles&#8217; created above, the attachment
is uploaded with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -X PUT http://localhost:5984/music/beatles/lyrics?rev=1-6ea1608de6609c9985ff06aa9bc23a16 \
</span><span class='line'>-H "Content-type: text/plain" --data @-
</span><span class='line'>It was twenty years ago today
</span><span class='line'>Sgt. Pepper taught the band to play...
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Server: CouchDB/1.1.1 (Erlang OTP/R15B)
</span><span class='line'>Location: http://localhost:5984/music/beatles/attachment
</span><span class='line'>Etag: "2-2b22345fd492f31e3061e23a2b79fc08"
</span><span class='line'>Date: Mon, 30 Jan 2012 09:41:51 GMT
</span><span class='line'>Content-Type: text/plain;charset=utf-8
</span><span class='line'>Content-Length: 70
</span><span class='line'>Cache-Control: must-revalidate
</span><span class='line'>
</span><span class='line'>{"ok":true,"id":"beatles","rev":"2-2b22345fd492f31e3061e23a2b79fc08"}</span></code></pre></td></tr></table></div></figure>


<p>The document now has a new <code>_rev</code>.</p>

<p>To retrieve the attachment, just use its URL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/beatles/lyrics
</span><span class='line'>It was twenty years ago todaySgt. Pepper taught the band to play...</span></code></pre></td></tr></table></div></figure>


<p>(the line breaks have been lost&#8230;)</p>

<p>Onward to Day 2!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Redis Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/21/seven-databases-in-seven-weeks-redis-day-2/"/>
    <updated>2012-01-21T13:30:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/21/seven-databases-in-seven-weeks-redis-day-2</id>
    <content type="html"><![CDATA[<p>Performance tuning with Redis can be achieved in different ways, as we
see today. First there are basic changes in the client side (such as
pipelines), then configurations options (frequency of saves, &#8230;), and
finally distribution of load.</p>

<!-- more -->


<h3>Pipeline</h3>

<p>Redis low level protocol supports the notion of pipelines: sending
commands in batch, and collect all the results at the end, instead of
waiting for results between each command. This should save a round
trip delay for each command, so there can be huge performance boosts
for specific usages, as the informal benchmarks below show.</p>

<h3>Distributed Redis</h3>

<p>Redis servers can be distributed for performance or memory concern,
but much of the work falls on the client side.</p>

<h4>Slaves</h4>

<p>Slaves in Redis are just the opposite of
<a href="http://www.mongodb.org/">MongoDB</a>&#8217;s. Whereas MongoDB&#8217;s slaves are
meant to be written to, so that updates are automatically pushed to
the master, Redis slaves are, or should be, read-only. Updates are
only propagated from master to slaves.</p>

<p>There is no integrated support for failover; it has to be implemented
in client code.</p>

<p>So slaves are mainly a mechanism to distribute reads; combined with
monitoring client code, they can also be used to data replication and
failover.</p>

<p>Note that each slave needs as much memory as the master, as it
contains the same data.</p>

<h4>Sharding</h4>

<p>By itself, Redis does not support sharding, and relies on the client
library to spread accesses over several instances. There is a
ongoing development to have real Redis Clusters, but for the time
being it has to be simulated.</p>

<p>One issue not mentioned in the book is that sharding breaks
transactions and pipelines: there is no guarantees that the relevant
keys are all in the same instance, so the Redis Ruby client, for
instance, will raise an exception when invoking <code>MULTI</code>.</p>

<p>The Java client, Jedis, has a mechanism to &#8220;tag&#8221; a key such that keys
with the same tag are guaranteed to be on the Redis server. This makes
the distribution of keys predictable, and allows the use of
transactions (provided all the involved keys have the same tag).</p>

<p>This shows that not only this is a client side feature, but the actual
extent of the feature may vary widely. And of course, there is no
reason to think that different clients will shard keys the same way.</p>

<p>Properly setup, sharding will distribute the data over each
node, reducing the memory load of each node.</p>

<h2>Exercises</h2>

<h3>Performance tests</h3>

<p>I first tried to rewrite the code in Java, to measure the cost of Ruby&#8217;s
convenience. The code in Java is clumsier than in Ruby, but it ran
a bit faster (105 seconds instead of 155 seconds for the Ruby version
using <code>hiredis</code>).</p>

<figure class='code'><figcaption><span>Simple ISBN Loader (ISBNLoader.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/isbn/ISBNLoader.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ISBNLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">REDIS_HOST</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REDIS_PORT</span> <span class="o">=</span> <span class="mi">6379</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">TIMEOUT</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="n">REDIS_HOST</span><span class="o">,</span> <span class="n">REDIS_PORT</span><span class="o">,</span> <span class="n">TIMEOUT</span><span class="o">);</span>
</span><span class='line'>      <span class="n">jedis</span><span class="o">.</span><span class="na">flushAll</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">String</span><span class="o">[]</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">tokens</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">isbn</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">title</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">isbn</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">title</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">isbn</span><span class="o">,</span> <span class="n">title</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">jedis</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using pipelines, the difference was 11 seconds against 26 seconds
(again, the Ruby version is using <code>hiredis</code>).</p>

<figure class='code'><figcaption><span>Pipelined ISBN Loader (ISBNLoader.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/isbn-pipeline/ISBNLoader.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Pipeline</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ISBNLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">REDIS_HOST</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REDIS_PORT</span> <span class="o">=</span> <span class="mi">6379</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">TIMEOUT</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Jedis</span> <span class="n">client</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="nf">ISBNLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="n">REDIS_HOST</span><span class="o">,</span> <span class="n">REDIS_PORT</span><span class="o">,</span> <span class="n">TIMEOUT</span><span class="o">);</span>
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="na">flushAll</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">ISBNLoader</span><span class="o">().</span><span class="na">load</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">load</span><span class="o">(</span><span class="n">String</span> <span class="n">fileName</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">fileName</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&gt;</span> <span class="n">batch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">String</span><span class="o">[]</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">tokens</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">isbn</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">title</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">isbn</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">title</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">batch</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="n">isbn</span><span class="o">,</span> <span class="n">title</span><span class="o">));</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">batch</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">BATCH_SIZE</span><span class="o">)</span>
</span><span class='line'>              <span class="n">flush</span><span class="o">(</span><span class="n">batch</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">flush</span><span class="o">(</span><span class="n">batch</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span>       
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&gt;</span> <span class="n">batch</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Pipeline</span> <span class="n">pipe</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">pipelined</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Pair</span> <span class="n">p</span> <span class="o">:</span> <span class="n">batch</span><span class="o">)</span>
</span><span class='line'>          <span class="n">pipe</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">key</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>      <span class="n">pipe</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
</span><span class='line'>      <span class="n">batch</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Pair</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Pair</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Disabling snapshots and append only file did not improve the time
significantly compared to the default (snapshots but no append only file).</p>

<p>Enabling the append only file and setting it to <code>always</code> was almost 3
times as slow for the pipelined Java version (27 seconds). For the
original Ruby version (with <code>hiredis</code>), it was even worse (1101
seconds). This means the overhead of writing to file can be mitigated
with pipelines.</p>

<p>To recap: disabling snapshots did not improve performance measurably,
but enabling append only file <code>always</code> degrades the performance
significantly; using pipelines makes it a bit better, but it is still
much slower.</p>

<h3>URL Shortening Service</h3>

<p>The exact setup to implement is not described, so what I did is to
distribute data between two shards of one master and two slaves.</p>

<p>There is no direct support for such a layout in Jedis (nor, as far as I
can tell, in the Ruby library), so I had to write some of it myself.</p>

<p>As always with Redis, the writes are restricted to the masters, and
the reads are distributed over the slaves (and the masters as well, if
needed).</p>

<h4>Distribution over slaves</h4>

<p>Jedis does not support slaves directly. What the documentation
proposes is to have a dedicated client to the master to write on, and
a sharded pool to the slaves. However, such an approach would be
difficult, as I need to shard the writes to the masters as well (I
would have to use a different sharding algorithm, and manage the
routing of commands through the tree of Redis instances).</p>

<p>Fortunately, Redis user Ingvar Bogdahn had posted an implementation of
a
<a href="http://groups.google.com/group/jedis_redis/msg/c8c76371cf543e36">Round Robin pool of slaves</a>. This
implementation manages a connection pool to a master, and another
connection pool to a set of slaves. The commands are properly
distributed: all the write commands are sent to the master, and the
reads commands are distributed over the slaves.</p>

<p>I had to fix the code in some places: a command implementation was
missing, another was incorrect, and finally the password was never
sent to the master, causing authentication errors. But the bulk of the
code is Ingvar&#8217;s, and I was glad to use it.</p>

<p>The classes are</p>

<ul>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/UniJedis.java"><code>UniJedis</code></a>: provides pools for both master and a set of slaves, and dispatches commands to the correct pool.</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/RoundRobinPool.java"><code>RoundRobinPool</code></a>: implements a pool with Round Robin access</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/ChainableTransaction.java"><code>ChainableTransaction</code></a>: (not used in this project) provides a fluent interface for Redis transactions.</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/DBKeys.java"><code>DBKeys</code></a>: (not used in this project) abstracts database and keys.</li>
</ul>


<h4>Sharding</h4>

<p>Sharding is directly supported by Jedis, but as organized the code is
restricted to a set of clients to specific instances.</p>

<p>There are basic, generic classes
(<a href="https://github.com/xetorthio/jedis/blob/master/src/main/java/redis/clients/util/Sharded.java"><code>Sharded</code></a>,
<a href="https://github.com/xetorthio/jedis/blob/master/src/main/java/redis/clients/util/ShardInfo.java"><code>ShardInfo</code></a>,
&#8230;) that can be used to implement sharding of arbitrary clients (such
as the Round Robin pool above), but it requires a lot of tedious code
to map each command to a method on the right shard. Worse, such code
would be the same for every kind of shard.</p>

<p>So I first wrote generic classes that implement sharding in terms of
generic Jedis client; the actual implementation is then much simpler
(just the constructors, and the few commands that cannot be sharded,
such as <code>disconnect</code> or <code>flushAll</code>).</p>

<ul>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/BinaryShardedGJedis.java"><code>BinaryShardedGJedis</code></a>: first level of Jedis commands implementation (binary commands)</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/ShardedGJedis.java"><code>ShardedGJedis</code></a>: second level of Jedis commands implementation (<code>String</code> based commands)</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/UniJedisShardInfo.java"><code>UniJedisShardInfo</code></a>: descriptor class to use with <code>Sharded</code></li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/ShardedUniJedis.java"><code>ShardedUniJedis</code></a>: actual implementation of sharded <code>UniJedis</code>. As promised, the class has hardly any code.</li>
</ul>


<h4>Service</h4>

<p>The code for the service itself is now fairly
small. <a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/jp/wakatta/client/JedisClient.java"><code>JedisClient</code></a>
is the class that builds the tree of sharded master/slaves pools. It
is loaded and initialized as a <a href="http://www.springsource.org/">Spring</a>
bean. The web services are <a href="http://jsr311.java.net/">JSR 311</a>
services, running over <a href="http://jersey.java.net/">Jersey</a>, and loaded
and initialized by Spring.</p>

<p><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/jp/wakatta/web/Admin.java"><code>Admin</code></a>
let the user defines a keyword for a specific URL, and
<a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/jp/wakatta/web/Client.java"><code>Client</code></a>
extracts a keyword from the request URL, retrieves the URL for the
this keyword, and returns a request to redirect to this URL.</p>

<p>Once deployed (on <a href="http://tomcat.apache.org/">Apache Tomcat</a>), it can be used in a browser or on the command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST http://localhost:8080/url-shortener/u/admin --data "url=http://slashdot.org&shorter=slash"
</span><span class='line'>Key[slash] mapped to URL[http://slashdot.org]</span></code></pre></td></tr></table></div></figure>


<p>and for clients:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -I http://localhost:8080/url-shortener/u/s/slash
</span><span class='line'>HTTP/1.1 303 See Other
</span><span class='line'>Server: Apache-Coyote/1.1
</span><span class='line'>Location: http://slashdot.org
</span><span class='line'>Content-Length: 0
</span><span class='line'>Date: Mon, 23 Jan 2012 06:13:29 GMT</span></code></pre></td></tr></table></div></figure>


<p>The code for the whole project can be found on <a href="https://github.com/fdumontmd/url-shortener">Github</a>.</p>

<p>And this completes Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Redis Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/20/seven-databases-in-seven-weeks-redis-day-1/"/>
    <updated>2012-01-20T16:52:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/20/seven-databases-in-seven-weeks-redis-day-1</id>
    <content type="html"><![CDATA[<p>After a long winter hiatus, the elves at
<a href="http://pragprog.com/">Pragmatic Bookshelf</a> delivered a late but
welcome present: the third beta of
<a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a>. The
book is not complete yet (the chapter on
<a href="http://couchdb.apache.org/">CouchDB</a> is still missing), but it now
covers <a href="http://redis.io/">Redis</a>.</p>

<p>Redis is basically a key-value store, like
<a href="http://wiki.basho.com/">Riak</a>, but while Riak is agnostic about the
values, Redis values can be data structures (lists, queues,
dictonaries, &#8230;, or even messaging queues). This allows Redis to act
as a synchronized shared memory for cooperating applications.</p>

<!-- more -->


<h3>Complex Datatypes</h3>

<p>Redis values can have structure, and specific commands manipulate
these values in appropriate ways. Redis supports
<a href="http://redis.io/commands/#string">strings</a>, which can also behave
as numbers if they have the right format,
<a href="http://redis.io/commands#list">lists</a> which can also be seen as
queues, and support blocking reads,
<a href="http://redis.io/commands#set">sets</a>,
<a href="http://redis.io/commands#hash">hashes</a> (that is, dictionaries), and
<a href="http://redis.io/commands#sorted_set">sorted sets</a>.</p>

<h3>Transactions</h3>

<p>All Redis commands are atomic, and it is possible to group a sequence
of commands into a transaction for an all or nothing execution with
the command <a href="http://redis.io/commands/multi"><code>MULTI</code></a>. But a
Redis transaction is not similar to a transaction in relational
databases: it just queues all the commands and executes them when it
receives the <a href="http://redis.io/commands/exec"><code>EXEC</code></a> command. This
means it is not possible to read any data while in a transaction.</p>

<h3>Expiry</h3>

<p>Perhaps nothing labels Redis as a datastore for transient data more
than expiry: keys can be marked for expiration (either relative from
the current time, or absolute).</p>

<h3>Messaging</h3>

<p>Redis also supports messaging but this is a topic for
Day 2.</p>

<p>This
<a href="http://blog.mjrusso.com/2010/10/17/redis-from-the-ground-up.html">post</a>
has a more detailed but still balanced coverage of Redis.</p>

<h2>Exercises</h2>

<h3>Redis command documentation</h3>

<p>The <a href="http://redis.io/commands">documentation</a> is well done and easy to
navigate. Of all the databases I have seen so far, this is probably
the base
(<a href="http://www.postgresql.org/docs/current/static/index.html">PostgreSQL</a>
being a strong second).</p>

<h3>Create a Redis client</h3>

<p>I&#8217;m using Java and the <a href="https://github.com/xetorthio/jedis">Jedis</a>
client library.</p>

<p>The code is simple enough:</p>

<figure class='code'><figcaption><span>simple redis client (RedisFirst.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/first/RedisFirst.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Transaction</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisFirst</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// connect</span>
</span><span class='line'>      <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// set the key first to 5</span>
</span><span class='line'>      <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">,</span> <span class="s">&quot;5&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// start a transaction</span>
</span><span class='line'>      <span class="n">Transaction</span> <span class="n">trans</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">multi</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// increase by 4</span>
</span><span class='line'>      <span class="n">trans</span><span class="o">.</span><span class="na">incrBy</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>      <span class="n">trans</span><span class="o">.</span><span class="na">exec</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// retrieve the value</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Value is now: &quot;</span> <span class="o">+</span> <span class="n">jedis</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>pom.xml</code> file:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/first/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>redis-first<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create a pair of Redis clients</h3>

<p>This one is simple as well, but having a reader and a writer allowed
me to try one writer and two readers.</p>

<p>First the writer program:</p>

<figure class='code'><figcaption><span>Redis Push (RedisPush.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/push/RedisPush.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisPush</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">jedis</span><span class="o">.</span><span class="na">lpush</span><span class="o">(</span><span class="s">&quot;msg:queue&quot;</span><span class="o">,</span> <span class="s">&quot;A new message&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Message inserted&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>poml.xml</code> is a bit more complex, as it creates a self-contained
jar with <code>MANIFEST.MF</code> (so I can run it from the command line easily):</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/push/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>redis-push<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;descriptorRefs&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class="nt">&lt;/descriptorRef&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/descriptorRefs&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;mainClass&gt;</span>jp.wakatta.RedisPush<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;id&gt;</span>make-assembly<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;goal&gt;</span>attached<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reader program:</p>

<figure class='code'><figcaption><span>Redis Pop (RedisPop.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/pop/RedisPop.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisPop</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">again</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">again</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Waiting for messages&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">msgs</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">blpop</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span> <span class="s">&quot;msg:queue&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Messages received:&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">msg:</span> <span class="n">msgs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;finish&quot;</span><span class="o">))</span>
</span><span class='line'>                  <span class="n">again</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;No more messages&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>with its <code>pom.xml</code>:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/pop/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>redis-pop<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;descriptorRefs&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class="nt">&lt;/descriptorRef&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/descriptorRefs&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;mainClass&gt;</span>jp.wakatta.RedisPop<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;id&gt;</span>make-assembly<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;goal&gt;</span>attached<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>blpop</code> command can block on several lists, so when it receives
something it is always at least a pair: the list key, and the value.</p>

<p>Now, I can open three terminals to test the code: two with readers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar target/redis-pop-0.0.1-SNAPSHOT-jar-with-dependencies.jar</span></code></pre></td></tr></table></div></figure>


<p>and one with the writer (which must be started last):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar target/redis-push-0.0.1-SNAPSHOT-jar-with-dependencies.jar</span></code></pre></td></tr></table></div></figure>


<p>The writer will simply state</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Message inserted</span></code></pre></td></tr></table></div></figure>


<p>One of the readers will get the message:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Waiting for messages
</span><span class='line'>Messages received:
</span><span class='line'>msg:queue
</span><span class='line'>A new message
</span><span class='line'>Waiting for messages</span></code></pre></td></tr></table></div></figure>


<p>but the other one will just keep waiting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Waiting for messages</span></code></pre></td></tr></table></div></figure>


<p>So Redis blocking queues can only server one blocking reader at a time
(as it should).</p>

<p>The reader programs can be stopped with <code>Ctrl-c</code>, or by pushing
<code>finish</code> into <code>msg:queue</code> from a Redis client (twice, once for each
client):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redis 127.0.0.1:6379&gt; lpush "msg:queue" "finish"
</span><span class='line'>(integer) 1
</span><span class='line'>redis 127.0.0.1:6379&gt; lpush "msg:queue" "finish"
</span><span class='line'>(integer) 1</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Repertoire Method]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-repertoire-method/"/>
    <updated>2012-01-14T13:33:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-repertoire-method</id>
    <content type="html"><![CDATA[<p>The repertoire method is never really explained in the book, or
anywhere else I could find on the Internet. There are a couple of
posts on this subject, so I though I should add mine.</p>

<p>The repertoire method is really a tool to help with the intuitive step
of figuring out a closed formula for a recurrence equation. It does so
by breaking the original problem into smaller parts, with the hope
they might be easier to solve.</p>

<!-- more -->


<h3>Why it works</h3>

<p>Let&#8217;s assume we have a system of recurrence equations with parameters,
so that the unknown function can be expressed as a linear combination
of other (unknown) functions where the coefficients are the parameters:</p>

<div markdown="0">
\begin{align}
g(1) &amp; = b(0, \alpha_1, \cdots, \alpha_m)&#92;&#92;
g(n) &amp; = r_n(g_1, \cdots, g_{n-1}, \alpha_1, \cdots, \alpha_m)&#92;&#92;
&amp; = \sum_{i=1}^m A_i(n)\alpha_i,
\end{align}
</div>


<p>We can consider $g$ as a specific point in a $m$-dimensional function
space (determined by both the recurrence equations, and the
parameters), and because $g$ is a linear combination, we can try to
find $m$ base functions (hopefully known or easy to compute)
$f_k(n) = \sum_{i=1}^m A_i(n)\alpha_{i_k}$ with $1 \le k \le m$, expressed in
terms of $m$ linearly independent vectors
$(\alpha_{1_k},\cdots,\alpha_{m_k})$.</p>

<p>In other words, if we can find $m$ linearly independent parameter
vectors such that, for each, we have a known solution $f_k(n)$, then
we can express the function $g$ as a linear combination of $f_k(n)$
for any parameters (because the $m$ $f_k(n)$ form a base for the
$m$-dimensional function space defined by the recurrence equations).</p>

<h3>How it works</h3>

<p>First, we need to check that the recurrence equations accept a
solution expressed as</p>

<div markdown="0">
\begin{align}
g(n) &amp; = \sum_{i=1}^m A_i(n)\alpha_i
\end{align}
</div>


<p>It is enough to plug this definition into the recurrence equations,
and make sure the different parameters always remain in different
terms.</p>

<p>Then we can either solve $f(n) = \sum_{i=1}^m A_i(n)\alpha_i$ for
known $f(n)$, or for known $\alpha_i$
parameters, as long as we end up with $m$ linearly independent
parameter vectors (or, as it is equivalent, $m$ linearly independent
known functions for specific parameters).</p>

<p>It is important to keep in mind that a solution can be searched from
both direction: either set a function and try to solve for the
parameters, or set the parameters and solve for the function.</p>

<h3>Homework exercise</h3>

<p>Given</p>

<div markdown="0">
\begin{align}
g(1) &amp; = \alpha&#92;&#92;
g(2n+j) &amp; = 3g(n) + \gamma n + \beta_j&amp;&amp;\text{for \(j=0, 1\) and \(n \gt 1 \)}&#92;&#92;
\end{align}
</div>


<p>We need to check that $g$ can be written as</p>

<div markdown="0">
\begin{align}
g(n) &amp; = \alpha A(n) + \beta_0 B_0(n) + \beta_1 B_1(n) + \gamma C(n)&#92;&#92;
\end{align}
</div>


<p>The base case is trivial. The recurrence case is</p>

<div markdown="0">
\begin{align}
g(2n) &amp; = 3g(n) + \gamma n + \beta_0&#92;&#92;
&amp; = 3(\alpha A(n) +  \beta_0 B_0(n) + \beta_1 B_1(n) + \gamma C(n)) + \gamma n \beta_0&#92;&#92;
&amp; = \alpha 3A(n) + \beta_0 (3 B_0(n) + 1) + \beta_1 3B_1(n) + \gamma (3C(n) + n)&#92;&#92;
g(2n+1) &amp; = 3g(n) + \gamma n + \beta_1&#92;&#92;
&amp; = 3(\alpha A(n) +  \beta_0 B_0(n) + \beta_1 B_1(n) + \gamma C(n)) + + \gamma n\beta_1&#92;&#92;
&amp; = \alpha 3A(n) + \beta_0 3 B_0(n)+ \beta_1 (3B_1(n) + 1) + \gamma (3C(n) + n)&#92;&#92;
\end{align}
</div>


<p>so $g$ can be expressed as a linear combination of other functions,
with the parameters as the coefficients.</p>

<p>Now, when I tried to solve this problem, I didn&#8217;t know I could set the
parameters to values that would lead to an easy solution ($\gamma = 0$
turns the problem into an easy to solve generalised radix-based
Josephus problem); instead I wasted a lot of time trying to find known
functions and solve for the parameters, which is why I have four steps
below instead of just two as in the book.</p>

<h4>$g(n) = n$</h4>

<p>As the book suggests, I tried to solve for $g(n) = n$:</p>

<div markdown="0">
\begin{align}
1 = g(1) &amp; = \alpha&amp;&amp;\alpha = 1&#92;&#92;
2n = g(2n) &amp; = 3g(n) + \gamma n + \beta_0&#92;&#92;
&amp; = 3n + \gamma n + \beta_0&amp;&amp;\gamma = -1, \beta_0 = 0&#92;&#92;
2n+1 = g(2n+1) &amp; = 3g(n) + \gamma n + \beta_1&#92;&#92;
&amp; = 3n - n + \beta_1&amp;&amp; \beta_1 = 1&#92;&#92;
\end{align}
</div>


<h4>$g(2^m+l) = 3^m$</h4>

<p>As the recurrence equation looks like the generalised radix-based
Josephus equation, I tried to solve for $g(2^m+1) = 3^m$:</p>

<div markdown="0">
\begin{align}
1 = g(1) &amp; = \alpha&amp;&amp;\alpha = 1&#92;&#92;
3^m = g(2^m+2l) &amp; = 3g(2^{m-1}+l) + \gamma (2^{m-1} + l) + \beta_0&#92;&#92;
&amp; = 3\cdot 3^{m-1} + \gamma (2^{m-1} + l) + \beta_0&amp;&amp; \beta_0, \gamma = 0&#92;&#92;
3^m = g(2^m+2l+1) &amp; = 3g(2^{m^1}+l) + \gamma (2^{m-1} + l) + \beta_1&#92;&#92;
&amp; = 3\cdot 3^{m-1}&amp;&amp;\beta_1 = 0&#92;&#92;
\end{align}
</div>


<h4>$g(n) = 1$</h4>

<p>I tried to solve for $g(n) = 1$, as it seemed useful to solve for a
constant (no linear combination of linearly independent non-constant
functions can produce a constant function).</p>

<div markdown="0">
\begin{align}
1 = g(1) &amp; = \alpha&amp;&amp; \alpha = 1&#92;&#92;
1 = g(2n+j) &amp; = 3g(n) + \gamma n + \beta_j&#92;&#92;
&amp; = 3 + \gamma n + \beta_j&amp;&amp; \gamma = 0, \beta_j = -2&#92;&#92;
\end{align}
</div>


<h4>$\alpha, \beta_1 = 1, \beta_0,  \gamma = 0$</h4>

<p>This is the step that took me the longest, and when I finally
understood I could fix the parameters, I was able to use the
radix-based Josephus solution.</p>

<p>The recurrence equations</p>

<div markdown="0">
\begin{align}
g(1) &amp; = 1&#92;&#92;
g(2n) &amp; = 3g(n)&#92;&#92;
g(2n+1) &amp; = 3g(n) + 1&#92;&#92;
\end{align}
</div>


<p>have as solution $g(2^m + (b_m\cdots b_0)) = 3^m + (b_m\cdots b_0)_3$.</p>

<h4>Solving for $g(n)$</h4>

<p>We have the equations</p>

<div markdown="0">
\begin{align}
A(n) - C(n) &amp; = n&#92;&#92;
A(2^m + l) &amp; = 3^m&#92;&#92;
A(n) -2(B_0(n) + B_1(n)) &amp; = 1&#92;&#92;
B_1(2^m+l) &amp; = h_3(l)&amp;&amp;\text{where \(h_3(b_m\cdots b_0) = (b_m\cdots b_0)_3\)}&#92;&#92;
\end{align}
</div>


<p>We have two functions already defined ($A(n)$ and $B_1(n)$), and the
other two equations give us the remaining function.</p>

<p>Now we can solve for $g(n)$:</p>

<div markdown="0">
\begin{align}
g(2^m+l) = \alpha 3^m &amp; + \beta_0 (\frac{3^m - 1}{2} - h_3(l))&#92;&#92;
&amp; + \beta_1 h_3(l) &#92;&#92;
&amp;+ \gamma (3^m + h_3(l) - 2^m - l)
\end{align}
</div>


<p>The $\gamma$ term is really $h_3(n) - n$.</p>

<p>The $\beta_0$ term is the same as $h_3(2^m-1-l)$, as can be seen by
observing that in base $3$, $3^m$ is $1$ followed by $m$ zeroes, so
$3^m-1$ is $m$ twos, and $\frac{3^m-1}{2}$ is $m$ ones, in other words
the same representation as the binary representation of $2^m-1$.</p>

<p>Now, the binary representation of $l$ is the same as the
representation in base $3$ of $h_3(l)$ (by definition of $h_3$), so
the binary representation of $2^m-1-l$ is the same as the
representation in base $3$ of $\frac{3^m-1}{2} - h_3(l)$.</p>

<p>With these two observations, it is possible to rewrite $g$ as</p>

<div markdown="0">
\begin{align}
g(1b_m\cdots b_0) &amp; = (\alpha\beta_{b_m}\cdots\beta_{b_0})_3 + \gamma ((1b_m\cdots b_0)_3 - (1b_m\cdots b_0)_2)
\end{align}
</div>


<p>which is the book solution.</p>

<h3>Faster solution</h3>

<p>It is enough to solve for
$\alpha, \beta_0, \beta_1 \ne 0, \gamma = 0$,
and to find the parameters for $g(n) = n$. The first gives $A$,
$B_0$ and $B_1$ directly by the generalised radix-based Josephus
solution, and the second one adds a constraint to solve for $C$ as well.</p>

<h3>Wrapping up</h3>

<p>As can be seen above, approaching the problem from both directions
(solving for known functions and solving for known parameters) can
result in time saved, and simplified expression of the solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Homework Exercises Part 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-chapter-1-homework-exercises-part-2/"/>
    <updated>2012-01-14T12:14:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-chapter-1-homework-exercises-part-2</id>
    <content type="html"><![CDATA[<p>I finally finished the homework exercises.</p>

<!-- more -->


<h2>Homework Exercises Part 2</h2>

<h3>Generalized Tower of Hanoi</h3>

<p>To solve this, I first observed that for $n=1$, we need $m_1$ moves,
and for $n \gt 1$, we need
$A(m_1, \cdots, m_{n-1}) + m_n + A(m_1, \cdots, m_{n-1})$ or
$2A(m_1, \cdots, m_{n-1}) + m_n$ moves.</p>

<p>This leads to the solution,</p>

<div markdown="0">
\begin{align}
A(m_1, \cdots, m_n) &amp;= \sum_{i=1}^n m_i 2^{n-i}&#92;&#92;
\end{align}
</div>


<p>which is trivially shown by induction. The base case:</p>

<div markdown="0">
\begin{align}
A(m_1) &amp; = \sum_{i=1}^1 m_i 2^{1-i}&#92;&#92;
&amp; = m_1 2^0&#92;&#92;
&amp; = m_1
\end{align}
</div>


<p>And for larger $n$, assuming
$A(m_1, \cdots, m_n) = \sum_{i=1}^n m_i 2^{n-i}$,</p>

<div markdown="0">
\begin{align}
A(m_1, \cdots, m_{n+1}) &amp; = 2A(m_1, \cdots, m_n) +
m_{n+1}&amp;&amp;\text{by definition}&#92;&#92;
&amp; = 2\sum_{i=1}^n m_i 2^{n-i} + m_{n+1}&amp;&amp;\text{induction hypothesis}&#92;&#92;
&amp; = \sum_{i=1}^{n} m_i 2^{n+1-i} + m_{n+1} 2^{0}&#92;&#92;
&amp; = \sum_{i=1}^{n+1} m_i 2^{n+1-i}&#92;&#92;
\end{align}
</div>


<h3>Zig-zag lines</h3>

<p>A geometric problem, but very similar to the previous intersecting
lines. A zig-zag is made of 3 segments, so a pair of zig-zag lines can
intersect at 9 different points. The first zig-zag line defines two
regions; each new zig-zag adds a new region, plus one more for each
intersection point.</p>

<p>This gives the following recurrence equations:</p>

<div markdown="0">
\begin{align}
ZZ_1 &amp; = 2&#92;&#92;
ZZ_n &amp; = ZZ_{n-1} + 9(n-1) + 1&#92;&#92;
\end{align}
</div>


<p>Using the linearity of the recurrence equation, it is easy to see that</p>

<div markdown="0">
\begin{align}
ZZ_n &amp; = ZZ_1 + 9S_{n-1} + (n-1)
\end{align}
</div>


<p>Here I used the linearity to compute solutions to both
$ZZ_n = ZZ_{n-1} + 9(n-1)$ and $ZZ_n = ZZ_{n-1} + 1$, which are
equally trivial. Then I combined the solutions into one.</p>

<p>I use (again) induction to confirm the solution. The base case is
$ZZ_1 = ZZ_1 + 9S_0 + 0$. And for other $n$, assuming
$ZZ_n = ZZ_1 + 9S_{n-1} + (n-1)$</p>

<div markdown="0">
\begin{align}
ZZ_{n+1} &amp; = ZZ_{n} + 9n + 1&amp;&amp;\text{by definition}&#92;&#92;
&amp; = ZZ_1 + 9S_{n-1} + (n-1) + 9n + 1&amp;&amp;\text{induction hypothesis}&#92;&#92;
&amp; = ZZ_1 + 9(S_{n-1} + n) + (n-1+1)&#92;&#92;
&amp; = ZZ_1 + 9S_n + n
\end{align}
</div>


<p>The formula can also be written as</p>

<div markdown="0">
\begin{align}
ZZ_n &amp; = \frac{9n^2-7n+2}{2}
\end{align}
</div>


<h3>Planes cutting cheese</h3>

<p>Again, a geometric problem. This one gave me more trouble. It
took me a while before finally seeing that a new plane intersection
with the previous ones will be a set of intersecting lines which
defines the regions the new plan will divide in two.</p>

<p>The number of regions formed by intersecting lines was solved in the
book, and defined as $L_n = S_n + 1$</p>

<p>So a plane cutting $n$ existing planes will define
$P_{n+1} = P_n + L_n$
new regions. This recurrence gives $P_5 = 26$ regions.</p>

<p>The book did not expect a closed formula for this exercise, as the
necessary techniques are only covered in chapter 5.</p>

<h3>Josephus co-conspirator</h3>

<p>The recurrence equation for $I(n)$ follow the structure of $J(n)$, but
with different base cases:</p>

<div markdown="0">
\begin{align}
I(2) &amp; = 2&amp;&amp;\text{\(I(1)\) is not defined}&#92;&#92;
I(2n) &amp; = 2I(n) - 1&#92;&#92;
I(2n+1) &amp; = 2I(n) + 1
\end{align}
</div>


<p>Here I generated the first few values to get inspired. I noticed that
$I(n)$ had increasing odd values for batches that were longer than for
$J(n)$: $3, 6, 12, 24, \cdots$.</p>

<p>These numbers are from the series $3\cdot 2^m$, so using the same
&#8220;intuitive&#8221; step as in the book, I tried to show that
$I(3\cdot 2^m + l) = 2l + 1$ with $0 \le l \lt 3\cdot 2^m$
(the formula does not work for $I(2)$, which has to be defined separately).</p>

<p>By induction on $m$: the base case is $I(3) = I(3\cdot 2^0 + l) = 1$.</p>

<p>Assuming $I(3\cdot 2^m + l) = 2l+1$, we have</p>

<div markdown="0">
\begin{align}
I(3\cdot2^{m+1} + 2l) &amp; = 2I(3\cdot 2^m + l) -1&amp;&amp;\text{by definition}&#92;&#92;
&amp;= 2(2l+1) -1&amp;&amp;\text{induction hypothesis}&#92;&#92;
&amp;= 4l+2-1&#92;&#92;
&amp;= 2(2l)+1&#92;&#92;
I(3\cdot 2^{m+1} + (2l+ 1)) &amp; = 2I(3\cdot 2^m + l) + 1&amp;&amp;\text{by definition}&#92;&#92;
&amp; = 2(2l+1) + 1&amp;&amp;\text{induction hypothesis}&#92;&#92;
\end{align}
</div>


<p>The book solution is defined in terms of $2^m+2^{m-1}+k$, which is
same:</p>

<div markdown="0">
\begin{align}
2^m+2^{m-1}+k &amp; = 2\cdot 2^{m-1} + 2^{m-1} + k&#92;&#92;
&amp; = 3\cdot 2^{m-1} + k
\end{align}
</div>


<p>with $1 \le m$, while I have $0 \le m$.</p>

<h3>Repertoire method</h3>

<p>I put the repertoire method in its own
<a href="http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-repertoire-method/">post</a> as it
was both the most difficult exercise and the one where I learned the most.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR3 Maven Plugin - Eclipse setup]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/14/antlr3-maven-plugin-eclipse-setup/"/>
    <updated>2012-01-14T11:25:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/14/antlr3-maven-plugin-eclipse-setup</id>
    <content type="html"><![CDATA[<p>Setting up Eclipse and Maven is getting easier, but some cases
require a bit more search and work. As I was experimenting with the
<a href="http://www.antlr.org/">ANTLR</a>
<a href="http://antlr.org/antlr3-maven-plugin/index.html">Maven plugin</a>, I
found the default behaviour to be pretty much useless: Eclipse knew
nothing about the grammar files or the generated classes, so the rest
would not compile; even after adding the relevant source folders I
still had to run explicit Maven commands after modifying the grammar
files and refresh the workspace&#8230;</p>

<p>I eventually found a better way, which I document here.</p>

<!-- more -->


<p>There is an
<a href="http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+with+Maven">antlr3-maven-archetype</a>,
which I started from. However, for the purpose of clarity, I will
start from scratch here.</p>

<h3>Installing m2e</h3>

<p>The Maven plugin for Eclipse is called m2e (m2eclipse is an obsolete
version), and is available in the default Eclipse
Marketplace. However, the current version (1.0 at the time of writing)
does not handle the life cycle of some common Maven plugins very
well. In particular, it does not know where to put the generation of
classes from grammar files into the Eclipse life cycle.</p>

<p>The 1.1 milestone does it much better, so I suggest to install it. The
location is
<a href="http://download.eclipse.org/technology/m2e/milestones/1.1">http://download.eclipse.org/technology/m2e/milestones/1.1</a>,
which can be used for the &#8220;Install New Software&#8221; function.</p>

<h3>Creating a project with ANTLR</h3>

<p>Create a new Maven Project, and skip the archetype selection (i.e. use
simple project). As I said above, I could use the ANTLR v3 archetype,
but chose not to.</p>

<h4>Optional: set the target option</h4>

<p>By default Maven uses compiler source and target version 1.5. On Mac
OS X Lion, there is no JDK 1.5 (only 1.6), so I always update pom.xml
to set the <code>source</code> and <code>target</code> configuration options to something
meaningful:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>  <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Add ANTLR plugin</h4>

<p>I create a property for the ANTLR version, as I will need for both the
ANTLR plugin and the jar:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>   <span class="nt">&lt;antlr.version&gt;</span>3.4<span class="nt">&lt;/antlr.version&gt;</span>
</span><span class='line'> <span class="nt">&lt;/properties&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I add the plugin declaration</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.antlr<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>antlr3-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>${antlr.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>        <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;goal&gt;</span>antlr<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally I add the dependency to the ANTLR runtime:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.antlr<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>antlr-runtime<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>${antlr.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this stage, Eclipse is upset because the lifecycle configuration
<code>org.antlr:antlr3-maven-plugin:3.4:antlr</code> is not covered. But as we&#8217;re
using m2e 1.1, we can look for the appropriate connector in the m2e
Marketplace. There should be only one: antlr by Sonatype, which should
be installed.</p>

<h4>Packaging the ANTLR runtime with the code</h4>

<p>This is something that the original ANTLR v3 Maven archetype suggests:
to include the ANTLR runtime into the generated jar.</p>

<p>Using the
<a href="http://maven.apache.org/plugins/maven-assembly-plugin/">Maven Assembly Plugin</a>,
it is possible to declare what goes into the generated jar. As it is
self-contained, it is also possible to declare a main class (not done
below as I did not have a main class yet):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;descriptorRefs&gt;</span>
</span><span class='line'>      <span class="nt">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class="nt">&lt;/descriptorRef&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/descriptorRefs&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>make-assembly<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>      <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;goal&gt;</span>attached<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Tuning the Eclipse project</h4>

<p>Now, the ANTLR plugin can process code under
<code>src/main/antlr3</code>, so we can create this folder, and add it as source
folder in the Eclipse project properties. Creating or updating a
grammar file in Eclipse will also create or update</p>

<p>The ANTLR connector also added the <code>target/generated-sources/antlr3</code>
directory as another source folder, but it will disappear when
executing the Maven/Update Project Configuration action, so it is best
to add it manually. You can then change the properties for this folder
to check &#8216;Locked&#8217; (to avoid accidental edition) and &#8216;Derived&#8217; (to hide
the content from the &#8220;Open Resource&#8221; command).</p>

<p>Note that the plugin is unable to follow the <code>@header</code> directive
properly (that is, it will copy the directory structure of the grammar
file, instead of following the directory structure implied by the
<code>@header</code> directive), so the grammar files must use the same directory
structure as the Java package intended for the generated classes. In
other words, if you want your generated classes to have the package
<code>org.something</code>, you both need to put the grammar files under
<code>src/main/antlr3/org/something</code>, and use the <code>@header package</code>
directive to set the package of the generated classes.</p>

<p>It is also unable to handle grammar files directly under
<code>src/main/antlr3</code>. If you try, it will generate this error: &#8220;error(7):
cannot find or open file: null/NestedNameList.g&#8221; when running the
<code>process-sources</code> goal. Running this goal is also the only way to get
the error message if something is wrong with the grammar file (unless
you install an ANTLR Eclipse plugin, which I didn&#8217;t try).</p>

<p>Small gotcha: I found that with the current version of plugins,
connectors and so on, Eclipse does not detect changes to generated
classes directly: it is always one change behind, especially when
there are errors.</p>

<p>If you made a mistake in the grammar file that
causes the generated classes not to compile anymore, you would have to
change the grammar file twice for the error markers to go away; the
first time, Eclipse will correctly report that the errors in the
classes are gone, but the project error markers will stay; the second
change (even if you changed nothing, just add a character, delete it,
and save), and the error markers will finally disappear.</p>

<p>This is more annoying than really a serious problem, and in any case
the files are always properly generated, so if there is no error, all files
are kept up-to-date.</p>

<h5>Automating the above steps</h5>

<p>If you include the <code>build-helper-maven-plugin</code> plugin in your
<code>pom.xml</code>, then it is possible to automatically add the relevant
source folders to Eclipse:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>build-helper-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.7<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>add-antlr-source<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;phase&gt;</span>generate-sources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>      <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;goal&gt;</span>add-source<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>      <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;sources&gt;</span>
</span><span class='line'>          <span class="nt">&lt;source&gt;</span>src/main/antlr3<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>          <span class="nt">&lt;source&gt;</span>target/generated-sources/antlr3<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/sources&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use it, another connector is necessary, but it is found directly in
the m2e Marketplace.</p>

<p>Once in the <code>pom.xml</code>, just importing the project into Eclipse will
create the relevant source folders automatically. However the &#8216;Locked&#8217;
and &#8216;Derived&#8217; flags on the <code>target/generated-sources/antlr3</code> folder
are stored in the workspace <code>.metadata</code>, so these flags have to be set
manually for each workspace.</p>

<h3>The easier way</h3>

<p>If all the above seems tedious, it is because it is. The
<code>antlr3-maven-archetype</code> will generate much of it, but not for
instance the additional source folders.</p>

<p>I have the kind of laziness that causes me to spend hours trying to
save a few minutes later on, so I created my own archetype, a trivial
little thing whose only purpose is to get the basic setup in place
quickly.</p>

<p>It does not really do much, and perhaps should best seen as a
template, which is why the best use is to
<a href="https://github.com/fdumontmd/antlr3-simple-archetype">download</a> it,
adjust it to your own need, then install it locally.</p>

<p>Hope this helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Homework Exercises Part 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/09/concrete-mathematics-chapter-1-homework-exercises-part-1/"/>
    <updated>2012-01-09T20:23:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/09/concrete-mathematics-chapter-1-homework-exercises-part-1</id>
    <content type="html"><![CDATA[<p>I am working my way through the homework exercises, and so far I have
had more success than with the warmups. Here&#8217;s what I have solved so far.</p>

<!--more-->


<h2>Homework Exercises</h2>

<h3>Basic recurrence</h3>

<p>This one was fairly simple, so simple that I wasted one hour trying to
improve the solution.</p>

<p>Just computing the first few terms of the sequence:</p>

<div markdown="0">
\begin{align}
Q_0 &amp; = \alpha &#92;&#92;
Q_1 &amp; = \beta &#92;&#92;
Q_2 &amp; = \frac{1+\beta}{\alpha}&#92;&#92;
Q_3 &amp; = \frac{1+\alpha+\beta}{\alpha\beta}&#92;&#92;
Q_4 &amp; = \frac{\alpha\left( 1 + \alpha + \alpha\beta + \beta\right)}{\alpha\beta(1+\beta)}&#92;&#92;
&amp; = \frac{(1+\alpha)(1+\beta)}{\beta(1+\beta)}&#92;&#92;
&amp; = \frac{1+\alpha}{\beta}&#92;&#92;
Q_5 &amp; = \frac{\alpha\beta\left(1+\alpha+\beta \right)}{\beta \left( 1+\alpha+\beta \right)}&#92;&#92;
&amp; = \alpha&#92;&#92;
Q_6 &amp; = \frac{\beta\left( 1+\alpha \right)}{1+\alpha}&#92;&#92;
&amp; = \beta
\end{align}
</div>


<p>So the sequence is cyclic. I tried to find a closed formula, but the
book does not go that far, and it is unlikely to be possible.</p>

<h3>Product of averages</h3>

<h4>$P(n)$ implies $P(n-1)$</h4>

<p>First of all, I checked that nothing fishy was going on with the
selection of a particular $x_n$, but if $P(n)$ is true, then it is
true for every $x_1\cdots x_n$ set, and in particular for one with a
specific $x_n$.</p>

<p>So nothing fishy is going on.</p>

<p>Assuming the given value for $x_n$, we have</p>

<div markdown="0">
\begin{align}
\left( \frac{x_1 + \cdots + x_n}{n} \right)^n &amp; = \left( \frac{x_1 + \cdots + x_{n-1} + \frac{x_1+\cdots+x_{n-1}}{n-1}}{n}\right)^n&#92;&#92;
&amp; = \left( \frac{(n-1)x_1 + \cdots + (n-1)x_{n-1}+x_1+\cdots + x_{n-1}}{n(n-1)}\right)^n&#92;&#92;
&amp; = \left( \frac{n(x_1+\cdots+x_{n-1})}{n(n-1)}\right)^n&#92;&#92;
&amp; = \left( \frac{x_1+\cdots+x_{n-1}}{n-1}\right)^n&#92;&#92;
&amp; = x_n^n
\end{align}
</div>


<p>So, assuming $P(n)$, we have</p>

<div markdown="0">
\begin{align}
x_1\cdots x_{n-1}x_n &amp;\le x_n^n&#92;&#92;
x_1\cdots x_{n-1} &amp;\le x_n^{n-1}&#92;&#92;
x_1\cdots x_{n-1} &amp;\le \left( \frac{x_1+\cdots+x_{n-1}}{n-1}\right)^{n-1}&amp;&amp;\text{i.e. $P(n-1)$}
\end{align}
</div>


<h4>$P(n)$ and $P(2)$ implies $P(2n)$</h4>

<div markdown="0">
\begin{align}
x_1\cdots x_{2n} &amp; = x_1\cdots x_{n}x_{n+1}\cdots x_{2n}&amp;&amp;\text{associativity}&#92;&#92;
&amp; \le \left(\frac{x_1+\cdots+x_n}{n}\right)^n \left(\frac{x_{n+1}+\cdots+x_{2n}}{n}\right)^n&amp;&amp;\text{applying $P(n)$ twice}&#92;&#92;
&amp; = \left( \frac{x_1+\cdots+x_n}{n}\frac{x_{n+1}+\cdots+x_{2n}}{n}\right)^n&#92;&#92;
&amp; \le \left( \left(\frac{\frac{x_1+\cdots+x_n}{n} + \frac{x_{n+1}+\cdots+x_{2n}}{n}}{2} \right)^2\right)^n&amp;&amp;\text{applying $P(2)$}&#92;&#92;
&amp; = \left( \frac{x_1+\cdots+x_n+x_{n+1}+\cdots+x_{2n}}{2n}\right)^{2n}&amp;&amp;\text{i.e. $P(2n)$}&#92;&#92;
\end{align}
</div>


<h4>$P(n) \forall n \ge 1$</h4>

<p>The case for $P(1)$ is trivial, and $P(2)$ is already proven. We have
$P(n)$ implies $P(n-1)$ and $P(n)$ implies $P(2n)$.</p>

<p>One first approach is to use the basic induction step: we have $P(1)$,
$P(2)$, and we need $P(n) \implies P(n+1)$.</p>

<p>But $P(n) \implies P(2n) \implies P(2n-1) \implies \cdots \implies
P(2n-(n-1))$. The last one is $P(n1+)$, so the induction step holds.</p>

<p>Alternatively, we can show that to prove $P$ for a given $n$, we need
to prove $P$ for a smaller value. As naturals have a minimum, we must
eventually rely on $P(2)$, which would prove the whole chain.</p>

<p>To see this, for $n \ge 3$, if $n = 2m$, we need to prove $P(m)$; if
$n = 2m+1$, we need to prove $P(2m+2)$, which is implied by $P(m+1)$.</p>

<p>So, $\forall n \ge 3, \exists m \lt n \mid P(m) \implies P(n)$. That
with the base cases is enough to establish $P(n) \forall n$.</p>

<h3>Clockwise Tower of Hanoi</h3>

<p>First, both $Q_0$ and $R_0$ are trivial.</p>

<p>Then, to move $n$ discs from $A$ to $B$, you need to move $n-1$ discs
from $A$ to $C$ (counter-clockwise), then move one disc from $A$ to
$B$, then move the $n-1$ discs from $C$ to $B$ (again,
counter-clockwise).</p>

<p>This means $Q_n = R_{n-1} + 1 + R_{n-1} = 2R_{n-1} + 1$.</p>

<p>The case for $R_n$ is a bit more complex. My first (flawed) attempt
was to observe that to move $n$ discs from $B$ to $A$, you could move
them from $B$ to $C$, then $C$ to $A$. In other words,</p>

<div markdown="0">
\begin{align}
R_n &amp; \ge 2Q_n&#92;&#92;
&amp; = Q_n + 2R_{n-1} + 1&amp;&amp;\text{Replacing one \(Q_n\) by \(2R_{n-1}+1\)}&#92;&#92;
&amp; = Q_n + 4Q_{n-1} + 1&amp;&amp;\text{Replacing \(R_{n-1}\) by \(2Q_{n-1}\)}&#92;&#92;
\end{align}
</div>


<p>But the $4Q_{n-1}$ means moving the stack of $n-1$ discs $4$ times,
which is the same as moving it just one time (as $3$ times bring it
back to its original position).</p>

<p>So we&#8217;re left with just $Q_n + Q_{n-1} + 1$. But as I said, this
reasoning is flawed, as it mixes the count of moves with the effect of
moves (where $3$ moves are the same as $0$ move).</p>

<p>While it is possible to repair this reasoning by introducing special
operators that take two parameters (the number of discs, and the
number of steps), it is simpler to try and express $R_n$ strictly in
terms $n-1$ stacks and $1$ disc moves.</p>

<p>So, to move $n$ discs from $B$ to $A$, you need to move $n-1$ discs
from $B$ to $A$ (counter-clockwise), then one disc from $B$ to $C$
(clockwise), then the $n-1$ discs from $A$ to $B$ (clockwise), then
one disc from $C$ to $A$ (clockwise), then finally the $n-1$ discs
from $B$ to $A$ (counter-clockwise).</p>

<p>Or,</p>

<div markdown="0">
\begin{align}
R_n &amp;= R_{n-1} + 1 + Q_{n-1} + 1 + R_{n-1}&#92;&#92;
&amp; = 2R_{n-} + 1 + Q_{n-1} + 1&#92;&#92;
&amp; = Q_n + Q_{n-1} + 1&amp;&amp;\text{definition of \(Q_n\)}&#92;&#92;
\end{align}
</div>


<p>As the recurrence is expressed (initially) only in terms of necessary
moves of strictly smaller stacks, there is no risk of hiding moves
that are equivalent to no moves (as in my first attempt), so the
equation is the minimum number of moves.</p>

<h3>Double Tower of Hanoi</h3>

<h4>Basic Problem</h4>

<p>First, notice we should keep each pair together, because otherwise
they would block larger discs from moving. So each pair of move should
be used to relocate a pair of identical discs to another peg. So we
should expect to need twice as many moves as the original tower.</p>

<p>More precisely, with $A(n)$ the number of moves required to solve a
$2n$ Double Tower of Hanoi, we have:</p>

<div markdown="0">
\begin{align}
(1) &amp; = 2&#92;&#92;
A(n) &amp; = A(n-1) + 2 + A(n-1)&#92;&#92;
&amp; = 2A(n-1) + 2&#92;&#92;
\end{align}
</div>


<p>Using $A(n) + 2= U(n)$, we get</p>

<div markdown="0">
\begin{align}
U(1) &amp; = 4&#92;&#92;
U(n) &amp; = 2U(n-1)&#92;&#92;
&amp; 2^{n+1}&#92;&#92;
A(n) &amp; = 2^{n+1} -2&#92;&#92;
     &amp; = 2(T_n)&#92;&#92;
\end{align}
</div>


<h4>Order Preserving</h4>

<p>If we consider all the $2n$ discs as different, then in $T_{2n}=2^{2n}-1$
moves, we can recreate the same order as the original.</p>

<p>Of course, we can do better. It is enough to move each pair an even
number of times: the first time will switch their order; the second
one will restore it, &#8230;</p>

<p>This is similar to the warmup problem where we cannot move any disc
directly between any two pegs, so using the same constraint to move
any pair would get us to the target order in less than $2\cdot 3^n-1$.</p>

<p>But there is still a better way.</p>

<p>A $2$ discs problem needs exactly $3$ moves.  And the $4$ discs
problem will require just $11$ moves, rather than the $18$ that the
above formula predicts.</p>

<p>A wild guess: the number of moves is $4(2^n-1)-1$.</p>

<p>In trying to solve (or even write) the recurrence equation, it is
important to keep in mind that several ways to move the discs, each
with its own count, will be used.</p>

<p>We know we need two pairs of moves to relocate the two bottom discs
while keeping the order (assuming there are other discs). In doing so,
we will move the next two discs an even number of times, requiring
another 2 times to keep their order. So as long as we make sure the
last operation has the right (even) number of moves, we do not need to
keep this constraint on the other operations.</p>

<p>To recap: we need to move the last pair of discs $2$ times. So we first move
the $n-1$ pairs to a peg, then move the last pair to the other peg,
then the $n-1$ pairs to the first peg, then the last pair to the last
peg. At this stage, the $n-1$ discs have move an even number of times,
so their in the right order, even if we used the non order preserving
solution that was computed above (requiring $2T_{n-1}$ moves).</p>

<p>At this stage, a bit of notation should clarify:</p>

<div markdown="0">
\begin{align}
B(1) &amp; = 3&#92;&#92;
B(n) &amp; = A(n-1) + 2 + A(n-1) + 2 + B(n-1)&#92;&#92;
&amp; = 2T_{n-1} + 2 + 2T_{n-1} + 2 + B(n-1)&#92;&#92;
&amp; = 4T_{n-1}+4+B(n-1)&#92;&#92;
\end{align}
</div>


<p>Trying to prove the guess above:</p>

<div markdown="0">
\begin{align}
B(1) &amp; = 4(2^1-1) - 1&#92;&#92;
&amp; = 3&#92;&#92;
B(n) &amp; = 4(2^{n-1} -1) + 4 + B(n-1)&#92;&#92;
&amp; = 4\cdot 2^{n-1} + 4(2^{n-1} - 1) -1&#92;&#92;
&amp; = 4\cdot 2^n -4 -1&#92;&#92;
&amp; = 4(2^n-1)-1
\end{align}
</div>


<p>So the guess was right. It can also be rewritten as</p>

<div markdown="0">
\begin{align}
4(2^n-1)-1 &amp = 4\cdot 2^n - 4 -1&#92;&#92;
&amp; = 2^{n+2} - 5&#92;&#92;
\end{align}
</div>


<p>which is the book solution.</p>

<p>This being a bonus exercise, I currently experience an intense, although
pointless, sense of pride and achievement.</p>

<p>No doubt the other exercises will cut me down to size.</p>
]]></content>
  </entry>
  
</feed>
