<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2011-12-04T20:19:16+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-2/"/>
    <updated>2011-12-03T14:54:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-2</id>
    <content type="html"><![CDATA[<p>Second day with PostgreSQL, this time to discuss advanced queries, stored procedures, and rewriting rules.</p>

<p>The relational model was designed to make it easy to extract meaningful information from the database (although here the operative word is meaningful rather than easy). Aggregations pretty much require a schema to return anything worth the effort (and if you don&#8217;t believe it, what exactly is the average value of 1, blue and 3?).</p>

<p>Stored procedures can help to move some business intelligence from the main application to the database. Whether it is a good idea is an open question (and I think the knee-jerk negative answer is too often guided by ignorance rather than experience), but the idea of having enough rules in the database that multiple applications can connect to it safely (or safely enough) is worth considering: it enables other applications, some of which might be incompatible with the main business application, to use the business data (many reporting and ETL solutions might fall into this category). The choice is between control and openness (and which one is correct depends on the situation).</p>

<p>Finally, rewriting rules is a less common feature of SQL databases, but essentially it allows the database designer to create updatable views, implement versioning on specific tables, and so on.</p>

<!--more-->


<p>I have a small peeve with the book so far: all too often the authors rely on implicit column ordering when manipulating data. I happen to have a different order for the columns of <code>events</code> (which was created as an exercise <a href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1/">yesterday</a>), so many <code>INSERT</code> examples no longer work.</p>

<p>But in general, it is good to specify the columns in an <code>INSERT</code>, as in:</p>

<figure class='code'><figcaption><span>INSERT with explicit columns  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Your Favorite Band&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-06 21:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-06 23:00&#39;</span><span class="p">,</span> <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Crystal Ballroom&#39;</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to create &#8216;My Place&#8217;:</p>

<figure class='code'><figcaption><span>INSERT My Place  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">countries</span> <span class="p">(</span><span class="n">country_code</span><span class="p">,</span> <span class="n">country_name</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;jp&#39;</span><span class="p">,</span> <span class="s1">&#39;Japan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">cities</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">postal_code</span><span class="p">,</span> <span class="n">country_code</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Shinjuku&#39;</span><span class="p">,</span> <span class="s1">&#39;160-0022&#39;</span><span class="p">,</span> <span class="s1">&#39;jp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">venues</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">type</span><span class="p">,</span> <span class="n">postal_code</span><span class="p">,</span> <span class="n">country_code</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;My Place&#39;</span><span class="p">,</span> <span class="s1">&#39;private&#39;</span><span class="p">,</span> <span class="s1">&#39;160-0022&#39;</span><span class="p">,</span> <span class="s1">&#39;jp&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, to add the new events:</p>

<figure class='code'><figcaption><span>INSERT new events  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Steven King&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 21:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 23:00:00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Powell&#39;&#39;s Books&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Dinner with Mom&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 18:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 20:30:00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;My Place&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Valentine&#39;&#39;s Day&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-14 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-14 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, there is never any ambiguity as to what is inserted.</p>

<h3>Window functions</h3>

<p>The book covers window functions, but in this first beta version of the book at least, the explanation is not very illuminating.</p>

<p>Basically, <a href="http://www.postgresql.org/docs/current/static/functions-window.html">window functions</a> are a generalization of aggregate functions. Aggregate functions operates on a range of rows selected by a <code>GROUP BY</code> clause. For each group, there will be only one row, where columns are either grouped by columns, or aggregates.</p>

<p>Window functions also operate on a range of rows, but there is one range for each row in the filtered table. The range can be created in a way similar to <code>GROUP BY</code> (using the <code>PARTITION OVER</code> clause), but can also be created by taking all the rows up to the current one, or 2 rows before, 2 rows after, and the current one, &#8230; Such a range is called a window. There are <a href="http://www.postgresql.org/docs/current/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS">many ways</a> to define them.</p>

<p>For instance, say we want to know, for each events, how many events have happened (including the current one), we can try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT title, starts, COUNT(*) OVER (ORDER BY starts) FROM events;
</span><span class='line'>       title        |       starts        | count 
</span><span class='line'>--------------------+---------------------+-------
</span><span class='line'> Your Favorite Band | 2012-02-06 21:00:00 |     1
</span><span class='line'> Valentine's Day    | 2012-02-14 00:00:00 |     2
</span><span class='line'> My Book Signing    | 2012-02-15 17:30:00 |     3
</span><span class='line'> Dinner with Mom    | 2012-02-26 18:00:00 |     4
</span><span class='line'> Steven King        | 2012-02-26 21:00:00 |     5
</span><span class='line'> April Fools Day    | 2012-04-01 00:00:00 |     6
</span><span class='line'> House Party        | 2012-05-03 23:00:00 |     7
</span><span class='line'> Christmas Day      | 2012-12-25 00:00:00 |     8
</span><span class='line'> Valentine's Day    | 2013-02-14 00:00:00 |     9
</span><span class='line'>(9 rows)</span></code></pre></td></tr></table></div></figure>


<p>The <code>OVER</code> does not specify a <code>PARTITION</code>, but an <code>ORDER</code>, which means that the <code>COUNT(*)</code> function operates on all the rows from first one to current one (ordered by the <code>starts</code> column). Actually, the <code>COUNT(*)</code> function is the same as the (proper) window function <code>RANK</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT title, starts, RANK() OVER (ORDER BY starts) FROM events;
</span><span class='line'>       title        |       starts        | rank 
</span><span class='line'>--------------------+---------------------+------
</span><span class='line'> Your Favorite Band | 2012-02-06 21:00:00 |    1
</span><span class='line'> Valentine's Day    | 2012-02-14 00:00:00 |    2
</span><span class='line'> My Book Signing    | 2012-02-15 17:30:00 |    3
</span><span class='line'> Dinner with Mom    | 2012-02-26 18:00:00 |    4
</span><span class='line'> Steven King        | 2012-02-26 21:00:00 |    5
</span><span class='line'> April Fools Day    | 2012-04-01 00:00:00 |    6
</span><span class='line'> House Party        | 2012-05-03 23:00:00 |    7
</span><span class='line'> Christmas Day      | 2012-12-25 00:00:00 |    8
</span><span class='line'> Valentine's Day    | 2013-02-14 00:00:00 |    9
</span><span class='line'>(9 rows)</span></code></pre></td></tr></table></div></figure>


<p>What about computing the order of each events, but by year? Nothing easier:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT title, starts, RANK() OVER (PARTITION BY extract(year from starts) ORDER BY starts) FROM events;
</span><span class='line'>       title        |       starts        | rank 
</span><span class='line'>--------------------+---------------------+------
</span><span class='line'> Your Favorite Band | 2012-02-06 21:00:00 |    1
</span><span class='line'> Valentine's Day    | 2012-02-14 00:00:00 |    2
</span><span class='line'> My Book Signing    | 2012-02-15 17:30:00 |    3
</span><span class='line'> Dinner with Mom    | 2012-02-26 18:00:00 |    4
</span><span class='line'> Steven King        | 2012-02-26 21:00:00 |    5
</span><span class='line'> April Fools Day    | 2012-04-01 00:00:00 |    6
</span><span class='line'> House Party        | 2012-05-03 23:00:00 |    7
</span><span class='line'> Christmas Day      | 2012-12-25 00:00:00 |    8
</span><span class='line'> Valentine's Day    | 2013-02-14 00:00:00 |    1
</span><span class='line'>(9 rows)</span></code></pre></td></tr></table></div></figure>


<p>Ok, this is not very fancy. But with numeric data, window functions are more powerful. Lets say we collect daily measures into a new table:</p>

<figure class='code'><figcaption><span>Window function example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">observation</span> <span class="p">(</span>
</span><span class='line'>   <span class="k">day</span> <span class="k">timestamp</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>   <span class="n">measure</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">observation</span> <span class="p">(</span><span class="k">day</span><span class="p">,</span> <span class="n">measure</span><span class="p">)</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="nb">date</span> <span class="s1">&#39;2011-12-01&#39;</span> <span class="k">AS</span> <span class="k">day</span><span class="p">,</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)::</span><span class="nb">int</span> <span class="k">as</span> <span class="n">measure</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could use the usual aggregate functions, for instance <code>AVG</code> and <code>SUM</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT AVG(measure), SUM(measure) FROM observation;
</span><span class='line'>         avg         | sum  
</span><span class='line'>---------------------+------
</span><span class='line'> 54.9600000000000000 | 5496
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>We have pretty much all the details. If there&#8217;s any trend, we would not see it. But with window functions, it is possible to compute running averages (and actually, two different ones):</p>

<figure class='code'><figcaption><span>Window function example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">day</span><span class="p">,</span> <span class="k">AVG</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">2</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="mi">2</span> <span class="n">FOLLOWING</span><span class="p">)</span> <span class="k">as</span> <span class="n">short_avg</span><span class="p">,</span>
</span><span class='line'>  <span class="k">AVG</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">5</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="mi">5</span> <span class="n">FOLLOWING</span><span class="p">)</span> <span class="k">as</span> <span class="n">long_avg</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">day</span><span class="p">)</span> <span class="k">as</span> <span class="n">running_sum</span> <span class="k">FROM</span> <span class="n">observation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(results omitted because they are too long). Here, the <code>AVG(measure)</code> is applied to a window of either 5 rows for <code>short_avg</code> or 11 rows for <code>long_avg</code>, and there&#8217;s a running sum in <code>running_sum</code>.</p>

<p>Pretty cool, I&#8217;d say.</p>

<h3>Rules</h3>

<p><a href="http://www.postgresql.org/docs/current/static/sql-createrule.html">Rules</a> are very useful as well. Here&#8217;s how I&#8217;d implement the <code>INSERT</code> on <code>holidays</code>:</p>

<figure class='code'><figcaption><span>INSERT on holidays  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">RULE</span> <span class="n">insert_holidays</span> <span class="k">AS</span> <span class="k">ON</span> <span class="k">INSERT</span> <span class="k">TO</span> <span class="n">holidays</span> <span class="k">DO</span> <span class="k">INSTEAD</span>
</span><span class='line'>  <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">colors</span><span class="p">)</span>
</span><span class='line'>  <span class="k">values</span> <span class="p">(</span><span class="k">NEW</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="nb">date</span><span class="o">+</span><span class="nb">interval</span> <span class="s1">&#39;23 hour 59 minutes&#39;</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">colors</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the syntax to manipulate dates and timestamp. It is fairly readable and compact enough.</p>

<h2>Exercises</h2>

<h3>Aggregate Functions</h3>

<p>The aggregate functions are documented <a href="http://www.postgresql.org/docs/current/static/functions-aggregate.html">here</a>, while the window functions are <a href="http://www.postgresql.org/docs/current/static/functions-window.html">here</a>.</p>

<h3>GUI</h3>

<p>Honestly, I don&#8217;t really use any. <code>psql</code> is really powerful. For those of the GUI persuasion, there are a few <a href="http://wiki.postgresql.org/wiki/Community_Guide_to_PostgreSQL_GUI_Tools">options</a>.</p>

<h3>DELETE Rule</h3>

<figure class='code'><figcaption><span>DELETE rule on venues  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">RULE</span> <span class="n">delete_venue</span> <span class="k">AS</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="k">TO</span> <span class="n">venues</span> <span class="k">DO</span> <span class="k">INSTEAD</span>
</span><span class='line'>  <span class="k">UPDATE</span> <span class="n">venues</span> <span class="k">SET</span> <span class="n">active</span> <span class="o">=</span> <span class="k">false</span> <span class="k">WHERE</span> <span class="n">venue_id</span> <span class="o">=</span> <span class="k">OLD</span><span class="p">.</span><span class="n">venue_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this rule in place, deleting from <code>venues</code> now set the <code>active</code> flag to false:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# DELETE FROM venues WHERE name = 'My Place';
</span><span class='line'>DELETE 0
</span><span class='line'>book=# SELECT * FROM venues;
</span><span class='line'> venue_id |       name       | street_address |  type   | postal_code | country_code | active 
</span><span class='line'>----------+------------------+----------------+---------+-------------+--------------+--------
</span><span class='line'>        1 | Crystal Ballroom |                | public  | 97205       | us           | t
</span><span class='line'>        2 | Powell's Books   |                | public  | 97205       | us           | t
</span><span class='line'>        5 | Run's House      |                | public  | 97205       | us           | t
</span><span class='line'>        4 | My Place         |                | private | 160-0022    | jp           | f
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<h3>generate_series in crosstab</h3>

<p>The documentation for <a href="http://www.postgresql.org/docs/current/static/tablefunc.html"><code>crosstab</code></a> has already an example for using <a href="http://www.postgresql.org/docs/current/static/functions-srf.html"><code>generate_series</code></a>:</p>

<figure class='code'><figcaption><span>generate_series in crosstab  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">crosstab</span><span class="p">(</span>
</span><span class='line'><span class="s1">&#39;SELECT extract(year from starts) as year,</span>
</span><span class='line'><span class="s1">extract(month from starts) as month, count(*) FROM events</span>
</span><span class='line'><span class="s1">GROUP BY year, month&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;SELECT m FROM generate_series(1, 12) m&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'><span class="k">year</span> <span class="nb">int</span><span class="p">,</span>
</span><span class='line'><span class="n">jan</span> <span class="nb">int</span><span class="p">,</span> <span class="n">feb</span> <span class="nb">int</span><span class="p">,</span> <span class="n">mar</span> <span class="nb">int</span><span class="p">,</span> <span class="n">apr</span> <span class="nb">int</span><span class="p">,</span> <span class="n">may</span> <span class="nb">int</span><span class="p">,</span> <span class="n">jun</span> <span class="nb">int</span><span class="p">,</span> <span class="n">jul</span> <span class="nb">int</span><span class="p">,</span> <span class="n">aug</span> <span class="nb">int</span><span class="p">,</span> <span class="n">sep</span> <span class="nb">int</span><span class="p">,</span> <span class="n">oct</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nov</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">dec</span> <span class="nb">int</span>
</span><span class='line'><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">YEAR</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output remains the same:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> year | jan | feb | mar | apr | may | jun | jul | aug | sep | oct | nov | dec 
</span><span class='line'>------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----
</span><span class='line'> 2012 |     |   5 |     |   1 |   1 |     |     |     |     |     |     |   1
</span><span class='line'> 2013 |     |   1 |     |     |     |     |     |     |     |     |     |    
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<h3>Weekly pivot</h3>

<p>The hardest, perhaps, is to find how to convince PostgreSQL to apply <a href="http://www.postgresql.org/docs/current/static/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE"><code>div</code></a> to the passed arguments, but a bit of type declaration using <code>::</code> does the trick. Also, <code>crosstab</code> is not overly smart, so the <code>month</code> and <code>week</code> columns must be in order, otherwise the counts for the two February (one in 2012 and one in 2013) are different:</p>

<figure class='code'><figcaption><span>Weekly pivot  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">crosstab</span><span class="p">(</span>
</span><span class='line'><span class="s1">&#39;SELECT extract(month from starts) as month, </span>
</span><span class='line'><span class="s1"> div(extract (day from starts)::int, 7) + 1 as week, count(*) FROM events</span>
</span><span class='line'><span class="s1">GROUP BY month, week ORDER BY month, week&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;SELECT m FROM generate_series(1, 5) m&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'><span class="k">month</span> <span class="nb">int</span><span class="p">,</span>
</span><span class='line'><span class="n">week_1</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_2</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_3</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_4</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_5</span> <span class="nb">int</span>
</span><span class='line'><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">MONTH</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The query produces:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> month | week_1 | week_2 | week_3 | week_4 | week_5 
</span><span class='line'>-------+--------+--------+--------+--------+--------
</span><span class='line'>     2 |      1 |        |      3 |      2 |       
</span><span class='line'>     4 |      1 |        |        |        |       
</span><span class='line'>     5 |      1 |        |        |        |       
</span><span class='line'>    12 |        |        |        |      1 |       
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1/"/>
    <updated>2011-12-03T12:22:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1</id>
    <content type="html"><![CDATA[<p>The first database in the series is a relational database, and what better choice than <a href="http://www.postgresql.org">PostgreSQL</a>?</p>

<!--more-->


<p>Of course, <a href="http://www.mysql.com/">MySQL</a> is more popular, but if we are going to talk about SQL and the relational model, it is better to pick a database that actually takes these concepts seriously.</p>

<p>The idea to start with a relational database is a good one. I feel that many who embrace NoSQL do so because they do not understand either SQL or the relational model. I was surprised to discover that some of my college educated colleagues did not know SQL at all. They were taught mostly about Java and object oriented design (I would ask for a refund). SQL databases have been developed, refined, and used in production for about 40 years. That&#8217;s more than half the history of computers, they&#8217;re likely to be part of the landscape for a few more decades, so ignoring them may be trendy but it is not wise.</p>

<p>About the PostgreSQL version: the book appears to have been long in the making, as it still refers the reader to the version 9.0, while <a href="http://www.postgresql.org/docs/9.1/static/release-9-1-1.html">9.1</a> has been out for a few months.</p>

<p>Installing then extensions that are needed for this book is easier with 9.1. Just using <a href="http://www.postgresql.org/docs/current/static/sql-createextension.html"><code>CREATE EXTENSION</code></a>:</p>

<figure class='code'><figcaption><span>Installing Extensions  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">tablefunc</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">dict_xsyn</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">fuzzystrmatch</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">pg_trgm</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="k">cube</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Removing them is done with the command <a href="http://www.postgresql.org/docs/current/static/sql-dropextension.html"><code>DROP EXTENSION</code></a>.</p>

<h3>The events table</h3>

<p>The code to create and fills the <code>events</code> table:</p>

<figure class='code'><figcaption><span>Creating and filling the events table  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">events</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">event_id</span> <span class="nb">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>  <span class="n">title</span> <span class="nb">text</span><span class="p">,</span>
</span><span class='line'>  <span class="n">starts</span> <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ends</span> <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>  <span class="n">venue_id</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">REFERENCES</span> <span class="n">venues</span> <span class="p">(</span><span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'><span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;My Book Signing&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-15 17:30:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-15 19:30:00&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;April Fools Day&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-04-01 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-04-01 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">),</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;Christmas Day&#39;</span><span class="p">,</span>   <span class="s1">&#39;2012-12-25 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-12-25 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>On indexes</h3>

<p>I don&#8217;t have a PostgreSQL 9.0 instance to check, but with 9.1 at least, <code>UNIQUE</code> constraints are implemented through a <code>btree</code> index, not a <code>hash</code> one. The difference is that a <code>btree</code> index is sorted and so supports range searches.</p>

<p>This can be checked by querying the console about the table:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# \d events
</span><span class='line'>                                       Table "public.events"
</span><span class='line'>  Column  |            Type             |                         Modifiers                         
</span><span class='line'>----------+-----------------------------+-----------------------------------------------------------
</span><span class='line'> event_id | integer                     | not null default nextval('events_event_id_seq'::regclass)
</span><span class='line'> title    | text                        | 
</span><span class='line'> starts   | timestamp without time zone | 
</span><span class='line'> ends     | timestamp without time zone | 
</span><span class='line'> venue_id | integer                     | 
</span><span class='line'>Indexes:
</span><span class='line'>    "events_pkey" PRIMARY KEY, btree (event_id)
</span><span class='line'>    "events_starts" btree (starts)
</span><span class='line'>Foreign-key constraints:
</span><span class='line'>    "events_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES venues(venue_id)</span></code></pre></td></tr></table></div></figure>


<h2>Exercises</h2>

<h3>The PostgreSQL FAQ</h3>

<p>The FAQ is <a href="http://wiki.postgresql.org/wiki/FAQ">here</a>.</p>

<h3>The PostgreSQL Documentation</h3>

<p>The documentation for version 9.1 is <a href="http://www.postgresql.org/docs/9.1/static/index.html">here</a> (and <a href="http://www.postgresql.org/docs/manuals/">there</a> for all the versions).</p>

<h3>About <code>MATCH FULL</code></h3>

<p>This one was already explained in the book, and confirmed by the <a href="http://www.postgresql.org/docs/current/static/sql-createtable.html">documentation</a>: when a foreign key is composed of more than one column, they must all match a row in the referenced table, or be all null.</p>

<h3>Selecting user table from <code>pg_class</code></h3>

<p>Interestingly, the first time I tried to solve this exercise, I used <a href="http://www.postgresql.org/docs/current/static/view-pg-tables.html"><code>pg_tables</code></a> by mistake (<code>pg_tables</code> has a <code>tableowner</code> column which makes it easy to identify user tables).</p>

<p><a href="http://www.postgresql.org/docs/current/static/catalog-pg-class.html"><code>pg_class</code></a> stores the type of object in <code>relkind</code>: &#8216;r&#8217; for tables. Restricting for just tables, and working on the table name:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=#  select relname from pg_class where relkind = 'r';
</span><span class='line'>         relname         
</span><span class='line'>-------------------------
</span><span class='line'> pg_statistic
</span><span class='line'> pg_type
</span><span class='line'> pg_attribute
</span><span class='line'> pg_authid
</span><span class='line'> pg_proc
</span><span class='line'> pg_class
</span><span class='line'> pg_database
</span><span class='line'> pg_user_mapping
</span><span class='line'> pg_constraint
</span><span class='line'> pg_inherits
</span><span class='line'> pg_index
</span><span class='line'> pg_operator
</span><span class='line'> pg_opfamily
</span><span class='line'> pg_opclass
</span><span class='line'> pg_amop
</span><span class='line'> pg_amproc
</span><span class='line'> pg_language
</span><span class='line'> pg_largeobject_metadata
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Ok, that&#8217;s a bit long. Removing these <code>pg_</code> named tables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select relname from pg_class where relkind = 'r' and relname not like 'pg_%';
</span><span class='line'>         relname         
</span><span class='line'>-------------------------
</span><span class='line'> sql_implementation_info
</span><span class='line'> sql_languages
</span><span class='line'> sql_packages
</span><span class='line'> sql_parts
</span><span class='line'> sql_sizing
</span><span class='line'> sql_sizing_profiles
</span><span class='line'> sql_features
</span><span class='line'> countries
</span><span class='line'> events
</span><span class='line'> cities
</span><span class='line'> venues
</span><span class='line'>(11 rows)</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, only the tables that are visible in the current database are listed (I have other databases, with more user created tables).</p>

<p>Still I need to remove the <code>sql_</code> named tables. Using PostgreSQL <a href="http://www.postgresql.org/docs/current/static/functions-matching.html#FUNCTIONS-POSIX-REGEXP">regular expression operators</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select relname from pg_class where relkind = 'r' and relname !~ '^(pg_|sql_)';
</span><span class='line'>  relname  
</span><span class='line'>-----------
</span><span class='line'> countries
</span><span class='line'> events
</span><span class='line'> cities
</span><span class='line'> venues
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>This is one approach. Another would be to try to mimic the behaviour of the <code>\d</code> console command. The <a href="http://www.postgresql.org/docs/current/static/app-psql.html"><code>psql</code></a> option <code>-E</code> can be used to check what queries are used to implement specific console commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ psql -E book
</span><span class='line'>psql (9.1.1)
</span><span class='line'>Type "help" for help.
</span><span class='line'>
</span><span class='line'>book=# \d
</span><span class='line'>********* QUERY **********
</span><span class='line'>SELECT n.nspname as "Schema",
</span><span class='line'>  c.relname as "Name",
</span><span class='line'>  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' END as "Type",
</span><span class='line'>  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
</span><span class='line'>FROM pg_catalog.pg_class c
</span><span class='line'>     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
</span><span class='line'>WHERE c.relkind IN ('r','v','S','f','')
</span><span class='line'>      AND n.nspname &lt;&gt; 'pg_catalog'
</span><span class='line'>      AND n.nspname &lt;&gt; 'information_schema'
</span><span class='line'>      AND n.nspname !~ '^pg_toast'
</span><span class='line'>  AND pg_catalog.pg_table_is_visible(c.oid)
</span><span class='line'>ORDER BY 1,2;
</span><span class='line'>**************************
</span><span class='line'>
</span><span class='line'>                  List of relations
</span><span class='line'> Schema |        Name         |   Type   |   Owner   
</span><span class='line'>--------+---------------------+----------+-----------
</span><span class='line'> public | cities              | table    | fdumontmd
</span><span class='line'> public | countries           | table    | fdumontmd
</span><span class='line'> public | events              | table    | fdumontmd
</span><span class='line'> public | events_event_id_seq | sequence | fdumontmd
</span><span class='line'> public | venues              | table    | fdumontmd
</span><span class='line'> public | venues_venue_id_seq | sequence | fdumontmd
</span><span class='line'>(6 rows)</span></code></pre></td></tr></table></div></figure>


<p>The minimal query that lists the user created tables in the current database seems to be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select c.relname from pg_class c join pg_namespace n on n.oid = c.relnamespace where c.relkind = 'r' and pg_catalog.pg_table_is_visible(c.oid) and n.nspname &lt;&gt; 'pg_catalog';
</span><span class='line'>  relname  
</span><span class='line'>-----------
</span><span class='line'> countries
</span><span class='line'> events
</span><span class='line'> cities
</span><span class='line'> venues
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>But given that <code>pg_class</code> only lists the tables in the current database, and assuming you don&#8217;t use <code>pg_</code> or <code>sql_</code> prefixes, the first query is clearly easier.</p>

<h3>Country name for the event &#8216;My Book Signing&#8217;</h3>

<p>Based on the content of the book so far, a possible solution uses <code>INNER JOIN</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select c.country_name from events e inner join venues v on e.venue_id = v.venue_id inner join countries c on v.country_code = c.country_code where title = 'My Book Signing';
</span><span class='line'> country_name  
</span><span class='line'>---------------
</span><span class='line'> United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>But this is a bit verbose. The structure of the tables makes it possible to use <a href="http://www.postgresql.org/docs/current/static/queries-table-expressions.html"><code>NATURAL JOIN</code></a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select country_name from events natural join venues natural join countries where title = 'My Book Signing';
</span><span class='line'> country_name  
</span><span class='line'>---------------
</span><span class='line'> United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>When using <code>NATURAL JOIN</code>, PostgreSQL will join on all the columns that are found in both tables (based on their names). For instance, both <code>events</code> and <code>venues</code> have a <code>venue_id</code> column (and no other column with the same name), so the join is on this column.</p>

<p>And other interesting difference is that <code>NATURAL JOIN</code> removes the duplicate columns:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from events natural join venues natural join countries where title = 'My Book Signing';
</span><span class='line'> country_code | venue_id | event_id |      title      |       starts        |        ends         |     name      | street_address |  type   | postal_code | active | country_name  
</span><span class='line'>--------------+----------+----------+-----------------+---------------------+---------------------+---------------+----------------+---------+-------------+--------+---------------
</span><span class='line'> us           |        2 |        1 | My Book Signing | 2012-02-15 17:30:00 | 2012-02-15 19:30:00 | Powel's Books |                | public  | 97205       | t      | United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>whereas <code>INNER JOIN</code> does not:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from events e inner join venues v on e.venue_id = v.venue_id inner join countries c on v.country_code = c.country_code where title = 'My Book Signing';
</span><span class='line'> event_id |      title      |       starts        |        ends         | venue_id | venue_id |     name      | street_address |  type   | postal_code | country_code | active | country_code | country_name  
</span><span class='line'>----------+-----------------+---------------------+---------------------+----------+----------+---------------+----------------+---------+-------------+--------------+--------+--------------+---------------
</span><span class='line'>        1 | My Book Signing | 2012-02-15 17:30:00 | 2012-02-15 19:30:00 |        2 |        2 | Powel's Books |                | public  | 97205       | us           | t      | us           | United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<h3>Add a new column</h3>

<figure class='code'><figcaption><span>Add a new column to `venues`  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">venues</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">active</span> <span class="nb">boolean</span> <span class="k">DEFAULT</span> <span class="k">TRUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checking that is is now there:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# \d venues
</span><span class='line'>                                        Table "public.venues"
</span><span class='line'>     Column     |          Type          |                         Modifiers                         
</span><span class='line'>----------------+------------------------+-----------------------------------------------------------
</span><span class='line'> venue_id       | integer                | not null default nextval('venues_venue_id_seq'::regclass)
</span><span class='line'> name           | character varying(255) | 
</span><span class='line'> street_address | text                   | 
</span><span class='line'> type           | character(7)           | default 'public'::bpchar
</span><span class='line'> postal_code    | character varying(9)   | 
</span><span class='line'> country_code   | character(2)           | 
</span><span class='line'> active         | boolean                | default true
</span><span class='line'>Indexes:
</span><span class='line'>    "venues_pkey" PRIMARY KEY, btree (venue_id)
</span><span class='line'>Check constraints:
</span><span class='line'>    "venues_type_check" CHECK (type = ANY (ARRAY['public'::bpchar, 'private'::bpchar]))
</span><span class='line'>Foreign-key constraints:
</span><span class='line'>    "venues_country_code_fkey" FOREIGN KEY (country_code, postal_code) REFERENCES cities(country_code, postal_code) MATCH FULL
</span><span class='line'>Referenced by:
</span><span class='line'>    TABLE "events" CONSTRAINT "events_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES venues(venue_id)</span></code></pre></td></tr></table></div></figure>


<p>or directly by <code>select</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from venues;
</span><span class='line'> venue_id |       name       | street_address |  type   | postal_code | country_code | active 
</span><span class='line'>----------+------------------+----------------+---------+-------------+--------------+--------
</span><span class='line'>        1 | Crystal Ballroom |                | public  | 97205       | us           | t
</span><span class='line'>        2 | Powel's Books    |                | public  | 97205       | us           | t
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 1. Tomorrow, stored procedures, triggers, views, rules, and other goodies are on the menu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Book: Seven Databases in Seven Weeks]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/new-book-seven-databases-in-seven-weeks/"/>
    <updated>2011-12-03T12:21:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/new-book-seven-databases-in-seven-weeks</id>
    <content type="html"><![CDATA[<p>It is early December still, but the good people of the <a href="http://pragprog.com/">Pragmatic Bookshelf</a> have delivered an early Christmas present: <a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a>, by Eric Redmond and Jim Wilson.</p>

<!--more-->


<p>The book is in Beta, but there are chapters for 5 databases, so there plenty of material already.</p>

<p>The idea of covering 7 databases, even superficially, is a good one, perhaps even better than for <a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">languages</a>: while the choice of a language is often beyond the control of any single developer, the choice of a database (perhaps from the NoSQL family as a complement to a core, mandated SQL one) is possible. As with languages, trying to use a new database is if it was similar to one you&#8217;re already familiar with is likely to end badly. A good understanding of what each of them is good for, what problem they intend to solve, and what niche they fit better is mandatory.</p>

<p>I have been working with relational databases mostly so far (and, professionally, with one of the worst databases that people can charge money for), so I am eager to be introduced to the other kinds, without the usual cheerleading that is found in many tutorials.</p>

<p>In the coming weeks, assuming the book is timely updated, I&#8217;ll be blogging my way through it, just as I did through <a href="http://blog.wakatta.jp/blog/2011/10/11/seven-languages-in-seven-weeks/">Seven Languages in Seven Weeks</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Wrap Up]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/26/seven-languages-in-seven-weeks-wrap-up/"/>
    <updated>2011-11-26T12:24:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/26/seven-languages-in-seven-weeks-wrap-up</id>
    <content type="html"><![CDATA[<p>Wow, seven weeks already. And seven languages later, time to see where I can go from here.</p>

<!--more-->


<p>This was a rather pleasant journey. I felt that some exercises with Io and Scala were more frustrating than the rest, but overall it was not too taxing.</p>

<p>It brought interesting benefits: I got a better look at emerging trends in software, but now it is up to me to develop this first look into something useable.</p>

<h2>General comments</h2>

<p>The exercises level was rather uneven. I guess that is inevitable, given that some of the languages were introduced as stepping stones for others. Still, from a CSV parser (even one using meta-programming) to a backtracking maze solver, there&#8217;s a fairly large range.</p>

<p>The idea of just giving enough information to get started, but not so much that the book is the only source of information needed to solve the exercises, was very good. A language is not just a syntax, a semantic, and a library. It is most of all a community, a set of websites, forums, mailing lists, &#8230; It was smart to push the reader towards that.</p>

<p>And yes, clearly, each language was barely covered, but some of the third day exercises were hinting at the more advanced features.</p>

<p>All in all, this was a good book. It is useful to be exposed to different languages, if only to expand one&#8217;s approach to problem solving. The features of tomorrow&#8217;s mainstream languages are being explored today in smaller languages; being at least aware of this evolution is required to grow as a professional software engineer.</p>

<p>But the author spends way too much time complaining about syntax (or claiming that a particular syntax is a weakness). I find the accusation that Scala&#8217;s syntax is too academic particularly pointless. Rightfully, he adds that this is subjective, but what on earth is an academic syntax? A syntax is either easy on the fingers or not (the former being better), and either adapted to the semantic or not. It can support the features, or make them ugly. It should be concise in what it promotes, and verbose in what it discourages.</p>

<p>As far as I could tell, each language had a syntax that matches its needs and those of its users.</p>

<p>Conclusion: I recommend the book. Even knowing some of the languages I still learned a few things, and for those languages I knew, I had a chance for a second look and a new appreciation of what they offer.</p>

<h2>From here to a bit further</h2>

<p>It would be unfortunate if this book was the last step I took in these various languages. So here I recap what I think of each language, and where I&#8217;d like to go with them.</p>

<h3>Ruby</h3>

<p>I like Ruby. It&#8217;s fun, open, does not make judgment about what is proper software engineering (who cares if you like monkey patching&#8230;). The syntax binds all the features well, and the ecosystem is really interesting.</p>

<p>It might not have the performance, and no concurrency model worth mentioning, but as a new glue or script language, or perhaps for the Rails platform (although my current needs are not met by RoR), it shines.</p>

<p>I had read the <a href="http://pragprog.com/book/ruby/programming-ruby">Programming Ruby</a> (the pickaxe book), and a few books on Rails, and I liked what I saw.</p>

<p>I&#8217;ll probably follow up with <a href="http://pragprog.com/book/ppmetr/metaprogramming-ruby">Metaprogramming Ruby</a>.</p>

<p>And as I&#8217;m doing a lot of web development, I will try to look at Ruby driven <a href="http://seleniumhq.org/">Selenium</a>.</p>

<h3>Io</h3>

<p>Well, I won&#8217;t spend much more time with Io. I really don&#8217;t see any advantages. Yes, it&#8217;s compact, the interpreter is small, so it&#8217;s ideal for embedded languages. Which I don&#8217;t need.</p>

<p>As I said earlier, there is a prototype based, functional Lisp inspired language that is worth learning. It is supported by several major software companies or organisations, has users in the billions (or will soon): Javascript.</p>

<h3>Prolog</h3>

<p>I had learned Prolog at university. I had enjoyed it at the time, and doing the exercises reminded me of that fun.</p>

<p>Prolog is, by and large, about exploring search trees, so the techniques it teaches are usable in other languages. The maze solver in Haskell is essentially a tree search and would be implemented the same way in Prolog.</p>

<p>I&#8217;m glad that a recent trip back to Europe allowed me to retrieve my two Prolog books: <a href="http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;tid=8327">The Art of Prolog</a> and <a href="http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;tid=8336">The Craft of Prolog</a>. Both are large, so it might take a while.</p>

<h3>Scala</h3>

<p>I didn&#8217;t know Scala but had heard about it and was very curious. It is indeed fairly expressive, more concise than Java, and the concurrency model much better.</p>

<p>The type system is somewhat strange: much better than Java, but more verbose and less flexible than Haskell, and sometimes with bizarre results: the concatenation of a <code>List</code> of <code>Int</code> and a <code>List</code> of <code>String</code> is a <code>List</code> of <code>Any</code>&#8230;</p>

<p>In any case, Scala seems to be gaining momentum, so I&#8217;ll try and learn more about it in the near future. There are plenty of books, at least one free (<a href="http://programmingscala.com/">Programming Scala</a>, from O&#8217;Reilly), and one by the language creator (<a href="http://www.artima.com/shop/programming_in_scala">Programming in Scala</a>).</p>

<h3>Erlang</h3>

<p>Erlang was another language I had checked before, yet this book showed me something new. An important development of Erlang is OTP (Open Telecom Platform), but until very recently, there were few resources to learn about it.</p>

<p>The whole concept of supervisors is just the beginning; as far as I can tell, OTP offers a large range of tools to monitor and keep processes alive on a network. Where this really becomes interesting, is that Scala is adopting some ideas (<a href="http://akka.io/">Akka</a> is inspired by Erlang/OTP), so some knowledge of one can be reused.</p>

<p>There is an entry level book, <a href="http://pragprog.com/book/jaerlang/programming-erlang">Programming in Erlang</a>, by Joe Armstrong (Erlang&#8217;s father), and a couple of more advanced books, specifically on OTP: <a href="http://www.manning.com/logan/">Erlang and OTP in Action</a> and <a href="http://shop.oreilly.com/product/9780596518189.do">Erlang Programming</a>. I&#8217;m going through Programming in Erlang, then the in Action one.</p>

<h3>Clojure</h3>

<p>Clojure is a Lisp for the JVM. That in itself should make it interesting, but somehow it does not do it for me. Maybe it is that Clojure is not as good Lisp it could be because of the JVM limitations. Or maybe I&#8217;m just not into Lisp anymore (I used to like Perl too, but wonder why today).</p>

<p>But with my professional investment in the JVM, I will probably investigate Clojure a bit further. Just not urgently.</p>

<p>It might be interesting to see if <a href="http://norvig.com/paip.html">Paradigms of Artificial Intelligence Programming</a> can easily be ported to Clojure.</p>

<h3>Haskell</h3>

<p>Haskell is an interesting language. But it is extremely demanding, and there are few resources to come to grip with it. I knew enough about Haskell to go through this book easily, but whenever I try to go further, I find that difficulties accumulate quickly.</p>

<p>It appears that Haskell&#8217;s features are all somewhat complicated in their own way:</p>

<h4>Types</h4>

<p>Haskell type system is perhaps the most sophisticated of all widely used type systems. Basic Haskell type system is already very rich, but <a href="http://www.haskell.org/ghc/">GHC</a> adds extensions that brings the expressivity of the type system to new heights.</p>

<p>I would assume that Haskell strength must be in this type system; there are interesting libraries and applications that are built around clever use of types. But there are few resources on using types for design (or designing with types), except for very academic papers with no obvious practical uses (I probably lack imagination)</p>

<p>GHC&#8217;s extensions are similarly explored in other academic papers, but the sum of these extensions is hard to make sense of (and it sometimes feels like the authors of GHC are also trying to make sense of this patchwork and find a more consistent set of features).</p>

<p>This is in serious needs of a good book, but I can&#8217;t think of any that fits the bill.</p>

<h4>Laziness</h4>

<p>Haskell&#8217;s laziness goes much further than Clojure&#8217;s. I did not mention it in <a href="http://blog.wakatta.jp/blog/2011/11/19/seven-languages-in-seven-weeks-haskell-day-3/">Haskell Day 3</a>&#8217;s Maze solution, but laziness makes this implementation very effective: only the first solution is computed. While the implementation is strictly equivalent to nested list comprehensions, only the part required for the first output is actually run.</p>

<p>Laziness (combine with the List Monad) makes the algorithm very short: a mere 14 lines. But it makes it also very obscure. I know, intellectually, that laziness will run just a much as needed, but I don&#8217;t understand it as well as, say, I understand the time and space cost of an algorithm in C.</p>

<p>When digging a bit deeper in Haskell, newcomers learn to be wary of laziness: it introduces space leaks that can be hard to track. Solutions exist, but are spread in academic papers that require extensive understanding of the whole background theories (why do academic papers always refer to other, more obscure academic papers, and never to a single &#8220;Idiot Guide to&#8230;&#8221;?)</p>

<p>Of all the features of Haskell, I would think that laziness is the harder to master. There are few generally available resources. <a href="http://www.cambridge.org/gb/knowledge/isbn/item1161740/?site_locale=en_GB">Purely Functional Data Structures</a> explores laziness and provides a theoretical framework to compute the time cost of lazy algorithms, but does so assuming a partial laziness built on top of SML.</p>

<p><a href="http://www.iro.umontreal.ca/~lapalme/Algorithms-functional.html">Algorithms: A Functional Programming Approach</a> is about Haskell, but appears to be out of print (glad I got a copy when I first got interested in Haskell).</p>

<p>Both books are in my todo stack (which by now requires all my skills in rock climbing to handle).</p>

<h4>Syntax</h4>

<p>Haskell&#8217;s syntax is another of its strengths: it is very compact, and the type system abstracts away many details. So it&#8217;s no surprise that many people (or maybe just me) have a problem with it.</p>

<p>I learned OCaml at university (those were good days). My first few assignments, I had to implement my own list like data type, because I could not figure out how to use the default list in pattern matching. The language was so weird that it did not even occurred to me that a language whose standard list type was unusable would not leave the lab it grew in. Then eventually the syntax settled in my brain, and I started to wonder why it had been so hard before.</p>

<p>Haskell is similar (they are both somewhat descendant of ML), but far more abstract (OCaml does not support either type classes or user operators). So just looking at an expression, it is not easy to assign it a type (there might be many) or a single meaning (there might be many as well).</p>

<p>Another thing that I find hard to keep under control is the creation of anonymous functions. Between higher order functions that produce functions, and the do notation (which produces functions as well), it is hard to track what is going on, even it apparently simple expressions.</p>

<p>This is not to say that Haskell&#8217;s syntax does not &#8220;work&#8221;. It does, clearly, but the expressivity it grants is difficult to master.</p>

<h4>The compiler</h4>

<p>The compiler is another peace of the puzzle. All compilers are fantastically complex beasts; the underlying theories are just as fascinating as they are overwhelming. But in general, at least with regular imperative (or perhaps just with strict languages), my intuitions about what is costly, what is a possible leak, &#8230; just based on the code, are usually correct. With Haskell, there are many areas where I&#8217;m not sure what the compiler will do. Functional languages enthusiasts used to say that any inefficiency in their favourite language was just waiting for a sufficiently advanced compiler, but now I have a feeling that understanding what the compiler is doing is just as hard as figuring out program wide memory allocation in C&#8230;</p>

<p>And it matters. Strictness analysis, for instance, is used by GHC (and, I suppose, other Haskell compilers) to figure out which expressions could be strict (i.e. not lazy) without changing the overall semantic. This changes the time and space cost of some expressions, and makes performance difficult to predict.</p>

<h4>The meta-language</h4>

<p>Haskell is its own meta-language. What is a core feature in most languages is just a library in Haskell. This means that there is little uniformity even in fundamental part of the languages. There are <a href="http://www.randomhacks.net/articles/2007/03/10/haskell-8-ways-to-report-errors">8 ways to report errors</a> (perhaps more today). And at least that many monad transformer libraries.</p>

<p>Having to combine these various libraries (and more importantly, the libraries that use them) is difficult, and adds accidental complexity. What makes it more frustrating is that Haskell type system is otherwise very effective at making it easy to create code parts that can be combined in various ways (while checking that the combination always make some sense).</p>

<p>It would be good to standardise some of these, and maybe the <a href="http://hackage.haskell.org/platform/">Haskell Platform</a> will achieve this, although it would be nice if it was keeping up with at least GHC (at the time of writing, version 7.0.3 is in the Platform, but 7.2.2 is already out, with important changes).</p>

<h4>and so on&#8230;</h4>

<p>I would like to like Haskell. But if any language can be accused of being too academic, it is Haskell. Sometimes it feels like the main purpose of the language is to make it possible to prove, through the type system, that a specific, inefficient sort algorithm is indeed a sort algorithm.</p>

<p>I&#8217;m really curious about organisations that use Haskell for commercial purposes. What kind of features do they use the most? Is laziness really a good thing, or it is flushed away from the code and replaced by explicit on demand evaluation? Given a chance, I&#8217;d like to work in such an organisation, as I feel Haskell requires a different approach to large scale problem solving than the one I&#8217;m used to.</p>

<h3>Other topics</h3>

<p>From the same publisher (<a href="http://pragprog.com/">The Pragmatic Bookshelf</a>) as this book,
<a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a> is looking very interesting. I&#8217;m also professionally bound to SQL, so I haven&#8217;t really been paying attention to the whole NoSQL movement. Yet there are definitively interesting things going on, and the variety of alternative database models makes such a book a welcome introduction.</p>

<p>As I&#8217;ve been doing way too much sequential processing in the past, I am looking to expand my horizon and learn about large scale concurrency (Erlang, Scala, &#8230; help here), and asynchronous, event based processing. <a href="http://www.manning.com/etzion/">Event Processing in Action</a> appears to be a decent way to get started.</p>

<p>Finally, and while it is completely unrelated to whatever this book was about, I haven&#8217;t studied algorithms since I left university. I really feel I should get back to that topic, and <a href="http://www.algorist.com/">The Algorithm Design Manual</a> is just what I need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nice tool: Quick Sequence Diagram Editor]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/26/nice-tool-quick-sequence-diagram-editor/"/>
    <updated>2011-11-26T12:23:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/26/nice-tool-quick-sequence-diagram-editor</id>
    <content type="html"><![CDATA[<p>There are tools that provide a simple, elegant solution to some of my recurrent problems. Today I&#8217;d like to introduce you to the <a href="http://sdedit.sourceforge.net/index.html">Quick Sequence Diagram Editor</a> (sdedit for short).</p>

<!--more-->


<p>First, to get that out of the way: if a mouse makes you generally more productive than a keyboard, if you need to look to find the next letter to press on, then you probably won&#8217;t want to use sdedit. But then again you probably don&#8217;t have any business producing UML Sequence diagrams anyway.</p>

<p>This is because sdedit&#8217;s main interface is not a mouse, but the keyboard: instead of dragging visual elements into place, like most diagram editors, sdedit let you type a description of the diagram, and automatically generates the diagram as you type.</p>

<h2>Purpose</h2>

<p>As the name says, sdedit allows you to generate Sequence Diagrams. It is not meant as full UML designer toolkit. And perhaps even in this focused area, it probably lacks features, but for my needs I found it perfectly adequate.</p>

<p>In general, when I need such a diagram, it is to represent the flow of information between systems in an integration scenario (and usually these systems will be various web applications). The intended audience is the technical staff of my clients, which are not programmers (they are IT managers, system or database administrators, operations, &#8230;).</p>

<p>I need to communicate the sequence of calls, the parameters and return values, as well as the occasional asynchronous messages. If I ever had to add some subtle qualifications to such a diagram, I would rather do it in English, rather than use a graphical notation that few people know and most will misunderstand anyway.</p>

<h2>Usage</h2>

<p>sdedit is written in Java, and packages are available for all main platforms (and a generic binary is available for the other platforms). It is very small (2 MB) which, in these days of multi-dvds IDEs, is so refreshing (and to think that some people used to joke that Emacs was so resource hungry it needed 8 MB of memory&#8230;).</p>

<p>When it is first launched, it greets the user with an uncluttered screen:
<img src="https://lh3.googleusercontent.com/-wm3qYBXjKZ0/TtHZDVgYi3I/AAAAAAAAB4o/ji2R6edXCj0/s800/Screen%252520Shot%2525202011-11-27%252520at%25252015.30.04.png" title="'sdedit initial screen'" ></p>

<p>To start creating the diagram, you first need to declare a few participants, using a <a href="http://sdedit.sourceforge.net/enter_text/index.html">simple language</a>. sdedit uses recognizes specific keywords that can be used to customize the appearance of the diagram:</p>

<p><img src="https://lh5.googleusercontent.com/-7gCWxCHdNl0/TtHaqn_FzMI/AAAAAAAAB5A/GUS3tPAwPIo/s800/Screen%252520Shot%2525202011-11-27%252520at%25252015.35.36.png" title="'sedit participants'" ></p>

<p>Messages are created by stating who initiates them, and who receives them, with a familiar object oriented syntax:</p>

<p><img src="https://lh4.googleusercontent.com/-Xfn_SgHyQXw/TtHctQyR_DI/AAAAAAAAB5M/jt3dKtzMeoc/s800/Screen%252520Shot%2525202011-11-27%252520at%25252015.45.58.png" title="'sdedit message calls'" ></p>

<p>Asynchronous messages are also possible; grouping calls into a named sequence (and nesting such sequences) is also supported.</p>

<h2>Getting help</h2>

<p>The <a href="http://sdedit.sourceforge.net/index.html">website</a> has a complete documentation, but I found that the integrated help page, especially its set of examples is far more useful:</p>

<p><img src="https://lh5.googleusercontent.com/-ms8UYivtoOM/TtHdweYCUlI/AAAAAAAAB5Y/IJpHfomujU8/s800/Screen%252520Shot%2525202011-11-27%252520at%25252015.50.28.png" title="'sdedit examples'" ></p>

<p>That, and the fact that diagrams are redrawn as you type, makes it easy to experiment and figure out what works.</p>

<h2>Try it&#8230;</h2>

<p>I found that sdedit is useful to clarify my ideas. All too often, a UML designer is just a designer for a diagram that is already fully formed in your mind. But with sdedit simple input syntax and instant feedback, I can experiment and see immediately which design works (or appears to work).</p>

<p>I&#8217;m not sure other parts of UML are suitable for such an exploratory design tool, but thanks to sdedit, at least a Sequence Diagram becomes a bicycle for the mind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Haskell Day 3.5]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/21/seven-languages-in-seven-weeks-haskell-day-3-dot-5/"/>
    <updated>2011-11-21T13:21:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/21/seven-languages-in-seven-weeks-haskell-day-3-dot-5</id>
    <content type="html"><![CDATA[<p>Haskell Day 3 had one exercise I forgot about: to implement monads in a different language. In this post I correct this oversight.</p>

<!--more-->


<p>There are various implementations of monads for other languages. Some are well suited for the exercise (because they have a flexible syntax like Clojure, for instance). With others the whole thing sticks out like a sore thumb. I think the latter is useful to highlight Haskell&#8217;s features.</p>

<p>I choose Java, which shows how helpful Haskell&#8217;s syntax and type system really is, compared to a mainstream language. Regarding types, maybe generics would have helped, but I&#8217;m not familiar enough with them to figure it out (for professional reasons, I got stuck with Java 1.4 for quite a long time).</p>

<p>I implements a List Monad, and creates a list of pairs where the first element is smaller than the second. In Haskell, this is what it would look like:</p>

<figure class='code'><figcaption><span>List Monad example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">do</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>   <span class="n">y</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>   <span class="kr">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span>
</span><span class='line'>     <span class="kr">then</span> <span class="n">return</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>     <span class="kr">else</span> <span class="n">fail</span> <span class="s">&quot;Not a valid pair&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Haskell&#8217;s notation for functions is especially useful here. Note how the Java codes forces me to tie <code>MakePair1</code> and <code>MakePair2</code>, while the Haskell equivalent seems to have no special construct whatsoever (the do notation hides the underlying anonymous functions).</p>

<figure class='code'><figcaption><span> (ListMonad.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/ListMonad.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">test</span><span class="o">.</span><span class="na">monad</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Java type system is not rich enough to be used here.</span>
</span><span class='line'><span class="cm"> * Even with generics, some expression do not typecheck,</span>
</span><span class='line'><span class="cm"> * so I use Object everywhere</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">({</span> <span class="s">&quot;rawtypes&quot;</span><span class="o">,</span> <span class="s">&quot;unchecked&quot;</span> <span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListMonad</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">ListMonad</span> <span class="nf">bind</span><span class="o">(</span><span class="n">Func</span> <span class="n">func</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayList</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="nl">obj:</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">res</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">func</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">obj</span><span class="o">).</span><span class="na">getContent</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">ListMonad</span> <span class="nf">wrap</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayList</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>      <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// error param is not used in ListMonad</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">ListMonad</span> <span class="nf">fail</span><span class="o">(</span><span class="n">String</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">List</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">interface</span> <span class="nc">Func</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ListMonad</span> <span class="nf">run</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>    
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">ListMonad</span> <span class="nf">monadDo</span><span class="o">(</span><span class="n">List</span> <span class="n">lst</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="n">lst</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span> <span class="n">output</span> <span class="o">=</span> <span class="n">monadDo</span><span class="o">(</span><span class="n">Sequence</span><span class="o">.</span><span class="na">makeRange</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)).</span><span class="na">bind</span><span class="o">(</span><span class="k">new</span> <span class="n">MakePair1</span><span class="o">()).</span><span class="na">getContent</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="nl">obj:</span> <span class="n">output</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MakePair1</span> <span class="kd">implements</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">Func</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">ListMonad</span> <span class="nf">run</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ListMonad</span><span class="o">.</span><span class="na">Func</span> <span class="n">func</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MakePair2</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">monadDo</span><span class="o">(</span><span class="n">Sequence</span><span class="o">.</span><span class="na">makeRange</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)).</span><span class="na">bind</span><span class="o">(</span><span class="n">func</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MakePair2</span> <span class="kd">implements</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">Func</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Object</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MakePair2</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">ListMonad</span> <span class="nf">run</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Integer</span> <span class="n">cont</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Integer</span> <span class="n">val</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">cont</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">val</span><span class="o">.</span><span class="na">intValue</span><span class="o">())</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="n">content</span><span class="o">,</span> <span class="n">obj</span><span class="o">));</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">fail</span><span class="o">(</span><span class="s">&quot;Not a valid pair&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">({</span> <span class="s">&quot;rawtypes&quot;</span><span class="o">,</span> <span class="s">&quot;unchecked&quot;</span> <span class="o">})</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Sequence</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">List</span> <span class="nf">makeRange</span><span class="o">(</span><span class="kt">int</span> <span class="n">from</span><span class="o">,</span> <span class="kt">int</span> <span class="n">to</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayList</span> <span class="n">lst</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">from</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">to</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">lst</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">lst</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Pair</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Object</span> <span class="n">fst</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Object</span> <span class="n">snd</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Pair</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">fst</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">snd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">fst</span> <span class="o">=</span> <span class="n">fst</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">snd</span> <span class="o">=</span> <span class="n">snd</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="n">getFst</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">getSnd</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getFst</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">fst</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getSnd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">snd</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation is otherwise fairly straightforward given the definition of monads:</p>

<ul>
<li><code>monadDo</code> and <code>wrap</code> (Haskell&#8217;s <code>return</code>) both create a new <code>ListMonad</code>;</li>
<li><code>fail</code> is also a way to create a <code>ListMonad</code> which represents failure. I pass a <code>String</code> argument to have the same signature as Haskell&#8217;s <code>fail</code>, but in List Monads such argument is ignored, so I ignore it here as well;</li>
<li><code>bind</code> is the <code>&gt;&gt;=</code> version, which collects the results of the <code>func</code> argument run over each element of the current List content; a new <code>ListMonad</code> with the results as content is returned</li>
<li>finally, <code>getContent</code> gives back the current content of the <code>ListMonad</code>.</li>
</ul>


<p>The test code is nothing fancy (I certainly wouldn&#8217;t want to try and write my maze solving algorithm in Java using the ListMonad), but it tests all the features.</p>

<p>Running it produces the expected output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(1, 2)
</span><span class='line'>(1, 3)
</span><span class='line'>(1, 4)
</span><span class='line'>(1, 5)
</span><span class='line'>(2, 3)
</span><span class='line'>(2, 4)
</span><span class='line'>(2, 5)
</span><span class='line'>(3, 4)
</span><span class='line'>(3, 5)
</span><span class='line'>(4, 5)</span></code></pre></td></tr></table></div></figure>


<p>Aren&#8217;t you glad you can write this in Haskell instead?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Haskell Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/19/seven-languages-in-seven-weeks-haskell-day-3/"/>
    <updated>2011-11-19T14:16:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/19/seven-languages-in-seven-weeks-haskell-day-3</id>
    <content type="html"><![CDATA[<p>Last day with Haskell, and this time we grapple with classes and monads. That&#8217;s pretty much where most beginners give up in disgust&#8230;</p>

<!--more-->


<p>And that&#8217;s too bad, because both (and the rest of advanced Haskell features) are very expressive (see below the Maze problem) and powerful. But classes are unusual (and the name tends to confuse Object Oriented people), while monads appear to solve a problem that is trivial in other languages (which is not true, or mostly not true).</p>

<h2>Classes</h2>

<p>Classes are more properly understood as interfaces, but the comparison can be misleading. Class elements are types that are guaranteed to provide implementation for specific functions. Combined with polymorphism, it allows writing functions that are more intimate with their arguments, while keeping purity and referential transparency (in some sense, it plays a role similar to functors in ML languages).</p>

<p>Classes nicely support monads (and other composition mechanisms) by providing interfaces these abstractions can build upon.</p>

<h2>Monads</h2>

<p>Monads are mechanisms to compose calculations. They also happen to solve the IO problem in Haskell, which is a nice (and significant) bonus. But the calculation composition is core. With it, one can have backtracking, continuation, probabilistic computing, anything you could think off. Thinking of anything actually is quite hard, as most programmers are not used to such freedom. For IO, it just happens to guarantee sequential evaluation.</p>

<p>There are a number of resources to learn about Monads (indeed, it seems the path to Haskell mastery must include writing at least one Monad tutorial). I found  <a href="http://monads.haskell.cz/html/">All About Monads</a> very useful. The introduction is really good, but links to this tutorial tend to disappear, unfortunately. There is also the <a href="http://book.realworldhaskell.org/read/monads.html">Monads</a> chapter of <a href="http://book.realworldhaskell.org/">Real World Haskell</a> (which you should read, but wait for the second edition to buy). This introduction is more complex, as it builds a State Monad rather than the Maybe Monad.</p>

<p>Finally, <a href="http://learnyouahaskell.com/a-fistful-of-monads">A Fistful of Monads</a> from <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good</a> also covers the Maybe Monad as an introduction. I have the book but did not read it yet, so I cannot comment on it, but I have seen great reviews.</p>

<h2>Exercises</h2>

<h3>Lookup function returning Maybe</h3>

<p>The function <code>my_lookup</code> is easy; it iterates over a list of pairs key, value, and returns <code>Just value</code> when the key matches. On empty list, it returns <code>Nothing</code>. There is no need to think about monads at this point. A key,value map is really some data structure that <code>Maybe</code> contains a specific key.</p>

<p>Slightly more difficult was the <code>testData</code>. The nesting was somewhat tricky to get right.</p>

<figure class='code'><figcaption><span> (lookup.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/lookup.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Lookup</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">my_lookup</span> <span class="n">key</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class='line'><span class="nf">my_lookup</span> <span class="n">key</span> <span class="p">((</span><span class="n">k</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span><span class="kt">:</span><span class="n">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">key</span> <span class="o">==</span> <span class="n">k</span>  <span class="ow">=</span> <span class="kt">Just</span> <span class="n">value</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">lookup</span> <span class="n">key</span> <span class="n">rest</span>
</span><span class='line'>
</span><span class='line'><span class="nf">testData</span> <span class="ow">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="kt">[]</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="s">&quot;tada!&quot;</span><span class="p">)]),</span> <span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;j&quot;</span><span class="p">,</span> <span class="s">&quot;nope&quot;</span><span class="p">)])]),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;k&quot;</span><span class="p">,</span> <span class="s">&quot;tada!&quot;</span><span class="p">)])])]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once this is defined, using it with the <code>&gt;&gt;=</code> operator is really simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Lookup&gt; my_lookup 2 testData &gt;&gt;= my_lookup "a" &gt;&gt;= my_lookup "i"
</span><span class='line'>Just "tada!"
</span><span class='line'>*Lookup&gt; my_lookup 2 testData &gt;&gt;= my_lookup "b" &gt;&gt;= my_lookup "i"
</span><span class='line'>Nothing</span></code></pre></td></tr></table></div></figure>


<h3>Solving Maze</h3>

<p>Using the List Monad to solve problems is very similar to using Prolog: elements in a list are alternative paths; failure (which must be explicit by calling <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:fail"><code>fail</code></a> or <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Control-Monad.html#v:guard"><code>guard</code></a>) backtracks to the next alternative; [<code>return</code>] adds a solution to the list of solutions (even if there&#8217;s only one possible solution, the List Monad produces a list).</p>

<p>To solve the maze, the algorithm do the following:</p>

<ul>
<li>the <code>loop</code> subfunction is used to explore a given solution; the List Monad hides the iteration and backtracking over alternatives</li>
<li>the <code>loop</code> function is always called with the reverse path so far: the first element is actually the current position</li>
<li>if the current position is the exit position, the path is reversed then returned as solution</li>
<li>otherwise, the current node is checked, and its exits retrieved</li>
<li>the positions in the path are first removed from the exits, to avoid looping (so we never go over the same position twice)</li>
<li>the List Monad main logic starts there:

<ul>
<li>first <code>guard</code> that the list of possible exits is not empty</li>
<li>then select and alternative new position</li>
<li>call <code>loop</code> on the new path to explore it</li>
</ul>
</li>
</ul>


<p>The code is fairly short, and perhaps could be shorter. The backtracking is provided for free by the List Monad, but very effective to implement a search (I used it to solve Sudoku problems).</p>

<p>To be fair, I took some time to track a bug: instead of adding the whole current path to the recursive <code>loop</code> call, I only passed the tail. That caused <code>loop</code> to actually ignore the current path, and run in circle forever. Once fixed, the search was instantaneous.</p>

<figure class='code'><figcaption><span> (maze.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/maze.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Maze</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- a Maze is an array of Node</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">Maze</span> <span class="ow">=</span> <span class="p">[[</span><span class="kt">Node</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- each node can have a number of exits (indicated by locations in the Maze)</span>
</span><span class='line'><span class="kr">data</span> <span class="kt">Node</span> <span class="ow">=</span> <span class="kt">Exits</span> <span class="p">[(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)]</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- solve a maze using List monad:</span>
</span><span class='line'><span class="c1">-- </span>
</span><span class='line'><span class="nf">solveMaze</span> <span class="ow">::</span> <span class="kt">Maze</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span><span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">[(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)]</span>
</span><span class='line'><span class="nf">solveMaze</span> <span class="n">m</span> <span class="n">pos</span> <span class="p">(</span><span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">case</span> <span class="n">loop</span> <span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="kr">of</span>
</span><span class='line'>    <span class="kt">[]</span> <span class="ow">-&gt;</span> <span class="kt">Nothing</span>
</span><span class='line'>    <span class="p">(</span><span class="n">p</span><span class="kt">:</span><span class="kr">_</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Just</span> <span class="o">$</span> <span class="n">p</span>
</span><span class='line'>  <span class="kr">where</span>
</span><span class='line'>    <span class="n">loop</span> <span class="n">path</span><span class="o">@</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span><span class="kt">:</span><span class="kr">_</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>      <span class="kr">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">e1</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">==</span> <span class="n">e2</span>
</span><span class='line'>      <span class="kr">then</span> <span class="n">return</span> <span class="o">$</span> <span class="n">reverse</span> <span class="n">path</span>
</span><span class='line'>      <span class="kr">else</span>
</span><span class='line'>        <span class="kr">let</span> <span class="p">(</span><span class="kt">Exits</span> <span class="n">exits</span><span class="p">)</span> <span class="ow">=</span> <span class="p">((</span><span class="n">m</span> <span class="o">!!</span> <span class="n">i</span><span class="p">)</span> <span class="o">!!</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>            <span class="n">poss</span> <span class="ow">=</span> <span class="n">exits</span> <span class="o">\\</span> <span class="n">path</span>
</span><span class='line'>        <span class="kr">in</span> <span class="kr">do</span> <span class="n">guard</span> <span class="p">(</span><span class="n">not</span> <span class="o">$</span> <span class="n">null</span> <span class="n">poss</span><span class="p">)</span>
</span><span class='line'>              <span class="n">pos</span> <span class="ow">&lt;-</span> <span class="n">poss</span>
</span><span class='line'>              <span class="n">loop</span> <span class="p">(</span><span class="n">pos</span><span class="kt">:</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- the problem is parsed by looking at characters around</span>
</span><span class='line'><span class="c1">-- every even position (position with even x and y)</span>
</span><span class='line'><span class="c1">-- if the character in a direction is a space, there&#39;s an exit</span>
</span><span class='line'><span class="nf">parseMaze</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Maze</span>
</span><span class='line'><span class="nf">parseMaze</span> <span class="n">raw</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">rows</span> <span class="ow">=</span> <span class="n">floor</span> <span class="o">$</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">length</span> <span class="n">raw</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">cols</span> <span class="ow">=</span> <span class="n">floor</span> <span class="o">$</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">length</span> <span class="o">$</span> <span class="n">head</span> <span class="n">raw</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>  <span class="kr">in</span> <span class="p">[[</span><span class="n">makeNode</span> <span class="n">i</span> <span class="n">j</span> <span class="o">|</span> <span class="n">j</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">cols</span><span class="p">]]</span> <span class="o">|</span> <span class="n">i</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">rows</span><span class="p">]]</span>
</span><span class='line'> <span class="kr">where</span>
</span><span class='line'>  <span class="n">makeNode</span> <span class="n">i</span> <span class="n">j</span> <span class="ow">=</span> <span class="kt">Exits</span> <span class="o">$</span> <span class="n">concatMap</span> <span class="p">(</span><span class="n">makeExit</span> <span class="n">i</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">[(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'>  <span class="n">makeExit</span> <span class="n">i</span> <span class="n">j</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">if</span> <span class="p">(</span><span class="n">raw</span> <span class="o">!!</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!!</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">j</span> <span class="o">+</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span>
</span><span class='line'>                        <span class="kr">then</span> <span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>                        <span class="kr">else</span> <span class="kt">[]</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Problem</span> <span class="ow">=</span> <span class="kt">Prob</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- updateAt runs an update function on the nth element in a list</span>
</span><span class='line'><span class="c1">-- keeps the rest</span>
</span><span class='line'><span class="nf">updateAt</span> <span class="n">n</span> <span class="n">f</span> <span class="n">ls</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">case</span> <span class="n">splitAt</span> <span class="n">n</span> <span class="n">ls</span> <span class="kr">of</span>
</span><span class='line'>    <span class="p">(</span><span class="n">pre</span><span class="p">,</span> <span class="p">(</span><span class="n">u</span><span class="kt">:</span><span class="n">rest</span><span class="p">))</span> <span class="ow">-&gt;</span> <span class="n">pre</span> <span class="o">++</span> <span class="p">((</span><span class="n">f</span> <span class="n">u</span><span class="p">)</span><span class="kt">:</span><span class="n">rest</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- update the prob description with path iteratively</span>
</span><span class='line'><span class="nf">displaySol</span> <span class="n">prob</span> <span class="n">sol</span> <span class="ow">=</span>
</span><span class='line'>  <span class="n">foldl&#39;</span> <span class="n">update</span> <span class="n">prob</span> <span class="n">sol</span>
</span><span class='line'> <span class="kr">where</span>
</span><span class='line'>  <span class="n">update</span> <span class="n">prob</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="ow">=</span> <span class="n">updateAt</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">updateAt</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">const</span> <span class="sc">&#39;*&#39;</span><span class="p">))</span> <span class="n">prob</span>
</span><span class='line'>
</span><span class='line'><span class="nf">solveProblem</span> <span class="ow">::</span> <span class="kt">FilePath</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">solveProblem</span> <span class="n">f</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">do</span> <span class="p">(</span><span class="kt">Prob</span> <span class="n">start</span> <span class="n">end</span> <span class="n">prob</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="n">readProblem</span> <span class="n">f</span>
</span><span class='line'>     <span class="kr">let</span> <span class="n">maze</span>   <span class="ow">=</span> <span class="n">parseMaze</span> <span class="n">prob</span>
</span><span class='line'>     <span class="kr">case</span> <span class="n">solveMaze</span> <span class="n">maze</span> <span class="n">start</span> <span class="n">end</span> <span class="kr">of</span>
</span><span class='line'>       <span class="kt">Just</span> <span class="n">sol</span> <span class="ow">-&gt;</span> <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">unlines</span> <span class="o">$</span> <span class="n">displaySol</span> <span class="n">prob</span> <span class="n">sol</span>
</span><span class='line'>       <span class="kt">Nothing</span>  <span class="ow">-&gt;</span> <span class="n">putStrLn</span> <span class="s">&quot;no solution found&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- special code for sample mazes from</span>
</span><span class='line'><span class="c1">-- http://benjamin-meyer.blogspot.com/2005/01/ascii-maze-ment-puzzle.html</span>
</span><span class='line'><span class="nf">readProblem</span> <span class="ow">::</span> <span class="kt">FilePath</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="kt">Problem</span>
</span><span class='line'><span class="nf">readProblem</span> <span class="n">f</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">do</span> <span class="n">raw</span> <span class="ow">&lt;-</span> <span class="n">readFile</span> <span class="n">f</span>
</span><span class='line'>     <span class="kr">let</span> <span class="n">filtered</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">filterMaze</span> <span class="n">raw</span> <span class="kr">of</span>
</span><span class='line'>                      <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">((</span><span class="n">init</span> <span class="o">$</span> <span class="n">init</span> <span class="n">l</span><span class="p">)</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">length</span> <span class="n">filtered</span><span class="p">,</span> <span class="n">length</span> <span class="p">(</span><span class="n">head</span> <span class="n">filtered</span><span class="p">))</span>
</span><span class='line'>     <span class="n">return</span> <span class="o">$</span> <span class="kt">Prob</span> <span class="p">((</span><span class="n">i</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">j</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">filtered</span>
</span><span class='line'>
</span><span class='line'><span class="nf">splitAtEvery</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="n">a</span><span class="p">]]</span>
</span><span class='line'><span class="nf">splitAtEvery</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">splitAtEvery</span> <span class="n">n</span> <span class="n">ls</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">case</span> <span class="n">splitAt</span> <span class="n">n</span> <span class="n">ls</span> <span class="kr">of</span>
</span><span class='line'>    <span class="p">(</span><span class="n">pre</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">pre</span><span class="kt">:</span><span class="n">splitAtEvery</span> <span class="n">n</span> <span class="n">rest</span>
</span><span class='line'>
</span><span class='line'><span class="nf">removeExtraSpaces</span> <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">=</span> <span class="n">l</span><span class="kt">:</span><span class="p">(</span><span class="n">concatMap</span> <span class="n">tail</span> <span class="o">$</span> <span class="n">splitAtEvery</span> <span class="mi">3</span> <span class="n">ls</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">filterMaze</span> <span class="ow">=</span> <span class="n">map</span> <span class="n">removeExtraSpaces</span> <span class="o">.</span> <span class="n">map</span> <span class="p">(</span><span class="n">drop</span> <span class="mi">5</span><span class="p">)</span> <span class="o">.</span> <span class="n">lines</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of the code includes a parser for a specific maze description (I found sample mazes <a href="http://benjamin-meyer.blogspot.com/2005/01/ascii-maze-ment-puzzle.html">here</a>), and code to process a problem into a <code>Maze</code> instance, and code to display a solution.</p>

<p>Testing (test data <a href="https://github.com/icefox/asciimaze/blob/master/sample-mazes/input1.txt">here</a>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Maze&gt; solveProblem "input1.txt"
</span><span class='line'> ___________________
</span><span class='line'>|   | |   |        *|
</span><span class='line'>| __| | __|___  __  |
</span><span class='line'>|   | |       |   |*|
</span><span class='line'>| __| |_____  |_  | |
</span><span class='line'>|   | | | |       |*|
</span><span class='line'>| __| | | |_______| |
</span><span class='line'>|            * * * *|
</span><span class='line'>| __________  __    |
</span><span class='line'>| |   |    * *| | | |
</span><span class='line'>|_|   |___  __| | |_|
</span><span class='line'>|   |     |*| | | | |
</span><span class='line'>|_  |_    | | | |_| |
</span><span class='line'>|   |   |  *|       |
</span><span class='line'>| __|_  |_  | __    |
</span><span class='line'>| |     |  * *| | | |
</span><span class='line'>|_| __  | __  | |_|_|
</span><span class='line'>| |   | | |  *  |   |
</span><span class='line'>| |   | |_|_  __|_  |
</span><span class='line'>|   | | |   |* *  | |
</span><span class='line'>| __|_| | __|_    | |
</span><span class='line'>| | |   |  * * *|   |
</span><span class='line'>|_| | __|_  __  |___|
</span><span class='line'>| | |     |*| | |   |
</span><span class='line'>| | | ____| | |_|_  |
</span><span class='line'>|   | |* * *        |
</span><span class='line'>|_  |_|   __  ______|
</span><span class='line'>|    * *| |     |   |
</span><span class='line'>|     __| |_  __| __|
</span><span class='line'>| | |*  |   |   |   |
</span><span class='line'>| |_| __|___|___|_  |
</span><span class='line'>|   |* *|     |     |
</span><span class='line'>|___|   |   __| ____|
</span><span class='line'>|   | |* *|     |   |
</span><span class='line'>| __|_|_  |     | __|
</span><span class='line'>|       |*| | |     |
</span><span class='line'>|_____  | |_| |_  __|
</span><span class='line'>|* * *|  *|     |   |
</span><span class='line'>|     |_  | __  |   |
</span><span class='line'>|*| |* * *|   | | | |
</span><span class='line'>|_|_|_____|___|_|_|_|</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping up Day 3 and Haskell</h2>

<p>The exercises (ok, just the maze one) were challenging and show or at least hint at Haskell strength: the ability to compose calculations from basic elements and add advanced control mechanisms almost transparently.</p>

<p>I enjoy Haskell; it allows to think at a higher level, to see computations from different angles, in a way that expands the mind (sometimes painfully). And while it is certainly not mainstream, there are high quality niches (banking and financial companies) that justify investing (stupid pun intended) in Haskell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Haskell Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/18/seven-languages-in-seven-weeks-haskell-day-2/"/>
    <updated>2011-11-18T09:39:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/18/seven-languages-in-seven-weeks-haskell-day-2</id>
    <content type="html"><![CDATA[<p>Today introduces the functional aspects of Haskell: higher order functions, partial application of functions and lazy evaluation.</p>

<!--more-->


<p>Higher order functions should no longer be surprising: many languages have that, even if Haskell other features make them very easy to use.</p>

<p>Partial application is such a feature. A function can be passed some, but not all its arguments, meaning that it is still a function, not a value. It reduces the number of anonymous functions one needs to write when using higher order functions.</p>

<p>Lazy evaluation is something very unique (among the lazy languages, only Haskell is somewhat mainstream). Clojure has lazy lists, which is cool, but lazy evaluation applies to everything. A piece of data can refer to itself in its definition, as long as the part that is needed can be evaluated before the part it depends on.</p>

<p>For instance, a canonical definition of the Fibonacci sequence is</p>

<figure class='code'><figcaption><span>Fibonacci sequence  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fibs</span> <span class="ow">=</span> <span class="mi">1</span><span class="kt">:</span><span class="mi">1</span><span class="kt">:</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">fibs</span> <span class="p">(</span><span class="n">tail</span> <span class="n">fibs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>fibs</code> list is the list of Fibonacci numbers. It starts with 1, 1, then the list of itself summed with its own tail&#8230; but the 3rd number depends on the first and the second, so its ok. By the time we need to compute the 4th, the 3rd is already known, and so on.</p>

<p>It takes but an instant to compute the 100000th number in the sequence:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Parse&gt; fibs !! 100000
</span><span class='line'>42026927029951543863190051012939151317739157026322345033047..... -- number truncated to save space</span></code></pre></td></tr></table></div></figure>


<p>Which brings me to a remark on the book: why on earth is <code>fibNth</code> defined the way it is? That function exists, and is called <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:-33--33-"><code>!!</code></a>. The code in the book is convoluted, does not need that many parenthesis, and even if you have a problem with <code>!!</code>, there is no need to use both <code>take</code> and <code>drop</code> if you&#8217;re going to take the <code>head</code> of the result (<code>take</code> will make a copy of the list for no good reason).</p>

<h2>Exercises</h2>

<p>In general I tried to avoid standard functions that implement a significant portion of the intended behaviour. So I didn&#8217;t use <code>sort</code> in my sort function, or <code>read</code> in parsing, &#8230;</p>

<h3>Simple sort</h3>

<p>A good sort algorithm is always tricky, but insertion sort is simple enough and easy to express with pattern matching. My implementation has the same signature as the standard <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-List.html#v:sort"><code>sort</code></a> function. It expects is arguments to have the class <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-Ord.html#t:Ord"><code>Ord</code></a>s, which guarantees they can be compared.</p>

<figure class='code'><figcaption><span> (mysort.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/mysort.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">MySort</span> <span class="kr">where</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Ord</span>
</span><span class='line'>
</span><span class='line'><span class="nf">my_sort</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">my_sort</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">my_insert</span> <span class="n">x</span> <span class="o">$</span> <span class="n">my_sort</span> <span class="n">xs</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">my_insert</span> <span class="n">x</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'>        <span class="n">my_insert</span> <span class="n">x</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span>        <span class="ow">=</span> <span class="n">y</span><span class="kt">:</span><span class="n">my_insert</span> <span class="n">x</span> <span class="n">ys</span>
</span><span class='line'>                           <span class="o">|</span> <span class="n">otherwise</span>    <span class="ow">=</span> <span class="n">x</span><span class="kt">:</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*MySort&gt; my_sort ([1..10] ++ [10, 9.. 1])
</span><span class='line'>[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]</span></code></pre></td></tr></table></div></figure>


<h3>Sort using comparison function</h3>

<p>Sort using a specific comparison function is not harder. The standard implementation uses <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-Ord.html#t:Ordering"><code>Data.Ord.Ordering</code></a> to replace <code>&gt;</code> by the comparison result <code>GT</code>. My implementation has the same signature as the standard <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-List.html#v:sortBy"><code>sortBy</code></a>, but still uses the insertion sort as in <code>my_sort</code>.</p>

<figure class='code'><figcaption><span> (mysortby.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/mysortby.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">MySort</span> <span class="kr">where</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Ord</span>
</span><span class='line'>
</span><span class='line'><span class="nf">my_sort_by</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Ordering</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">my_sort_by</span> <span class="kr">_</span> <span class="kt">[]</span>     <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">my_sort_by</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">my_insert_by</span> <span class="n">f</span> <span class="n">x</span> <span class="o">$</span> <span class="n">my_sort_by</span> <span class="n">f</span> <span class="n">xs</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">my_insert_by</span> <span class="kr">_</span> <span class="n">x</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'>        <span class="n">my_insert_by</span> <span class="n">f</span> <span class="n">x</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span> <span class="o">|</span> <span class="n">f</span> <span class="n">x</span> <span class="n">y</span> <span class="o">==</span> <span class="kt">GT</span> <span class="ow">=</span> <span class="n">y</span><span class="kt">:</span><span class="n">my_insert_by</span> <span class="n">f</span> <span class="n">x</span> <span class="n">ys</span>
</span><span class='line'>                                <span class="o">|</span> <span class="n">otherwise</span>   <span class="ow">=</span> <span class="n">x</span><span class="kt">:</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it (using <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-Ord.html#v:compare"><code>compare</code></a> on the absolute value):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*MySort&gt; my_sort_by (\a b -&gt; compare (abs a) (abs b)) ([10, 9..1] ++ [-10..(-1)])
</span><span class='line'>[1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8,-8,9,-9,10,-10]</span></code></pre></td></tr></table></div></figure>


<h3>Parse string into number</h3>

<p>Parsing is not hard; to do it I break the string into a integral part, and the fractional part. Both are then cleaned to remove non digits.</p>

<p>The integral part is parsed left to right (with <code>foldl</code>), each time multiplying the already parsed number by 10 before adding the current number.</p>

<p>The fractional part is parsed right to left (with <code>foldr</code>), dividing the already parsed number by 10 before adding the current number.</p>

<p>Note the use of <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:fromIntegral"><code>fromIntegral</code></a> function. This is used to convert and integral number (<code>Int</code>, <code>Integer</code>, &#8230;) into any type of number. This is necessary to be allowed to divide the results and add the fractional part.</p>

<p>The use of fractional arithmetic makes this function less effective than <code>read</code>.</p>

<figure class='code'><figcaption><span> (parse.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/parse.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Parse</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Char</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'>
</span><span class='line'><span class="nf">parse</span> <span class="n">str</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span> <span class="p">(</span><span class="n">dig</span><span class="p">,</span> <span class="n">frac</span><span class="p">)</span> <span class="ow">=</span> <span class="n">break</span> <span class="p">(</span><span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="p">)</span> <span class="n">str</span>
</span><span class='line'>    <span class="kr">in</span> <span class="n">foldl&#39;</span> <span class="n">pDig</span> <span class="mi">0</span> <span class="p">(</span><span class="n">clean</span> <span class="n">dig</span><span class="p">)</span> <span class="o">+</span> <span class="n">foldr</span> <span class="n">pFrac</span> <span class="mi">0</span> <span class="p">(</span><span class="n">clean</span> <span class="n">frac</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nf">clean</span> <span class="n">s</span>   <span class="ow">=</span> <span class="n">filter</span> <span class="n">isDigit</span> <span class="n">s</span>
</span><span class='line'><span class="nf">pDig</span>  <span class="n">a</span> <span class="n">b</span> <span class="ow">=</span> <span class="mi">10</span><span class="o">*</span><span class="n">a</span> <span class="o">+</span> <span class="n">toNum</span> <span class="n">b</span>
</span><span class='line'><span class="nf">pFrac</span> <span class="n">a</span> <span class="n">b</span> <span class="ow">=</span> <span class="n">toNum</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">/</span><span class="mi">10</span>
</span><span class='line'><span class="nf">toNum</span> <span class="n">c</span>   <span class="ow">=</span> <span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">ord</span> <span class="n">c</span> <span class="o">-</span> <span class="n">ord</span> <span class="sc">&#39;0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Parse&gt; parse "$2,345,678.99"
</span><span class='line'>2345678.99
</span><span class='line'>*Parse&gt; parse "2,345"
</span><span class='line'>2345.0
</span><span class='line'>*Parse&gt; parse ".99"
</span><span class='line'>0.99
</span><span class='line'>*Parse&gt; parse ".234"
</span><span class='line'>0.23399999999999999</span></code></pre></td></tr></table></div></figure>


<h3>Lazy sequences</h3>

<p>Once again, nothing difficult. Haskell notation pretty much reads as a specification of the problem:</p>

<figure class='code'><figcaption><span> (lazy.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/lazy.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Lazy</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">thirds</span> <span class="n">x</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">3</span><span class="o">..</span><span class="p">]</span>
</span><span class='line'><span class="nf">fifths</span> <span class="n">x</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">5</span><span class="o">..</span><span class="p">]</span>
</span><span class='line'><span class="nf">eighths</span> <span class="n">x</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="p">(</span><span class="n">thirds</span> <span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="n">fifths</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Lazy&gt; take 10 $ thirds 10
</span><span class='line'>[10,13,16,19,22,25,28,31,34,37]
</span><span class='line'>*Lazy&gt; take 10 $ fifths 20
</span><span class='line'>[20,25,30,35,40,45,50,55,60,65]
</span><span class='line'>*Lazy&gt; take 10 $ eighths 10 20
</span><span class='line'>[30,38,46,54,62,70,78,86,94,102]</span></code></pre></td></tr></table></div></figure>


<h3>Partial application</h3>

<p>Notice the use of partial application of operators: if you wrap the operator and its argument in parenthesis (they are needed here), you have a function that takes the missing argument. The missing argument can be the left one as see here.</p>

<figure class='code'><figcaption><span> (partial.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/partial.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Partial</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">half</span> <span class="ow">=</span> <span class="p">(</span><span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">terminate</span> <span class="ow">=</span> <span class="p">(</span><span class="o">++</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Partial&gt; half 10
</span><span class='line'>5.0
</span><span class='line'>*Partial&gt; terminate "Hello"
</span><span class='line'>"Hello\n"</span></code></pre></td></tr></table></div></figure>


<h2>Challenges</h2>

<h3>Greatest Common Denominator</h3>

<p>I must have missed something, because that was hardly a challenge. I just implemented the <a href="http://en.wikipedia.org/wiki/Euclidean_algorithm">Euclidean algorithm</a>:</p>

<figure class='code'><figcaption><span> (gcd.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/gcd.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">GCD</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Euclidean algorithm</span>
</span><span class='line'><span class="nf">my_gcd</span> <span class="n">m</span> <span class="n">n</span> <span class="o">|</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">n</span>     <span class="ow">=</span> <span class="n">my_gcd</span> <span class="n">n</span> <span class="n">m</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>    <span class="ow">=</span> <span class="n">m</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">my_gcd</span> <span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">n</span><span class="p">)</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*GCD&gt; my_gcd 1961 901
</span><span class='line'>53
</span><span class='line'>*GCD&gt; my_gcd 901 1961 
</span><span class='line'>53
</span><span class='line'>*GCD&gt; gcd 1961 901
</span><span class='line'>53</span></code></pre></td></tr></table></div></figure>


<p><code>my_gcd</code> agrees with the standard <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:gcd"><code>gcd</code></a> function.</p>

<h3>Lazy prime number sequences</h3>

<p>This one was a bit trickier, yet an implementation that closely follows the <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> algorithm is fairly short.</p>

<p>I first need a difference function that works on infinite lists: I manage this by taking into account the fact that the lists are always sorted. The <code>minus</code> just compares the first item of its arguments, so it can work linearly on both of them. Note that this function is not able to work on finite lists, but in this context there is no need to.</p>

<p>The implementation follows the proposed optimizations: it puts 2 in the prime number list right from the start, and skips other even numbers. It also start filtering at <code>p*p</code>, as smaller multiples have been filtered already (being a multiple of smaller prime numbers).</p>

<figure class='code'><figcaption><span> (sieve.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/sieve.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Sieve</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">minus</span> <span class="n">xl</span><span class="o">@</span><span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">yl</span><span class="o">@</span><span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>    <span class="ow">=</span> <span class="n">minus</span> <span class="n">xs</span> <span class="n">ys</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span>     <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">minus</span> <span class="n">xs</span> <span class="n">yl</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">minus</span> <span class="n">xl</span> <span class="n">ys</span>
</span><span class='line'>
</span><span class='line'><span class="nf">primes</span> <span class="ow">=</span> <span class="mi">2</span><span class="kt">:</span><span class="n">sieve</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span> <span class="o">..</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sieve</span> <span class="p">(</span><span class="n">p</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">p</span><span class="kt">:</span><span class="n">sieve</span> <span class="p">(</span><span class="n">xs</span> <span class="p">`</span><span class="n">minus</span><span class="p">`</span> <span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="n">p</span> <span class="o">..</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation is very slow, but can compute the first 1000 prime numbers.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Sieve&gt; primes !! 1000
</span><span class='line'>7927</span></code></pre></td></tr></table></div></figure>


<p>This turns out to be the first implementation on the Prime Number generator <a href="http://www.haskell.org/haskellwiki/Prime_numbers">page</a> on the Haskell wiki. Other implementations are much smarter and faster.</p>

<h3>Breaking string into lines</h3>

<p>The exercise description seems to be missing something: a line length. So I have added that to the functions.</p>

<p>Breaking into words is best done with <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:words"><code>words</code></a>, but I implemented my version. I actually started with a first abstraction, not really necessary here, that splits a sequence based on a predicate (items that return true for the predicate are all removed). Then <code>my_words</code> is just calling that function with <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-Char.html#v:isSpace"><code>isSpace</code></a> as the predicate.</p>

<p>To combine words back into lines, I used two small functions: one (<code>accumUntil</code>) builds a line one word at a time, and stops when the line is too long. It starts with a word as the first tentative line, to make sure that a line is not empty even if a word is too long to fit.</p>

<p>The other function (<code>loop</code>) uses the previous one to build a list of lines until the list of words is empty.</p>

<figure class='code'><figcaption><span> (split.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/split.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Split</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Char</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- generalize words and lines: remove extra break characters at the start,</span>
</span><span class='line'><span class="c1">-- then split at the next break characters; recurse on the rest</span>
</span><span class='line'>
</span><span class='line'><span class="nf">breakAtEvery</span> <span class="n">f</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">dropWhile</span> <span class="n">f</span> <span class="n">xs</span> <span class="kr">of</span>
</span><span class='line'>                      <span class="kt">[]</span>  <span class="ow">-&gt;</span> <span class="kt">[]</span>
</span><span class='line'>                      <span class="n">xs&#39;</span> <span class="ow">-&gt;</span> <span class="n">p</span><span class="kt">:</span><span class="n">breakAtEvery</span> <span class="n">f</span> <span class="n">r</span>
</span><span class='line'>                        <span class="kr">where</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span> <span class="ow">=</span> <span class="n">break</span> <span class="n">f</span> <span class="n">xs&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">my_words</span> <span class="ow">=</span> <span class="n">breakAtEvery</span> <span class="n">isSpace</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- loop iterate over lines built by accumUntil</span>
</span><span class='line'><span class="c1">-- accumUntil builds a line (at least one word) and adds words</span>
</span><span class='line'><span class="c1">-- until the length is too long</span>
</span><span class='line'>
</span><span class='line'><span class="nf">split</span> <span class="n">m</span> <span class="n">str</span> <span class="ow">=</span> <span class="n">loop</span> <span class="o">$</span> <span class="n">my_words</span> <span class="n">str</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">loop</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'>        <span class="n">loop</span> <span class="p">(</span><span class="n">w</span><span class="kt">:</span><span class="n">words</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">accumUntil</span> <span class="n">m</span> <span class="n">w</span> <span class="n">words</span> <span class="kr">of</span>
</span><span class='line'>                           <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="kt">[]</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">line</span><span class="p">]</span>
</span><span class='line'>                           <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">line</span><span class="kt">:</span><span class="n">loop</span> <span class="n">rest</span>
</span><span class='line'>        <span class="n">accumUntil</span> <span class="kr">_</span> <span class="n">line</span> <span class="kt">[]</span>        <span class="ow">=</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="kt">[]</span><span class="p">)</span>
</span><span class='line'>        <span class="n">accumUntil</span> <span class="n">m</span> <span class="n">line</span> <span class="p">(</span><span class="n">w</span><span class="kt">:</span><span class="n">words</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">line&#39;</span> <span class="ow">=</span> <span class="n">line</span> <span class="o">++</span> <span class="s">&quot; &quot;</span> <span class="o">++</span> <span class="n">w</span>
</span><span class='line'>                                      <span class="kr">in</span> <span class="kr">if</span> <span class="p">(</span><span class="n">length</span> <span class="n">line&#39;</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>                                         <span class="kr">then</span> <span class="n">accumUntil</span> <span class="n">m</span> <span class="n">line&#39;</span> <span class="n">words</span>
</span><span class='line'>                                         <span class="kr">else</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">w</span><span class="kt">:</span><span class="n">words</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing (splitting a long paragraph into lines of at most 72 characters):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Split&gt; putStrLn $ unlines $ split 72 "Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio. Pellentesque cursus augue quis libero malesuada ornare. Phasellus interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit interdum at a purus."
</span><span class='line'>Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam
</span><span class='line'>nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio.
</span><span class='line'>Pellentesque cursus augue quis libero malesuada ornare. Phasellus
</span><span class='line'>interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper
</span><span class='line'>posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit
</span><span class='line'>ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla
</span><span class='line'>facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit
</span><span class='line'>interdum at a purus.</span></code></pre></td></tr></table></div></figure>


<p>I used <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:unlines"><code>unlines</code></a> to group the split lines back into a single string separated by newlines and <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:putStrLn"><code>putStrLn</code></a> to print the result.</p>

<h3>Justify text</h3>

<p>The general structure of the <code>justify</code> functions is the same:</p>

<ul>
<li>compute the maximum length of all the lines</li>
<li>for each line, compute the difference between the line length and the maximum line length</li>
<li>insert spaces in the right location (depending on the kind of justification)</li>
</ul>


<p>Each justification is a specific function. First <code>pad</code> is a small utility that creates a string of spaces of the required length.</p>

<p><code>right</code> and <code>left</code> uses the above strategy to add spaces left and right, respectively. <code>center</code> adds half left, and half right. Of course <code>left</code> does not do anything visible, it just adds spaces to make each line the same length.</p>

<p><code>both</code> is more complex, as it inserts spaces between words. The strategy is naive (actual algorithms include dynamic programming to balance the amount of space), but effective.</p>

<p>The general idea is to spread the missing space between words. For this I follow these steps:</p>

<ul>
<li>split the line into words using the code from the <code>Split</code> module;</li>
<li>compute the number of interval (the count of the words minus 1). As I&#8217;m going to put the spaces between words, this interval also count as missing spaces (see next step). I refer to this amount as <code>iter</code>;</li>
<li>divide the number of missing spaces (difference between maximum line length and effective line length plus the interval): this is the amount of space I should add between each word to add up to the right amount, if I could add fractional space</li>
<li>multiply each item in <code>[1..inter]</code> by the fractional space amount as computed above.</li>
<li>iterate over the list from previous step:

<ul>
<li>compute the nearest integer of the current item (note that by construction, the nearest integer of the last item is exactly the amount of missing space);</li>
<li>the difference between this integer and the amount of space allocated so far (this amount is zero at the start, of course)</li>
<li>add a padding (using the <code>pad</code> function) to a list of spaces, and update the amount of space allocated before the next iteration</li>
</ul>
</li>
<li>then <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:zipWith"><code>zipWith</code></a> the list of spaces with the list of words, and recreate the line with <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:concat"><code>concat</code></a>.</li>
</ul>


<p>The algorithm above is for a single line, but when justifying a whole paragraph, the last line should be left justified. So the <code>justify_both</code> applies the <code>both</code> justification to all but the last line, and <code>left</code> to the last line.</p>

<figure class='code'><figcaption><span> (justify.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/justify.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Justify</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Split</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- takes a justify function, a max length line (will be adjusted to max of strs lengths)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">justify</span> <span class="n">f</span> <span class="n">m</span> <span class="n">strs</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">m&#39;</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">max</span> <span class="n">m</span> <span class="p">(</span><span class="n">map</span> <span class="n">length</span> <span class="n">strs</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">map</span> <span class="p">(</span><span class="n">f</span> <span class="n">m&#39;</span><span class="p">)</span> <span class="n">strs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- when justifying both sides, the last line should be left justified</span>
</span><span class='line'><span class="nf">justify_both</span> <span class="n">m</span> <span class="n">strs</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">m&#39;</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">max</span> <span class="n">m</span> <span class="p">(</span><span class="n">map</span> <span class="n">length</span> <span class="n">strs</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">map</span> <span class="p">(</span><span class="n">both</span> <span class="n">m&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">init</span> <span class="n">strs</span> <span class="p">)</span> <span class="o">++</span> <span class="p">[</span><span class="n">left</span> <span class="n">m&#39;</span> <span class="p">(</span><span class="n">last</span> <span class="n">strs</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">justify_left</span> <span class="ow">=</span> <span class="n">justify</span> <span class="n">left</span>
</span><span class='line'><span class="nf">justify_right</span> <span class="ow">=</span> <span class="n">justify</span> <span class="n">right</span>
</span><span class='line'><span class="nf">justify_center</span> <span class="ow">=</span> <span class="n">justify</span> <span class="n">center</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- helper functions  </span>
</span><span class='line'><span class="c1">-- create n spaces</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pad</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">n</span> <span class="p">(</span><span class="n">repeat</span> <span class="sc">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Justify function helpers: add spaces at the right </span>
</span><span class='line'><span class="c1">-- location to make the length of line equal to m. </span>
</span><span class='line'><span class="c1">-- Incorrect if m is smaller than length line </span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- pad spaces on the right </span>
</span><span class='line'><span class="nf">left</span> <span class="n">m</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">line</span> <span class="o">++</span> <span class="n">pad</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="n">length</span> <span class="n">line</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- pad spaces on the left</span>
</span><span class='line'>
</span><span class='line'><span class="nf">right</span> <span class="n">m</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">pad</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="n">length</span> <span class="n">line</span><span class="p">)</span> <span class="o">++</span> <span class="n">line</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- pad both sides by half the difference</span>
</span><span class='line'>
</span><span class='line'><span class="nf">center</span> <span class="n">m</span> <span class="n">line</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">lp</span> <span class="ow">=</span> <span class="n">floor</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="n">length</span> <span class="n">line</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rp</span> <span class="ow">=</span> <span class="n">m</span> <span class="o">-</span> <span class="n">lp</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">pad</span> <span class="n">lp</span> <span class="o">++</span> <span class="n">line</span> <span class="o">++</span> <span class="n">pad</span> <span class="n">rp</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- justify both sides: compute the size of each interval in FRACtional value</span>
</span><span class='line'><span class="c1">-- then build a list of interval paddings with the length as close as possible</span>
</span><span class='line'><span class="c1">-- from the running sum of fractional intervals</span>
</span><span class='line'><span class="nf">both</span> <span class="n">m</span> <span class="kt">[]</span>   <span class="ow">=</span> <span class="n">pad</span> <span class="n">m</span>
</span><span class='line'><span class="nf">both</span> <span class="n">m</span> <span class="n">line</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="p">(</span><span class="n">w</span><span class="kt">:</span><span class="n">words</span><span class="p">)</span> <span class="ow">=</span> <span class="n">my_words</span> <span class="n">line</span>
</span><span class='line'>      <span class="n">inter</span> <span class="ow">=</span> <span class="n">length</span> <span class="n">words</span>
</span><span class='line'>      <span class="n">addInterFrac</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="n">makeInter</span> <span class="n">inter</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">inter</span><span class="p">]</span>
</span><span class='line'>      <span class="n">addSpaces</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">foldl</span> <span class="n">adjust</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="kt">[]</span><span class="p">)</span> <span class="n">addInterFrac</span> <span class="kr">of</span>
</span><span class='line'>                    <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="n">spaces</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">spaces</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">concat</span> <span class="p">(</span><span class="n">w</span><span class="kt">:</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">++</span><span class="p">)</span> <span class="n">addSpaces</span> <span class="n">words</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">adjust</span> <span class="p">(</span><span class="n">curr</span><span class="p">,</span> <span class="n">spaces</span><span class="p">)</span> <span class="n">newFrac</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">diff</span> <span class="ow">=</span> <span class="n">round</span> <span class="p">(</span><span class="n">newFrac</span> <span class="o">-</span> <span class="n">fromIntegral</span> <span class="n">curr</span><span class="p">)</span>
</span><span class='line'>                                        <span class="kr">in</span> <span class="p">(</span><span class="n">curr</span> <span class="o">+</span> <span class="n">diff</span><span class="p">,</span> <span class="p">(</span><span class="n">pad</span> <span class="n">diff</span><span class="p">)</span><span class="kt">:</span><span class="n">spaces</span><span class="p">)</span>
</span><span class='line'>        <span class="n">makeInter</span> <span class="n">inter</span> <span class="n">i</span> <span class="ow">=</span> <span class="n">fromIntegral</span> <span class="n">i</span>
</span><span class='line'>             <span class="o">*</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="n">length</span> <span class="n">line</span> <span class="o">+</span> <span class="n">inter</span><span class="p">))</span>
</span><span class='line'>             <span class="o">/</span> <span class="n">fromIntegral</span> <span class="n">inter</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing (the full test text is not reproduce here to save space):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Justify&gt; putStrLn $ unlines $ justify_left 72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'>Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam    
</span><span class='line'>nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio.    
</span><span class='line'>Pellentesque cursus augue quis libero malesuada ornare. Phasellus       
</span><span class='line'>interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper     
</span><span class='line'>posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit    
</span><span class='line'>ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla    
</span><span class='line'>facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit   
</span><span class='line'>interdum at a purus.
</span><span class='line'>*Justify&gt; putStrLn $ unlines $ justify_right 72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'> Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam
</span><span class='line'> nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio.
</span><span class='line'>    Pellentesque cursus augue quis libero malesuada ornare. Phasellus
</span><span class='line'>  interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper
</span><span class='line'> posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit
</span><span class='line'> ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla
</span><span class='line'>facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit
</span><span class='line'>                                                 interdum at a purus.
</span><span class='line'>*Justify&gt; putStrLn $ unlines $ justify_center 72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam                                                                      
</span><span class='line'>  nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio.                                                                              
</span><span class='line'>   Pellentesque cursus augue quis libero malesuada ornare. Phasellus                                                                     
</span><span class='line'>  interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper                                                                      
</span><span class='line'>  posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit                                                                      
</span><span class='line'>  ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla                                                                      
</span><span class='line'> facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit                                                                       
</span><span class='line'>                          interdum at a purus.
</span><span class='line'>*Justify&gt; putStrLn $ unlines $ justify_both 72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'>Lorem ipsum  dolor sit  amet, consectetur adipiscing  elit. In  vel diamnunc. Proin  in justo quis  nisl aliquam  mollis. Sed vitae  dolor odio.Pellentesque  cursus  augue  quis  libero  malesuada  ornare.  Phasellus
</span><span class='line'>interdum  ultrices tincidunt.  Etiam  ullamcorper,  massa a  ullamcorper
</span><span class='line'>posuere, dolor  quam consequat  est, ut  ullamcorper elit  eros suscipit
</span><span class='line'>ante. Etiam  non quam sit  amet risus posuere  mollis non in  est. Nulla
</span><span class='line'>facilisi. Sed  ut commodo risus. Suspendisse  ut nisi ac  erat hendrerit
</span><span class='line'>interdum at a purus.</span></code></pre></td></tr></table></div></figure>


<h3>Number lines</h3>

<p>I finished with this one, as I reused some functions defined in the module <code>Justify</code> above.</p>

<p>This is much simpler than justifying. I need to know the number of digits I would need (which depends on the number of lines). Then I can right justify the line number and add it left of each line.</p>

<figure class='code'><figcaption><span> (number.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/number.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Number</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Justify</span>
</span><span class='line'>
</span><span class='line'><span class="nf">addLineNum</span> <span class="n">lines</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">md</span> <span class="ow">=</span> <span class="n">floor</span> <span class="o">$</span> <span class="n">logBase</span> <span class="mi">10</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="p">(</span><span class="n">length</span> <span class="n">lines</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="kr">in</span> <span class="n">zipWith</span> <span class="p">(</span><span class="n">lineNum</span> <span class="n">md</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span> <span class="n">lines</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">lineNum</span> <span class="n">md</span> <span class="n">num</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">toStr</span> <span class="n">md</span> <span class="n">num</span> <span class="o">++</span> <span class="s">&quot; &quot;</span> <span class="o">++</span> <span class="n">line</span>
</span><span class='line'>        <span class="n">toStr</span> <span class="n">maxDigits</span> <span class="n">num</span> <span class="ow">=</span> <span class="n">right</span> <span class="n">maxDigits</span> <span class="p">(</span><span class="n">show</span> <span class="n">num</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; :l number.hs 
</span><span class='line'>[1 of 3] Compiling Split            ( Split.hs, interpreted )
</span><span class='line'>[2 of 3] Compiling Justify          ( Justify.hs, interpreted )
</span><span class='line'>[3 of 3] Compiling Number           ( number.hs, interpreted )
</span><span class='line'>Ok, modules loaded: Number, Justify, Split.
</span><span class='line'>*Number&gt; :m +Split Justify
</span><span class='line'>*Number Split Justify&gt; putStrLn $ unlines $ addLineNum $ justify_both  72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'>1 Lorem ipsum  dolor sit  amet, consectetur adipiscing  elit. In  vel diam
</span><span class='line'>2 nunc. Proin  in justo quis  nisl aliquam  mollis. Sed vitae  dolor odio.
</span><span class='line'>3 Pellentesque  cursus  augue  quis  libero  malesuada  ornare.  Phasellus
</span><span class='line'>4 interdum  ultrices tincidunt.  Etiam  ullamcorper,  massa a  ullamcorper
</span><span class='line'>5 posuere, dolor  quam consequat  est, ut  ullamcorper elit  eros suscipit
</span><span class='line'>6 ante. Etiam  non quam sit  amet risus posuere  mollis non in  est. Nulla
</span><span class='line'>7 facilisi. Sed  ut commodo risus. Suspendisse  ut nisi ac  erat hendrerit
</span><span class='line'>8 interdum at a purus.                                                    </span></code></pre></td></tr></table></div></figure>


<h2>Wrapping up Day 2</h2>

<p>As I knew Haskell already, this was not too taxing. I had fun with the justify challenge, trying to come up with a reasonable way to insert the right amount of space at the right place.</p>

<p>Dealing with types was also mostly painless. I had a couple of errors when trying to compile, but every time the location was well reported and the fix easy to figure out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Haskell Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/17/seven-languages-in-seven-weeks-haskell-day-1/"/>
    <updated>2011-11-17T07:58:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/17/seven-languages-in-seven-weeks-haskell-day-1</id>
    <content type="html"><![CDATA[<p>The final language of the book is Haskell. Haskell is challenging and satisfying in many ways. It can be elegant and slow, or, in the hands of experts, elegant and fast (ugly but fast is usually for intermediate users).</p>

<!--more-->


<p>I had learned Haskell already, so I did not really benefit from this chapter. Still, some of the exercises were fun (and I tried to improve those that were not).</p>

<h3>On 4 + 1.0</h3>

<p>The book does not explain what happens in this expression, but I believe there is something deep and cool about Haskell here. When typing <code>4 + 1.0</code> in ghci, the output comes back as <code>5.0</code>, as expected. But the actual behaviour is not exactly usual.</p>

<p>Most languages would do that kind of processing:</p>

<ul>
<li>when parsing, 4 is tagged as integer, while 1.0 is tagged as float;</li>
<li>at runtime, the operator <code>+</code> checks its arguments:

<ul>
<li>if the types are different, it promotes the argument with the least general type to the other type. In this case, 4 is promoted to float;</li>
<li>then it call the addition routine for the correct type.</li>
</ul>
</li>
</ul>


<p>Haskell does nothing like that. The type of <code>+</code> is <code>(+) :: Num a =&gt; a -&gt; a -&gt; a</code>. In other words, its arguments must have the same type (it is similar to Ocaml in this regard). Yet the operation succeeds.</p>

<p>This is because what the parser does is similar to replacing the numeric literal by a call to the <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read"><code>read</code></a> function, with just enough constraints on the type to be compatible with the syntax of the literal.</p>

<p>Let&#8217;s look at that <code>read</code> function. First of all, it cannot be called with no type constraint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; read "4.0" :: Int
</span><span class='line'>*** Exception: Prelude.read: no parse
</span><span class='line'>Prelude&gt; read "a"
</span><span class='line'>
</span><span class='line'>&lt;interactive&gt;:1:1:
</span><span class='line'>    Ambiguous type variable `a0' in the constraint:
</span><span class='line'>      (Read a0) arising from a use of `read'
</span><span class='line'>    Probable fix: add a type signature that fixes these type variable(s)
</span><span class='line'>    In the expression: read "a"
</span><span class='line'>    In an equation for `it': it = read "a"</span></code></pre></td></tr></table></div></figure>


<p>What Haskell says here (quite forcefully) is that it does not know how to interpret the string &#8220;4&#8221; without a specific type to guide it. Lets give it one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; read "4" :: Int
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure>


<p>If we propose to read &#8220;4&#8221; as an <code>Int</code>, <code>read "4"</code> returns an <code>Int</code> of value 4. We can try with other types:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; read "4" :: Float
</span><span class='line'>4.0</span></code></pre></td></tr></table></div></figure>


<p>Same thing here: we constraint the value of <code>read "4"</code> to be a <code>Float</code>, so it is one. Notice how the type system can feed constraints back into a function through the return value.</p>

<p>So what happened in <code>4 + 1.0</code>? The parser replaced the literals by calls to <code>read</code>, with constraints on literals whose syntax cannot be an Integral value (such as 1.0, which indicates a <code>Float</code>). So what is really executed is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; read "4" + (read "1.0" :: Float)
</span><span class='line'>5.0</span></code></pre></td></tr></table></div></figure>


<p>The <code>+</code> operator constraints both operands to the same type, so <code>read "4"</code> receives the constraint <code>:: Float</code> as well; both operands have the same type, always. There is no implicit conversion happening at run time.</p>

<h3>On ranges</h3>

<p>The book mentions that ranges can be built with fractional numbers, but this is really a bad idea. Haskell does support it, but will use float arithmetic, which has notorious problems for such usage. Consider this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; [1, 0.9 .. 0]
</span><span class='line'>[1.0,0.9,0.8,0.7000000000000001,0.6000000000000001,0.5000000000000001,0.40000000000000013,0.30000000000000016,0.20000000000000018,0.1000000000000002,2.220446049250313e-16]
</span><span class='line'>Prelude&gt; 
</span><span class='line'>Prelude&gt; map (/ 10) [10, 9 .. 0]
</span><span class='line'>[1.0,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.0]
</span><span class='line'>Prelude&gt; </span></code></pre></td></tr></table></div></figure>


<p>The first version (fractional ranges) accumulates small errors, but the second version (integral ranges mapped into fractional ranges) is correct.</p>

<h2>Exercises</h2>

<h3>The Haskell wiki</h3>

<p>The wiki is <a href="http://haskell.org/haskellwiki/Haskell">here</a>.</p>

<h3>allEven</h3>

<p>I have 6 (or 7) variants of <code>allEven</code>. The most natural one is <code>allEven_2'</code>, based on <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter"><code>filter</code></a>. <code>allEven_5</code> is the same as the book version, but abstract the recursion away in <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr"><code>foldr</code></a>. <code>allEven_6</code> is strict, which means it does not work on infinite list. I tried to explain how it works <a href="http://blog.wakatta.jp/blog/2011/11/11/haskell-foldr-as-foldl/">here</a>. Of course there would never be any good reason to use anything like it, it is merely the kind of jokes Haskell programmers (some of them at least) enjoy (some of the time).</p>

<figure class='code'><figcaption><span> (alleven.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/alleven.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">AllEven</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- basic definition</span>
</span><span class='line'><span class="nf">allEven</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Integer</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Integer</span><span class="p">]</span>
</span><span class='line'><span class="nf">allEven</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">allEven</span> <span class="p">(</span><span class="n">h</span><span class="kt">:</span><span class="n">t</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">h</span> <span class="kr">then</span> <span class="n">h</span><span class="kt">:</span><span class="n">allEven</span> <span class="n">t</span> <span class="kr">else</span> <span class="n">allEven</span> <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- essentially we are filtering, so maybe a filter function would help</span>
</span><span class='line'><span class="nf">my_filter</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">my_filter</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">my_filter</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">f</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">x</span><span class="kt">:</span><span class="n">my_filter</span> <span class="n">f</span> <span class="n">xs</span> <span class="kr">else</span> <span class="n">my_filter</span> <span class="n">f</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- so now we can use the my_filter function to write a new allEven:</span>
</span><span class='line'><span class="nf">allEven_2</span> <span class="n">ls</span> <span class="ow">=</span> <span class="n">my_filter</span> <span class="n">even</span> <span class="n">ls</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- in point free notation,</span>
</span><span class='line'><span class="nf">allEven_2&#39;</span> <span class="ow">=</span> <span class="n">my_filter</span> <span class="n">even</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- actually, filter already exists:</span>
</span><span class='line'><span class="nf">allEven_filter</span> <span class="ow">=</span> <span class="n">filter</span> <span class="n">even</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- if even numbers are replaced by a singleton, and odd numbers </span>
</span><span class='line'><span class="c1">-- by an empty list, when we concatenate, we get the result we want</span>
</span><span class='line'><span class="nf">allEven_3</span> <span class="ow">=</span> <span class="n">concat</span> <span class="o">.</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">x</span> <span class="kr">then</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="kr">else</span> <span class="kt">[]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- concat . map == concatMap</span>
</span><span class='line'><span class="nf">allEven_4</span> <span class="ow">=</span> <span class="n">concatMap</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">x</span> <span class="kr">then</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="kr">else</span> <span class="kt">[]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- processing lists left to right is a job for foldr. </span>
</span><span class='line'><span class="c1">-- Actually this is closer to the original definition</span>
</span><span class='line'><span class="nf">allEven_5</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="n">xs</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">x</span><span class="kt">:</span><span class="n">xs</span> <span class="kr">else</span> <span class="n">xs</span><span class="p">)</span> <span class="kt">[]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- accumulator and tail recursive version of allEven_5</span>
</span><span class='line'><span class="nf">allEven_6</span> <span class="n">ls</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="p">(</span><span class="nf">\</span><span class="n">g</span> <span class="n">b</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">g</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span> <span class="n">x</span><span class="p">))</span> <span class="n">id</span> <span class="n">ls</span> <span class="kt">[]</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">f</span> <span class="n">x</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">x</span><span class="kt">:</span><span class="n">xs</span> <span class="kr">else</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- list comprehension</span>
</span><span class='line'><span class="nf">allEven_7</span> <span class="n">ls</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">ls</span><span class="p">,</span> <span class="n">even</span> <span class="n">x</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>reverse</h3>

<p>The natural way would of course to use <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse"><code>reverse</code></a>. <code>reverse_1</code> is the one most beginners would think of. <code>reverse_2</code> uses an accumulator, which is abstracted in the <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl"><code>foldl</code></a> function, as seen in <code>reverse_3</code> or <code>reverse_4</code>. Finally, <code>reverse_5</code> is the same kind of joke as <code>allEven_6</code> above, based on expressing <code>foldl</code> in terms <code>foldr</code>, as I explained <a href="http://blog.wakatta.jp/blog/2011/11/09/haskell-foldl-as-foldr/">here</a>.</p>

<figure class='code'><figcaption><span> (myreverse.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/myreverse.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">MyReverse</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- the naive way</span>
</span><span class='line'><span class="nf">reverse_1</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">reverse_1</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">reverse_1</span> <span class="n">xs</span>  <span class="o">++</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- accumulator and tail recursion</span>
</span><span class='line'><span class="nf">reverse_2</span> <span class="n">xs</span> <span class="ow">=</span> <span class="n">go</span> <span class="kt">[]</span> <span class="n">xs</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">go</span> <span class="n">acc</span> <span class="kt">[]</span>     <span class="ow">=</span> <span class="n">acc</span>
</span><span class='line'>        <span class="n">go</span> <span class="n">acc</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">go</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">acc</span><span class="p">)</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- accumulator and tail recursion means foldl</span>
</span><span class='line'><span class="nf">reverse_3</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="p">(</span><span class="nf">\</span><span class="n">xs</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="kt">[]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- the anonymous function in reverse_3 is actually flip (:)</span>
</span><span class='line'><span class="nf">reverse_4</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="p">(</span><span class="n">flip</span> <span class="p">(</span><span class="kt">:</span><span class="p">))</span> <span class="kt">[]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- foldl leaning so much to the left it comes back from the right:</span>
</span><span class='line'><span class="nf">reverse_5</span> <span class="n">ls</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="nf">\</span><span class="n">b</span> <span class="n">g</span> <span class="n">xs</span> <span class="ow">-&gt;</span> <span class="n">g</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">xs</span><span class="p">))</span> <span class="n">id</span> <span class="n">ls</span> <span class="kt">[]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Colour pairs</h3>

<p>This is simple with list comprehensions. A way to ensure that only one of (black, blue) and (blue, black) is available is to filter the pairs so that the first element is smaller or equal than the second one.</p>

<figure class='code'><figcaption><span>Colour pairs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">colours</span> <span class="ow">=</span><span class="p">[</span><span class="s">&quot;black&quot;</span><span class="p">,</span> <span class="s">&quot;white&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">,</span> <span class="s">&quot;yellow&quot;</span><span class="p">,</span> <span class="s">&quot;red&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">y</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>produces (reindented for readability):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[("black","black"),("black","white"),("black","blue"),
</span><span class='line'>("black","yellow"),("black","red"),("white","white"),
</span><span class='line'>("white","yellow"),("blue","white"),("blue","blue"),
</span><span class='line'>("blue","yellow"),("blue","red"),("yellow","yellow"),
</span><span class='line'>("red","white"),("red","yellow"),("red","red")]</span></code></pre></td></tr></table></div></figure>


<p>There are exactly 15 pairs, as expected.</p>

<h3>Multiplication table</h3>

<p>Nothing simpler:</p>

<figure class='code'><figcaption><span>Multiplication table  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">11</span><span class="p">],</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">11</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>produces (reindented for readability):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[(1,1,1),(1,2,2),(1,3,3),(1,4,4),(1,5,5),(1,6,6),(1,7,7),(1,8,8),(1,9,9),(1,10,10),(1,11,11),
</span><span class='line'>(2,1,2),(2,2,4),(2,3,6),(2,4,8),(2,5,10),(2,6,12),(2,7,14),(2,8,16),(2,9,18),(2,10,20),(2,11,22),
</span><span class='line'>(3,1,3),(3,2,6),(3,3,9),(3,4,12),(3,5,15),(3,6,18),(3,7,21),(3,8,24),(3,9,27),(3,10,30),(3,11,33),
</span><span class='line'>(4,1,4),(4,2,8),(4,3,12),(4,4,16),(4,5,20),(4,6,24),(4,7,28),(4,8,32),(4,9,36),(4,10,40),(4,11,44),
</span><span class='line'>(5,1,5),(5,2,10),(5,3,15),(5,4,20),(5,5,25),(5,6,30),(5,7,35),(5,8,40),(5,9,45),(5,10,50),(5,11,55),
</span><span class='line'>(6,1,6),(6,2,12),(6,3,18),(6,4,24),(6,5,30),(6,6,36),(6,7,42),(6,8,48),(6,9,54),(6,10,60),(6,11,66),
</span><span class='line'>(7,1,7),(7,2,14),(7,3,21),(7,4,28),(7,5,35),(7,6,42),(7,7,49),(7,8,56),(7,9,63),(7,10,70),(7,11,77),
</span><span class='line'>(8,1,8),(8,2,16),(8,3,24),(8,4,32),(8,5,40),(8,6,48),(8,7,56),(8,8,64),(8,9,72),(8,10,80),(8,11,88),
</span><span class='line'>(9,1,9),(9,2,18),(9,3,27),(9,4,36),(9,5,45),(9,6,54),(9,7,63),(9,8,72),(9,9,81),(9,10,90),(9,11,99),
</span><span class='line'>(10,1,10),(10,2,20),(10,3,30),(10,4,40),(10,5,50),(10,6,60),(10,7,70),(10,8,80),(10,9,90),(10,10,100),(10,11,110),
</span><span class='line'>(11,1,11),(11,2,22),(11,3,33),(11,4,44),(11,5,55),(11,6,66),(11,7,77),(11,8,88),(11,9,99),(11,10,110),(11,11,121)]</span></code></pre></td></tr></table></div></figure>


<h3>Map-colouring problem</h3>

<p>For this one, the code can be a bit simpler than Prolog&#8217;s. The reason is that Prolog does not really have a different or not-equal operator: it has to use positive facts and cannot infer the relation is commutative. In Haskell, the list comprehension can have guards that are arbitrary boolean expressions, so we need to state only once that two states have different colours.</p>

<figure class='code'><figcaption><span>Map-colouring problem  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">colours</span> <span class="ow">=</span> <span class="p">[</span><span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[(</span><span class="n">alabama</span><span class="p">,</span> <span class="n">mississippi</span><span class="p">,</span> <span class="n">georgia</span><span class="p">,</span> <span class="n">tennessee</span><span class="p">,</span> <span class="n">florida</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">alabama</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mississippi</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">georgia</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">tennessee</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">florida</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mississippi</span> <span class="o">/=</span> <span class="n">tennessee</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mississippi</span> <span class="o">/=</span> <span class="n">alabama</span><span class="p">,</span>
</span><span class='line'>  <span class="n">alabama</span> <span class="o">/=</span> <span class="n">tennessee</span><span class="p">,</span>
</span><span class='line'>  <span class="n">alabama</span> <span class="o">/=</span> <span class="n">georgia</span><span class="p">,</span>
</span><span class='line'>  <span class="n">alabama</span> <span class="o">/=</span> <span class="n">florida</span><span class="p">,</span>
</span><span class='line'>  <span class="n">georgia</span> <span class="o">/=</span> <span class="n">florida</span><span class="p">,</span>
</span><span class='line'>  <span class="n">georgia</span> <span class="o">/=</span> <span class="n">tennessee</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>produces (reindented for readability):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[("red","green","green","blue","blue"),
</span><span class='line'>("red","blue","blue","green","green"),
</span><span class='line'>("green","red","red","blue","blue"),
</span><span class='line'>("green","blue","blue","red","red"),
</span><span class='line'>("blue","red","red","green","green"),
</span><span class='line'>("blue","green","green","red","red")]</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all for Day 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Clojure Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/13/seven-languages-in-seven-weeks-clojure-day-3/"/>
    <updated>2011-11-13T20:30:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/13/seven-languages-in-seven-weeks-clojure-day-3</id>
    <content type="html"><![CDATA[<p>The final day with Clojure covers its support for concurrent programming. It has a bestiary of concepts that are somewhat similar yet distinct from other modern languages.</p>

<!--more-->


<p>First of all Clojure adopts the <a href="http://en.wikipedia.org/wiki/Software_transactional_memory">Software Transactional Memory</a>, an approach mutable state and concurrency that is similar to databases. The idea is not really new, but it became more popular with Hashell&#8217;s implementation.</p>

<p>There are also atoms, which are variables which guarantee atomic updates. The atomicity is a property of the atom, rather than of the functions that are used to update it, which is really nice.</p>

<p>Futures are also present. They represent values whose value is being computed in a dedicated thread. Trying to read from a <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/future"><code>future</code></a> could block if the value has not been computed yet (yes, Java has the same concept).</p>

<p>Finally, agents are &#8230; somewhat perplexing. They look like agents in other languages (Io, Scala, Erlang, &#8230;), except that they do not have any special behaviour attached. Instead, any function sent to them is queued and executed sequentially in a dedicated thread. At least, that&#8217;s how I understand currently, but when I tried to use them for the Barber shop simulation, I ran into some problems, so there is more to this story.</p>

<h2>Exercises</h2>

<h3>Find the implemenation of a blocking queue</h3>

<p>The description of <a href="http://richhickey.github.com/clojure-contrib/seq-utils-api.html#clojure.contrib.seq-utils/fill-queue"><code>fill-queue</code></a> is a bit confusing, but it looks like a blocking lazy queue.</p>

<h3>Accounts simulation</h3>

<p>The code is very straightforward. An account is a <code>ref</code>, whose value is the balance. I add a validator function to each to ensure that the balance is not negative (<code>check-balance</code> is passed to <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/set-validator!"><code>set-validator!</code></a> in <code>make-account</code>).</p>

<p>The <code>credit</code> and <code>debit</code> functions just update the balance with the <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/alter"><code>alter</code></a> function. The transaction is not provided at this level just yet.</p>

<p>The <code>balance</code> function is just there for clarity.</p>

<p>The various <code>bank-</code> functions just operate on a vector of accounts, so they take the <code>bank</code> (a <code>vector</code>), and an <code>acc_num</code> (account number).</p>

<p>The <code>bank-transfer</code> is the only function using a transaction: it moves an amount between two accounts. To test the transaction failure mode, I credit the recipient account before I debit the other.</p>

<p>Finally, <code>bank-balances</code> prints the balance of all accounts.</p>

<figure class='code'><figcaption><span>Accounts simulation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">check-balance</span> <span class="p">[</span><span class="nv">b</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Check that the balance of account is not negative&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">&lt;= </span><span class="mi">0</span> <span class="nv">b</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">make-account</span> <span class="p">[]</span>
</span><span class='line'>  <span class="s">&quot;Create a new account&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">r</span> <span class="p">(</span><span class="nb">ref </span><span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">set-validator!</span> <span class="nv">r</span> <span class="nv">check-balance</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">r</span><span class="p">))</span>  
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">credit</span> <span class="p">[</span><span class="nv">account,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Add amount to account&#39;s balance&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">alter </span><span class="nv">account</span> <span class="nv">+</span> <span class="nv">amount</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">debit</span> <span class="p">[</span><span class="nv">account,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Debit amount from account&#39;s balance&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">alter </span><span class="nv">account</span> <span class="nv">-</span> <span class="nv">amount</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">balance</span> <span class="p">[</span><span class="nv">account</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Return balance of account&quot;</span>
</span><span class='line'>  <span class="nv">@account</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">make-bank</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Create a bank of n accounts&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nf">repeatedly</span> <span class="nv">n</span> <span class="nv">make-account</span><span class="p">)))</span>
</span><span class='line'>  
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-credit</span> <span class="p">[</span><span class="nv">bank,</span> <span class="nv">acc_num,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Add amount to acc_num&#39;s balance&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">credit</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">bank</span> <span class="nv">acc_num</span><span class="p">)</span> <span class="nv">amount</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-debit</span> <span class="p">[</span><span class="nv">bank,</span> <span class="nv">acc_num,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Debit amount from acc_num&#39;s balance&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">debit</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">bank</span> <span class="nv">acc_num</span><span class="p">)</span> <span class="nv">amount</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-balance</span> <span class="p">[</span><span class="nv">bank,</span> <span class="nv">acc_num</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Return the balance of acc_num&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">balance</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">bank</span> <span class="nv">acc_num</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-transfer</span> <span class="p">[</span><span class="nv">bank,</span> <span class="nv">acc_num1,</span> <span class="nv">acc_num2,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Transfer amount from acc_num1 to acc_num2 in bank&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dosync </span>
</span><span class='line'>      <span class="p">(</span><span class="nf">bank-credit</span> <span class="nv">bank</span> <span class="nv">acc_num2</span> <span class="nv">amount</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">bank-debit</span> <span class="nv">bank</span> <span class="nv">acc_num1</span> <span class="nv">amount</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-balances</span> <span class="p">[</span><span class="nv">bank</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Show the balance of all accounts&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">count </span><span class="nv">bank</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Account &quot;</span> <span class="nv">i</span> <span class="s">&quot;: &quot;</span> <span class="p">(</span><span class="nf">bank-balance</span> <span class="nv">bank</span> <span class="nv">i</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test code:</p>

<figure class='code'><figcaption><span>Test code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; create the bank</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">bank</span> <span class="p">(</span><span class="nf">make-bank</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; put some money in</span>
</span><span class='line'><span class="p">(</span><span class="nb">dosync </span><span class="p">(</span><span class="nf">bank-credit</span> <span class="nv">bank</span> <span class="mi">0</span> <span class="mi">100</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; show the balances</span>
</span><span class='line'><span class="p">(</span><span class="nf">bank-balances</span> <span class="nv">bank</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; a first transfer</span>
</span><span class='line'><span class="p">(</span><span class="nb">dosync </span><span class="p">(</span><span class="nf">bank-transfer</span> <span class="nv">bank</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">75</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; show the balances</span>
</span><span class='line'><span class="p">(</span><span class="nf">bank-balances</span> <span class="nv">bank</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; not enough fund, so it will fail</span>
</span><span class='line'><span class="p">(</span><span class="nb">dosync </span><span class="p">(</span><span class="nf">bank-transfer</span> <span class="nv">bank</span> <span class="mi">0</span> <span class="mi">2</span> <span class="mi">75</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; and indeed, the balances have not changed</span>
</span><span class='line'><span class="p">(</span><span class="nf">bank-balances</span> <span class="nv">bank</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When input into the repl, the test code gives the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def bank (make-bank 3))
</span><span class='line'>#'user/bank
</span><span class='line'>user=&gt; (dosync (bank-credit bank 0 100))
</span><span class='line'>100
</span><span class='line'>user=&gt; (bank-balances bank)
</span><span class='line'>Account 0: 100
</span><span class='line'>Account 1: 0
</span><span class='line'>Account 2: 0
</span><span class='line'>nil
</span><span class='line'>user=&gt; (dosync (bank-transfer bank 0 1 75))
</span><span class='line'>25
</span><span class='line'>user=&gt; (bank-balances bank)
</span><span class='line'>Account 0: 25
</span><span class='line'>Account 1: 75
</span><span class='line'>Account 2: 0
</span><span class='line'>nil
</span><span class='line'>user=&gt; (dosync (bank-transfer bank 0 2 75))
</span><span class='line'>java.lang.IllegalStateException: Invalid reference state (NO_SOURCE_FILE:0)
</span><span class='line'>user=&gt; (bank-balances bank)
</span><span class='line'>Account 0: 25
</span><span class='line'>Account 1: 75
</span><span class='line'>Account 2: 0
</span><span class='line'>nil</span></code></pre></td></tr></table></div></figure>


<p>So the balance is protected from being negative, and the transaction is rolled back. Despite the fact that the amount was supposed to be credited to account number 2 first, the balance of that account has not changed as the transaction failed.</p>

<h3>Barber shop simulation</h3>

<p>This problem was mostly a matter of figuring out the right model. The concept of agent seems to have some hidden complexity (or lock) which prevented my initial solution from working.</p>

<p>The idea is that the <code>barber</code> is an agent; it is updated by a function representing getting an haircut (<code>get-haircut</code>). The value of the agent is the number of client served.</p>

<p>The <code>waiting-room</code> is an atom. It&#8217;s value is the number of free chairs.</p>

<p>The <code>get-haircut</code> function is sent to the <code>barber</code>. When it starts, it frees (increase) the <code>waiting-room</code> count of free chairs. Then it waits for 20 milliseconds, and finally updates the <code>barber</code> count of clients.</p>

<p>Finally, the <code>try-to-sit</code> function checks the number of free chairs: if none, the customer just leaves. Otherwise, the customer sits in a chair (signaling it&#8217;s intent to get a haircut by sending <code>get-haircut</code> to the <code>barber</code>), and the count of free chairs is decreased. I tried to print a statement when a customer leaves because there is no chair, but there were too many such messages so I commented it out.</p>

<figure class='code'><figcaption><span>Barber problem, part 1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">barber</span> <span class="p">(</span><span class="nb">agent </span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">waiting-room</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">get-haircut</span> <span class="p">[</span><span class="nv">count</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">waiting-room</span> <span class="nv">inc</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Start haircut&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">inc </span><span class="nv">count</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">try-to-sit</span> <span class="p">[</span><span class="nv">count</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">== </span><span class="nv">count</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>          <span class="c1">;;(println &quot;No free chairs. The customer leaves&quot;)</span>
</span><span class='line'>          <span class="nv">count</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Sit in waiting room&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">send </span><span class="nv">barber</span> <span class="nv">get-haircut</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">dec </span><span class="nv">count</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a new customer walks in, it will try to sit in a free chair. This is done in the <code>new-customer</code> function.</p>

<p>The <code>shop-loop</code> is a tail recursive loop that initiates a <code>new-customer</code> at random intervals. It runs until after at least <code>max</code> milliseconds.</p>

<figure class='code'><figcaption><span>Barber problem, part 2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">new-customer</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">waiting-room</span> <span class="nv">try-to-sit</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">shop-loop</span> <span class="p">[</span><span class="nv">max</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">orig</span> <span class="p">(</span><span class="nf">System/currentTimeMillis</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">loop </span><span class="p">[]</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">System/currentTimeMillis</span><span class="p">)</span> <span class="nv">orig</span><span class="p">)</span> <span class="nv">max</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">next</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">10</span> <span class="p">(</span><span class="nb">rand </span><span class="mi">20</span><span class="p">))]</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="nv">next</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">new-customer</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">recur</span><span class="p">))</span>
</span><span class='line'>              <span class="nv">max</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we get to the main function. First <code>init</code> is defined to help reset the values of atoms and agents. Then <code>start</code> will indeed reset all values, then run <code>shop-loop</code> in a <code>future</code>, wait the required amount of time, and finally get the current value of <code>barber</code> (which might not have fully finished). My first version tried to run <code>shop-loop</code> on a dedicated agent, but that was for some reason blocking on the <code>barber</code> agent, so I used a <code>future</code> instead.</p>

<figure class='code'><figcaption><span>Barber problem, part 3  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">init</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">v</span><span class="p">]</span> <span class="nv">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">start</span> <span class="p">[</span><span class="nv">max</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;starting&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="nv">barber</span> <span class="nv">init</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">waiting-room</span> <span class="nv">init</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">future</span> <span class="p">(</span><span class="nf">shop-loop</span> <span class="nv">max</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="nv">max</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">@barber</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this implementation, the barber performed 458 hair cuts (500 was the theoretical maximum).</p>

<h2>Wrapping up Clojure</h2>

<p>There is much more to Clojure that what has been covered so far. The object model is far more flexible than Java&#8217;s. Metadata can be added to various entities, which I understand could be used to improve interactive usage (documentation strings are already a kinf of metadata).</p>

<p>I always found Lisp languages to be very elegant and expressive; Clojure definitively is a Lisp, and I really wanted to like the language. Yet for some reason I found it somewhat disappointing. Perhaps it is the limitations the designers put (for good reason) in the language. Perhaps it is the fact that the language runs on the JVM, an environment that I instinctively link to all things corporate, safe and boring, so I don&#8217;t really believe it could be exciting.</p>

<p>I&#8217;m not really sure, perhaps it is just that I&#8217;m feeling tired and I have a cold, and Clojure really is awesome. So I&#8217;ll have another look at that language, and I hope I can give it the attention it seems to deserve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Clojure Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/12/seven-languages-in-seven-weeks-clojure-day-2/"/>
    <updated>2011-11-12T19:25:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/12/seven-languages-in-seven-weeks-clojure-day-2</id>
    <content type="html"><![CDATA[<p>Today Clojure&#8217;s coverage is getting beefier with tail recursion (soso), lazy sequences and &#8230; macros!</p>

<!--more-->


<p>The support for tail recursion is disappointing. But given that the JVM implementers never actually understood the value of tail recursion (or perhaps they overestimated its cost), it would have been surprising if a language running on top of the JVM had a solution. Scala is similarly limited.</p>

<p>Lazy sequences are cool, but not spectacularly so. It is a more restricted concept than laziness in Haskell. Still, lazy lists form a large part of my use of Haskell&#8217;s laziness (perhaps the only part I can use), so I do not expect to feel limited in any way with Clojure.</p>

<p>Finally, macros. Writing macros separates men from boys. Writing macros that write macros separates gods from men. Macros are good. Abuse of macros can cause headaches, but the good kind (it&#8217;s just your brain swelling).</p>

<h2>Exercises</h2>

<h3>Implementation of common macros in Clojure</h3>

<p>That one is very easy. The web site has a dedicated <a href="http://clojure.org/macros">page</a> with the common macros. The source code is available for each. <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/defmacro"><code>defmacro</code></a> is actually a macro, and its source code is, well, let&#8217;s just say I&#8217;m happy someone else wrote it. And yes, it is a macro that writes macros.</p>

<p>To expand the code of macros, I wrote this small function to recursively expand macro definitions:</p>

<figure class='code'><figcaption><span>rec-expand function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">rec-expand</span> <span class="p">[</span><span class="nv">lst</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">seq? </span><span class="nv">lst</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">rec-expand</span> <span class="p">(</span><span class="nb">macroexpand </span><span class="nv">lst</span><span class="p">))</span> <span class="nv">lst</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without it, it is difficult to see deeply into the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (macroexpand '(defn collection-type                                                                                   
</span><span class='line'>             "Return either :list, :vector or :map, depending of the type of col."                      
</span><span class='line'>             [col]                                                                                      
</span><span class='line'>             (cond (list? col) :list
</span><span class='line'>                   (map? col) :map
</span><span class='line'>                   (vector? col) :vector)))
</span><span class='line'>(def collection-type (.withMeta (clojure.core/fn collection-type ([col] (cond (list? col) :list (map? col) :map (vector? col) :vector))) (.meta (var collection-type))))</span></code></pre></td></tr></table></div></figure>


<p><a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/macroexpand"><code>macroexpand</code></a> did not expand the <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/cond"><code>cond</code></a> macros.</p>

<p>With <code>rec-expand</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (rec-expand '(defn collection-type                                                                                   
</span><span class='line'>             "Return either :list, :vector or :map, depending of the type of col."                      
</span><span class='line'>             [col]                                                                                      
</span><span class='line'>             (cond (list? col) :list
</span><span class='line'>                   (map? col) :map
</span><span class='line'>                   (vector? col) :vector))) 
</span><span class='line'>(def collection-type (. (fn* collection-type ([col] (if (list? col) :list (if (map? col) :map (if (vector? col) :vector ()))))) withMeta (. (var collection-type) meta)))</span></code></pre></td></tr></table></div></figure>


<h3>Implementation of a lazy sequence</h3>

<p>For this exercise, I use <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/lazy-seq"><code>lazy-seq</code></a>, which evaluates its body on demand (and remembers the value).</p>

<p>One first example is a simple reimplementation of <code>(iterate inc n)</code>:</p>

<figure class='code'><figcaption><span>upfrom  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">upfrom</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>    <span class="s">&quot;[n, n+1, n+2, ....&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">n</span> <span class="p">(</span><span class="nf">upfrom</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (take 10 (upfrom 0))
</span><span class='line'>(0 1 2 3 4 5 6 7 8 9)</span></code></pre></td></tr></table></div></figure>


<p>A bit more interesting, perhaps, is a Fibonacci sequence not using <code>map</code>:</p>

<figure class='code'><figcaption><span>Fibonacci sequence  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">fibs</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Fibonacci sequence starting with a, b, ...&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">a</span> <span class="p">(</span><span class="nf">fibs</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">fib</span> <span class="p">(</span><span class="nf">fibs</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Computing the 20 first Fibonacci numbers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (take 20 fib)
</span><span class='line'>(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765)</span></code></pre></td></tr></table></div></figure>


<h3>Unless with else condition</h3>

<p>For this exercise, I use two features that were not covered in the book</p>

<ul>
<li>variable lists of arguments support</li>
<li>backquote notation</li>
</ul>


<p>Clojure support for variable lists of arguments is nice: there can be a different body for each list, and the last one can a placeholder variable for &#8220;all the remaining arguments&#8221;. The concept of arguments (and variable lists) applies to everything that takes arguments: functions, macros, &#8230; Here I use it to differentiate between basic <code>(unless test body)</code> and <code>(unless test body else)</code>.</p>

<p>Backquote notation is what makes macro useable. Rather than using <code>list</code> to build the form, I use the backquote. Then expressions prefixed with tilde are replaced by their value. Lisps had an identical concept (but comma was used instead of tilde).</p>

<p>This makes macros shorter and easier to read.</p>

<figure class='code'><figcaption><span>extended unless  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defmacro </span><span class="nv">unless</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">test</span> <span class="nv">body</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="nv">~test</span><span class="p">)</span> <span class="nv">~body</span><span class="p">))</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">test</span> <span class="nv">body</span> <span class="nv">alt</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="nv">~test</span><span class="p">)</span> <span class="nv">~body</span> <span class="nv">~alt</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (unless false (println "Danger!"))
</span><span class='line'>Danger!
</span><span class='line'>nil
</span><span class='line'>user=&gt; (unless true (println "Danger!") (println "No danger...")) 
</span><span class='line'>No danger...
</span><span class='line'>nil</span></code></pre></td></tr></table></div></figure>


<h3>Using defrecord and defprotocol</h3>

<p>Ok, I&#8217;m not very inspired by this exercise. I was thinking of doing the classic shape class hierarchy, but finally settled for an employee protocol:</p>

<figure class='code'><figcaption><span>Employee protocol  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defprotocol</span> <span class="nv">Employee</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">work</span> <span class="p">[</span><span class="nv">e</span> <span class="nv">h</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">get-raise</span> <span class="p">[</span><span class="nv">e</span> <span class="nv">a</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first implementation is a manager, which is modeled according to things I&#8217;ve heard about other companies, not mine, where managers are hard-working and have to be pulled from their desk to be fed:</p>

<figure class='code'><figcaption><span>Manager implementation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defrecord</span> <span class="nv">Manager</span> <span class="p">[</span><span class="nv">hobby</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">Employee</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">work</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">h</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Working &quot;</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">h</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot; hours then &quot;</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">h</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot; hours of &quot;</span> <span class="nv">hobby</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">get-raise</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">a</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;You are too modest. You deserve &quot;</span> <span class="p">(</span><span class="nb">* </span><span class="mf">1.1</span> <span class="nv">a</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing the manager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def m (Manager. "golf"))
</span><span class='line'>#'user/m
</span><span class='line'>user=&gt; (work m 8)
</span><span class='line'>Working 4 hours then 4 hours of golf
</span><span class='line'>nil
</span><span class='line'>user=&gt; (get-raise m 1000)
</span><span class='line'>You are too modest. You deserve 1100.0
</span><span class='line'>nil</span></code></pre></td></tr></table></div></figure>


<p>Of course we need people to actually do something:</p>

<figure class='code'><figcaption><span>Worker implemenation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defrecord</span> <span class="nv">Worker</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nv">Employee</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">work</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">h</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Working &quot;</span> <span class="nv">h</span> <span class="s">&quot; hours then &quot;</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">h</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot; hours overtime&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">get-raise</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">a</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;There is an economic crisis. Be happy with &quot;</span> <span class="p">(</span><span class="nb">* </span><span class="mf">0.1</span> <span class="nv">a</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing the worker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def w (Worker.))
</span><span class='line'>#'user/w
</span><span class='line'>user=&gt; (work w 8)
</span><span class='line'>Working 8 hours then 4 hours overtime
</span><span class='line'>nil
</span><span class='line'>user=&gt; (get-raise w 100)
</span><span class='line'>There is an economic crisis. Be happy with 10.0
</span><span class='line'>nil</span></code></pre></td></tr></table></div></figure>


<p>Ok, nothing fancy. But looking at the doc I see it is possible to extend basic Java classes, so I think there&#8217;s far more depth to this construct. Otherwise, there&#8217;s always <code>defmacro</code> to play with.</p>

<p>And this completes Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell: foldr as foldl]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/11/haskell-foldr-as-foldl/"/>
    <updated>2011-11-11T08:03:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/11/haskell-foldr-as-foldl</id>
    <content type="html"><![CDATA[<p>In a previous <a href="http://blog.wakatta.jp/blog/2011/11/09/haskell-foldl-as-foldr/">post</a>, I tried to show how to derive the formula expression <code>foldl</code> in terms of <code>foldr</code>. Unsurprisingly, there is a way to express <code>foldr</code> in terms <code>foldl</code>: <code>foldr f a bs = foldl (\g b x -&gt; g (f b x)) id bs a</code>. Today I&#8217;ll try to derive this definition.</p>

<!--more-->


<p>Of course, <code>foldl</code> is strict, so it cannot work on infinite lists. Therefore, the new <code>foldr</code> would be similarly limited.</p>

<p>I&#8217;ll start again from a standard definition for both functions. First <code>foldr</code>:</p>

<figure class='code'><figcaption><span>foldr  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr</span> <span class="ow">::</span> <span class="p">(</span><span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">b</span> <span class="p">(</span><span class="n">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="n">bs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then <code>foldl</code>:</p>

<figure class='code'><figcaption><span>foldl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">f</span> <span class="p">(</span><span class="n">f</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="n">bs</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Derivation</h2>

<p>Once again, I will use the function building fold rather than value building one. This time, the <code>f</code> argument to <code>foldr</code> has already the right type, so I will not need <code>flip</code>.</p>

<p>I first reorganize the arguments order a bit, putting <code>a</code> at the end:</p>

<figure class='code'><figcaption><span>foldr_alt basic equation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="n">bs</span> <span class="ow">=</span> <span class="n">foldr_alt</span> <span class="n">f</span> <span class="n">bs</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>The base case is once again <code>id</code>:</p>

<figure class='code'><figcaption><span>foldr_alt on empty list  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_alt</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>and is trivially true:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldr f a [] == a                  -- by definition of foldr
</span><span class='line'>             == id a               -- by definition of id
</span><span class='line'>             == (foldr_alt f []) a -- by definition of foldr_alt</span></code></pre></td></tr></table></div></figure>


<p>The recursive case is not surprising either:</p>

<figure class='code'><figcaption><span>foldr_alt on non empty list  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_alt</span> <span class="n">f</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="n">foldr_alt</span> <span class="n">f</span> <span class="n">bs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It follows from the induction hypothesis: given <code>foldr f a bs == foldr_alt f bs a</code>, then <code>foldr f a (b:bs) == foldr_alt f (b:bs) a</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldr f a (b:bs) == f b (foldr f a bs)           -- by definition of foldr
</span><span class='line'>                 == f b (foldr_alt f bs a)       -- by induction hypothesis
</span><span class='line'>                 == (f b) . (foldr_alt f bs) $ a -- currying and definition of . and $
</span><span class='line'>                 == (foldr_alt f (b:bs)) $ a     -- by definition of foldr_alt
</span><span class='line'>                 == foldr_alt f (b:bs) a         -- uncurrying and definition of $</span></code></pre></td></tr></table></div></figure>


<p>But <code>foldl</code> is nowhere to be seen&#8230; which is not surprising considering that <code>foldl</code> is tail recursive while <code>foldr</code> and <code>foldr_alt</code> are both body recursive&#8230; maybe using an accumulator, we could turn <code>foldr_alt</code> to a tail recursive function.</p>

<p>The initial value for the accumulator must be the identity of the composition function, that is, <code>id</code>.</p>

<figure class='code'><figcaption><span>accumulator version of foldr_alt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_alt</span> <span class="n">f</span> <span class="n">bs</span> <span class="ow">=</span> <span class="n">foldr_acc</span> <span class="n">f</span> <span class="n">id</span> <span class="n">bs</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>foldr_acc</code> is once again easy to define. The base case:</p>

<figure class='code'><figcaption><span>foldr_acc base case  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_acc</span> <span class="n">f</span> <span class="n">acc</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">acc</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the recursive case, notice that <code>f b</code> is composed with the <em>rest</em> of the function to the right. As the accumulator represents the previous part of the function, <code>f b</code> will be composed with this accumulator to the left:</p>

<figure class='code'><figcaption><span>foldr_acc recursive case  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_acc</span> <span class="n">f</span> <span class="n">acc</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldr_acc</span> <span class="p">(</span><span class="n">acc</span> <span class="o">.</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span><span class="p">))</span> <span class="n">bs</span>
</span></code></pre></td></tr></table></div></figure>


<p>The proof is less straightforward; I am not very familiar with equational reasoning, so maybe something simpler is possible. Note that in this proof, I need the list argument to be finite.</p>

<p>First, the base case:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldr_alt f [] == id                 -- by definition of foldr_alt
</span><span class='line'>               == foldr_acc f id []  -- by definition of foldr_acc</span></code></pre></td></tr></table></div></figure>


<p>For the recursive case, I will not actually use an induction hypothesis. Instead, I will use the fact that the list is finite, and the fact that the composition function is, well, a function. <code>f == g</code> implies <code>acc . f == acc . g</code> for any terminating <code>acc</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>acc . foldr_alt f (b1:b2:bs) == acc . (f b1) . (foldr_alt f (b2:bs))  
</span><span class='line'>  -- by definition of foldr_alt
</span><span class='line'>                         == acc . (f b1) . (f b2) . (foldr_alt f bs)  
</span><span class='line'>  -- by definition of foldr_alt again
</span><span class='line'>                         == acc . (f b1) . (f b2) . .. (f bn)         
</span><span class='line'>  -- by induction over the list bs, which must be finite
</span><span class='line'>                         == foldr_acc f (acc .(f b1) . (f b2) . ... ) []
</span><span class='line'>  -- by definition of foldr_acc f _ []
</span><span class='line'>                         == foldr_acc f (acc . (f b1) . (f b2) . ..) [bn]  
</span><span class='line'>  -- by definition of foldr_acc, recursive case
</span><span class='line'>                         == foldr_acc f acc (b1:b2:bs)
</span><span class='line'>  -- by induction over the lenght of (b1:b2:bs), and definition of foldr_acc, recursive case</span></code></pre></td></tr></table></div></figure>


<p>The fact that the equation only holds for list of finite lengths should not be surprising, but might still be a limitation of my proof.</p>

<p>With <code>foldr_acc</code> defined as above, converting to <code>foldl</code> is immediate:</p>

<figure class='code'><figcaption><span>foldr as foldl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_acc</span> <span class="n">f</span> <span class="n">id</span> <span class="n">bs</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">go</span> <span class="n">id</span> <span class="n">bs</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">go</span> <span class="n">acc</span> <span class="n">b</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">acc</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span> <span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I rename <code>acc</code> to <code>g</code>, and move <code>x</code> to the parameter list (uncurrying the <code>go</code> function), I get the original definition.</p>

<p>QED.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Clojure Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/11/seven-languages-in-seven-weeks-clojure-day-1/"/>
    <updated>2011-11-11T08:02:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/11/seven-languages-in-seven-weeks-clojure-day-1</id>
    <content type="html"><![CDATA[<p>Sixth week, sixth language, this time <a href="http://clojure.org/">Clojure</a>, the latest attempt to make <a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> popular.</p>

<!--more-->


<p>Clojure has the usual features of Lisp: code as data, macros, lists among many other containers (no, Lisp is not just lists), and so on. It also brings other features, such as pattern matching, and treating some containers as functions for specific purposes (both features that <a href="http://arclanguage.org/">Arc</a>, the language that <a href="http://www.paulgraham.com/">Paul Graham</a> invented, seems also to have). Pattern matching is certainly a welcome feature; I have to see more Clojure code to figure out whether I like the data as function one (I&#8217;m sure it allows very neat idioms).</p>

<p>Clojure is also supports a kind of lazy evaluation, but simpler than Haskell&#8217;s.</p>

<p>Finally, Clojure runs on both the JVM and the CLR, which allows it to go wherever either platform goes (which means pretty much everywhere), and to reuse these platforms&#8217; extensive libraries.</p>

<p>The first day covers little, compared to other languages. Various containers are introduced, along with some useful functions operating on them; pattern matching is described (it is similar to Erlang&#8217;s and other functional languages); finally we learn how to define functions, and use them in higher-order functions like <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/apply"><code>apply</code></a>.</p>

<h2>Exercises</h2>

<p>Comparatively to previous languages&#8217; first day, today is very short and simple.</p>

<h3>Define function big</h3>

<p>Nothing special here, the function <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/count"><code>count</code></a> works on all collections, including strings.</p>

<figure class='code'><figcaption><span>Define function big  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">defn </span><span class="nv">big</span>
</span><span class='line'>             <span class="s">&quot;Is string st longer than n characters?&quot;</span>
</span><span class='line'>             <span class="p">[</span><span class="nv">st</span> <span class="nv">n</span><span class="p">]</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nb">count </span><span class="nv">st</span><span class="p">)</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/big</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><figcaption><span>Test function big  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">big</span> <span class="s">&quot;hello&quot;</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nv">false</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">big</span> <span class="s">&quot;hello&quot;</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="nv">true</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Define function collection-type</h3>

<p>Using only functions and concepts seen so far, a first implementation using map. First I use the repl to get the class of these containers:</p>

<figure class='code'><figcaption><span>class of containers  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">class </span><span class="p">())</span>
</span><span class='line'><span class="nv">clojure</span><span class="o">.</span><span class="nv">lang</span><span class="o">.</span><span class="nv">PersistentList$EmptyList</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">class </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="nv">clojure</span><span class="o">.</span><span class="nv">lang</span><span class="o">.</span><span class="nv">PersistentList</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">class </span><span class="p">[])</span>
</span><span class='line'><span class="nv">clojure</span><span class="o">.</span><span class="nv">lang</span><span class="o">.</span><span class="nv">PersistentVector</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">class </span><span class="p">{})</span>
</span><span class='line'><span class="nv">clojure</span><span class="o">.</span><span class="nv">lang</span><span class="o">.</span><span class="nv">PersistentArrayMap</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the empty list has a different class from a non-empty list.</p>

<p>Now I can map these classes to the proper symbol:</p>

<figure class='code'><figcaption><span>mapping classes to symbols  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">col-classes</span> <span class="p">{(</span><span class="nb">class </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="nv">:list,</span> <span class="p">(</span><span class="nb">class </span><span class="o">&#39;</span><span class="p">())</span> <span class="nv">:list,</span> <span class="p">(</span><span class="nb">class </span><span class="p">[])</span> <span class="nv">:vector,</span> <span class="p">(</span><span class="nb">class </span><span class="p">{})</span> <span class="nv">:map</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, getting the right answer is as simple as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">col-classes</span> <span class="p">(</span><span class="nb">class </span><span class="o">&#39;</span><span class="p">()))</span>
</span><span class='line'><span class="nv">:list</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">col-classes</span> <span class="p">(</span><span class="nb">class </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span><span class='line'><span class="nv">:list</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">col-classes</span> <span class="p">(</span><span class="nb">class </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">]))</span>
</span><span class='line'><span class="nv">:vector</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">col-classes</span> <span class="p">(</span><span class="nb">class </span><span class="p">{</span><span class="nv">:one</span> <span class="s">&quot;one&quot;</span><span class="p">}))</span>
</span><span class='line'><span class="nv">:map</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the function can be written as:</p>

<figure class='code'><figcaption><span>Define function collection-type  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">defn </span><span class="nv">collection-type</span>
</span><span class='line'>             <span class="s">&quot;Return either :list, :vector or :map, depending of the type of col.&quot;</span>
</span><span class='line'>             <span class="p">[</span><span class="nv">col</span><span class="p">]</span>
</span><span class='line'>             <span class="p">({(</span><span class="nb">class </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="nv">:list,</span> <span class="p">(</span><span class="nb">class </span><span class="o">&#39;</span><span class="p">())</span> <span class="nv">:list,</span> <span class="p">(</span><span class="nb">class </span><span class="p">[])</span> <span class="nv">:vector,</span> <span class="p">(</span><span class="nb">class </span><span class="p">{})</span> <span class="nv">:map</span><span class="p">}</span> <span class="p">(</span><span class="nb">class </span><span class="nv">col</span><span class="p">)))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/collection-type</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it on literal values:</p>

<figure class='code'><figcaption><span>Test function collection-type  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">collection-type</span> <span class="p">())</span>
</span><span class='line'><span class="nv">:list</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">collection-type</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'><span class="nv">:list</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">collection-type</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="nv">:list</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">collection-type</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="nv">:vector</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">collection-type</span> <span class="p">{</span><span class="nv">:one</span> <span class="s">&quot;one&quot;</span><span class="p">})</span>
</span><span class='line'><span class="nv">:map</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interesting, perhaps, but there must be a better way. Using type predicates (<a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/list?"><code>list?</code></a>, <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/map?"><code>map?</code></a> and <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/vector?"><code>vector?</code></a>), and the already seen <a href="http://clojure.org/special_forms#Special%20Forms--(if%20test%20then%20else?"><code>if</code></a>):</p>

<figure class='code'><figcaption><span>collection-type, predicate edition  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="n">user</span><span class="o">=&gt;</span> <span class="p">(</span><span class="n">defn</span> <span class="n">collection</span><span class="o">-</span><span class="n">type</span>
</span><span class='line'>             <span class="s">&quot;Return either :list, :vector or :map, depending of the type of col.&quot;</span>
</span><span class='line'>             <span class="p">[</span><span class="n">col</span><span class="p">]</span>
</span><span class='line'>             <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="err">?</span> <span class="n">col</span><span class="p">)</span> <span class="p">:</span><span class="n">list</span>
</span><span class='line'>                 <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">map</span><span class="err">?</span> <span class="n">col</span><span class="p">)</span> <span class="p">:</span><span class="n">map</span>
</span><span class='line'>                     <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">vector</span><span class="err">?</span> <span class="n">col</span><span class="p">)</span> <span class="p">:</span><span class="n">vector</span><span class="p">))))</span>
</span><span class='line'><span class="err">#&#39;</span><span class="n">user</span><span class="o">/</span><span class="n">collection</span><span class="o">-</span><span class="n">type</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing output is not repeated, as it is identical to the one above.</p>

<p>These nested <code>if</code>&#8217;s are ugly. Fortunately, Lisp has a kind of generalized <code>switch</code>, called <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/cond"><code>cond</code></a>. So the definition above is equivalent to</p>

<figure class='code'><figcaption><span>collection-type, cond predicate edition  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="n">user</span><span class="o">=&gt;</span> <span class="p">(</span><span class="n">defn</span> <span class="n">collection</span><span class="o">-</span><span class="n">type</span>
</span><span class='line'>             <span class="s">&quot;Return either :list, :vector or :map, depending of the type of col.&quot;</span>
</span><span class='line'>             <span class="p">[</span><span class="n">col</span><span class="p">]</span>
</span><span class='line'>             <span class="p">(</span><span class="k">cond</span> <span class="p">(</span><span class="n">list</span><span class="err">?</span> <span class="n">col</span><span class="p">)</span> <span class="p">:</span><span class="n">list</span>
</span><span class='line'>                   <span class="p">(</span><span class="n">map</span><span class="err">?</span> <span class="n">col</span><span class="p">)</span> <span class="p">:</span><span class="n">map</span>
</span><span class='line'>                   <span class="p">(</span><span class="n">vector</span><span class="err">?</span> <span class="n">col</span><span class="p">)</span> <span class="p">:</span><span class="n">vector</span><span class="p">))</span>
</span><span class='line'><span class="err">#&#39;</span><span class="n">user</span><span class="o">/</span><span class="n">collection</span><span class="o">-</span><span class="n">type</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this is clean and elegant.</p>

<p>Once again, the test returns the expected results so they are not reproduced.</p>

<p>One thing to note: the <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/cons"><code>cons</code></a> function does not return a list, but a sequence (this is unlike <code>cons</code> in all the other Lisps):</p>

<figure class='code'><figcaption><span>cons is not a team player  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">class </span><span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>
</span><span class='line'><span class="nv">clojure</span><span class="o">.</span><span class="nv">lang</span><span class="o">.</span><span class="nv">Cons</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">list?</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>
</span><span class='line'><span class="nv">false</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">seq? </span><span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>
</span><span class='line'><span class="nv">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fortunately, <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/assoc"><code>assoc</code></a> is better behaved:</p>

<figure class='code'><figcaption><span>assoc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">collection-type</span> <span class="p">(</span><span class="nb">assoc </span> <span class="p">{</span><span class="nv">:two</span> <span class="mi">2</span><span class="p">}</span> <span class="nv">:one</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="nv">:map</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like the idea of a collection&#8217;s type not changing when I add element, so the behaviour of <code>cons</code> is something I will have to watch for (or find the better way that must exist).</p>

<p>And this is all for Day 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell: foldl as foldr]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/09/haskell-foldl-as-foldr/"/>
    <updated>2011-11-09T19:05:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/09/haskell-foldl-as-foldr</id>
    <content type="html"><![CDATA[<p>A beginner with Haskell is bound to be exposed, usually too early, to some fancy code illustrating either a cool feature of the language, or of its underlying theoretical foundations.</p>

<p>Among others, there is the one-liner lazy Fibonacci definition <code>fibs = 1:1:zipWith (+) fibs (tail fibs)</code>. Another one, the topic of this post, is <code>foldl f a bs = foldr (\b g x -&gt; g (f x b)) id bs a</code>.</p>

<!--more-->


<p>Unfortunately for the beginner, the explanation he or she could find on, say, the <a href="http://www.haskell.org/haskellwiki/Foldl_as_foldr">Haskell Wiki</a>, shares the problem of many intermediate Haskell tutorials: they explain moderately complex concepts in terms of more arcane ones.</p>

<p>So here I will attempt to provide a justification of the equation above using fairly simple tools (higher order functions being the most difficult ones).</p>

<h2>Building intuition</h2>

<p>Before even getting to a definition of <code>foldl</code> in terms of <code>foldr</code>, there are a few questions we should ask:</p>

<ul>
<li>is it even possible?</li>
<li>how are these two functions different</li>
<li>what should change to make them similar</li>
</ul>


<p>So first, let&#8217;s look at each function. The definitions below are very similar to the ones used in <a href="http://www.haskell.org/ghc/">GHC</a> (as you can see <a href="http://www.haskell.org/ghc/docs/7.2.1/html/libraries/base-4.4.0.0/Data-List.html">here</a> when looking at the source of <code>foldl</code> and <code>foldr</code>).</p>

<p>First <code>foldl</code>:</p>

<figure class='code'><figcaption><span>foldl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">f</span> <span class="p">(</span><span class="n">f</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="n">bs</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>foldl</code> is tail recursive: it uses the <code>a</code> parameter as an accumulator.</p>

<p>Then <code>foldr</code>:</p>

<figure class='code'><figcaption><span>foldr  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr</span> <span class="ow">::</span> <span class="p">(</span><span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">b</span> <span class="p">(</span><span class="n">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="n">bs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>foldr</code> is body recursive. This is why it is lazy and able to work on infinite list. If the function <code>f</code> is a constructor that is lazy in it&#8217;s second argument, then it is possible to examine some of the output before evaluating the recursive call.</p>

<p>So far, the two functions appear different. Let&#8217;s try and look at how they process their arguments.</p>

<p>I define a pair of data types to play the role of the function <code>f</code>. That way, I can look at the structure of calls. I need two because <code>foldl</code> and <code>foldr</code> have different types for <code>f</code></p>

<figure class='code'><figcaption><span>Helper Data Types  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">Fl</span> <span class="n">b</span> <span class="ow">=</span> <span class="p">(</span><span class="kt">Fl</span> <span class="n">b</span><span class="p">)</span> <span class="kt">:&lt;</span> <span class="n">b</span> <span class="o">|</span> <span class="kt">El</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Fr</span> <span class="n">b</span> <span class="ow">=</span> <span class="n">b</span> <span class="kt">:&gt;</span> <span class="p">(</span><span class="kt">Fr</span> <span class="n">b</span><span class="p">)</span> <span class="o">|</span> <span class="kt">Er</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Fl</code> is a data type whose constructor <code>:&lt;</code> can be used in <code>foldl</code>. <code>Fr</code> has constructor <code>:&gt;</code> and can be used in <code>foldr</code>.</p>

<p>Using them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Main&gt; foldl (:&lt;) El [1..5]
</span><span class='line'>((((El :&lt; 1) :&lt; 2) :&lt; 3) :&lt; 4) :&lt; 5
</span><span class='line'>*Main&gt; foldr (:&gt;) Er [1..5]
</span><span class='line'>1 :&gt; (2 :&gt; (3 :&gt; (4 :&gt; (5 :&gt; Er))))</span></code></pre></td></tr></table></div></figure>


<p>It seems that, to translate from <code>foldl</code> to <code>foldr</code>, there are two problems:</p>

<ul>
<li>the function <code>f</code> in <code>foldr</code> uses its parameters in reverse order from the <code>f</code> in <code>foldl</code>. Perhaps something that <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.0.0/Prelude.html#v:flip"><code>flip</code></a> could help with?</li>
<li>the list is iterated over in the opposite order. A task for <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.0.0/Prelude.html#v:reverse"><code>reverse</code></a>?</li>
</ul>


<p>Let&#8217;s see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Main&gt; foldr (flip (:&lt;)) El [1..5]
</span><span class='line'>((((El :&lt; 5) :&lt; 4) :&lt; 3) :&lt; 2) :&lt; 1
</span><span class='line'>*Main&gt; foldr (flip (:&lt;)) El $ reverse [1..5]
</span><span class='line'>((((El :&lt; 1) :&lt; 2) :&lt; 3) :&lt; 4) :&lt; 5</span></code></pre></td></tr></table></div></figure>


<p>So yes, it is indeed possible to write <code>foldl</code> in terms of <code>foldr</code>: <code>foldl f a bs = foldr (flip f) a $ reverse bs</code>. This answer the first question, and along the way we have collected some hints on how to do it (I mean, beside using <code>flip</code> and <code>reverse</code> as above)</p>

<h2>Planning the solution</h2>

<p>Let&#8217;s look again at <code>foldl</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Main&gt; foldl (flip (:&gt;)) Er [1..5]
</span><span class='line'>5 :&gt; (4 :&gt; (3 :&gt; (2 :&gt; (1 :&gt; Er))))</span></code></pre></td></tr></table></div></figure>


<p>This time I pass <code>flip (:&gt;)</code> as the function argument. This is to make <code>:&gt;</code> compatible with <code>foldl</code>. <code>:&gt;</code> is really just like <code>flip (:&lt;)</code>, but it gives a new perspective: <code>:&gt;</code> has type <code>b -&gt; a -&gt; a</code>, which is the same as saying that <code>(:&gt;) b</code> has type <code>a -&gt; a</code> (I apply partially. <code>b :&gt;</code> is the same as <code>(:&gt;) b</code>).</p>

<p>In point-free notation, the result above is identical to <code>(:&gt;) 5 . (:&gt;) 4 . (:&gt;) 3 . (:&gt;) 2 . (:&gt;) 1 $ Er</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Main&gt; (:&gt;) 5 . (:&gt;) 4 . (:&gt;) 3 . (:&gt;) 2 . (:&gt;) 1 $ Er
</span><span class='line'>5 :&gt; (4 :&gt; (3 :&gt; (2 :&gt; (1 :&gt; Er))))</span></code></pre></td></tr></table></div></figure>


<p>(I&#8217;m always happy when ghci agrees with me).</p>

<p>This is great for two reasons:</p>

<ul>
<li>while we cannot say anything about the original <code>f</code> function (here represented as <code>:&gt;</code>), the function composition <code>.</code> operator is associative, meaning we can put the parenthesis where we (or <code>foldr</code>) wants. In other words, if we manipulate functions <code>(:&gt;) b</code> instead of values, and combine them with composition, we don&#8217;t have to care about the fact that <code>foldr</code> and <code>foldl</code> nest expressions differently.</li>
<li>The <code>a</code> parameter, represented here by <code>Er</code>, is removed from the iteration. As <code>foldr</code> and <code>foldl</code> use this parameter differently, if we can abstract it away, this is another difference that disappear.</li>
</ul>


<p>So the solution can be built on two concepts:</p>

<ul>
<li>use <code>flip f</code> instead of <code>f</code> so that we can operate on functions <code>a -&gt; a</code> instead of values <code>a</code></li>
<li>use composition over these functions to combine them, then apply the result to the <code>a</code> parameter to get the answer.</li>
</ul>


<h2>Building the solution</h2>

<p>First, I introduce a new function, <code>foldl_alt</code>, that is supposed to implement <code>foldl</code>. The definition of <code>foldl_alt</code> is then rewritten until <code>foldr</code> appears:</p>

<figure class='code'><figcaption><span>foldl_alt basic equation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="n">bs</span> <span class="ow">=</span> <span class="n">foldl_alt</span> <span class="n">f</span> <span class="n">bs</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, let&#8217;s handle the base case:</p>

<figure class='code'><figcaption><span>foldl_alt on empty list  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl_alt</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is easily shown true:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldl f a [] == a                  -- by definition of foldl
</span><span class='line'>             == id a               -- by definition of id
</span><span class='line'>             == (foldl_alt f []) a -- by definition of foldl_alt</span></code></pre></td></tr></table></div></figure>


<p>The recursive case is simple as well (by recursion):</p>

<figure class='code'><figcaption><span>foldl_alt on non empty list  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl_alt</span> <span class="n">f</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">foldl_alt</span> <span class="n">f</span> <span class="n">bs</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="n">f&#39;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">f&#39;</span> <span class="ow">=</span> <span class="n">flip</span> <span class="n">f</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assuming <code>foldl f a bs == foldl_alt f bs a</code>, let&#8217;s show by induction that <code>foldl f a (b:bs) == foldl_alt f (b:bs) a</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldl f a (b:bs) == foldl f (f a b) bs            -- by definition of foldl
</span><span class='line'>                 == foldl_alt f bs (f a b)        -- induction hypothesis
</span><span class='line'>                 == foldl_alt f bs (f' b a)       -- simple replacement
</span><span class='line'>                      where f' = flip f
</span><span class='line'>                 == (foldl_alt f bs) . (f' b) $ a -- point-free notation
</span><span class='line'>                      where f' = flip f</span></code></pre></td></tr></table></div></figure>


<p>So <code>foldl_alt</code> as currently defined is identical to <code>foldl</code>. The recursive case can be further rewritten as:</p>

<figure class='code'><figcaption><span>foldl_alt on non empty list, second version  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl_alt</span> <span class="n">f</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">comp&#39;</span> <span class="p">(</span><span class="n">f&#39;</span> <span class="n">b</span><span class="p">)</span> <span class="p">(</span><span class="n">foldl_alt</span> <span class="n">f</span> <span class="n">bs</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">f&#39;</span>    <span class="ow">=</span> <span class="n">flip</span> <span class="n">f</span>
</span><span class='line'>        <span class="n">comp&#39;</span> <span class="ow">=</span> <span class="n">flip</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the composition operator is replaced by <code>comp'</code>, which just takes its argument in reversed order. This is done to show the similarity of this current <code>foldl_alt</code> with the recursive case of <code>foldr</code>. Indeed, <code>foldl_alt f</code> is identical to <code>foldr m id</code> for some function <code>m</code> (for Mystery):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldl_alt f [] == id == foldr m id []                            
</span><span class='line'>  -- by definition of both foldl_alt and foldr</span></code></pre></td></tr></table></div></figure>


<p>Now I can use induction to show that <code>foldl_alt f bs == foldr m id bs</code> implies <code>foldl_alt f (b:bs) == foldr m id (b:bs)</code>, and compute <code>m</code> at the same time:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldl_alt f (b:bs) == comp' (f' b) (foldl_alt f bs)              
</span><span class='line'>                        where f' = flip f
</span><span class='line'>                              comp' = flip (.)
</span><span class='line'>  -- by definition of foldl_alt
</span><span class='line'>                   == comp' (\a -&gt; f a b) (foldl_alt f bs)        
</span><span class='line'>                        where comp' = flip (.)
</span><span class='line'>  -- expand f'
</span><span class='line'>                   == (\g a -&gt; g (f a b)) (foldl_alt f bs)       
</span><span class='line'>  -- expand comp' - g has type a -&gt; a, and is bound to (foldl_alt f bs) 
</span><span class='line'>                   == (\b' g a -&gt; g (f a b')) b (foldl_alt f bs) 
</span><span class='line'>  -- take b out of the function; replace it with b' that is bound to b
</span><span class='line'>                 == (\b' g a -&gt; g (f a b')) b (foldr (\b' g a -&gt; g (f a b')) id bs)
</span><span class='line'>  -- induction hypothesis
</span><span class='line'>                   == foldr (\b' g a -&gt; g (f a b')) (b:bs) id    
</span><span class='line'>  -- definition of foldr, recursive case</span></code></pre></td></tr></table></div></figure>


<p>When using the induction hypothesis, I replaced <code>m</code> with <code>(\b' g a -&gt; g (f a b'))</code>. This is because this function is independent of any specific <code>b</code>: by construction it would be the same at every step of the induction (except the base case, where it is not use, and therefore can be anything we need it to be).</p>

<p><code>b'</code> as a parameter to the function is bound to <code>b</code> as the value in the list. I use different names to make it clear they&#8217;re different, but of course inside the function I could use <code>b</code> as the variable scope is limited to the function.</p>

<p>For the same reason, I replace the <code>a</code> above by <code>x</code>, as I need <code>a</code> to represent the original <code>a</code> parameter (once again I could use <code>a</code> for both). This gives:</p>

<figure class='code'><figcaption><span>foldl as foldr  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="n">bs</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="nf">\</span><span class="n">b</span> <span class="n">g</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">g</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span> <span class="n">b</span><span class="p">))</span> <span class="n">id</span> <span class="n">bs</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, that was long. I hope it was clear (or clearer).</p>

<p>Next time I&#8217;ll show how to implement <code>foldr</code> as <code>foldl</code> (minus the laziness).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Erlang Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/06/seven-languages-in-seven-weeks-erlang-day-3/"/>
    <updated>2011-11-06T10:17:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/06/seven-languages-in-seven-weeks-erlang-day-3</id>
    <content type="html"><![CDATA[<p>One last day with Erlang; it was about time we get to perhaps its most significant aspect: its concurrency model, and recipe for error recovery, embodied in its motto, &#8220;Let it crash.&#8221;</p>

<!--more-->


<p>Erlang makes it very cheap and easy to spawn processes (in this context, internal processes. External processes are called nodes), and have the various processes communicate by sending messages to each others. Extending the communication to the network follows the same pattern, and is just as easy.</p>

<p>Processes can also monitor each others, in various ways, so that a crashed process can be restarted. As it is both easy and natural to do, Erlang discourages complex error recovery methods, and instead proposes that processes be allowed to crash, and be restarted. While it is possible to abuse this principle, it can lead to much simpler code and general logic; the lack of mutable data in this regard is another advantage, as there is less risk to leave anything in an inconsistent state (it is still possible, as there are updatable stores).</p>

<p>The book rightfully does not claim to be exhaustive in its coverage, but the exercises are rich and complex enough to offer a glimpse of what is possible in Erlang.</p>

<p>Other capabilities, such as the ability to update code while running, are not covered, but participate in the set of features that make Erlang so suited for robust applications.</p>

<h2>Exercises</h2>

<h3>An OTP service that will restart a process if it dies</h3>

<p>That sounds like the <a href="http://www.erlang.org/doc/man/supervisor.html"><code>supervisor</code></a> module&#8217;s job description. It is not trivial, however: supervised processes must have a descriptor that explains how to start, stop and restart them.</p>

<p>There is a fairly detailed description of the setup in <a href="http://learnyousomeerlang.com/">Learn you some Erlang for great good</a>, but it requires a good understanding of everything that comes before. A much shorter introduction is found <a href="http://www.hccp.org/supervisors.html">here</a>.</p>

<p>For, using <code>supervisor</code> for keeping the <code>translate_service</code> up and running (assuming it dies on unknown words):</p>

<figure class='code'><figcaption><span>Supervised Translation Service  (translate_service_sup.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/translate_service_sup.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">translate_service_sup</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">supervisor</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">translate</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_service</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">receive</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="s">&quot;casa&quot;</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">From</span> <span class="o">!</span> <span class="s">&quot;house&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">loop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="s">&quot;blanca&quot;</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">From</span> <span class="o">!</span> <span class="s">&quot;white&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">loop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">From</span><span class="p">,</span><span class="nv">M</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">From</span> <span class="o">!</span> <span class="s">&quot;I do not understand&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">exit</span><span class="p">({</span><span class="nv">M</span><span class="p">,</span> <span class="n">not_understood</span><span class="p">,</span> <span class="n">received_at</span><span class="p">,</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">time</span><span class="p">()})</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">translate</span><span class="p">(</span><span class="nv">Word</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">translator</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Word</span><span class="p">},</span>
</span><span class='line'>  <span class="k">receive</span>
</span><span class='line'>    <span class="nv">Translation</span> <span class="o">-&gt;</span> <span class="nv">Translation</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="n">fwrite</span><span class="p">(</span><span class="s">&quot;Starting...</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">translator</span><span class="p">,</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="n">translate_service_sup</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[])),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nb">whereis</span><span class="p">(</span><span class="n">translator</span><span class="p">)}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">(_)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{{</span><span class="n">one_for_one</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">60</span><span class="p">},</span>
</span><span class='line'>          <span class="p">[{</span><span class="n">translate_service_sup</span><span class="p">,</span> <span class="p">{</span><span class="n">translate_service_sup</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>            <span class="n">permanent</span><span class="p">,</span> <span class="n">brutal_kill</span><span class="p">,</span> <span class="n">worker</span><span class="p">,</span> <span class="p">[</span><span class="n">translate_service_sup</span><span class="p">]}]}}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_service</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="n">fwrite</span><span class="p">(</span><span class="s">&quot;start_service</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">supervisor</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="n">translate_service_sup</span><span class="p">,</span> <span class="p">[]).</span>
</span></code></pre></td></tr></table></div></figure>


<p>I register the spawned process to the atom <code>translator</code>; this is because I could not find a way to retrieve the process id of the translate loop.</p>

<p>Starting the supervised process is now simple:</p>

<figure class='code'><figcaption><span>Using the Supervised Translator  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">translate_service_sup</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">translate_service_sup</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">translate_service_sup</span><span class="p">:</span><span class="n">start_service</span><span class="p">().</span>
</span><span class='line'><span class="n">start_service</span>
</span><span class='line'><span class="nv">Starting</span><span class="p">...</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">38</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">translate_service_sup</span><span class="p">:</span><span class="n">translate</span><span class="p">(</span><span class="s">&quot;casa&quot;</span><span class="p">).</span>
</span><span class='line'><span class="s">&quot;house&quot;</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">translate_service_sup</span><span class="p">:</span><span class="n">translate</span><span class="p">(</span><span class="s">&quot;que&quot;</span><span class="p">).</span>
</span><span class='line'><span class="nv">Starting</span><span class="p">...</span>
</span><span class='line'><span class="s">&quot;I do not understand&quot;</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="nn">translate_service_sup</span><span class="p">:</span><span class="n">translate</span><span class="p">(</span><span class="s">&quot;casa&quot;</span><span class="p">).</span>
</span><span class='line'><span class="s">&quot;house&quot;</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="nn">translate_service_sup</span><span class="p">:</span><span class="n">translate</span><span class="p">(</span><span class="s">&quot;que&quot;</span><span class="p">).</span>
</span><span class='line'><span class="nv">Starting</span><span class="p">...</span>
</span><span class='line'><span class="s">&quot;I do not understand&quot;</span>
</span><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="nn">translate_service_sup</span><span class="p">:</span><span class="n">translate</span><span class="p">(</span><span class="s">&quot;que&quot;</span><span class="p">).</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="nb">exit</span><span class="p">:</span> <span class="n">shutdown</span>
</span></code></pre></td></tr></table></div></figure>


<p>As seen above, the translator chokes on an unknown word, but is restarted immediately. However, if the process dies too often (here, more than once per minute), the supervisor kills it definitively.</p>

<h3>Documentation for building a simple OTP server</h3>

<p>That question a bit open ended. If we are talking about a simple TCP server, then the <a href="http://www.erlang.org/doc/man/gen_tcp.html"><code>gen_tcp</code></a> module is enough to get a server, as shown in <a href="http://www.joeandmotorboat.com/2008/11/12/a-simple-concurrent-erlang-tcp-server/">this post</a>.</p>

<p>To go further, and add supervisors and other OTP goodies, there is a <a href="http://www.trapexit.org/Building_a_Non-blocking_TCP_server_using_OTP_principles">tutorial</a> on
<a href="http://www.trapexit.org/">trapexit.org</a>, but it uses code generating tools which are not part of the standard Erlang distribution.</p>

<h3>Monitor the <code>translate_service</code></h3>

<p>Just to explore the API introduced today, I went a bit beyond the exercise, and made the <code>doctor</code> able to monitor any kind of process, and attach it to a supplied atom.</p>

<p>First, a utility function <code>start</code> creates a new <code>doctor</code> process, then sends it a message to spawn the monitored process.</p>

<p>The new <code>loop</code> function takes both the function to be spawned and monitored, and the atom to attach it to. Both parameters are kept in the loop as argument.</p>

<figure class='code'><figcaption><span>Improved doctor Module  (doctor.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/doctor.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">doctor</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">loop</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">D</span> <span class="o">=</span> <span class="nb">spawn</span><span class="p">(</span><span class="n">doctor</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">]),</span>
</span><span class='line'>  <span class="nv">D</span> <span class="o">!</span> <span class="n">new</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">D</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nb">process_flag</span><span class="p">(</span><span class="n">trap_exit</span><span class="p">,</span> <span class="n">true</span><span class="p">),</span>
</span><span class='line'>  <span class="k">receive</span>
</span><span class='line'>    <span class="n">new</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Creating and monitoring process, attaching to atom </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">A</span><span class="p">]),</span>
</span><span class='line'>      <span class="nb">register</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="nv">F</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">loop</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">);</span>
</span><span class='line'>    <span class="p">{</span><span class="n">&#39;EXIT&#39;</span><span class="p">,</span> <span class="nv">From</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;The process </span><span class="si">~p</span><span class="s"> </span><span class="si">~p</span><span class="s"> died with reason </span><span class="si">~p</span><span class="s">.&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">A</span><span class="p">,</span> <span class="nv">From</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">]),</span>
</span><span class='line'>      <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot; Restarting</span><span class="si">~n</span><span class="s">.&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="n">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">new</span><span class="p">,</span>
</span><span class='line'>      <span class="n">loop</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>translate_service</code> is slightly modified to die of shame on untranslatable words.</p>

<figure class='code'><figcaption><span>Modified translate_service Module  (translate_service.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/translate_service.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">translate_service</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">translate</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">receive</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="s">&quot;casa&quot;</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">From</span> <span class="o">!</span> <span class="s">&quot;house&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">loop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="s">&quot;blanca&quot;</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">From</span> <span class="o">!</span> <span class="s">&quot;white&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">loop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">From</span><span class="p">,</span><span class="nv">M</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">From</span> <span class="o">!</span> <span class="s">&quot;I do not understand&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">exit</span><span class="p">({</span><span class="nv">M</span><span class="p">,</span> <span class="n">not_understood</span><span class="p">,</span> <span class="n">received_at</span><span class="p">,</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">time</span><span class="p">()})</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">translate</span><span class="p">(</span><span class="nv">To</span><span class="p">,</span> <span class="nv">Word</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">To</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Word</span><span class="p">},</span>
</span><span class='line'>  <span class="k">receive</span>
</span><span class='line'>    <span class="nv">Translation</span> <span class="o">-&gt;</span> <span class="nv">Translation</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>With these defined, it is possible to run two monitored services and attach them to different atoms:</p>

<figure class='code'><figcaption><span>Testing the Doctor  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">DocRev</span> <span class="o">=</span> <span class="nn">doctor</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="k">fun</span> <span class="nn">roulette</span><span class="p">:</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">revolver</span><span class="p">).</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">33</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nv">DocTrans</span> <span class="o">=</span> <span class="nn">doctor</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="k">fun</span> <span class="nn">translate_service</span><span class="p">:</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">translator</span><span class="p">).</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">translator</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">36</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">1</span><span class="p">.</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">1</span><span class="p">.</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="nn">translate_service</span><span class="p">:</span><span class="n">translate</span><span class="p">(</span><span class="n">translator</span><span class="p">,</span> <span class="s">&quot;casa&quot;</span><span class="p">).</span>
</span><span class='line'><span class="n">click</span><span class="p">.</span>
</span><span class='line'><span class="n">bang</span><span class="p">.</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="n">revolver</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">34</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">roulette</span><span class="p">,</span><span class="n">die</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">10</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">0</span><span class="p">}}.</span> <span class="nv">Restarting</span>
</span><span class='line'><span class="p">.</span><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="s">&quot;house&quot;</span>
</span><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="nn">translate_service</span><span class="p">:</span><span class="n">translate</span><span class="p">(</span><span class="n">translator</span><span class="p">,</span> <span class="s">&quot;que&quot;</span><span class="p">).</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="n">translator</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">37</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="s">&quot;que&quot;</span><span class="p">,</span><span class="n">not_understood</span><span class="p">,</span>
</span><span class='line'>                                                  <span class="n">received_at</span><span class="p">,</span>
</span><span class='line'>                                                  <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">0</span><span class="p">}}.</span><span class="s">&quot;I do not understand&quot;</span>
</span><span class='line'> <span class="nv">Restarting</span>
</span><span class='line'><span class="p">.</span><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">translator</span><span class="p">.</span>
</span><span class='line'><span class="mi">8</span><span class="o">&gt;</span> <span class="nn">translate_service</span><span class="p">:</span><span class="n">translate</span><span class="p">(</span><span class="n">translator</span><span class="p">,</span> <span class="s">&quot;casa&quot;</span><span class="p">).</span>
</span><span class='line'><span class="s">&quot;house&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both services are restarted properly when dying.</p>

<h3>Self monitoring Doctor</h3>

<p>For the Doctor to successfully monitor itself, it should also be able to restart (or restart monitoring) whatever process it was monitoring when it died.</p>

<p>For this, I create a new <code>d_monitor</code> function that spawns a monitor loop. The atom argument is used (or abused) to indicate whether we are starting an doctor monitoring loop, or the target function monitoring loop. In the former case, <code>d_monitor</code> is called again; in the latter the target function is spawned.</p>

<p>When <code>d_monitor</code> is called from <code>start</code>, the former case is triggered; when called from <code>loop</code>, the latter case is.</p>

<p>This means that for every call to <code>start</code>, there is two &#8220;nested&#8221; <code>loop</code>s running, the outside one monitoring the inside one, and the inside one in charge of the target function.</p>

<p>To test the code, I gave the inside <code>loop</code> a non zero parameter which is decreased every time it has to restart the monitored function. When it reaches zero, the monitoring stops, and has to be restarted as well.</p>

<p>Finally, instead of spawning directly the target function, I use the <code>check_for</code> function to first try to locate a process given the atom; only if this fails would a new process be spawned. The function is not very robust (in particular, if two monitors are trying to restart the process at the same time, one might fail rather than reattaching, because of the order of concurrent evaluation).</p>

<figure class='code'><figcaption><span>Module Doctor_2  (doctor_2.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/doctor_2.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">doctor_2</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">loop</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">d_monitor</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="p">{</span><span class="n">out</span><span class="p">,</span> <span class="nv">A</span><span class="p">},</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">d_monitor</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">D</span> <span class="o">=</span> <span class="nb">spawn</span><span class="p">(</span><span class="n">doctor_2</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">N</span><span class="p">]),</span>
</span><span class='line'>  <span class="nv">D</span> <span class="o">!</span> <span class="n">new</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">D</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">(_,</span> <span class="p">_,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">exit</span><span class="p">({</span><span class="n">running</span><span class="p">,</span> <span class="n">out_of</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">time</span><span class="p">()});</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nb">process_flag</span><span class="p">(</span><span class="n">trap_exit</span><span class="p">,</span> <span class="n">true</span><span class="p">),</span>
</span><span class='line'>  <span class="k">receive</span>
</span><span class='line'>    <span class="n">new</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nv">A</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="n">out</span><span class="p">,</span> <span class="nv">At</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Creating and monitoring process.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="nv">P</span> <span class="o">=</span> <span class="n">d_monitor</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">At</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
</span><span class='line'>              <span class="nb">link</span><span class="p">(</span><span class="nv">P</span><span class="p">);</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">check_for</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="nv">F</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span><span class="p">,</span>
</span><span class='line'>      <span class="n">loop</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">N</span><span class="p">);</span>
</span><span class='line'>    <span class="p">{</span><span class="n">&#39;EXIT&#39;</span><span class="p">,</span> <span class="nv">From</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;The process </span><span class="si">~p</span><span class="s"> </span><span class="si">~p</span><span class="s"> died with reason </span><span class="si">~p</span><span class="s">.&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">A</span><span class="p">,</span> <span class="nv">From</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">]),</span>
</span><span class='line'>      <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot; Restarting</span><span class="si">~n</span><span class="s">.&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="n">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">new</span><span class="p">,</span>
</span><span class='line'>      <span class="n">loop</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">check_for</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="nv">F</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Found</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">member</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="n">registered</span><span class="p">())</span> <span class="ow">andalso</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">is_process_alive</span><span class="p">(</span><span class="nb">whereis</span><span class="p">(</span><span class="nv">A</span><span class="p">)),</span>
</span><span class='line'>  <span class="k">if</span>
</span><span class='line'>    <span class="nv">Found</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;reattaching to running process </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">A</span><span class="p">]),</span>
</span><span class='line'>    <span class="nb">link</span><span class="p">(</span><span class="nb">whereis</span><span class="p">(</span><span class="nv">A</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">true</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Creating and monitoring process, attaching to atom </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">A</span><span class="p">]),</span>
</span><span class='line'>      <span class="nb">register</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="nv">F</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">true</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>To test the new code, I have written it so that the inner <code>loop</code> will die after 3 restarts of the monitored process:</p>

<figure class='code'><figcaption><span>Self monitoring Doctor  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">doctor_2</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="k">fun</span> <span class="nn">roulette</span><span class="p">:</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">revolver</span><span class="p">).</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">.</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">33</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="n">bang</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="n">revolver</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">35</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">roulette</span><span class="p">,</span><span class="n">die</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">11</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">30</span><span class="p">}}.</span> <span class="nv">Restarting</span>
</span><span class='line'><span class="p">.</span><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="n">bang</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="n">revolver</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">38</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">roulette</span><span class="p">,</span><span class="n">die</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">11</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">32</span><span class="p">}}.</span> <span class="nv">Restarting</span>
</span><span class='line'><span class="p">.</span><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="n">bang</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="n">revolver</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">40</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">roulette</span><span class="p">,</span><span class="n">die</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">11</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">34</span><span class="p">}}.</span> <span class="nv">Restarting</span>
</span><span class='line'><span class="p">.</span><span class="nv">The</span> <span class="n">process</span> <span class="p">{</span><span class="n">out</span><span class="p">,</span><span class="n">revolver</span><span class="p">}</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">34</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">running</span><span class="p">,</span><span class="n">out_of</span><span class="p">,</span><span class="n">time</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">34</span><span class="p">}}.</span> <span class="nv">Restarting</span>
</span><span class='line'><span class="p">.</span><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">.</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">1</span><span class="p">.</span>
</span><span class='line'><span class="n">click</span><span class="p">.</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>As seen at the third call to <code>revolver ! 3</code>, after restarting the process, the monitor dies, then is restarted and attaches to the already running <code>revolver</code> process.</p>

<h3>Monitoring the monitor. And vice-versa</h3>

<p>For this exercise, I will go back to the simpler, original <code>doctor</code> module (the one that only keeps the shooter alive).</p>

<p>I will use three atoms, <code>doctor</code>, <code>monitor</code> and <code>revolver</code> (for <code>roulette:loop</code>), to register the processes. The <code>doctor:loop</code> will be able to restart both <code>monitor</code> and <code>shooter</code>; <code>monitor:loop</code> will be able to restart <code>doctor</code>; <code>roulette</code> will have no such capacity.</p>

<p>To keep things easy, I will also make sure the processes can easily be killed.</p>

<p>First, I&#8217;ve move the function to look for a process by name to its own module; I also make sure that each module has a <code>start</code> function that registers a spawned process, and triggers the initialization process. This function is now the argument to the <code>look_for</code> function, so it no longer has to do the spawning and registering.</p>

<figure class='code'><figcaption><span>Look for process  (look.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/mon_doc/look.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">look</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">look_for</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">look_for</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="nv">F</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Found</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">member</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="n">registered</span><span class="p">())</span> <span class="ow">andalso</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">is_process_alive</span><span class="p">(</span><span class="nb">whereis</span><span class="p">(</span><span class="nv">A</span><span class="p">)),</span>
</span><span class='line'>    <span class="k">if</span>
</span><span class='line'>        <span class="nv">Found</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;reattaching to running process </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">A</span><span class="p">]),</span>
</span><span class='line'>            <span class="nb">link</span><span class="p">(</span><span class="nb">whereis</span><span class="p">(</span><span class="nv">A</span><span class="p">)),</span>
</span><span class='line'>            <span class="n">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">true</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Creating and monitoring process, attaching to atom </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">A</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">F</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">true</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>doctor</code> module is similar to the original. The differences are that it respond to the <code>die</code> message, also it has a <code>start</code> message that checks for the <code>monitor</code> process. It uses the <code>monitor:start</code> function, as explained above, so that if the <code>monitor</code> has to be started, it will also be properly initialized.</p>

<figure class='code'><figcaption><span>Doctor  (doctor.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/mon_doc/doctor.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">doctor</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">process_flag</span><span class="p">(</span><span class="n">trap_exit</span><span class="p">,</span> <span class="n">true</span><span class="p">),</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Looking for monitor...</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="nn">look</span><span class="p">:</span><span class="n">look_for</span><span class="p">(</span><span class="nb">monitor</span><span class="p">,</span> <span class="k">fun</span> <span class="nb">monitor</span><span class="p">:</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>            <span class="n">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">new</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">();</span>
</span><span class='line'>        <span class="n">new</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Looking for revolver...</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="nn">look</span><span class="p">:</span><span class="n">look_for</span><span class="p">(</span><span class="n">revolver</span><span class="p">,</span> <span class="k">fun</span> <span class="nn">roulette</span><span class="p">:</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">();</span>
</span><span class='line'>        <span class="n">die</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Aaargh...</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="nb">exit</span><span class="p">({</span><span class="n">doctor</span><span class="p">,</span> <span class="n">died</span><span class="p">,</span> <span class="n">at</span><span class="p">,</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">time</span><span class="p">()});</span>
</span><span class='line'>        <span class="p">{</span><span class="n">&#39;EXIT&#39;</span><span class="p">,</span> <span class="nv">From</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;The process </span><span class="si">~p</span><span class="s"> died with reason </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">From</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">]),</span>
</span><span class='line'>            <span class="n">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">start</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">()</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">doctor</span><span class="p">,</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="k">fun</span> <span class="nn">doctor</span><span class="p">:</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">doctor</span> <span class="o">!</span> <span class="n">start</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>monitor</code> module is simpler: it only needs to check for the <code>doctor</code> process, running the <code>doctor:start</code> function if needed.</p>

<figure class='code'><figcaption><span>Monitor  (monitor.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/mon_doc/monitor.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="nb">monitor</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">process_flag</span><span class="p">(</span><span class="n">trap_exit</span><span class="p">,</span> <span class="n">true</span><span class="p">),</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Looking for doctor...</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="nn">look</span><span class="p">:</span><span class="n">look_for</span><span class="p">(</span><span class="n">doctor</span><span class="p">,</span> <span class="k">fun</span> <span class="nn">doctor</span><span class="p">:</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">();</span>
</span><span class='line'>        <span class="n">die</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Aaargh...</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="nb">exit</span><span class="p">({</span><span class="nb">monitor</span><span class="p">,</span> <span class="n">died</span><span class="p">,</span> <span class="n">at</span><span class="p">,</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">time</span><span class="p">()});</span>
</span><span class='line'>        <span class="p">{</span><span class="n">&#39;EXIT&#39;</span><span class="p">,</span> <span class="nv">From</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;The process </span><span class="si">~p</span><span class="s"> died with reason </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">From</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">]),</span>
</span><span class='line'>            <span class="n">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">start</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">()</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="nb">monitor</span><span class="p">,</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="k">fun</span> <span class="nb">monitor</span><span class="p">:</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">)),</span>
</span><span class='line'>    <span class="nb">monitor</span> <span class="o">!</span> <span class="n">start</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the slightly modified <code>roulette</code> module (it now has a <code>roulette:start</code> function):</p>

<figure class='code'><figcaption><span>Roulette  (roulette.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/mon_doc/roulette.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">roulette</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">receive</span>
</span><span class='line'>    <span class="mi">3</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;bang.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span> <span class="nb">exit</span><span class="p">({</span><span class="n">roulette</span><span class="p">,</span> <span class="n">die</span><span class="p">,</span> <span class="n">at</span><span class="p">,</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">time</span><span class="p">()});</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;click.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">),</span> <span class="n">loop</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">revolver</span><span class="p">,</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="k">fun</span> <span class="nn">roulette</span><span class="p">:</span><span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">)).</span>
</span></code></pre></td></tr></table></div></figure>


<p>The basic doctoring still works:</p>

<figure class='code'><figcaption><span>Testing the Monitored Doctor  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">doctor</span><span class="p">:</span><span class="n">start</span><span class="p">().</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="nb">monitor</span><span class="p">...</span>
</span><span class='line'><span class="n">start</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="nb">monitor</span><span class="p">.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">revolver</span><span class="p">...</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">doctor</span><span class="p">...</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="n">reattaching</span> <span class="n">to</span> <span class="n">running</span> <span class="n">process</span> <span class="n">doctor</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">1</span><span class="p">.</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">click</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="n">bang</span><span class="p">.</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">36</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">roulette</span><span class="p">,</span><span class="n">die</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">21</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">1</span><span class="p">}}.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="nb">monitor</span><span class="p">...</span>
</span><span class='line'><span class="n">reattaching</span> <span class="n">to</span> <span class="n">running</span> <span class="n">process</span> <span class="nb">monitor</span><span class="p">.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">revolver</span><span class="p">...</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">1</span><span class="p">.</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">click</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>doctor</code> can be killed; <code>monitor</code> will restart it:</p>

<figure class='code'><figcaption><span>Testing the Monitored Doctor 2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="n">doctor</span> <span class="o">!</span> <span class="n">die</span><span class="p">.</span>
</span><span class='line'><span class="n">die</span>
</span><span class='line'><span class="nv">Aaargh</span><span class="p">...</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">33</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">doctor</span><span class="p">,</span><span class="n">died</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">21</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">47</span><span class="p">}}.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">doctor</span><span class="p">...</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">doctor</span><span class="p">.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="nb">monitor</span><span class="p">...</span>
</span><span class='line'><span class="n">reattaching</span> <span class="n">to</span> <span class="n">running</span> <span class="n">process</span> <span class="nb">monitor</span><span class="p">.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">revolver</span><span class="p">...</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="nn">error</span><span class="p">:</span> <span class="p">{</span><span class="n">doctor</span><span class="p">,</span><span class="n">died</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">21</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">47</span><span class="p">}}</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="n">bang</span><span class="p">.</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">43</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">roulette</span><span class="p">,</span><span class="n">die</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">21</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">56</span><span class="p">}}.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="nb">monitor</span><span class="p">...</span>
</span><span class='line'><span class="n">reattaching</span> <span class="n">to</span> <span class="n">running</span> <span class="n">process</span> <span class="nb">monitor</span><span class="p">.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">revolver</span><span class="p">...</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">1</span><span class="p">.</span>
</span><span class='line'><span class="n">click</span><span class="p">.</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, <code>monitor</code> can also be killed; it is restarted by <code>doctor</code>:</p>

<figure class='code'><figcaption><span>Testing the Monitored Doctor 3  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">8</span><span class="o">&gt;</span> <span class="nb">monitor</span> <span class="o">!</span> <span class="n">die</span><span class="p">.</span>
</span><span class='line'><span class="n">die</span>
</span><span class='line'><span class="nv">Aaargh</span><span class="p">...</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">35</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="nb">monitor</span><span class="p">,</span><span class="n">died</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">21</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">44</span><span class="p">}}.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="nb">monitor</span><span class="p">...</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="nb">monitor</span><span class="p">.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">revolver</span><span class="p">...</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">doctor</span><span class="p">...</span>
</span><span class='line'><span class="n">reattaching</span> <span class="n">to</span> <span class="n">running</span> <span class="n">process</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="n">reattaching</span> <span class="n">to</span> <span class="n">running</span> <span class="n">process</span> <span class="n">doctor</span><span class="p">.</span>
</span><span class='line'><span class="mi">9</span><span class="o">&gt;</span> <span class="n">doctor</span> <span class="o">!</span> <span class="n">die</span><span class="p">.</span>
</span><span class='line'><span class="nv">Aaargh</span><span class="p">...</span>
</span><span class='line'><span class="n">die</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">42</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">doctor</span><span class="p">,</span><span class="n">died</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">21</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">47</span><span class="p">}}.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">doctor</span><span class="p">...</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">doctor</span><span class="p">.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="nb">monitor</span><span class="p">...</span>
</span><span class='line'><span class="n">reattaching</span> <span class="n">to</span> <span class="n">running</span> <span class="n">process</span> <span class="nb">monitor</span><span class="p">.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">revolver</span><span class="p">...</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="mi">10</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="n">bang</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nv">The</span> <span class="n">process</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">52</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">died</span> <span class="n">with</span> <span class="n">reason</span> <span class="p">{</span><span class="n">roulette</span><span class="p">,</span><span class="n">die</span><span class="p">,</span><span class="n">at</span><span class="p">,{</span><span class="mi">21</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">51</span><span class="p">}}.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="nb">monitor</span><span class="p">...</span>
</span><span class='line'><span class="n">reattaching</span> <span class="n">to</span> <span class="n">running</span> <span class="n">process</span> <span class="nb">monitor</span><span class="p">.</span>
</span><span class='line'><span class="nv">Looking</span> <span class="n">for</span> <span class="n">revolver</span><span class="p">...</span>
</span><span class='line'><span class="nv">Creating</span> <span class="ow">and</span> <span class="n">monitoring</span> <span class="n">process</span><span class="p">,</span> <span class="n">attaching</span> <span class="n">to</span> <span class="n">atom</span> <span class="n">revolver</span><span class="p">.</span>
</span><span class='line'><span class="mi">11</span><span class="o">&gt;</span> <span class="n">revolver</span> <span class="o">!</span> <span class="mi">1</span><span class="p">.</span>
</span><span class='line'><span class="n">click</span><span class="p">.</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Logging messages to a file</h3>

<p>For this I will just derive the code from the one on this <a href="http://www.joeandmotorboat.com/2008/11/12/a-simple-concurrent-erlang-tcp-server/">post</a> (which I mentioned above).</p>

<p>Rather than echoing the received messages, they are written to disk:</p>

<figure class='code'><figcaption><span>Logging messages  (logger.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/logger.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">logger</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_server</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">connect</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">recv_loop</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">LISTEN_PORT</span><span class="p">,</span> <span class="mi">9000</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">TCP_OPTS</span><span class="p">,</span> <span class="p">[</span><span class="n">binary</span><span class="p">,</span> <span class="p">{</span><span class="n">packet</span><span class="p">,</span> <span class="n">raw</span><span class="p">},</span> <span class="p">{</span><span class="n">nodelay</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span> <span class="p">{</span><span class="n">reuseaddr</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span> <span class="p">{</span><span class="n">active</span><span class="p">,</span> <span class="n">once</span><span class="p">}]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_server</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="n">listen</span><span class="p">(</span><span class="no">?LISTEN_PORT</span><span class="p">,</span> <span class="no">?TCP_OPTS</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Listen</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="nb">spawn</span><span class="p">(</span><span class="no">?MODULE</span><span class="p">,</span> <span class="n">connect</span><span class="p">,</span> <span class="p">[</span><span class="nv">Listen</span><span class="p">]),</span>
</span><span class='line'>                        <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s"> Server Started.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nn">erlang</span><span class="p">:</span><span class="n">localtime</span><span class="p">()]);</span>
</span><span class='line'>        <span class="nv">Error</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Error: </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Error</span><span class="p">])</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">connect</span><span class="p">(</span><span class="nv">Listen</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">=</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="n">accept</span><span class="p">(</span><span class="nv">Listen</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">inet</span><span class="p">:</span><span class="n">setopts</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span> <span class="no">?TCP_OPTS</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="k">fun</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">connect</span><span class="p">(</span><span class="nv">Listen</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">File</span><span class="p">}</span> <span class="o">=</span> <span class="nn">file</span><span class="p">:</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;log.txt&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">append</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">recv_loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span><span class="nv">File</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">file</span><span class="p">:</span><span class="n">close</span><span class="p">(</span><span class="nv">File</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">gen_tcp</span><span class="p">:</span><span class="n">close</span><span class="p">(</span><span class="nv">Socket</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">recv_loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span><span class="nv">File</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">inet</span><span class="p">:</span><span class="n">setopts</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span> <span class="p">[{</span><span class="n">active</span><span class="p">,</span> <span class="n">once</span><span class="p">}]),</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="p">{</span><span class="n">tcp</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">,</span> <span class="nv">Data</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s"> </span><span class="si">~p</span><span class="s"> </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nn">inet</span><span class="p">:</span><span class="n">peername</span><span class="p">(</span><span class="nv">Socket</span><span class="p">),</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">localtime</span><span class="p">(),</span> <span class="nv">Data</span><span class="p">]),</span>
</span><span class='line'>            <span class="nn">file</span><span class="p">:</span><span class="n">write</span><span class="p">(</span><span class="nv">File</span><span class="p">,</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'>            <span class="nn">gen_tcp</span><span class="p">:</span><span class="nb">send</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span> <span class="s">&quot;I wrote down &quot;</span> <span class="o">++</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'>            <span class="n">recv_loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span><span class="nv">File</span><span class="p">);</span>
</span><span class='line'>        <span class="p">{</span><span class="n">tcp_closed</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s"> Client Disconnected.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nn">erlang</span><span class="p">:</span><span class="n">localtime</span><span class="p">()])</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works nicely because the <a href="http://www.erlang.org/doc/man/file.html"><code>file:write</code></a> function expects bytes rather than a string.</p>

<h3>Network aware <code>translate_service</code></h3>

<p>Once again I use the simple TCP server code. For this exercise, I have extended the translation service so that it can learn new words in a given session: using the <code>put word:meaning</code> command, the server will learn a new word. This is done by keeping a dictionary (a list of tuples) as argument for the <code>recv_loop</code> function.</p>

<p>I convert from binary to list because they are slightly easier to work with.</p>

<figure class='code'><figcaption><span>Network aware translate_service  (translate_service.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/trans/translate_service.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">translate_service</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_server</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">connect</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">cleanup</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">LISTEN_PORT</span><span class="p">,</span> <span class="mi">9000</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">TCP_OPTS</span><span class="p">,</span> <span class="p">[</span><span class="n">binary</span><span class="p">,</span> <span class="p">{</span><span class="n">packet</span><span class="p">,</span> <span class="n">raw</span><span class="p">},</span> <span class="p">{</span><span class="n">nodelay</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span> <span class="p">{</span><span class="n">reuseaddr</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span> <span class="p">{</span><span class="n">active</span><span class="p">,</span> <span class="n">once</span><span class="p">}]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_server</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="n">listen</span><span class="p">(</span><span class="no">?LISTEN_PORT</span><span class="p">,</span> <span class="no">?TCP_OPTS</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Listen</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="nb">spawn</span><span class="p">(</span><span class="no">?MODULE</span><span class="p">,</span> <span class="n">connect</span><span class="p">,</span> <span class="p">[</span><span class="nv">Listen</span><span class="p">]),</span>
</span><span class='line'>                        <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s"> Server Started.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nn">erlang</span><span class="p">:</span><span class="n">localtime</span><span class="p">()]);</span>
</span><span class='line'>        <span class="nv">Error</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Error: </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Error</span><span class="p">])</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">connect</span><span class="p">(</span><span class="nv">Listen</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">=</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="n">accept</span><span class="p">(</span><span class="nv">Listen</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">inet</span><span class="p">:</span><span class="n">setopts</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span> <span class="no">?TCP_OPTS</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="k">fun</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">connect</span><span class="p">(</span><span class="nv">Listen</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'>    <span class="n">recv_loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,[{</span><span class="s">&quot;casa&quot;</span><span class="p">,</span> <span class="s">&quot;house&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s">&quot;blanca&quot;</span><span class="p">,</span> <span class="s">&quot;white&quot;</span><span class="p">}]),</span>
</span><span class='line'>    <span class="nn">gen_tcp</span><span class="p">:</span><span class="n">close</span><span class="p">(</span><span class="nv">Socket</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">recv_loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span><span class="nv">Dict</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">inet</span><span class="p">:</span><span class="n">setopts</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span> <span class="p">[{</span><span class="n">active</span><span class="p">,</span> <span class="n">once</span><span class="p">}]),</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="p">{</span><span class="n">tcp</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">,</span> <span class="nv">Data</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s"> </span><span class="si">~p</span><span class="s"> </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nn">inet</span><span class="p">:</span><span class="n">peername</span><span class="p">(</span><span class="nv">Socket</span><span class="p">),</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">localtime</span><span class="p">(),</span> <span class="nv">Data</span><span class="p">]),</span>
</span><span class='line'>            <span class="p">{</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">Dict2</span><span class="p">}</span> <span class="o">=</span> <span class="n">process_message</span><span class="p">(</span><span class="nv">Dict</span><span class="p">,</span> <span class="n">cleanup</span><span class="p">(</span><span class="nv">Data</span><span class="p">)),</span>
</span><span class='line'>            <span class="nn">gen_tcp</span><span class="p">:</span><span class="nb">send</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span> <span class="nn">binary</span><span class="p">:</span><span class="n">list_to_bin</span><span class="p">(</span><span class="nv">Msg</span><span class="p">)),</span>
</span><span class='line'>            <span class="n">recv_loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span> <span class="nv">Dict2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">{</span><span class="n">tcp_closed</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s"> Client Disconnected.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nn">erlang</span><span class="p">:</span><span class="n">localtime</span><span class="p">()])</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">cleanup</span><span class="p">(</span><span class="nv">Data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">binary</span><span class="p">:</span><span class="n">bin_to_list</span><span class="p">(</span><span class="nv">Data</span><span class="p">,</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="nb">byte_size</span><span class="p">(</span><span class="nv">Data</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">process_message</span><span class="p">(</span><span class="nv">Dict</span><span class="p">,</span> <span class="nv">Data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">Data</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">[</span><span class="sc">$p</span><span class="p">,</span><span class="sc">$u</span><span class="p">,</span><span class="sc">$t</span><span class="p">,</span><span class="sc">$ </span><span class="p">|</span><span class="nv">Def</span><span class="p">]</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">Word</span><span class="p">,</span> <span class="nv">Meaning</span><span class="p">]</span> <span class="o">=</span> <span class="nn">string</span><span class="p">:</span><span class="n">tokens</span><span class="p">(</span><span class="nv">Def</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&quot;Noted</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[{</span><span class="nv">Word</span><span class="p">,</span> <span class="nv">Meaning</span><span class="p">}|</span><span class="nv">Dict</span><span class="p">]};</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">translate</span><span class="p">(</span><span class="nv">Data</span><span class="p">,</span> <span class="nv">Dict</span><span class="p">)</span> <span class="o">++</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="nv">Dict</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">translate</span><span class="p">(</span><span class="nv">Word</span><span class="p">,</span> <span class="nv">Dict</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">M</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">keyfind</span><span class="p">(</span><span class="nv">Word</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Dict</span><span class="p">),</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">M</span> <span class="k">of</span>
</span><span class='line'>        <span class="n">false</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="s">&quot;I do not understand &quot;</span> <span class="o">++</span> <span class="nv">Word</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{_,</span> <span class="nv">Meaning</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="nv">Meaning</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As seen in the interaction below, the translator knows its basic words, and can learn new ones:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ telnet localhost 9000
</span><span class='line'>Trying 127.0.0.1...
</span><span class='line'>Connected to localhost.
</span><span class='line'>Escape character is '^]'.
</span><span class='line'>casa
</span><span class='line'>house
</span><span class='line'>blanca
</span><span class='line'>white
</span><span class='line'>que
</span><span class='line'>I do not understand que
</span><span class='line'>put que:what
</span><span class='line'>Noted
</span><span class='line'>que
</span><span class='line'>what
</span><span class='line'>^]
</span><span class='line'>telnet&gt; Connection closed.</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping up Day 3 and Erlang</h2>

<p>Erlang was a fun and interesting language to play with. Looking at the documentation and existing tutorials (especially the intermediate to advanced ones), I had a feeling that, if Java can be said to be Enterprise, Erlang is Industrial. It does look like a control panel in a power plant: rich, complex and yet as simple as possible for what it is meant to achieve, and likely to kill you if you approach it with buzzwords in mind.</p>

<p>This is another language I will be eager to get back to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Erlang Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/05/seven-languages-in-seven-weeks-erlang-day-2/"/>
    <updated>2011-11-05T18:22:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/05/seven-languages-in-seven-weeks-erlang-day-2</id>
    <content type="html"><![CDATA[<p>Second day with Erlang, this time to cover basic controls, and more functional goodies such as anonymous and higher-order functions, list functions and list comprehensions.</p>

<!--more-->


<p>Erlang&#8217;s support for list processing is quite extensive (as it should be for a language with limited mutable state). Using is properly requires the kind of mental twist that is needed for effective (set oriented) SQL usage. But once acquired, it is hard to get back to generic imperative programming.</p>

<p>This chapter introduces various functions from the <code>lists</code> module: <code>lists:map</code>, and <code>lists:foreach</code>. I probably should not have used the former in <a href="http://blog.wakatta.jp/blog/2011/11/04/seven-languages-in-seven-weeks-erlang-day-1/">yesterday</a>&#8217;s &#8220;Counting to 10&#8221; exercise. The latter was more appropriate:</p>

<figure class='code'><figcaption><span>New version of Count module  (count_2.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/count_2.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">count_2</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">count_to_10</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">count_to</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">count_up_to</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_to_10</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">count_to</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_to</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">L</span> <span class="o">=</span> <span class="n">count_up_to</span><span class="p">(</span><span class="nv">N</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="n">foreach</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">fwrite</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~w~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">X</span><span class="p">])</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_up_to</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nv">N</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>(also changed: I&#8217;m using the tilde format escape character, rather than backslash. Erlang is a child of Lisp, not C).</p>

<h2>Exercises</h2>

<h3>Dictionary lookup</h3>

<p>Just using pattern matching, the solution is very short an clean.</p>

<p>I named the module <code>dictionary</code> as the name <code>dict</code> was already used in the standard library. Erlang has a flat module naming system, so conflicts are bound to happen.</p>

<p>As it happens, Erlang <a href="http://www.erlang.org/doc/man/lists.html#keyfind-3"><code>lists:keyfind</code></a> already implements this feature, as shown in <code>lookup_alt</code>.</p>

<figure class='code'><figcaption><span>Dictionary module  (dictionary.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/dictionary.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">dictionary</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">lookup</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">lookup_alt</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">lookup</span><span class="p">(_,</span> <span class="p">[])</span> <span class="o">-&gt;</span> <span class="n">false</span><span class="p">;</span>
</span><span class='line'><span class="nf">lookup</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="p">[{</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">}|_])</span> <span class="o">-&gt;</span> <span class="nv">V</span><span class="p">;</span>
</span><span class='line'><span class="nf">lookup</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="p">[_|</span><span class="nv">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">lookup</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">T</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">lookup_alt</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">keyfind</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing the code:</p>

<figure class='code'><figcaption><span>Testing Module dictionary  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">dictionary</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">dictionary</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nv">D</span> <span class="o">=</span> <span class="p">[{</span><span class="n">erlang</span><span class="p">,</span> <span class="s">&quot;a functional language&quot;</span><span class="p">},</span> <span class="p">{</span><span class="n">ruby</span><span class="p">,</span> <span class="s">&quot;an OO language&quot;</span><span class="p">},</span> <span class="p">{</span><span class="n">java</span><span class="p">,</span> <span class="s">&quot;a soso language&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="p">[{</span><span class="n">erlang</span><span class="p">,</span><span class="s">&quot;a functional language&quot;</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">ruby</span><span class="p">,</span><span class="s">&quot;an OO language&quot;</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">java</span><span class="p">,</span><span class="s">&quot;a soso language&quot;</span><span class="p">}]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">dictionary</span><span class="p">:</span><span class="n">lookup</span><span class="p">(</span><span class="n">erlang</span><span class="p">,</span> <span class="nv">D</span><span class="p">).</span>
</span><span class='line'><span class="s">&quot;a functional language&quot;</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">dictionary</span><span class="p">:</span><span class="n">lookup</span><span class="p">(</span><span class="n">java</span><span class="p">,</span> <span class="nv">D</span><span class="p">).</span>
</span><span class='line'><span class="s">&quot;a soso language&quot;</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="nn">dictionary</span><span class="p">:</span><span class="n">lookup</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="nv">D</span><span class="p">).</span>
</span><span class='line'><span class="n">false</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="nn">dictionary</span><span class="p">:</span><span class="n">lookup_alt</span><span class="p">(</span><span class="n">erlang</span><span class="p">,</span> <span class="nv">D</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">erlang</span><span class="p">,</span><span class="s">&quot;a functional language&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Computing prices</h3>

<p>Once again, pattern matching makes it really easy to write such function. For extra credit (ok, no credit. Just for fun), I also wrote a function that depends on <a href="http://www.erlang.org/doc/man/lists.html#map-2"><code>lists:map</code></a>.</p>

<p>It just shows how easy it is to process lists of things in Erlang or any other decent functional language (one with pattern matching and list comprehension, that is).</p>

<figure class='code'><figcaption><span>Price module  (price.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/price.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">price</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">compute_map</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">compute_lc</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">compute_map</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">({</span><span class="nv">Item</span><span class="p">,</span> <span class="nv">Quantity</span><span class="p">,</span> <span class="nv">Price</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="nv">Item</span><span class="p">,</span> <span class="nv">Quantity</span> <span class="o">*</span> <span class="nv">Price</span><span class="p">}</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">compute_lc</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[{</span><span class="nv">Item</span><span class="p">,</span> <span class="nv">Quantity</span> <span class="o">*</span> <span class="nv">Price</span><span class="p">}</span> <span class="p">||</span> <span class="p">{</span><span class="nv">Item</span><span class="p">,</span> <span class="nv">Quantity</span><span class="p">,</span> <span class="nv">Price</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="nv">L</span><span class="p">].</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing both functions, they return the same answer (always a good thing for functions meant to have identical meaning):</p>

<figure class='code'><figcaption><span>Testing Module price  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">price</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">price</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nv">Items</span> <span class="o">=</span> <span class="p">[{</span><span class="n">processor</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">200</span><span class="p">},</span> <span class="p">{</span><span class="nb">memory</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">100</span><span class="p">},</span> <span class="p">{</span><span class="n">screen</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">},</span> <span class="p">{</span><span class="n">drive</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">150</span><span class="p">}].</span>
</span><span class='line'><span class="p">[{</span><span class="n">processor</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">200</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="nb">memory</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">100</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">screen</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">drive</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">150</span><span class="p">}]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">price</span><span class="p">:</span><span class="n">compute_map</span><span class="p">(</span><span class="nv">Items</span><span class="p">).</span>
</span><span class='line'><span class="p">[{</span><span class="n">processor</span><span class="p">,</span><span class="mi">1000</span><span class="p">},{</span><span class="nb">memory</span><span class="p">,</span><span class="mi">400</span><span class="p">},{</span><span class="n">screen</span><span class="p">,</span><span class="mi">1000</span><span class="p">},{</span><span class="n">drive</span><span class="p">,</span><span class="mi">450</span><span class="p">}]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">price</span><span class="p">:</span><span class="n">compute_lc</span><span class="p">(</span><span class="nv">Items</span><span class="p">).</span>
</span><span class='line'><span class="p">[{</span><span class="n">processor</span><span class="p">,</span><span class="mi">1000</span><span class="p">},{</span><span class="nb">memory</span><span class="p">,</span><span class="mi">400</span><span class="p">},{</span><span class="n">screen</span><span class="p">,</span><span class="mi">1000</span><span class="p">},{</span><span class="n">drive</span><span class="p">,</span><span class="mi">450</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Playing Tic-Tac-Toe</h3>

<p>I have to admit I cannot stand hard coding anything. Whenever I have a choice between hard coding and generating coding, I&#8217;ll pick the latter every single time.</p>

<p>So for the Tic-Tac-Toe exercise, I wrote code that computes the list of potential victory lines, even though the list for a board of 3 by 3 is much shorter. When Tic-Tac-Toe is finally played on 19 by 19 boards (as <a href="http://en.wikipedia.org/wiki/Go_(game)">games for grown ups</a> tend to be), my code will be ready&#8230;</p>

<p>I used a small utility module to transpose a matrix; the code is very similar, and indeed, lifted, from a previous Prolog <a href="http://blog.wakatta.jp/blog/2011/10/24/seven-languages-in-seven-weeks-prolog-day-3/">exercise</a> (the Sudoku one).</p>

<figure class='code'><figcaption><span>Matrix module  (matrix.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/matrix.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">matrix</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">transpose</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">head</span><span class="p">([</span><span class="nv">H</span><span class="p">|_])</span> <span class="o">-&gt;</span> <span class="nv">H</span><span class="p">.</span>
</span><span class='line'><span class="nf">tail</span><span class="p">([_|</span><span class="nv">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nv">T</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">transpose</span><span class="p">([])</span> <span class="o">-&gt;</span> <span class="p">[];</span>
</span><span class='line'><span class="nf">transpose</span><span class="p">([[]|_])</span> <span class="o">-&gt;</span> <span class="p">[];</span>
</span><span class='line'><span class="nf">transpose</span><span class="p">(</span><span class="nv">M</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Heads</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span> <span class="n">head</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="nv">M</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Tails</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span> <span class="n">tail</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="nv">M</span><span class="p">),</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">Heads</span><span class="p">|</span><span class="n">transpose</span><span class="p">(</span><span class="nv">Tails</span><span class="p">)].</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once thing to note: as in the <code>export</code> statement, a function name must include its arity when passed to higher order functions. See above for <code>fun head/1</code> for instance.</p>

<p>Once this is defined, the code for Tic-Tac-Toe is fairly simple:</p>

<ul>
<li>generate a list of lines on a board (<code>tictactoe:make_winners</code>) *</li>
<li>for each of these lines, determine if it belongs to a single player (<code>tictactoe:check_align</code>, called from <code>tictactoe:check</code>)</li>
<li>if any player owns a line, declare her the winner (<code>tictactoe:check</code>, using <code>tictactoe:player</code>)</li>
<li>otherwise, depending on whether there is any non player own square, declare the game over or undecided (<code>tictactoe:check</code>, using <code>tictactoe:free</code>).</li>
</ul>


<figure class='code'><figcaption><span>Checking Tic-Tac-Toe  (tictactoe.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/tictactoe.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">tictactoe</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">check</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">make_winners</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_rows</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[[{</span><span class="nv">X</span><span class="p">,</span><span class="nv">Y</span><span class="p">}</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="nn">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nv">N</span><span class="p">)]</span> <span class="p">||</span> <span class="nv">Y</span> <span class="o">&lt;-</span> <span class="nn">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nv">N</span><span class="p">)].</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_lines</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Rows</span> <span class="o">=</span> <span class="n">make_rows</span><span class="p">(</span><span class="nv">N</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Rows</span> <span class="o">++</span> <span class="nn">matrix</span><span class="p">:</span><span class="n">transpose</span><span class="p">(</span><span class="nv">Rows</span><span class="p">).</span>
</span><span class='line'>  
</span><span class='line'><span class="nf">make_diag</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[{</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="o">-</span><span class="nv">X</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="nn">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">N</span><span class="p">)].</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">make_winners</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Lines</span> <span class="o">=</span> <span class="n">make_lines</span><span class="p">(</span><span class="nv">N</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Diag1</span> <span class="o">=</span> <span class="n">make_diag</span><span class="p">(</span><span class="nv">N</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Diag2</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">({</span><span class="nv">X</span><span class="p">,</span><span class="nv">Y</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="mi">4</span><span class="o">-</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">}</span> <span class="k">end</span><span class="p">,</span> <span class="nv">Diag1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">Diag1</span><span class="p">,</span> <span class="nv">Diag2</span><span class="p">]</span> <span class="o">++</span> <span class="nv">Lines</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_pos</span><span class="p">({</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">},</span> <span class="nv">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">nth</span><span class="p">(</span><span class="nv">X</span><span class="o">+</span><span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="nv">Y</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="nv">B</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">check_align</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">B</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Line</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">get_pos</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">B</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Line</span> <span class="k">of</span>
</span><span class='line'>      <span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="p">[</span><span class="n">o</span><span class="p">,</span><span class="n">o</span><span class="p">,</span><span class="n">o</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>      <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">no_winners</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">player</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">player</span><span class="p">(</span><span class="n">o</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">player</span><span class="p">(_)</span> <span class="o">-&gt;</span> <span class="n">false</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">free</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="ow">not</span> <span class="n">player</span><span class="p">(</span><span class="nv">P</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">check</span><span class="p">(</span><span class="nv">B</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Checks</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">check_align</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">B</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="n">make_winners</span><span class="p">(</span><span class="mi">3</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">Win</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">filter</span><span class="p">(</span><span class="k">fun</span> <span class="n">player</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Checks</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Win</span> <span class="k">of</span>
</span><span class='line'>      <span class="p">[</span><span class="nv">R</span><span class="p">|_]</span> <span class="o">-&gt;</span> <span class="nv">R</span><span class="p">;</span>
</span><span class='line'>      <span class="p">_</span> <span class="o">-&gt;</span> <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="n">filter</span><span class="p">(</span><span class="k">fun</span> <span class="n">free</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="nv">B</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>          <span class="p">[_|_]</span> <span class="o">-&gt;</span> <span class="n">no_winner</span><span class="p">;</span>
</span><span class='line'>          <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">cat</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing is a bit tedious, because of the way the board is defined. First a winner on either diagonal is checked, then a draw, then an unfinished game:</p>

<figure class='code'><figcaption><span>Testing Module tictactoe  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">tictactoe</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">tictactoe</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">tictactoe</span><span class="p">:</span><span class="n">check</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">x</span><span class="p">]).</span>
</span><span class='line'><span class="n">x</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">tictactoe</span><span class="p">:</span><span class="n">check</span><span class="p">([</span><span class="n">n</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">n</span><span class="p">]).</span>
</span><span class='line'><span class="n">x</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">tictactoe</span><span class="p">:</span><span class="n">check</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">o</span><span class="p">]).</span>
</span><span class='line'><span class="n">cat</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="nn">tictactoe</span><span class="p">:</span><span class="n">check</span><span class="p">([</span><span class="n">o</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="n">n</span><span class="p">]).</span>
</span><span class='line'><span class="n">no_winner</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up Day 2</h2>

<p>Erlang functional features make it very concise (adding currying would be sweet, though); the resulting code is short, readable, and flexible.</p>

<p>Despite a non mainstream pedigree, clearly this is a language whose design has been guided by actual usage and experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Erlang Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/04/seven-languages-in-seven-weeks-erlang-day-1/"/>
    <updated>2011-11-04T12:51:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/04/seven-languages-in-seven-weeks-erlang-day-1</id>
    <content type="html"><![CDATA[<p>New week, new language. This time is the turn of <a href="http://www.erlang.org/">Erlang</a>, which comes from <a href="http://www.ericsson.com/">Ericsson</a> (the phone company), and was used internally on internal products before being unleashed on the world.</p>

<!--more-->


<p>With it&#8217;s root in the telecom industry, it is not surprising that Erlang has a particular focus on availability and reliability; it comes with a strong set of tools for network applications, but little for end user interaction (the GUI is minimalist).</p>

<p>The most surprising aspect of Erlang&#8217;s origin, perhaps, is that the first version was an interpreter written in Prolog (actually, Erlang was meant as kind of extension to Prolog).</p>

<p>This is particularly obvious in Erlang&#8217;s syntax. Prolog programmers should feel mostly at home.</p>

<h2>Erlang is functional</h2>

<p>Erlang is also a purely functional language, with little to no updates (there are updatable stores, but you really have to look for them). Variables can be assigned a value only once, using a mechanism similar to unification (further assignments are valid only to the extend that both sides are identical, or the left hand is an unassigned variable).</p>

<figure class='code'><figcaption><span>Erlang: assignment  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Eshell</span> <span class="nv">V5</span><span class="p">.</span><span class="mi">8</span><span class="p">.</span><span class="mi">5</span>  <span class="p">(</span><span class="n">abort</span> <span class="n">with</span> <span class="err">^</span><span class="nv">G</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">V</span> <span class="o">=</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nv">V</span> <span class="o">=</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nv">V</span> <span class="o">=</span> <span class="mi">4</span><span class="p">.</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="nn">error</span><span class="p">:</span> <span class="n">no</span> <span class="n">match</span> <span class="k">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="n">value</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nv">V</span> <span class="o">=</span> <span class="nv">X</span><span class="p">.</span>
</span><span class='line'><span class="o">*</span> <span class="mi">1</span><span class="p">:</span> <span class="n">variable</span> <span class="n">&#39;X&#39;</span> <span class="n">is</span> <span class="n">unbound</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="nv">X</span> <span class="o">=</span> <span class="nv">V</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Erlang recursion</h2>

<p>The book introduces recursion in the module “yet_again”. Now, recursion is nothing special (few languages don&#8217;t support it), but functional languages tend to rely on it, so they often have a special optimization called <a href="http://en.wikipedia.org/wiki/Tail_call">tail recursion</a>.</p>

<p>Typically, any function call allocate some space on the stack, which is usually a limited resource. A language that relies on recursion rather than iteration risks to run out of stack.</p>

<p>Tail recursion is an optimization technique that replaces a function call by a jump, reusing the stack space already allocated. It effectively turns a recursion into an iteration.</p>

<p>In the book, both defined functions (<code>another_factorial</code> and <code>another_fib</code>) use non tail recursion (also referred to as body recursion). It is clear that <code>another_fib</code>&#8217;s performance is going to be terrible (it is doubly recursive); I was surprised to find that <code>another_factorial</code>&#8217;s performance is actually pretty good.</p>

<p>I wrote tail recursive versions of both functions (simply using an accumulator):</p>

<figure class='code'><figcaption><span>My Yet Again module  (yet_again.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/yet_again.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">yet_again</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">another_factorial</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">another_fib</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">tr_fact</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">tr_fib</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">check_time</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">another_factorial</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nf">another_factorial</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">N</span> <span class="o">*</span> <span class="n">another_factorial</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">another_fib</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nf">another_fib</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nf">another_fib</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">another_fib</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">another_fib</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">2</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">tr_fact</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nf">tr_fact</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">tr_fact</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">N</span><span class="p">).</span>
</span><span class='line'><span class="nf">tr_fact</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">A</span><span class="p">;</span>
</span><span class='line'><span class="nf">tr_fact</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">tr_fact</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">N</span><span class="o">*</span><span class="nv">A</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">tr_fib</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">tr_fib</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span>
</span><span class='line'><span class="nf">tr_fib</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="p">_)</span> <span class="o">-&gt;</span> <span class="nv">A</span><span class="p">;</span>
</span><span class='line'><span class="nf">tr_fib</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">tr_fib</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">B</span><span class="p">,</span> <span class="nv">A</span><span class="o">+</span><span class="nv">B</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">check_time</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">filter</span><span class="p">(</span><span class="nn">timer</span><span class="p">:</span><span class="n">tc</span><span class="p">(</span><span class="n">yet_again</span><span class="p">,</span> <span class="nv">F</span><span class="p">,</span> <span class="p">[</span><span class="nv">N</span><span class="p">])).</span>
</span><span class='line'><span class="nf">filter</span><span class="p">({</span><span class="nv">N</span><span class="p">,</span> <span class="p">_})</span> <span class="o">-&gt;</span> <span class="nv">N</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also added some code to measure the time of any of these functions.</p>

<p>Clearly, <code>tr_fib</code> is much faster than <code>another_fib</code> (the former is, through tail recursion optimization, iterative, while the latter is double recursive). But it turns out that <code>another_factorial</code> is systematically faster (although not by much) than <code>tr_fact</code>, at least on my machine, even for pretty large input numbers.</p>

<p>I could not find a definitive reason why this is so (the closest I came was suggested by this <a href="http://erlang.org/pipermail/erlang-questions/2007-July/028155.html">post</a> and subsequent messages, which suggest the order of multiplication in the tail recursive version causes the accumulator to grow quickly and triggers more garbage collection than the body recursive version).</p>

<p>Still, it is enough to draw a few conclusions:</p>

<ul>
<li>never assume anything about the performance of a piece of code without measuring it;</li>
<li>Erlang&#8217;s stack handling is awesome;</li>
<li>Erlang&#8217;s optimization is just as impressive.</li>
</ul>


<h2>Exercises</h2>

<h3>Couting words</h3>

<p>I define a word as a sequence (at least 1) of non-space characters. I use two functions: one that looks for the beginning of words, and one that look for the end of words. That way I always know what state I&#8217;m in (between words, or in one), and can keep the count correctly.</p>

<p>Both functions are body-recursive, which as seen above is probably not a problem.</p>

<figure class='code'><figcaption><span>Counting Words  (cw.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/cw.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">cw</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">count_words</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_words</span><span class="p">([])</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nf">count_words</span><span class="p">([</span><span class="mi">32</span><span class="p">|</span><span class="nv">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">count_words</span><span class="p">(</span><span class="nv">T</span><span class="p">);</span>
</span><span class='line'><span class="nf">count_words</span><span class="p">(</span><span class="nv">WS</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">skip_word</span><span class="p">(</span><span class="nv">WS</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">skip_word</span><span class="p">([])</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nf">skip_word</span><span class="p">([</span><span class="mi">32</span><span class="p">|</span><span class="nv">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">+</span><span class="n">count_words</span><span class="p">(</span><span class="nv">T</span><span class="p">);</span>
</span><span class='line'><span class="nf">skip_word</span><span class="p">([_|</span><span class="nv">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">skip_word</span><span class="p">(</span><span class="nv">T</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing the module:</p>

<figure class='code'><figcaption><span>Testing Module cw  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">cw</span><span class="p">:</span><span class="n">count_words</span><span class="p">(</span><span class="s">&quot;   a  lot   of   space   &quot;</span><span class="p">).</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">cw</span><span class="p">:</span><span class="n">count_words</span><span class="p">(</span><span class="s">&quot;not a lot of space&quot;</span><span class="p">).</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">cw</span><span class="p">:</span><span class="n">count_words</span><span class="p">(</span><span class="s">&quot;word&quot;</span><span class="p">).</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Counting to 10</h3>

<p>Erlang has a good support in the standard library for usual functional programming idioms, such as generating lists, and applying a function over elements of a list.</p>

<figure class='code'><figcaption><span>Counting to 10  (count.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/count.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">count</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">count_to_10</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">count_to</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">count_up_to</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_to_10</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">count_to</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_to</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">L</span> <span class="o">=</span> <span class="n">count_up_to</span><span class="p">(</span><span class="nv">N</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">fwrite</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~w</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">X</span><span class="p">])</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">L</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_up_to</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nv">N</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is more generic than strictly required (which is always good):</p>

<figure class='code'><figcaption><span>Testing Module count  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">count</span><span class="p">:</span><span class="n">count_to_10</span><span class="p">().</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="mi">8</span>
</span><span class='line'><span class="mi">9</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">count</span><span class="p">:</span><span class="n">count_to</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Matching input</h3>

<p>Nothing fancy here; just basic pattern matching and some calls from the standard library.</p>

<figure class='code'><figcaption><span>Pattern Matching  (check.erl)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/erlang/check.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">check</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">print_result</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">check_result</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">print_result</span><span class="p">(</span><span class="nv">M</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">fwrite</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">check_result</span><span class="p">(</span><span class="nv">M</span><span class="p">)]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">check_result</span><span class="p">(</span><span class="n">success</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">&quot;success&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nf">check_result</span><span class="p">({</span><span class="n">error</span><span class="p">,</span> <span class="nv">Message</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;Error: &quot;</span><span class="p">,</span> <span class="nv">Message</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code recognizes the input as requested. Everything else will generate an error.</p>

<figure class='code'><figcaption><span>Testing Module check  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">check</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">check</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">check</span><span class="p">:</span><span class="n">print_result</span><span class="p">(</span><span class="n">success</span><span class="p">).</span>
</span><span class='line'><span class="n">success</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">check</span><span class="p">:</span><span class="n">print_result</span><span class="p">({</span><span class="n">error</span><span class="p">,</span> <span class="s">&quot;Something went wrong!&quot;</span><span class="p">}).</span>
</span><span class='line'><span class="nv">Error</span><span class="p">:</span> <span class="nv">Something</span> <span class="n">went</span> <span class="n">wrong</span><span class="o">!</span>
</span><span class='line'><span class="n">ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>And so we conclude Day 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Scala Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/10/30/seven-languages-in-seven-weeks-scala-day-3/"/>
    <updated>2011-10-30T22:18:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/10/30/seven-languages-in-seven-weeks-scala-day-3</id>
    <content type="html"><![CDATA[<p>On the last day with Scala, the book introduces the XML support and concurrency.</p>

<!--more-->


<h2>Scala and XML</h2>

<p>XML is a rather unfortunate part of modern computing, one that is tedious with most languages.</p>

<p>Scala chose to solve this by making XML part of the language. This means that the following fragment (from Burak&#8217;s draft <a href="http://burak.emir.googlepages.com/scalaxbook.docbk.html">scala xml book</a>, linked to from <a href="http://www.scala-lang.org/node/131">A Tour of Scala: XML Processing</a>):</p>

<figure class='code'><figcaption><span>Scala and XML  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">labPhoneBook</span> <span class="k">=</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">phonebook</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">descr</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="nc">This</span> <span class="n">is</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">b</span><span class="o">&gt;</span><span class="n">phonebook</span><span class="o">&lt;/</span><span class="n">b</span><span class="o">&gt;</span> <span class="n">of</span> <span class="n">the</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://acme.org&quot;</span><span class="o">&gt;</span><span class="nc">ACME</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">corporation</span><span class="o">.</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">descr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="nc">Burak</span> <span class="nc">Emir</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">phone</span> <span class="n">where</span><span class="o">=</span><span class="s">&quot;work&quot;</span><span class="o">&gt;+</span><span class="mi">41</span> <span class="mi">21</span> <span class="mi">693</span> <span class="mi">68</span> <span class="mi">67</span><span class="o">&lt;/</span><span class="n">phone</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">phonebook</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">labPhoneBook</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>stores an XML fragment, not a string, in <code>labPhoneBook</code>.</p>

<p>Braces can be used to insert Scala code directly into the XML:</p>

<figure class='code'><figcaption><span>Scala: dynamic XML  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;Fred&quot;</span>
</span><span class='line'><span class="n">name</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="nc">Fred</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">fragment</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">blog</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">&lt;</span><span class="n">post</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">&lt;</span><span class="n">author</span><span class="o">&gt;{</span><span class="n">name</span><span class="o">}&lt;/</span><span class="n">author</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">&lt;/</span><span class="n">post</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">&lt;/</span><span class="n">blog</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">fragment</span><span class="k">:</span> <span class="kt">scala.xml.Elem</span> <span class="o">=</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">blog</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">post</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">author</span><span class="o">&gt;</span><span class="nc">Fred</span><span class="o">&lt;/</span><span class="n">author</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">post</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blog</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interactive Scala shell recognizes XML fragments, so it knew the expression was not complete until <code>&lt;/blog&gt;</code>. Very, very nice.</p>

<p>Braces can also be used to extract information from the XML, as seen in the book. This, combined with the <code>\</code> XPath projection operator (which, of course, returns a data structure that can be iterated over with the usual methods), provides a very pleasant way to parse XML.</p>

<p>There is far more to Scala&#8217;s XML support (see the link above). I don&#8217;t usually do much XML processing (most of my handling of XML is performed through dedicated libraries that abstract XML away entirely), but if I had to, I&#8217;d certainly would give a Scala a try.</p>

<h2>Scala Concurrency</h2>

<h2>Exercises</h2>

<h3>Displaying links</h3>

<p>To collect the links, I thought about using HTML or XML parsing, but could not find a parser robust enough to handle the pages. In the end, I just used a regular expression.</p>

<p>The code is fairly short:</p>

<ul>
<li>first import the relevant package and class</li>
<li>define the regular expression</li>
<li>slightly reorganize <code>PageLoader</code> to list all the links found through the regular expression; the links are added to a <code>Set</code> to ensure unicity, then iterated over</li>
</ul>


<figure class='code'><figcaption><span>Displaying links  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">linkPattern</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;&quot;&quot;&lt;a +href=\&quot;([^\&quot;]+)\&quot;[^&gt;]*&gt;&quot;&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">PageLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span> <span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">text</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromURL</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">mkString</span>
</span><span class='line'>    <span class="o">((</span><span class="nc">Set</span><span class="o">()</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">/:</span> <span class="n">linkPattern</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="n">matchData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">md</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">s</span> <span class="o">+</span> <span class="n">md</span><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">)</span> <span class="o">}</span> <span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">link</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="s">&quot; =&gt; &quot;</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="n">text</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code to add the links to a Set is not the simplest I could think of, but it is the simplest that worked. The problem I have is that the collections methods other return iterators, but I cannot simply build a new collection from an interator. I guess there must be a simpler way, but right now it is eluding me.</p>

<p>Full code:</p>

<figure class='code'><figcaption><span>sizer.scala, full code  (sizer.scala)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/sizer.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.io._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.actors._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">linkPattern</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;&quot;&quot;&lt;a +href=\&quot;([^\&quot;]+)\&quot;[^&gt;]*&gt;&quot;&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">PageLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span> <span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">text</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromURL</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">mkString</span>
</span><span class='line'>    <span class="o">((</span><span class="nc">Set</span><span class="o">()</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">/:</span> <span class="n">linkPattern</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="n">matchData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">md</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">s</span> <span class="o">+</span> <span class="n">md</span><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">)</span> <span class="o">}</span> <span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">link</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="s">&quot; =&gt; &quot;</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="n">text</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">urls</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;http://www.amazon.com/&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.twitter.com/&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.google.com/&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.cnn.com/&quot;</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">timeMethod</span><span class="o">(</span><span class="n">method</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>  <span class="n">method</span><span class="o">()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">end</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Method took &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">)/</span><span class="mf">1000000000.0</span> <span class="o">+</span> <span class="s">&quot; seconds.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">getPageSizeSequentially</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">url</span> <span class="k">&lt;-</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Size for &quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">getPageSizeConcurrently</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">caller</span> <span class="k">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">url</span> <span class="k">&lt;-</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">actor</span> <span class="o">{</span> <span class="n">caller</span> <span class="o">!</span> <span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">urls</span><span class="o">.</span><span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">receive</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">size</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="s">&quot;Size for &quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">size</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Sequential run:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">timeMethod</span> <span class="o">{</span> <span class="n">getPageSizeSequentially</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Concurrent run&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">timeMethod</span> <span class="o">{</span> <span class="n">getPageSizeConcurrently</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Following links</h3>

<p>This exercise build on the previous one. Now that we have the links, we should try to follow them and add their size.</p>

<p>First, the links should be somewhat normalized. A basic idea would be to make sure each contains a host; those that do not would be prefixed with the main url (the logic is not fool proof: checking the errors, I found a few javascript fragments that were interpreted as a link.)</p>

<p>Then there is a second, more serious issue: some links take forever to load. So I rewrote the fetching logic to add a timeout. Because <code>try</code> blocks are actually expression in Scala, I just return an empty string as the content of pages that cannot be read.</p>

<p>Finally, at this stage I found it hard to propagate the concurrency method (sequential or parallel) down to the <code>PageLoader.getPageSize</code> method, I just implemented the two methods in separate versions:</p>

<h5>Sequential version</h5>

<p>This version takes over 10 minutes to run on my machine.</p>

<figure class='code'><figcaption><span>sizer_links.scala  (sizer_links_seq.scala)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/sizer_links_seq.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.io._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.actors._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">linkPattern</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;&quot;&quot;&lt;a +href=\&quot;([^\&quot;]+)\&quot;[^&gt;]*&gt;&quot;&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">PageLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span> <span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">withLinks</span> <span class="k">:</span> <span class="kt">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//println(&quot;Reading &quot; + url)</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">java.net._</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">urlCon</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">URL</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">openConnection</span>
</span><span class='line'>    <span class="n">urlCon</span><span class="o">.</span><span class="n">setConnectTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</span><span class='line'>    <span class="n">urlCon</span><span class="o">.</span><span class="n">setReadTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">text</span> <span class="k">=</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="nc">Source</span><span class="o">.</span><span class="n">fromInputStream</span><span class="o">(</span><span class="n">urlCon</span><span class="o">.</span><span class="n">getInputStream</span><span class="o">).</span><span class="n">mkString</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Exception</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span><span class='line'>          <span class="nc">Console</span><span class="o">.</span><span class="n">err</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="s">&quot;Could not read [&quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">size</span> <span class="k">=</span> <span class="n">text</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">withLinks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">links</span> <span class="k">=</span> <span class="o">((</span><span class="nc">Set</span><span class="o">()</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">/:</span> <span class="n">linkPattern</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="n">matchData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">md</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">link</span> <span class="k">=</span> <span class="n">md</span><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">+</span> <span class="o">(</span><span class="k">if</span> <span class="o">(</span><span class="n">link</span><span class="o">.</span><span class="n">indexOf</span><span class="o">(</span><span class="s">&quot;http&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">link</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                <span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="sc">&#39;/&#39;</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>              <span class="n">link</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">(</span><span class="n">size</span> <span class="o">/:</span> <span class="n">links</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">link</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">s</span> <span class="o">+</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">link</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>      <span class="n">size</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">urls</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;http://www.amazon.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.twitter.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.google.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.cnn.com&quot;</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">timeMethod</span><span class="o">(</span><span class="n">method</span> <span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>  <span class="n">method</span><span class="o">()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">end</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Method took &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">/</span> <span class="mf">1000000000.0</span> <span class="o">+</span> <span class="s">&quot; seconds.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">getPageSizeSequentially</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">url</span> <span class="k">&lt;-</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Size for &quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Sequential run:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">timeMethod</span> <span class="o">{</span> <span class="n">getPageSizeSequentially</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<figure class='code'><figcaption><span> (seq_output.txt)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/seq_output.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Sequential run:
</span><span class='line'>Size for http://www.amazon.com: 12869997
</span><span class='line'>Size for http://www.twitter.com: 291445
</span><span class='line'>Size for http://www.google.com: 280876
</span><span class='line'>Size for http://www.cnn.com: 11343152
</span><span class='line'>Method took 667.821383 seconds.
</span></code></pre></td></tr></table></div></figure>


<h4>Parallel version</h4>

<p>This version takes about 100 seconds (less than a sixth of the sequential version). Obviously, the code is more complex, but clearly much faster as well.</p>

<figure class='code'><figcaption><span>sizer_links.scala  (sizer_links_par.scala)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/sizer_links_par.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.io._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.actors._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">linkPattern</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;&quot;&quot;&lt;a +href=\&quot;([^\&quot;]+)\&quot;[^&gt;]*&gt;&quot;&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">PageLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span> <span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">withLinks</span> <span class="k">:</span> <span class="kt">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//println(&quot;Reading &quot; + url)</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">java.net._</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">urlCon</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">URL</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">openConnection</span>
</span><span class='line'>    <span class="n">urlCon</span><span class="o">.</span><span class="n">setConnectTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</span><span class='line'>    <span class="n">urlCon</span><span class="o">.</span><span class="n">setReadTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">text</span> <span class="k">=</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="nc">Source</span><span class="o">.</span><span class="n">fromInputStream</span><span class="o">(</span><span class="n">urlCon</span><span class="o">.</span><span class="n">getInputStream</span><span class="o">).</span><span class="n">mkString</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Exception</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span><span class='line'>          <span class="nc">Console</span><span class="o">.</span><span class="n">err</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="s">&quot;Could not read [&quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">size</span> <span class="k">=</span> <span class="n">text</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">withLinks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">links</span> <span class="k">=</span> <span class="o">((</span><span class="nc">Set</span><span class="o">()</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">/:</span> <span class="n">linkPattern</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="n">matchData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">md</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">link</span> <span class="k">=</span> <span class="n">md</span><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">+</span> <span class="o">(</span><span class="k">if</span> <span class="o">(</span><span class="n">link</span><span class="o">.</span><span class="n">indexOf</span><span class="o">(</span><span class="s">&quot;http&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">link</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                <span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="sc">&#39;/&#39;</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>              <span class="n">link</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">val</span> <span class="n">caller</span> <span class="k">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">link</span> <span class="k">&lt;-</span> <span class="n">links</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">actor</span> <span class="o">{</span> <span class="n">caller</span> <span class="o">!</span> <span class="o">(</span><span class="n">link</span><span class="o">,</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">link</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span> <span class="o">)</span> <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">(</span><span class="n">size</span> <span class="o">/:</span> <span class="n">links</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">link</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">receive</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">s</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">+</span> <span class="n">s</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>      <span class="n">size</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">urls</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;http://www.amazon.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.twitter.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.google.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.cnn.com&quot;</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">timeMethod</span><span class="o">(</span><span class="n">method</span> <span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>  <span class="n">method</span><span class="o">()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">end</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Method took &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">/</span> <span class="mf">1000000000.0</span> <span class="o">+</span> <span class="s">&quot; seconds.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">getPageSizeConcurrently</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">caller</span> <span class="k">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">url</span> <span class="k">&lt;-</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">actor</span> <span class="o">{</span> <span class="n">caller</span> <span class="o">!</span> <span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">urls</span><span class="o">.</span><span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">receive</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">size</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="s">&quot;Size for &quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">size</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Concurrent run:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">timeMethod</span> <span class="o">{</span> <span class="n">getPageSizeConcurrently</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<figure class='code'><figcaption><span> (par_output.txt)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/par_output.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Concurrent run:
</span><span class='line'>Size for http://www.google.com: 280972
</span><span class='line'>Size for http://www.twitter.com: 291430
</span><span class='line'>Size for http://www.amazon.com: 12387773
</span><span class='line'>Size for http://www.cnn.com: 11463136
</span><span class='line'>Method took 103.645557 seconds.
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping up Day 3 and Scala</h2>

<p>I really feel I would enjoy working full time with Scala. I disagree with the author statement that Scala has an academic syntax. It does not take that much time to get used to, and it feels quite lighter than Java&#8217;s (of course, coming from Ruby would provide an entirely different perspective).</p>

<p>As I was doing the exercises, I found a few dark corners, most notably about collections and iterators.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Welcome</span> <span class="n">to</span> <span class="nc">Scala</span> <span class="n">version</span> <span class="mf">2.9</span><span class="o">.</span><span class="mf">1.f</span><span class="n">inal</span> <span class="o">(</span><span class="nc">Java</span> <span class="nc">HotSpot</span><span class="o">(</span><span class="nc">TM</span><span class="o">)</span> <span class="mi">64</span><span class="o">-</span><span class="nc">Bit</span> <span class="nc">Server</span> <span class="nc">VM</span><span class="o">,</span> <span class="nc">Java</span> <span class="mf">1.6</span><span class="o">.</span><span class="mi">0</span><span class="n">_26</span><span class="o">).</span>
</span><span class='line'><span class="nc">Type</span> <span class="n">in</span> <span class="n">expressions</span> <span class="n">to</span> <span class="n">have</span> <span class="n">them</span> <span class="n">evaluated</span><span class="o">.</span>
</span><span class='line'><span class="nc">Type</span> <span class="k">:</span><span class="kt">help</span> <span class="kt">for</span> <span class="kt">more</span> <span class="kt">information.</span>
</span><span class='line'>
</span><span class='line'><span class="kt">scala&gt;</span> <span class="kt">import</span> <span class="kt">scala.util.matching.Regex</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">re</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">re</span><span class="k">:</span> <span class="kt">scala.util.matching.Regex</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">str</span> <span class="k">=</span> <span class="s">&quot;abracadabra&quot;</span>
</span><span class='line'><span class="n">str</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="n">abracadabra</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">matches</span> <span class="k">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">str</span><span class="o">).</span><span class="n">matchData</span>
</span><span class='line'><span class="n">matches</span><span class="k">:</span> <span class="kt">java.lang.Object</span> <span class="kt">with</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">scala.util.matching.Regex.Match</span><span class="o">]</span> <span class="k">=</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span> <span class="n">iterator</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">matches</span> <span class="n">foreach</span> <span class="o">{</span><span class="n">md</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">md</span><span class="o">)}</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">matches</span><span class="o">.</span><span class="n">size</span><span class="o">)</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code just finds regular expression matches in a string, prints each of them, them prints how many it found (at least that&#8217;s what I expected it would do).</p>

<p>But apparently, the <code>foreach</code> method consumes the data, and <code>size</code> returns 0.</p>

<p>Scala tries to tell me something with its warning about a <code>non-empty iterator</code>. Unfortunately, the same code run non interactively does not display any warning.</p>

<p>Obviously, it is not safe to keep references to some intermediate data structures (like iterators). I hope that as I learn more about the language, I will also learn to recognize such situations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Scala Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/10/29/seven-languages-in-seven-weeks-scala-day-2/"/>
    <updated>2011-10-29T10:33:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/10/29/seven-languages-in-seven-weeks-scala-day-2</id>
    <content type="html"><![CDATA[<p>Second day is dedicated to containers, mostly. Lists, Sets and Maps, some of their most useful methods, and the use of code blocks (anonymous functions)</p>

<!--more-->


<p>The various containers are nothing new or special for Java programmers, but the anonymous functions are an effective way to greatly increase the power of existing iteration methods by having them accept arbitrary logic to process each element. This is nothing new or special for functional programmers, of course.</p>

<p>While this is possible in Java (where anonymous classes often play this role), the result is less fluid than in functional languages, so it comes less naturally.</p>

<h2>Exercises</h2>

<h3>Using foldLeft to compute sum of string sizes.</h3>

<p>Not as challenging an exercise as <a href="http://blog.wakatta.jp/blog/2011/10/28/seven-languages-in-seven-weeks-scala-day-1/">yesterday&#8217;s</a>. Still, it shows how light and easy to use Scala&#8217;s anonymous functions are.</p>

<p>A first version with the <code>foldLeft</code> method:</p>

<figure class='code'><figcaption><span>foldLeft  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="s">&quot;three&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">java.lang.String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">one</span><span class="o">,</span> <span class="n">two</span><span class="o">,</span> <span class="n">three</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">sum</span> <span class="k">=</span> <span class="n">list</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">{(</span><span class="n">sum</span><span class="o">,</span> <span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="n">size</span> <span class="o">}</span>
</span><span class='line'><span class="n">sum</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">11</span>
</span></code></pre></td></tr></table></div></figure>


<p>A second version with the <code>/:</code> operator. The anonymous function is of course strictly identical.</p>

<figure class='code'><figcaption><span>foldLeft operator  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="s">&quot;three&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">java.lang.String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">one</span><span class="o">,</span> <span class="n">two</span><span class="o">,</span> <span class="n">three</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">sum</span> <span class="k">=</span> <span class="o">(</span><span class="mi">0</span> <span class="o">/:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{(</span><span class="n">sum</span><span class="o">,</span> <span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="n">size</span> <span class="o">}</span>
</span><span class='line'><span class="n">sum</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">11</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Censor trait</h3>

<p>Looking for a Scala documentation of <code>String</code> is somewhat frustrating, because there&#8217;s none. But that in turns means that Scala just uses Java&#8217;s <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/lang/String.html">String</a>.</p>

<p>Java String comes with a method that seems to do just what is needed here: <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/lang/String.html#replaceAll%28java.lang.String,%20java.lang.String%29"><code>replaceAll</code></a>.</p>

<figure class='code'><figcaption><span>replaceAll  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;one two three&quot;</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="s">&quot;TWO&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="n">one</span> <span class="nc">TWO</span> <span class="n">three</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>replaceAll, word boundaries  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;she sells shells&quot;</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="s">&quot;\\bshe\\b&quot;</span><span class="o">,</span> <span class="s">&quot;the lady&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="n">the</span> <span class="n">lady</span> <span class="n">sells</span> <span class="n">shells</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>replaceAll, case insensitive  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;She sells shells&quot;</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="s">&quot;(?i)\\bshe\\b&quot;</span><span class="o">,</span> <span class="s">&quot;the lady&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">res3</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="n">the</span> <span class="n">lady</span> <span class="n">sells</span> <span class="n">shells</span>
</span></code></pre></td></tr></table></div></figure>


<p>As seen in the last two examples, the first argument is actually a regular expression. For a while, I toyed with the idea of using Scala&#8217;s <a href="http://www.scala-lang.org/api/current/scala/util/matching/Regex.html"><code>Regex.replaceAllIn</code></a>, so I could check whether the match was capitalized or all upper case and insert the replacement word with identical case, as Emacs does. But this is a whole lot more work, and generic code can only handle a few cases (all lower case, all upper case and capitalized) satisfactorily.</p>

<p>The first version iterates over the pairs in the censored words map, and for each one replaces each basic forms of the censored word by the same form of its replacement (the forms being capitalized, lower case and upper case).</p>

<figure class='code'><figcaption><span>Censor, version 1  (censor.scala)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/censor.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">words</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;Shoot&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Pucky&quot;</span><span class="o">,</span> <span class="s">&quot;Darn&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Beans&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">var</span> <span class="n">result</span> <span class="k">=</span> <span class="n">text</span>
</span><span class='line'>      <span class="n">words</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span> <span class="n">p</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">result</span> <span class="k">=</span> <span class="n">result</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">imm</span><span class="o">(</span><span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">))</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>      <span class="n">result</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* capitalize */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">c</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toUpper</span> <span class="o">+</span> <span class="n">str</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">toLowerCase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* lowercase */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">l</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toLowerCase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* uppercase */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">u</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toUpperCase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* make matcher method */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">mm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'>  <span class="cm">/* make case insensitive matcher method */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">imm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;(?i)\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like the way Scala allows me to write extremely short code for utility methods (like <code>c</code>, <code>l</code>, &#8230;).</p>

<p>One problem with this version is that there&#8217;s a mutable variable. Using <code>foldLeft</code>, the mutable variable is no longer needed:</p>

<figure class='code'><figcaption><span>Censor, version 2  (censor_fold.scala)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/censor_fold.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">words</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;Shoot&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Pucky&quot;</span><span class="o">,</span> <span class="s">&quot;Darn&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Beans&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">text</span> <span class="o">/:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">imm</span><span class="o">(</span><span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* capitalize */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">c</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toUpper</span> <span class="o">+</span> <span class="n">str</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">toLowerCase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* lowercase */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">l</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toLowerCase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* uppercase */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">u</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toUpperCase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* make matcher method */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">mm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'>  <span class="cm">/* make case insensitive matcher method */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">imm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;(?i)\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the code above, the world is now safe from the threat of rude language:</p>

<figure class='code'><figcaption><span>Censor test code  (censor_test.scala)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/censor_test.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Test</span><span class="o">(</span><span class="k">val</span> <span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getText</span><span class="o">()</span> <span class="k">=</span> <span class="n">text</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getCensoredText</span><span class="o">()</span> <span class="k">=</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">test</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Test</span><span class="o">(</span><span class="s">&quot;Phil Wenneck: God damn it!\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;Alan Garner: Gosh darn it!\n&quot;</span><span class="o">+</span>
</span><span class='line'><span class="s">&quot;Phil Wenneck: Shit!\n&quot;</span><span class="o">+</span>
</span><span class='line'><span class="s">&quot;Alan Garner: Shoot!&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Original text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getText</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Censored text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getCensoredText</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>produces:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Original text:
</span><span class='line'>Phil Wenneck: God damn it!
</span><span class='line'>Alan Garner: Gosh darn it!
</span><span class='line'>Phil Wenneck: Shit!
</span><span class='line'>Alan Garner: Shoot!
</span><span class='line'>Censored text:
</span><span class='line'>Phil Wenneck: God damn it!
</span><span class='line'>Alan Garner: Gosh beans it!
</span><span class='line'>Phil Wenneck: Shit!
</span><span class='line'>Alan Garner: Pucky!</span></code></pre></td></tr></table></div></figure>


<h4>Loading from file</h4>

<p>To load censored words from a file, I first need to define a format. To keep things simple, each pair is on one line, separated by one or more spaces.</p>

<p>The <a href="http://www.scala-lang.org/api/current/index.html#scala.io.Source"><code>Source</code></a> object contains a useful <code>fromFile</code> method (unfortunately, not documented directly. You have to dig it from the source file). Then it is possible to <code>foldLeft</code> the lines to populate the replacement map.</p>

<p>The rest of the code is identical.</p>

<figure class='code'><figcaption><span>Censor, loading from a file  (censor_load.scala)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/censor_load.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">words</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">()</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">]</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="n">load</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">import</span> <span class="nn">scala.io.Source</span>
</span><span class='line'>      <span class="n">words</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">file</span><span class="o">).</span><span class="n">getLines</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">words</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="n">line</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="n">trim</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">val</span> <span class="n">pair</span> <span class="k">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\\s+&quot;</span><span class="o">)</span>
</span><span class='line'>              <span class="n">map</span> <span class="o">+</span> <span class="o">((</span><span class="n">pair</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">pair</span><span class="o">(</span><span class="mi">1</span><span class="o">)))</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="n">map</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">text</span> <span class="o">/:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">imm</span><span class="o">(</span><span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* capitalize */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">c</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toUpper</span> <span class="o">+</span> <span class="n">str</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">toLowerCase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* lowercase */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">l</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toLowerCase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* uppercase */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">u</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toUpperCase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* make matcher method */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">mm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'>  <span class="cm">/* make case insensitive matcher method */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">imm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;(?i)\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* testing */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Test</span><span class="o">(</span><span class="k">val</span> <span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">load</span><span class="o">(</span><span class="s">&quot;censor.txt&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getText</span><span class="o">()</span> <span class="k">=</span> <span class="n">text</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getCensoredText</span><span class="o">()</span> <span class="k">=</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">test</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Test</span><span class="o">(</span><span class="s">&quot;Phil Wenneck: God damn it!\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;Alan Garner: Gosh darn it!\n&quot;</span><span class="o">+</span>
</span><span class='line'><span class="s">&quot;Phil Wenneck: Shit!\n&quot;</span><span class="o">+</span>
</span><span class='line'><span class="s">&quot;Alan Garner: Shoot!&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;\nOriginal text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getText</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;\nCensored text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getCensoredText</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;\nImproved censored text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">test</span><span class="o">.</span><span class="n">load</span><span class="o">(</span><span class="s">&quot;censor2.txt&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getCensoredText</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>outputs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ scala censor_load.scala 
</span><span class='line'>
</span><span class='line'>Original text:
</span><span class='line'>Phil Wenneck: God damn it!
</span><span class='line'>Alan Garner: Gosh darn it!
</span><span class='line'>Phil Wenneck: Shit!
</span><span class='line'>Alan Garner: Shoot!
</span><span class='line'>
</span><span class='line'>Censored text:
</span><span class='line'>Phil Wenneck: God damn it!
</span><span class='line'>Alan Garner: Gosh bean it!
</span><span class='line'>Phil Wenneck: Shit!
</span><span class='line'>Alan Garner: Pucky!
</span><span class='line'>
</span><span class='line'>Improved censored text:
</span><span class='line'>Phil Wenneck: God d--n it!
</span><span class='line'>Alan Garner: Gosh bean it!
</span><span class='line'>Phil Wenneck: S--t!
</span><span class='line'>Alan Garner: Pucky!</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>censor.txt  (censor.txt)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/censor.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>shoot   pucky
</span><span class='line'>darn    bean
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>censor2.txt  (censor2.txt)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/censor2.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>shit    s--t
</span><span class='line'>damn    d--n
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping up Day 2</h2>

<p>Scala&#8217;s syntax is clearly much shorter than Java&#8217;s, and fairly expressive as well. The code flows, is more concise, and feels natural (assuming that you think functional code feels natural, as I do).</p>

<p>Moreover, looking at the <a href="www.scala-lang.org/api/current/index.html">online documentation</a>, I can see that there&#8217;s more depth to Scala&#8217;s type system than can be covered in such a book. This is another area I look forward to investigating further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Scala Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/10/28/seven-languages-in-seven-weeks-scala-day-1/"/>
    <updated>2011-10-28T16:43:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/10/28/seven-languages-in-seven-weeks-scala-day-1</id>
    <content type="html"><![CDATA[<p>The language for this week is <a href="http://www.scala-lang.org/">Scala</a>, which attempts (among other things) to brings functional programming and a new concurrency model to the JVM.</p>

<!--more-->


<p>This was a language I was really keen to know more about. I am using Java a lot, professionally, so I am always looking for options in this ecosystem. I am pretty sure the next book after this one will be a Scala book.</p>

<h2>Scala Types</h2>

<p>The first thing we learn about Scala is that it is &#8220;strongly typed.&#8221; This is not a very helpful description, as the <a href="http://en.wikipedia.org/wiki/Strong_typing">definition</a> is fairly loose. And the proof offered by the author that the language is strongly typed is strange:</p>

<figure class='code'><figcaption><span>Scala is strongly typed?  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="mi">4</span> <span class="o">*</span> <span class="s">&quot;abc&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="o">&gt;:</span><span class="mi">8</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">overloaded</span> <span class="kt">method</span> <span class="kt">value</span> <span class="kt">*</span> <span class="kt">with</span> <span class="kt">alternatives:</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="nc">Double</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Float</span><span class="o">)</span><span class="nc">Float</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="nc">Long</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="nc">Int</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Char</span><span class="o">)</span><span class="nc">Int</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Short</span><span class="o">)</span><span class="nc">Int</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Byte</span><span class="o">)</span><span class="nc">Int</span>
</span><span class='line'> <span class="n">cannot</span> <span class="n">be</span> <span class="n">applied</span> <span class="n">to</span> <span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">String</span><span class="o">)</span>
</span><span class='line'>              <span class="mi">4</span> <span class="o">*</span> <span class="s">&quot;abc&quot;</span>
</span><span class='line'>                <span class="o">^</span>
</span></code></pre></td></tr></table></div></figure>


<p>So a string cannot be multiplied by a number? By this standard, <a href="http://en.wikipedia.org/wiki/C_%28programming_language%29">C</a> is strongly typed as well:</p>

<figure class='code'><figcaption><span>What about C?  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">str</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc -o typed typed.c 
</span><span class='line'>typed.c: In function ‘main’:
</span><span class='line'>typed.c:6: error: invalid operands to binary * (have ‘int’ and ‘char *’)</span></code></pre></td></tr></table></div></figure>


<p>As Scala has a theoretical background, perhaps it is useful to move to the language of <a href="http://en.wikipedia.org/wiki/Type_theory">Type Theory</a>.</p>

<p>A more useful definition than strong typing, is whether a type system is expressive: what do types of expressions tell about how the expressions can be combined, and what to expect when these expressions are evaluated. From this perspective, C types are unexpressive (barely above assembly language), Java&#8217;s much better, <a href="http://caml.inria.fr/ocaml/">OCaml</a>, and <a href="http://haskell.org/haskellwiki/Haskell">Haskell</a> better still, and <a href="http://coq.inria.fr/">Coq</a> and other dependently-typed languages are perhaps the most expressive of all.</p>

<blockquote><p>A type system is a tractable syntactic method for proving the absence of certain program behaviors by classifying phrases according to the kinds of values they compute.</p><footer><strong>Benjamin C. Pierce, Types and Programming Languages,</strong><cite><a href='http://www.cis.upenn.edu/~bcpierce/tapl/'>www.cis.upenn.edu/~bcpierce/&hellip;</a></cite></footer></blockquote>


<p>From this perspective, type expressivity is a static (i.e. compile time) feature only. The dynamic equivalent is a type is a tag, i.e. the runtime information about what operations a value supports, so it is impossible to prove any behaviour as impossible before running the program.</p>

<p>Another scale to judge a type system is how verbose it is. In C, as in Java, the type of everything has to be declared. In dynamic languages, no type is needed (or even possible). OCaml and Haskell can figure out the type of most expressions with no need for declarations (which are still useful for documentation). Scala falls somewhere between Java and OCaml. It has <a href="http://en.wikipedia.org/wiki/Type_inference">type inference</a> over portions of a program.</p>

<p>So when it comes to Scala types (or any type system, really), I have two criteria: whether it is expressive enough to be used to enforce specific properties over portions of a program, and whether it is concise enough that using it does not become a major effort.</p>

<h2>Scala syntax</h2>

<p>Scala reminds me of OCaml, vaguely. The syntax is fairly concise (especially compared to Java). Scala has list comprehension (as in Python or Haskell), ranges, singletons (<code>object</code>), and mixins (<code>trait</code>).</p>

<p>The syntax for the definition of functions (that is, methods that return a value) is somewhat strange, as it requires an equal sign:</p>

<figure class='code'><figcaption><span>Function definition  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">my_fun</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Procedures (methods that return nothing) only need one when they are defined as returning <code>Unit</code> (which is <code>void</code> for Scala):</p>

<figure class='code'><figcaption><span>Function definition  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">my_proc</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">str</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">my_proc2</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">str</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing overly complex, and if I believe the error message (&#8220;warning: Detected apparent refinement of Unit; are you missing an &#8216;=&#8217; sign?&#8221;), the reason for this syntax is to support other constructs. Still, I had this error a few times as I wrote my code, before I finally internalized the rule.</p>

<p>The rest of the syntax (as introduced today) is straightforward, and easy to get used to (at least for me).</p>

<h2>Exercises</h2>

<p>For a first day, the exercise was rather demanding.</p>

<h3>Tic-Tac-Toe</h3>

<p>My first version is, admittedly, ugly. I build a list of the possible lines (i.e. rows, columns or  diagonals) in the board (as a list of pairs of indices) in <code>lines</code>, then in the function <code>winner</code> I iterate over this list and check if the positions for each pair have the same content, and if this content belong to a player or not.</p>

<p>For the bonus part, I use <code>print_board</code>, which displays a board with numbers on unused locations, and <code>play</code>, which asks players in turn for their move, checks whether the move is valid, whether it is a winning move, and switches between players when needed.</p>

<p>The <code>play</code> function relies on variables more than I would like, but on the other hand it is harder to model a board with no update at all.</p>

<figure class='code'><figcaption><span>Tic-Tac-Toe  (tictactoe.scala)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/tictactoe.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">board</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">.</span><span class="n">ofDim</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">)</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]]</span>
</span><span class='line'><span class="k">val</span> <span class="n">lines</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(((</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">),(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">)),</span> <span class="o">((</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">),(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="mi">2</span><span class="o">,</span><span class="mi">0</span><span class="o">)))</span> <span class="o">++</span> <span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">).</span><span class="n">flatMap</span><span class="o">((</span><span class="n">i</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">List</span><span class="o">(((</span><span class="mi">0</span><span class="o">,</span><span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="n">i</span><span class="o">)),</span> <span class="o">((</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">),(</span><span class="n">i</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="n">i</span><span class="o">,</span><span class="mi">2</span><span class="o">))))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]],</span> <span class="n">i</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span><span class="kt">Int</span><span class="o">))</span><span class="k">:</span> <span class="kt">Char</span> <span class="o">=</span> <span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="n">_1</span><span class="o">)(</span><span class="n">i</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">winner</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">lines</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span><span class="o">(</span><span class="n">i1</span><span class="o">,</span><span class="n">i2</span><span class="o">,</span><span class="n">i3</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span><span class="n">i1</span><span class="o">)</span> <span class="o">==</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i2</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i2</span><span class="o">)</span> <span class="o">==</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i3</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i1</span><span class="o">)</span> <span class="o">==</span> <span class="-Symbol">&#39;X</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">println</span><span class="o">(</span><span class="s">&quot;Player X is the winner&quot;</span><span class="o">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>       <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i1</span><span class="o">)</span> <span class="o">==</span> <span class="-Symbol">&#39;O</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">println</span><span class="o">(</span><span class="s">&quot;Player Y is the winner&quot;</span><span class="o">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">print_board</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">print</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">))</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">print_board_clear</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">line</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">print</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">line</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">c</span> <span class="k">=&gt;</span> <span class="n">print</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">init_board</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="sc">&#39; &#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">init_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Test on empty board&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">winner</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">1</span><span class="o">)(</span><span class="mi">1</span><span class="o">)=</span><span class="-Symbol">&#39;X</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">0</span><span class="o">)(</span><span class="mi">0</span><span class="o">)=</span><span class="-Symbol">&#39;O</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">0</span><span class="o">)(</span><span class="mi">2</span><span class="o">)=</span><span class="-Symbol">&#39;X</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">0</span><span class="o">)(</span><span class="mi">1</span><span class="o">)=</span><span class="-Symbol">&#39;O</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">2</span><span class="o">)(</span><span class="mi">0</span><span class="o">)=</span><span class="-Symbol">&#39;X</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;After game:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">winner</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;And now play:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">init_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">play</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">init_board</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">playerX</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">9</span><span class="o">).</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">i</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">print_board</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
</span><span class='line'>    <span class="n">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">valid_pos</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(!</span><span class="n">valid_pos</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">playerX</span><span class="o">)</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="s">&quot;Player X&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="s">&quot;Player O&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot; move:&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">ln</span> <span class="k">=</span> <span class="n">readLine</span><span class="o">().</span><span class="n">toInt</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">i</span> <span class="k">=</span> <span class="o">(</span><span class="n">ln</span> <span class="o">-</span><span class="mi">1</span> <span class="o">)</span> <span class="o">/</span> <span class="mi">3</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">j</span> <span class="k">=</span> <span class="o">(</span><span class="n">ln</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">3</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="s">&quot;Invalid position. Try again&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">playerX</span><span class="o">)</span>
</span><span class='line'>          <span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="-Symbol">&#39;X</span><span class="err">&#39;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="-Symbol">&#39;O</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">valid_pos</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">playerX</span> <span class="k">=</span> <span class="o">!</span><span class="n">playerX</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">winner</span><span class="o">(</span><span class="n">b</span><span class="o">))</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Draw!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">play</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running it, it will first test the code by playing a predefined game. Then the bonus code is run, and an interactive game can be tried:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ scala tictactoe.scala 
</span><span class='line'>Test on empty board
</span><span class='line'>-----
</span><span class='line'>|123|
</span><span class='line'>|456|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>-----
</span><span class='line'>|123|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>-----
</span><span class='line'>|O23|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>-----
</span><span class='line'>|O2X|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>-----
</span><span class='line'>|OOX|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>-----
</span><span class='line'>|OOX|
</span><span class='line'>|4X6|
</span><span class='line'>|X89|
</span><span class='line'>-----
</span><span class='line'>After game:
</span><span class='line'>Player X is the winner
</span><span class='line'>And now play:
</span><span class='line'>-----
</span><span class='line'>|123|
</span><span class='line'>|456|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>1 Player X move:
</span><span class='line'>5
</span><span class='line'>-----
</span><span class='line'>|123|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>2 Player O move:
</span><span class='line'>1
</span><span class='line'>-----
</span><span class='line'>|O23|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>3 Player X move:
</span><span class='line'>2
</span><span class='line'>-----
</span><span class='line'>|OX3|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>4 Player O move:
</span><span class='line'>4
</span><span class='line'>-----
</span><span class='line'>|OX3|
</span><span class='line'>|OX6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>5 Player X move:
</span><span class='line'>8
</span><span class='line'>Player X is the winner</span></code></pre></td></tr></table></div></figure>


<p>The interactive code is not great (see below for an improvement); especially a draw</p>

<h4>Tic-Tac-Toe with class</h4>

<p>A second version, slightly cleaned up (but presumably still ugly), this time in a class. Only one variable remains (the board); everything else is immutable.</p>

<figure class='code'><figcaption><span>Tic-Tac-Toe with class  (tictactoe_class.scala)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/scala/tictactoe_class.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">TicTacToe</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">players</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;O&quot;</span><span class="o">,</span> <span class="s">&quot;X&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">lines</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(((</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">),(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">)),</span> <span class="o">((</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">),(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="mi">2</span><span class="o">,</span><span class="mi">0</span><span class="o">)))</span> <span class="o">++</span> <span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">).</span><span class="n">flatMap</span><span class="o">((</span><span class="n">i</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">List</span><span class="o">(((</span><span class="mi">0</span><span class="o">,</span><span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="n">i</span><span class="o">)),</span> <span class="o">((</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">),(</span><span class="n">i</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="n">i</span><span class="o">,</span><span class="mi">2</span><span class="o">))))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">board</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">.</span><span class="n">ofDim</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">)</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]]</span>
</span><span class='line'>  <span class="n">init_board</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">get</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span><span class="kt">Int</span><span class="o">))</span><span class="k">:</span> <span class="kt">Char</span> <span class="o">=</span> <span class="n">board</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="n">_1</span><span class="o">)(</span><span class="n">i</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">init_board</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">board</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="sc">&#39; &#39;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">isWinner</span><span class="o">()</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span><span class="o">(</span><span class="n">i1</span><span class="o">,</span><span class="n">i2</span><span class="o">,</span><span class="n">i3</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">i1</span><span class="o">)</span> <span class="o">==</span> <span class="n">get</span><span class="o">(</span><span class="n">i2</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">get</span><span class="o">(</span><span class="n">i2</span><span class="o">)</span> <span class="o">==</span> <span class="n">get</span><span class="o">(</span><span class="n">i3</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">i1</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">print_board_with_num</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">print</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="n">get</span><span class="o">((</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">))</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">print</span><span class="o">(</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">print</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">play</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">9</span><span class="o">).</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">move</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">play_one_move</span><span class="o">(</span><span class="n">players</span><span class="o">(</span><span class="n">move</span> <span class="o">%</span> <span class="mi">2</span><span class="o">)))</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Draw!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">play_one_move</span><span class="o">(</span><span class="n">player</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">print_board_with_num</span><span class="o">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="n">get_move</span><span class="o">(</span><span class="n">player</span><span class="o">)</span>
</span><span class='line'>    <span class="n">board</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="n">player</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isWinner</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Player &quot;</span> <span class="o">+</span> <span class="n">player</span> <span class="o">+</span> <span class="s">&quot; won!&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">get_move</span><span class="o">(</span><span class="n">player</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">print</span><span class="o">(</span><span class="s">&quot;Player &quot;</span> <span class="o">+</span> <span class="n">player</span><span class="o">)</span>
</span><span class='line'>      <span class="n">print</span><span class="o">(</span><span class="s">&quot; move: &quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">ln</span> <span class="k">=</span> <span class="n">readLine</span><span class="o">().</span><span class="n">toInt</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">i</span> <span class="k">=</span> <span class="o">(</span><span class="n">ln</span> <span class="o">-</span><span class="mi">1</span> <span class="o">)</span> <span class="o">/</span> <span class="mi">3</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">j</span> <span class="k">=</span> <span class="o">(</span><span class="n">ln</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">3</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="s">&quot;Invalid position. Try again&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(-</span><span class="mi">1</span><span class="o">,-</span><span class="mi">1</span><span class="o">)</span>                      <span class="c1">// actually, can&#39;t happen but compiler doesn&#39;t know</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">game</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">TicTacToe</span>
</span><span class='line'><span class="n">game</span><span class="o">.</span><span class="n">play</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It still handles normal victory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ scala  tictactoe_class.scala 
</span><span class='line'>-----
</span><span class='line'>|123|
</span><span class='line'>|456|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>Player X move: 5
</span><span class='line'>-----
</span><span class='line'>|123|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>Player O move: 1
</span><span class='line'>-----
</span><span class='line'>|O23|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>Player X move: 2
</span><span class='line'>-----
</span><span class='line'>|OX3|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>Player O move: 4
</span><span class='line'>-----
</span><span class='line'>|OX3|
</span><span class='line'>|OX6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>Player X move: 8
</span><span class='line'>Player X won!</span></code></pre></td></tr></table></div></figure>


<p>as well as the more common case of draw:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ scala  tictactoe_class.scala 
</span><span class='line'>-----
</span><span class='line'>|123|
</span><span class='line'>|456|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>Player X move: 5
</span><span class='line'>-----
</span><span class='line'>|123|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>Player O move: 1
</span><span class='line'>-----
</span><span class='line'>|O23|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>Player X move: 2
</span><span class='line'>-----
</span><span class='line'>|OX3|
</span><span class='line'>|4X6|
</span><span class='line'>|789|
</span><span class='line'>-----
</span><span class='line'>Player O move: 8
</span><span class='line'>-----
</span><span class='line'>|OX3|
</span><span class='line'>|4X6|
</span><span class='line'>|7O9|
</span><span class='line'>-----
</span><span class='line'>Player X move: 3
</span><span class='line'>-----
</span><span class='line'>|OXX|
</span><span class='line'>|4X6|
</span><span class='line'>|7O9|
</span><span class='line'>-----
</span><span class='line'>Player O move: 7
</span><span class='line'>-----
</span><span class='line'>|OXX|
</span><span class='line'>|4X6|
</span><span class='line'>|OO9|
</span><span class='line'>-----
</span><span class='line'>Player X move: 4
</span><span class='line'>-----
</span><span class='line'>|OXX|
</span><span class='line'>|XX6|
</span><span class='line'>|OO9|
</span><span class='line'>-----
</span><span class='line'>Player O move: 6
</span><span class='line'>-----
</span><span class='line'>|OXX|
</span><span class='line'>|XXO|
</span><span class='line'>|OO9|
</span><span class='line'>-----
</span><span class='line'>Player X move: 9
</span><span class='line'>Draw!</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up Day 1</h2>

<p>Scala seems easy enough to get started with. The syntax is readable; the semantic close enough to Java&#8217;s (and other mainstream languages) that there is little surprise.</p>
]]></content>
  </entry>
  
</feed>
