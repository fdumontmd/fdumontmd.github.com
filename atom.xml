<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2012-02-02T13:26:16+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks CouchDB Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/01/seven-databases-in-seven-weeks-couchdb-day-3/"/>
    <updated>2012-02-01T18:06:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/01/seven-databases-in-seven-weeks-couchdb-day-3</id>
    <content type="html"><![CDATA[<p>Today is a bit juicier than the previous days (together). On the menu,
advanced views (full MapReduce), replication, conflict management, and
change monitoring.</p>

<!-- more -->


<h3>Advanced views</h3>

<p><a href="http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views">Advanced views</a>
in CouchDB are, as noted yesterday, materialized output of MapReduce
computations.</p>

<p>This has a cost: such computations are saved, so they take more time
than with other implementations, the first time at least.</p>

<p>Updating the views, on the other hand, is fairly fast (CouchDB
recomputes only what is necessary). Views have to be planned, but
once there they are fairly cheap. For exploratory queries, other databases
might be more appropriate.</p>

<p>CouchDB&#8217;s reduce functions distinguishes between the first invocation,
and the following ones (on values that have already gone through the
reduce function). This makes it possible to implement a <code>_count</code>
function which counts the number of values (the first invocation
transforms values into numbers, and the following ones add the numbers
up).</p>

<h3>Replication</h3>

<p><a href="http://wiki.apache.org/couchdb/Replication">Replication</a> is the
one-way process of replicating the changes of one database on
another. Replication can be between any two databases, whether on the
same server or on different ones. It can be one time, or
continuous. The documents to replicate can be filtered, or selected by
<code>_id</code>.</p>

<p>Replication is a lower level mechanism than what MongoDB, for
instance, proposes (where there is a strict hierarchy of masters and
slaves), and closer to the flexible approach or Riak.</p>

<p>Of course, when concurrent writes are permitted, conflicts can occur,
and CouchDB handles them.</p>

<h3>Conflicts</h3>

<p><a href="http://wiki.apache.org/couchdb/Replication_and_conflicts">Concurrent updates</a>
can cause conflicts, and CouchDB detects them so they can be dealt
with.</p>

<p>First, conflicts cannot happen on a single server: updates to a
document must refer to the latest revision, otherwise the update
fails. So clients are directly aware that they need to resubmit the
(merged) document.</p>

<p>When replication is enabled, conflicts result from concurrent updates
in two replicated databases. At the next replication, one version will
be selected as winning, and replicated to other databases. The other
versions are still accessible from the <code>_conflicts</code> attribute
(initially, only in the losing databases).</p>

<p>If two ways replications are in place, eventually, all databases will
have the <code>_conflicts</code> attribute populated (with all the losing
revisions, if there are more than one).</p>

<p>This makes it possible to implement a remedial action; it is possible
to have views with only documents in conflicts, or to filter changes
for conflicts, and implement merging actions in monitoring scripts.</p>

<p>CouchDB documentation helpfully provides some
<a href="http://wiki.apache.org/couchdb/How_to_design_for_replication">advice</a>
for designing conflict-aware applications.</p>

<h3>Changes</h3>

<p>Changes are dedicated views that contains a list of updates for a
specific database. The
<a href="http://wiki.apache.org/couchdb/HTTP_database_API#Changes">parameters</a>
support starting at a given revision (in this case, a database
revision, not a document revision), filtering documents, and keeping
the stream open in several ways.</p>

<p>This makes it possible (easy, even) to monitor (interesting or
relevant) changes, to synchronize with other systems, or to
automatically resolve conflicts, for instance.</p>

<p>When using Long-Polling, I found that one very large datasets, the
<code>JSON.parse</code> invocation could take a long time, and would suggest to
always use a <code>limit</code> parameter on the query, to cut the dataset down
to manageable chunks.</p>

<h2>Exercises</h2>

<h3>Built-in Reduce Functions</h3>

<p>There are three, documented on the
<a href="http://wiki.apache.org/couchdb/Built-In_Reduce_Functions">Wiki</a>.</p>

<p>They are implemented directly in Erlang, so they have a better
performance than JavaScript functions.</p>

<h4><code>_sum</code></h4>

<p>This function behaves just as the reduce function from the book; it
sums the values by key. It is useful when the map functions uses
<code>emit(key, 1);</code> (or some other numeric value).</p>

<h4><code>_count</code></h4>

<p>It is similar to <code>_sum</code>, but it counts the number of values rather
than merely summing them. It is useful when the value is not a number.</p>

<h4><code>_stat</code></h4>

<p>This is an extension of <code>_sum</code> which computes additional statistics
(minimum, maximum, &#8230;) on the numeric values.</p>

<h3>Filtering <code>_changes</code> output</h3>

<p>Filters are nicely described in
<a href="http://guide.couchdb.org/draft/notifications.html#filters">CouchDB The Definitive Guide</a>.</p>

<p>To create a new filter, I first create a design document to store the function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X PUT http://localhost:5984/music/_design/filters \
</span><span class='line'>-d '{ "filters": { "by_country": "function(doc, req) {
</span><span class='line'>return doc.country == req.query.country; }" } }'</span></code></pre></td></tr></table></div></figure>


<p>The <code>by_country</code> function retrieves a <code>country</code> parameter from the
request, and compares it against the record <code>country</code> attribute; only
the matching records are returned.</p>

<p>To monitor only updates to bands from Spain, for instance, I can use</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:5984/music/_changes?filter=filters/by_country\&country=ESP</span></code></pre></td></tr></table></div></figure>


<p>To monitor for conflicts, I have the following design document:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="s2">&quot;_design/filters&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_rev&quot;</span><span class="o">:</span> <span class="s2">&quot;3-ec032384bf365d3caef0ed91185ae45a&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;filters&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;by_country&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc, req) { return doc.country == req.query.country; }&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;conflicts&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc, req) { return doc._conflicts; }&quot;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that, I can then listen for changes, keeping only the conflicts:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music-repl/_changes?filter=filters/conflicts\&since=26000
</span><span class='line'>{"results":[
</span><span class='line'>{"seq":26994,"id":"theconflicts","changes":[{"rev":"2-cab47bf4444a20d6a2d2204330fdce2a"}]}
</span><span class='line'>],
</span><span class='line'>"last_seq":27000}</span></code></pre></td></tr></table></div></figure>


<p>Because CouchDB only set the <code>_conflicts</code> attribute on the
losing database; the winner database (the one in which the winning
revision was initially created) does not know about conflicts. This
means I must check against <code>music-repl</code> instead of <code>music</code>.</p>

<h3>Replication HTTP API</h3>

<p>The API is documented
<a href="http://www.couchbase.org/sites/default/files/uploads/all/documentation/couchbase-api-misc.html#couchbase-api-misc_replicate_post">here</a>.</p>

<p>To use it, simply pass the <code>source</code> and <code>target</code> databases to the
<code>_replicate</code> URL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST http://localhost:5984/_replicate \
</span><span class='line'>-H 'Content-Type: application/json' \
</span><span class='line'>-H 'Accept: application/json' -d \
</span><span class='line'>'{ "source" : "music", "target" : "music-repl" }'</span></code></pre></td></tr></table></div></figure>


<h3><code>_replicator</code> database</h3>

<p>The
<a href="http://docs.couchbase.org/couchdb-release-1.1/couchb-release-1.1-replicatordb.html"><code>_replicator</code> database</a>
is an alternative to the use of the
<code>_replicate</code> URL above: documents inserted in the <code>_replicator</code>
database will, if properly formed, cause a replication job to be
started (either one-off, or continuous).</p>

<p>Deleting the document will cancel the replication job.</p>

<p>Document describing replications are updated to reflect the progress
of the job.</p>

<p>The command below triggers a replication from <code>music</code> to <code>music-repl</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X PUT http://localhost:5984/_replicator/music-rep \
</span><span class='line'>-H 'Content-type: application/json' \
</span><span class='line'>-d '{ "source" : "music", "target" : "music-repl" }'
</span><span class='line'>{"ok":true,"id":"music-rep","rev":"1-ba761c16b5ca36848b2474758cbc4b22"}</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>watch_changes_longpolling_impl.js</code> script on the <code>_replicator</code>
database, it is possible to monitor the replication job:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node watch_changes_longpolling_impl.js _replicator
</span><span class='line'>... elided ...
</span><span class='line'>{ seq: 2,
</span><span class='line'>  id: 'music-rep',
</span><span class='line'>  changes: [ { rev: '1-ba761c16b5ca36848b2474758cbc4b22' } ],
</span><span class='line'>  doc: 
</span><span class='line'>   { _id: 'music-rep',
</span><span class='line'>     _rev: '1-ba761c16b5ca36848b2474758cbc4b22',
</span><span class='line'>     source: 'music',
</span><span class='line'>     target: 'music-repl' } }
</span><span class='line'>{ seq: 3,
</span><span class='line'>  id: 'music-rep',
</span><span class='line'>  changes: [ { rev: '2-d1b4fc9da1ef17d43fa91dd7b345a9e6' } ],
</span><span class='line'>  doc: 
</span><span class='line'>   { _id: 'music-rep',
</span><span class='line'>     _rev: '2-d1b4fc9da1ef17d43fa91dd7b345a9e6',
</span><span class='line'>     source: 'music',
</span><span class='line'>     target: 'music-repl',
</span><span class='line'>     _replication_state: 'triggered',
</span><span class='line'>     _replication_state_time: '2012-02-02T10:23:44+09:00',
</span><span class='line'>     _replication_id: 'ab65eb4c4ca880bf65e02626573ef683' } }
</span><span class='line'>{ seq: 4,
</span><span class='line'>  id: 'music-rep',
</span><span class='line'>  changes: [ { rev: '3-b6d32c3ce979af8dc2190735aa39d4f3' } ],
</span><span class='line'>  doc: 
</span><span class='line'>   { _id: 'music-rep',
</span><span class='line'>     _rev: '3-b6d32c3ce979af8dc2190735aa39d4f3',
</span><span class='line'>     source: 'music',
</span><span class='line'>     target: 'music-repl',
</span><span class='line'>     _replication_state: 'completed',
</span><span class='line'>     _replication_state_time: '2012-02-02T10:23:46+09:00',
</span><span class='line'>     _replication_id: 'ab65eb4c4ca880bf65e02626573ef683' } }
</span><span class='line'>... elided ...</span></code></pre></td></tr></table></div></figure>


<p>The first change is when the document is created; the second when the
job starts, and the third when it successfully completes.</p>

<p>Unlike the <code>_replicate</code> based API, continuous jobs stored in
<code>_replicator</code> will resume when the database is restarted.</p>

<h3>Continuous watcher skeleton</h3>

<p>The approach is to keep input in a buffer, then extract as many line
from the buffer as possible (if the last line is incomplete, it is put
back into the buffer), and parse each line as a JSON object.</p>

<p>The format of each parsed object is different: each change is in its
own object, so there is no <code>results</code> attribute any more.</p>

<figure class='code'><figcaption><span>watch_changes_continuous.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">http_options</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">host</span><span class="o">:</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">port</span><span class="o">:</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">db</span> <span class="o">+</span> <span class="s1">&#39;/_changes&#39;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s1">&#39;?feed=continuous&amp;include_docs=true&amp;since=&#39;</span> <span class="o">+</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">last_seq</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">processLine</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">line</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">line</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">output</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// don&#39;t emit last_seq</span>
</span><span class='line'>            <span class="c1">// watcher.last_seq not used in this code</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">last_seq</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">watcher</span><span class="p">.</span><span class="nx">last_seq</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">last_seq</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="nx">watcher</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="nx">output</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">watcher</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">line</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">checkForData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">lines</span> <span class="o">=</span> <span class="nx">buffer</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// if the last character is line return</span>
</span><span class='line'>    <span class="c1">// use the last line; otherwise put it back</span>
</span><span class='line'>    <span class="c1">// into the buffer to be completed later</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;\n&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">buffer</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// process the remaining lines one at a time</span>
</span><span class='line'>    <span class="nx">lines</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">processLine</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">buffer</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">http_options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">buffer</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">checkForData</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">checkForData</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">watcher</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Continuous watcher implementation</h3>

<p>I just inserted the code block above in the original
<code>watch_changes_skeleton.js</code>; no other modifications were required.</p>

<p>With the code block above, both the long polling and the continuous
outputs are identical.</p>

<h3>Conflicts view</h3>

<p>As I said above, conflicts are only created in the losing database, so
to test this I must use the <code>music-repl</code> database.</p>

<p>Otherwise, the code is simple: iterate on the <code>_conflicts</code> attribute,
and for each revision it contains, emit that revision mapped to the
document <code>_id</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="s2">&quot;_design/conflicts&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_rev&quot;</span><span class="o">:</span> <span class="s2">&quot;4-1f5c35d83a4cfc7783d60f665946dc6d&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;language&quot;</span><span class="o">:</span> <span class="s2">&quot;javascript&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;views&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;conflicts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>           <span class="s2">&quot;map&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc) { (doc._conflicts || []).forEach(function(rev) { emit(rev, doc._id); }); }&quot;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music-repl/_design/conflicts/_view/conflicts | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   129    0   129    0     0  37478      0 --:--:-- --:--:-- --:--:-- 64500
</span><span class='line'>{
</span><span class='line'>    "offset": 0, 
</span><span class='line'>    "rows": [
</span><span class='line'>        {
</span><span class='line'>            "id": "theconflicts", 
</span><span class='line'>            "key": "2-0c969fbfa76eb7fcdf6412ef219fcac5", 
</span><span class='line'>            "value": "theconflicts"
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "total_rows": 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 3 and this overview of CouchDB.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks CouchDB Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-2/"/>
    <updated>2012-01-30T18:58:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-2</id>
    <content type="html"><![CDATA[<p>Day 2 is about Views in CouchDB, which serve as an introduction to the
more general MapReduce support.</p>

<p>It is another fairly short day, as much of this section is actually
about the complexities of XML parsing&#8230;</p>

<!-- more -->


<p>Like Riak and MongoDB, CouchDB is scripted with JavaScript, so today has
a feeling of déjà vu.</p>

<h3>View concept</h3>

<p>A View is just a mapping of a key to a value. Keys and values are
extracted from documents; there can be more than one key for each
document, as in MongoDB.</p>

<p>Once the view has been built and updated for the documents it applies
to, it can be accessed by key using optimized methods (all based on
some form of lexicographical order).</p>

<h3>View performance</h3>

<p>A View in CouchDB is essentially the equivalent of a
<a href="http://en.wikipedia.org/wiki/Materialized_view">materialized view</a>
in relational databases.</p>

<p>Access to the view causes it to be updated (i.e. recomputed) if
necessary, which can be a painfully slow experience. I had imported
the whole content of the music database (26990 records), and each time
I tested a Temporary View or saved a Permanent one, I had to wait for
CouchDB to finish the refresh (fortunately not too long on this
dataset).</p>

<p>It interesting to note that while relational databases require the
schema to be designed ahead of time, but support arbitrary queries,
CouchDB let you ignore the schema, but need you to design the
queries ahead of time.</p>

<h2>Exercises</h2>

<h3><code>emit</code> function</h3>

<p>The key can be
<a href="http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Complex_Keys">any JSON object</a>,
although I would say that only strings and arrays of strings have
sensible semantics.</p>

<p>Arrays can be used with reduce functions to provide query time custom
grouping, as explained
<a href="http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Grouping">here</a>.</p>

<p>For instance, to compute the number of records by date, I used the
<code>releasedate</code> of each album to create a key array
<code>[year, month, date]</code>, and a value of <code>1</code> (1 for each album):</p>

<figure class='code'><figcaption><span>Album by Date  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">album</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;releasedate&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">album</span><span class="p">.</span><span class="nx">releasedate</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">d</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">(),</span>
</span><span class='line'>                               <span class="nx">d</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">(),</span>
</span><span class='line'>                               <span class="nx">d</span><span class="p">.</span><span class="nx">getDate</span><span class="p">()];</span>
</span><span class='line'>                    <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I intend to use grouping, I also need a reduce function:</p>

<figure class='code'><figcaption><span>Reduce Function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">values</span><span class="p">,</span> <span class="nx">rereduce</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">values</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each document in the view is now a date as an array, with a single
number for the record made that date (there are as many identical keys
as there were records for a given day).</p>

<p>When querying, by default, the reduce function will be called on
identical keys to get a single value:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/count/_view/album_by_date?limit=5\&group=true
</span><span class='line'>{"rows":[
</span><span class='line'>{"key":[2004,11,18],"value":2},
</span><span class='line'>{"key":[2004,11,21],"value":1},
</span><span class='line'>{"key":[2004,11,22],"value":1},
</span><span class='line'>{"key":[2004,11,28],"value":1},
</span><span class='line'>{"key":[2004,11,29],"value":2}
</span><span class='line'>]}</span></code></pre></td></tr></table></div></figure>


<p>(month is 0 based&#8230;)</p>

<p>With the <code>group_level</code> parameter, I can control whether I want to
group by day (<code>group=true</code> or <code>group_level=3</code>, as above), by month
(<code>group_level=2</code>), or year (<code>group_level=1</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/count/_view/album_by_date?limit=5\&group_level=2
</span><span class='line'>{"rows":[
</span><span class='line'>{"key":[2004,11],"value":7},
</span><span class='line'>{"key":[2005,0],"value":3},
</span><span class='line'>{"key":[2005,1],"value":3},
</span><span class='line'>{"key":[2005,2],"value":5},
</span><span class='line'>{"key":[2005,3],"value":15}
</span><span class='line'>]}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/count/_view/album_by_date?limit=5\&group_level=1
</span><span class='line'>{"rows":[
</span><span class='line'>{"key":[2004],"value":7},
</span><span class='line'>{"key":[2005],"value":306},
</span><span class='line'>{"key":[2006],"value":1277},
</span><span class='line'>{"key":[2007],"value":3454},
</span><span class='line'>{"key":[2008],"value":7330}
</span><span class='line'>]}</span></code></pre></td></tr></table></div></figure>


<h3>View request parameters</h3>

<p>There are quite a few of them listed
<a href="http://wiki.apache.org/couchdb/HTTP_view_API?action=show&amp;redirect=HttpViewApi">here</a>.</p>

<h3>Random artist script</h3>

<p>The code is essentially the same as the one mapping names to ids, but
here it associates <code>random</code> to <code>name</code>.</p>

<figure class='code'><figcaption><span>Random Artist  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;random&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Random artist URL</h3>

<p>The URL below returns the first artist whose random number is greater
than the random one generated by Ruby.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/artist?limit=1\&startkey=`ruby -e 'p rand'`
</span><span class='line'>{"total_rows":26987,"offset":23180,"rows":[
</span><span class='line'>{"id":"364215","key":0.8581072409917536,"value":"rakombiacje"}
</span><span class='line'>]}</span></code></pre></td></tr></table></div></figure>


<p>As expected, if given a value too large (for instance, 1), the query
returns nothing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/artist?limit=1\&startkey=1
</span><span class='line'>{"total_rows":26987,"offset":26987,"rows":[]}</span></code></pre></td></tr></table></div></figure>


<h3>Random everything</h3>

<p>The code of each script is similar, in a way Russian Dolls are
similar: each one is an extension of the previous, digging deeper into
the nested structure of the original document.</p>

<h4>Random Album</h4>

<figure class='code'><figcaption><span>Random Album  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">album</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;random&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">album</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">by</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">album</span><span class="o">:</span> <span class="nx">album</span><span class="p">.</span><span class="nx">name</span> <span class="p">};</span>
</span><span class='line'>                <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/album?limit=1\&startkey=`ruby -e 'p rand'` | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   142    0   142    0     0  36419      0 --:--:-- --:--:-- --:--:-- 71000
</span><span class='line'>{
</span><span class='line'>    "offset": 19416, 
</span><span class='line'>    "rows": [
</span><span class='line'>        {
</span><span class='line'>            "id": "357995", 
</span><span class='line'>            "key": 0.35656765622628905, 
</span><span class='line'>            "value": {
</span><span class='line'>                "album": "Demo Releses", 
</span><span class='line'>                "by": "SilvanestY"
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "total_rows": 54669
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Random Track</h4>

<figure class='code'><figcaption><span>Random Track  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;tracks&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">album</span><span class="p">.</span><span class="nx">tracks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">track</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">by</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                  <span class="nx">album</span><span class="o">:</span> <span class="nx">album</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                  <span class="nx">track</span><span class="o">:</span> <span class="nx">track</span><span class="p">.</span><span class="nx">name</span> <span class="p">};</span>
</span><span class='line'>                        <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/track?limit=1\&startkey=`ruby -e 'p rand'` | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   163    0   163    0     0  10294      0 --:--:-- --:--:-- --:--:-- 11642
</span><span class='line'>{
</span><span class='line'>    "offset": 118485, 
</span><span class='line'>    "rows": [
</span><span class='line'>        {
</span><span class='line'>            "id": "370935", 
</span><span class='line'>            "key": 0.3460755726665503, 
</span><span class='line'>            "value": {
</span><span class='line'>                "album": "Mako Yama", 
</span><span class='line'>                "by": "Mako Yama", 
</span><span class='line'>                "track": "Kinu No Tsuki"
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "total_rows": 342013
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Random Tag</h4>

<figure class='code'><figcaption><span>Random Tag  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;tracks&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">album</span><span class="p">.</span><span class="nx">tracks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">track</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;tags&#39;</span> <span class="k">in</span> <span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">track</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;idstr&#39;</span> <span class="k">in</span> <span class="nx">tag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span>
</span><span class='line'>                                <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">by</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="nx">album</span><span class="o">:</span> <span class="nx">album</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="nx">track</span><span class="o">:</span> <span class="nx">track</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="nx">tag</span><span class="o">:</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">idstr</span> <span class="p">};</span>
</span><span class='line'>                                <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">});</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/_design/random/_view/tag?limit=1\&startkey=`ruby -e 'p rand'` | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   218    0   218    0     0   9717      0 --:--:-- --:--:-- --:--:-- 10380
</span><span class='line'>{
</span><span class='line'>    "offset": 151963, 
</span><span class='line'>    "rows": [
</span><span class='line'>        {
</span><span class='line'>            "id": "340779", 
</span><span class='line'>            "key": 0.2788540070246309, 
</span><span class='line'>            "value": {
</span><span class='line'>                "album": "CABACA-5", 
</span><span class='line'>                "by": "CC Asia Band", 
</span><span class='line'>                "tag": "electricguitar", 
</span><span class='line'>                "track": "CC Asia Band - CABACA - 35 CCilly Love Song"
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "total_rows": 545892
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it for Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks CouchDB Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-1/"/>
    <updated>2012-01-30T13:57:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-1</id>
    <content type="html"><![CDATA[<p>Another beta version of the book, finally with the chapter on
<a href="http://couchdb.apache.org/">CouchDB</a>. I was going through
the Redis chapter, but the third day uses other databases, in
particular CouchDB. So I&#8217;ll get back to Redis after I&#8217;m done with
CouchDB.</p>

<!--more-->


<p>Today is just a short introduction: CouchDB is (yet another) key-value
store; it has a ReST API, stores JSON data, and, like Riak, only
supports full updates. Unlike Riak, however, it does not support
concurrent updates; instead it requires the client to only update from
the latest version of the data.</p>

<p>I thought at first that the data was versioned, like in HBase, but
this is not the case: the version id (<code>_rev</code>) is there to ensure that
updates occur sequentially, not concurrently. CouchDB can keep
previous versions of documents, but the retention is unreliable as
explained <a href="http://wiki.apache.org/couchdb/Document_revisions">here</a>.</p>

<p>Besides the HTTP based ReST API, CouchDB also provides a web
interface; among other tools, there is a complete test suite, which is
always nice to check the installation.</p>

<h2>Exercises</h2>

<h3>CouchDB HTTP Document API documentation</h3>

<p>The documentation is
<a href="http://wiki.apache.org/couchdb/HTTP_Document_API">here</a>; there is
also a <a href="http://wiki.apache.org/couchdb/Complete_HTTP_API_Reference">reference</a></p>

<h3>HTTP commands</h3>

<p>Besides the basic CRUD <code>POST</code> <code>GET</code> <code>PUT</code> and <code>DELETE</code>, there is also
<code>HEAD</code> (for basic information on a document):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -I -X HEAD http://localhost:5984/music/ee6637073ab24aaeeda094dcb3749a22 
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: CouchDB/1.1.1 (Erlang OTP/R15B)
</span><span class='line'>Etag: "4-e70582ded641cebc5b259da96805344b"
</span><span class='line'>Date: Mon, 30 Jan 2012 09:18:44 GMT
</span><span class='line'>Content-Type: text/plain;charset=utf-8
</span><span class='line'>Content-Length: 246
</span><span class='line'>Cache-Control: must-revalidate</span></code></pre></td></tr></table></div></figure>


<p>When using <code>cURL</code>, the command <code>HEAD</code> must be used with the flag <code>-I</code>,
otherwise <code>cURL</code> will wait (endlessly) for data after the headers.</p>

<p>Finally, there is a <code>COPY</code> command, which as expected copies a
document (without having to retrieve it first):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X COPY  http://localhost:5984/music/ee6637073ab24aaeeda094dcb3749a22 \
</span><span class='line'>-H 'Destination: beatles'
</span><span class='line'>{"id":"beatles","rev":"1-6ea1608de6609c9985ff06aa9bc23a16"}
</span><span class='line'>$ curl http://localhost:5984/music/beatles | python -mjson.tool
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   221  100   221    0     0  78396      0 --:--:-- --:--:-- --:--:--  215k
</span><span class='line'>{
</span><span class='line'>    "_id": "beatles", 
</span><span class='line'>    "_rev": "1-6ea1608de6609c9985ff06aa9bc23a16", 
</span><span class='line'>    "albums": [
</span><span class='line'>        {
</span><span class='line'>            "title": "Help!", 
</span><span class='line'>            "year": 1965
</span><span class='line'>        }, 
</span><span class='line'>        {
</span><span class='line'>            "title": "Sgt. Pepper's Lonely Hearts Club Band", 
</span><span class='line'>            "year": 1967
</span><span class='line'>        }, 
</span><span class='line'>        {
</span><span class='line'>            "title": "Abbey Road", 
</span><span class='line'>            "year": 1969
</span><span class='line'>        }
</span><span class='line'>    ], 
</span><span class='line'>    "name": "The Beatles"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3><code>PUT</code> a new document with a specific <code>_id</code></h3>

<p>It is just a matter of specifying an id when creating the document:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -X PUT http://localhost:5984/music/sonic_youth \
</span><span class='line'>-H "Content-Type: application/json" --data @-
</span><span class='line'>{
</span><span class='line'>        "name": "Sonic Youth",
</span><span class='line'>        "albums": [
</span><span class='line'>                { "title": "Bad Moon Rising", "year": 1985
</span><span class='line'>                },
</span><span class='line'>                { "title": "Daydream Nation", "year": 1988
</span><span class='line'>                },
</span><span class='line'>                { "title": "Goo", "year": 1990
</span><span class='line'>                }
</span><span class='line'>]               
</span><span class='line'>}       
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Server: CouchDB/1.1.1 (Erlang OTP/R15B)
</span><span class='line'>Location: http://localhost:5984/music/sonic_youth
</span><span class='line'>Etag: "1-69886eb003b1f007cabaac678d5edc16"
</span><span class='line'>Date: Mon, 30 Jan 2012 09:35:37 GMT
</span><span class='line'>Content-Type: text/plain;charset=utf-8
</span><span class='line'>Content-Length: 74
</span><span class='line'>Cache-Control: must-revalidate
</span><span class='line'>
</span><span class='line'>{"ok":true,"id":"sonic_youth","rev":"1-69886eb003b1f007cabaac678d5edc16"}</span></code></pre></td></tr></table></div></figure>


<h3>Document with a text attachment</h3>

<p>To create an attachment, it is necessary to know the version of the
document, as it is considered an update. The URL for the attachment is
just the URL for its document, with any suffix (the suffix naming the
attachment). The <code>_rev</code> is specified by passing a <code>rev</code> parameter.</p>

<p>Using the document with <code>_id</code> &#8216;beatles&#8217; created above, the attachment
is uploaded with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -X PUT http://localhost:5984/music/beatles/lyrics?rev=1-6ea1608de6609c9985ff06aa9bc23a16 \
</span><span class='line'>-H "Content-type: text/plain" --data @-
</span><span class='line'>It was twenty years ago today
</span><span class='line'>Sgt. Pepper taught the band to play...
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Server: CouchDB/1.1.1 (Erlang OTP/R15B)
</span><span class='line'>Location: http://localhost:5984/music/beatles/attachment
</span><span class='line'>Etag: "2-2b22345fd492f31e3061e23a2b79fc08"
</span><span class='line'>Date: Mon, 30 Jan 2012 09:41:51 GMT
</span><span class='line'>Content-Type: text/plain;charset=utf-8
</span><span class='line'>Content-Length: 70
</span><span class='line'>Cache-Control: must-revalidate
</span><span class='line'>
</span><span class='line'>{"ok":true,"id":"beatles","rev":"2-2b22345fd492f31e3061e23a2b79fc08"}</span></code></pre></td></tr></table></div></figure>


<p>The document now has a new <code>_rev</code>.</p>

<p>To retrieve the attachment, just use its URL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:5984/music/beatles/lyrics
</span><span class='line'>It was twenty years ago todaySgt. Pepper taught the band to play...</span></code></pre></td></tr></table></div></figure>


<p>(the line breaks have been lost&#8230;)</p>

<p>Onward to Day 2!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Redis Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/21/seven-databases-in-seven-weeks-redis-day-2/"/>
    <updated>2012-01-21T13:30:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/21/seven-databases-in-seven-weeks-redis-day-2</id>
    <content type="html"><![CDATA[<p>Performance tuning with Redis can be achieved in different ways, as we
see today. First there are basic changes in the client side (such as
pipelines), then configurations options (frequency of saves, &#8230;), and
finally distribution of load.</p>

<!-- more -->


<h3>Pipeline</h3>

<p>Redis low level protocol supports the notion of pipelines: sending
commands in batch, and collect all the results at the end, instead of
waiting for results between each command. This should save a round
trip delay for each command, so there can be huge performance boosts
for specific usages, as the informal benchmarks below show.</p>

<h3>Distributed Redis</h3>

<p>Redis servers can be distributed for performance or memory concern,
but much of the work falls on the client side.</p>

<h4>Slaves</h4>

<p>Slaves in Redis are just the opposite of
<a href="http://www.mongodb.org/">MongoDB</a>&#8217;s. Whereas MongoDB&#8217;s slaves are
meant to be written to, so that updates are automatically pushed to
the master, Redis slaves are, or should be, read-only. Updates are
only propagated from master to slaves.</p>

<p>There is no integrated support for failover; it has to be implemented
in client code.</p>

<p>So slaves are mainly a mechanism to distribute reads; combined with
monitoring client code, they can also be used to data replication and
failover.</p>

<p>Note that each slave needs as much memory as the master, as it
contains the same data.</p>

<h4>Sharding</h4>

<p>By itself, Redis does not support sharding, and relies on the client
library to spread accesses over several instances. There is a
ongoing development to have real Redis Clusters, but for the time
being it has to be simulated.</p>

<p>One issue not mentioned in the book is that sharding breaks
transactions and pipelines: there is no guarantees that the relevant
keys are all in the same instance, so the Redis Ruby client, for
instance, will raise an exception when invoking <code>MULTI</code>.</p>

<p>The Java client, Jedis, has a mechanism to &#8220;tag&#8221; a key such that keys
with the same tag are guaranteed to be on the Redis server. This makes
the distribution of keys predictable, and allows the use of
transactions (provided all the involved keys have the same tag).</p>

<p>This shows that not only this is a client side feature, but the actual
extent of the feature may vary widely. And of course, there is no
reason to think that different clients will shard keys the same way.</p>

<p>Properly setup, sharding will distribute the data over each
node, reducing the memory load of each node.</p>

<h2>Exercises</h2>

<h3>Performance tests</h3>

<p>I first tried to rewrite the code in Java, to measure the cost of Ruby&#8217;s
convenience. The code in Java is clumsier than in Ruby, but it ran
a bit faster (105 seconds instead of 155 seconds for the Ruby version
using <code>hiredis</code>).</p>

<figure class='code'><figcaption><span>Simple ISBN Loader (ISBNLoader.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/isbn/ISBNLoader.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ISBNLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">REDIS_HOST</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REDIS_PORT</span> <span class="o">=</span> <span class="mi">6379</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">TIMEOUT</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="n">REDIS_HOST</span><span class="o">,</span> <span class="n">REDIS_PORT</span><span class="o">,</span> <span class="n">TIMEOUT</span><span class="o">);</span>
</span><span class='line'>      <span class="n">jedis</span><span class="o">.</span><span class="na">flushAll</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">String</span><span class="o">[]</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">tokens</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">isbn</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">title</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">isbn</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">title</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">isbn</span><span class="o">,</span> <span class="n">title</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">jedis</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using pipelines, the difference was 11 seconds against 26 seconds
(again, the Ruby version is using <code>hiredis</code>).</p>

<figure class='code'><figcaption><span>Pipelined ISBN Loader (ISBNLoader.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/isbn-pipeline/ISBNLoader.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Pipeline</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ISBNLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">REDIS_HOST</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REDIS_PORT</span> <span class="o">=</span> <span class="mi">6379</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">TIMEOUT</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Jedis</span> <span class="n">client</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="nf">ISBNLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="n">REDIS_HOST</span><span class="o">,</span> <span class="n">REDIS_PORT</span><span class="o">,</span> <span class="n">TIMEOUT</span><span class="o">);</span>
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="na">flushAll</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">ISBNLoader</span><span class="o">().</span><span class="na">load</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">load</span><span class="o">(</span><span class="n">String</span> <span class="n">fileName</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">fileName</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&gt;</span> <span class="n">batch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">String</span><span class="o">[]</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">tokens</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">isbn</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">title</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">isbn</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">title</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span><span class='line'>              <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="n">batch</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="n">isbn</span><span class="o">,</span> <span class="n">title</span><span class="o">));</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">batch</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">BATCH_SIZE</span><span class="o">)</span>
</span><span class='line'>              <span class="n">flush</span><span class="o">(</span><span class="n">batch</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">flush</span><span class="o">(</span><span class="n">batch</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span>       
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&gt;</span> <span class="n">batch</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Pipeline</span> <span class="n">pipe</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">pipelined</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Pair</span> <span class="n">p</span> <span class="o">:</span> <span class="n">batch</span><span class="o">)</span>
</span><span class='line'>          <span class="n">pipe</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">key</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>      <span class="n">pipe</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
</span><span class='line'>      <span class="n">batch</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Pair</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Pair</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Disabling snapshots and append only file did not improve the time
significantly compared to the default (snapshots but no append only file).</p>

<p>Enabling the append only file and setting it to <code>always</code> was almost 3
times as slow for the pipelined Java version (27 seconds). For the
original Ruby version (with <code>hiredis</code>), it was even worse (1101
seconds). This means the overhead of writing to file can be mitigated
with pipelines.</p>

<p>To recap: disabling snapshots did not improve performance measurably,
but enabling append only file <code>always</code> degrades the performance
significantly; using pipelines makes it a bit better, but it is still
much slower.</p>

<h3>URL Shortening Service</h3>

<p>The exact setup to implement is not described, so what I did is to
distribute data between two shards of one master and two slaves.</p>

<p>There is no direct support for such a layout in Jedis (nor, as far as I
can tell, in the Ruby library), so I had to write some of it myself.</p>

<p>As always with Redis, the writes are restricted to the masters, and
the reads are distributed over the slaves (and the masters as well, if
needed).</p>

<h4>Distribution over slaves</h4>

<p>Jedis does not support slaves directly. What the documentation
proposes is to have a dedicated client to the master to write on, and
a sharded pool to the slaves. However, such an approach would be
difficult, as I need to shard the writes to the masters as well (I
would have to use a different sharding algorithm, and manage the
routing of commands through the tree of Redis instances).</p>

<p>Fortunately, Redis user Ingvar Bogdahn had posted an implementation of
a
<a href="http://groups.google.com/group/jedis_redis/msg/c8c76371cf543e36">Round Robin pool of slaves</a>. This
implementation manages a connection pool to a master, and another
connection pool to a set of slaves. The commands are properly
distributed: all the write commands are sent to the master, and the
reads commands are distributed over the slaves.</p>

<p>I had to fix the code in some places: a command implementation was
missing, another was incorrect, and finally the password was never
sent to the master, causing authentication errors. But the bulk of the
code is Ingvar&#8217;s, and I was glad to use it.</p>

<p>The classes are</p>

<ul>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/UniJedis.java"><code>UniJedis</code></a>: provides pools for both master and a set of slaves, and dispatches commands to the correct pool.</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/RoundRobinPool.java"><code>RoundRobinPool</code></a>: implements a pool with Round Robin access</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/ChainableTransaction.java"><code>ChainableTransaction</code></a>: (not used in this project) provides a fluent interface for Redis transactions.</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/DBKeys.java"><code>DBKeys</code></a>: (not used in this project) abstracts database and keys.</li>
</ul>


<h4>Sharding</h4>

<p>Sharding is directly supported by Jedis, but as organized the code is
restricted to a set of clients to specific instances.</p>

<p>There are basic, generic classes
(<a href="https://github.com/xetorthio/jedis/blob/master/src/main/java/redis/clients/util/Sharded.java"><code>Sharded</code></a>,
<a href="https://github.com/xetorthio/jedis/blob/master/src/main/java/redis/clients/util/ShardInfo.java"><code>ShardInfo</code></a>,
&#8230;) that can be used to implement sharding of arbitrary clients (such
as the Round Robin pool above), but it requires a lot of tedious code
to map each command to a method on the right shard. Worse, such code
would be the same for every kind of shard.</p>

<p>So I first wrote generic classes that implement sharding in terms of
generic Jedis client; the actual implementation is then much simpler
(just the constructors, and the few commands that cannot be sharded,
such as <code>disconnect</code> or <code>flushAll</code>).</p>

<ul>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/BinaryShardedGJedis.java"><code>BinaryShardedGJedis</code></a>: first level of Jedis commands implementation (binary commands)</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/ShardedGJedis.java"><code>ShardedGJedis</code></a>: second level of Jedis commands implementation (<code>String</code> based commands)</li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/UniJedisShardInfo.java"><code>UniJedisShardInfo</code></a>: descriptor class to use with <code>Sharded</code></li>
<li><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/redis/clients/jedis/ShardedUniJedis.java"><code>ShardedUniJedis</code></a>: actual implementation of sharded <code>UniJedis</code>. As promised, the class has hardly any code.</li>
</ul>


<h4>Service</h4>

<p>The code for the service itself is now fairly
small. <a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/jp/wakatta/client/JedisClient.java"><code>JedisClient</code></a>
is the class that builds the tree of sharded master/slaves pools. It
is loaded and initialized as a <a href="http://www.springsource.org/">Spring</a>
bean. The web services are <a href="http://jsr311.java.net/">JSR 311</a>
services, running over <a href="http://jersey.java.net/">Jersey</a>, and loaded
and initialized by Spring.</p>

<p><a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/jp/wakatta/web/Admin.java"><code>Admin</code></a>
let the user defines a keyword for a specific URL, and
<a href="https://github.com/fdumontmd/url-shortener/blob/master/src/main/java/jp/wakatta/web/Client.java"><code>Client</code></a>
extracts a keyword from the request URL, retrieves the URL for the
this keyword, and returns a request to redirect to this URL.</p>

<p>Once deployed (on <a href="http://tomcat.apache.org/">Apache Tomcat</a>), it can be used in a browser or on the command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST http://localhost:8080/url-shortener/u/admin --data "url=http://slashdot.org&shorter=slash"
</span><span class='line'>Key[slash] mapped to URL[http://slashdot.org]</span></code></pre></td></tr></table></div></figure>


<p>and for clients:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -I http://localhost:8080/url-shortener/u/s/slash
</span><span class='line'>HTTP/1.1 303 See Other
</span><span class='line'>Server: Apache-Coyote/1.1
</span><span class='line'>Location: http://slashdot.org
</span><span class='line'>Content-Length: 0
</span><span class='line'>Date: Mon, 23 Jan 2012 06:13:29 GMT</span></code></pre></td></tr></table></div></figure>


<p>The code for the whole project can be found on <a href="https://github.com/fdumontmd/url-shortener">Github</a>.</p>

<p>And this completes Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Redis Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/20/seven-databases-in-seven-weeks-redis-day-1/"/>
    <updated>2012-01-20T16:52:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/20/seven-databases-in-seven-weeks-redis-day-1</id>
    <content type="html"><![CDATA[<p>After a long winter hiatus, the elves at
<a href="http://pragprog.com/">Pragmatic Bookshelf</a> delivered a late but
welcome present: the third beta of
<a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a>. The
book is not complete yet (the chapter on
<a href="http://couchdb.apache.org/">CouchDB</a> is still missing), but it now
covers <a href="http://redis.io/">Redis</a>.</p>

<p>Redis is basically a key-value store, like
<a href="http://wiki.basho.com/">Riak</a>, but while Riak is agnostic about the
values, Redis values can be data structures (lists, queues,
dictonaries, &#8230;, or even messaging queues). This allows Redis to act
as a synchronized shared memory for cooperating applications.</p>

<!-- more -->


<h3>Complex Datatypes</h3>

<p>Redis values can have structure, and specific commands manipulate
these values in appropriate ways. Redis supports
<a href="http://redis.io/commands/#string">strings</a>, which can also behave
as numbers if they have the right format,
<a href="http://redis.io/commands#list">lists</a> which can also be seen as
queues, and support blocking reads,
<a href="http://redis.io/commands#set">sets</a>,
<a href="http://redis.io/commands#hash">hashes</a> (that is, dictionaries), and
<a href="http://redis.io/commands#sorted_set">sorted sets</a>.</p>

<h3>Transactions</h3>

<p>All Redis commands are atomic, and it is possible to group a sequence
of commands into a transaction for an all or nothing execution with
the command <a href="http://redis.io/commands/multi"><code>MULTI</code></a>. But a
Redis transaction is not similar to a transaction in relational
databases: it just queues all the commands and executes them when it
receives the <a href="http://redis.io/commands/exec"><code>EXEC</code></a> command. This
means it is not possible to read any data while in a transaction.</p>

<h3>Expiry</h3>

<p>Perhaps nothing labels Redis as a datastore for transient data more
than expiry: keys can be marked for expiration (either relative from
the current time, or absolute).</p>

<h3>Messaging</h3>

<p>Redis also supports messaging but this is a topic for
Day 2.</p>

<p>This
<a href="http://blog.mjrusso.com/2010/10/17/redis-from-the-ground-up.html">post</a>
has a more detailed but still balanced coverage of Redis.</p>

<h2>Exercises</h2>

<h3>Redis command documentation</h3>

<p>The <a href="http://redis.io/commands">documentation</a> is well done and easy to
navigate. Of all the databases I have seen so far, this is probably
the base
(<a href="http://www.postgresql.org/docs/current/static/index.html">PostgreSQL</a>
being a strong second).</p>

<h3>Create a Redis client</h3>

<p>I&#8217;m using Java and the <a href="https://github.com/xetorthio/jedis">Jedis</a>
client library.</p>

<p>The code is simple enough:</p>

<figure class='code'><figcaption><span>simple redis client (RedisFirst.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/first/RedisFirst.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Transaction</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisFirst</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// connect</span>
</span><span class='line'>      <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// set the key first to 5</span>
</span><span class='line'>      <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">,</span> <span class="s">&quot;5&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// start a transaction</span>
</span><span class='line'>      <span class="n">Transaction</span> <span class="n">trans</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">multi</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// increase by 4</span>
</span><span class='line'>      <span class="n">trans</span><span class="o">.</span><span class="na">incrBy</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>      <span class="n">trans</span><span class="o">.</span><span class="na">exec</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// retrieve the value</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Value is now: &quot;</span> <span class="o">+</span> <span class="n">jedis</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>pom.xml</code> file:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/first/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>redis-first<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create a pair of Redis clients</h3>

<p>This one is simple as well, but having a reader and a writer allowed
me to try one writer and two readers.</p>

<p>First the writer program:</p>

<figure class='code'><figcaption><span>Redis Push (RedisPush.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/push/RedisPush.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisPush</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">jedis</span><span class="o">.</span><span class="na">lpush</span><span class="o">(</span><span class="s">&quot;msg:queue&quot;</span><span class="o">,</span> <span class="s">&quot;A new message&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Message inserted&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>poml.xml</code> is a bit more complex, as it creates a self-contained
jar with <code>MANIFEST.MF</code> (so I can run it from the command line easily):</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/push/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>redis-push<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;descriptorRefs&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class="nt">&lt;/descriptorRef&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/descriptorRefs&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;mainClass&gt;</span>jp.wakatta.RedisPush<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;id&gt;</span>make-assembly<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;goal&gt;</span>attached<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reader program:</p>

<figure class='code'><figcaption><span>Redis Pop (RedisPop.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/pop/RedisPop.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis.clients.jedis.Jedis</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisPop</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">again</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">again</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Waiting for messages&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">msgs</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">blpop</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span> <span class="s">&quot;msg:queue&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Messages received:&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">msg:</span> <span class="n">msgs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;finish&quot;</span><span class="o">))</span>
</span><span class='line'>                  <span class="n">again</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;No more messages&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>with its <code>pom.xml</code>:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/redis/pop/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>redis-pop<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;descriptorRefs&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class="nt">&lt;/descriptorRef&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/descriptorRefs&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;mainClass&gt;</span>jp.wakatta.RedisPop<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;id&gt;</span>make-assembly<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;goal&gt;</span>attached<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>blpop</code> command can block on several lists, so when it receives
something it is always at least a pair: the list key, and the value.</p>

<p>Now, I can open three terminals to test the code: two with readers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar target/redis-pop-0.0.1-SNAPSHOT-jar-with-dependencies.jar</span></code></pre></td></tr></table></div></figure>


<p>and one with the writer (which must be started last):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar target/redis-push-0.0.1-SNAPSHOT-jar-with-dependencies.jar</span></code></pre></td></tr></table></div></figure>


<p>The writer will simply state</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Message inserted</span></code></pre></td></tr></table></div></figure>


<p>One of the readers will get the message:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Waiting for messages
</span><span class='line'>Messages received:
</span><span class='line'>msg:queue
</span><span class='line'>A new message
</span><span class='line'>Waiting for messages</span></code></pre></td></tr></table></div></figure>


<p>but the other one will just keep waiting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Waiting for messages</span></code></pre></td></tr></table></div></figure>


<p>So Redis blocking queues can only server one blocking reader at a time
(as it should).</p>

<p>The reader programs can be stopped with <code>Ctrl-c</code>, or by pushing
<code>finish</code> into <code>msg:queue</code> from a Redis client (twice, once for each
client):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redis 127.0.0.1:6379&gt; lpush "msg:queue" "finish"
</span><span class='line'>(integer) 1
</span><span class='line'>redis 127.0.0.1:6379&gt; lpush "msg:queue" "finish"
</span><span class='line'>(integer) 1</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Repertoire Method]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-repertoire-method/"/>
    <updated>2012-01-14T13:33:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-repertoire-method</id>
    <content type="html"><![CDATA[<p>The repertoire method is never really explained in the book, or
anywhere else I could find on the Internet. There are a couple of
posts on this subject, so I though I should add mine.</p>

<p>The repertoire method is really a tool to help with the intuitive step
of figuring out a closed formula for a recurrence equation. It does so
by breaking the original problem into smaller parts, with the hope
they might be easier to solve.</p>

<!-- more -->


<h3>Why it works</h3>

<p>Let&#8217;s assume we have a system of recurrence equations with parameters,
so that the unknown function can be expressed as a linear combination
of other (unknown) functions where the coefficients are the parameters:</p>

<div markdown="0">
\begin{align}
g(1) &amp; = b(0, \alpha_1, \cdots, \alpha_m)&#92;&#92;
g(n) &amp; = r_n(g_1, \cdots, g_{n-1}, \alpha_1, \cdots, \alpha_m)&#92;&#92;
&amp; = \sum_{i=1}^m A_i(n)\alpha_i,
\end{align}
</div>


<p>We can consider $g$ as a specific point in a $m$-dimensional function
space (determined by both the recurrence equations, and the
parameters), and because $g$ is a linear combination, we can try to
find $m$ base functions (hopefully known or easy to compute)
$f_k(n) = \sum_{i=1}^m A_i(n)\alpha_{i_k}$ with $1 \le k \le m$, expressed in
terms of $m$ linearly independent vectors
$(\alpha_{1_k},\cdots,\alpha_{m_k})$.</p>

<p>In other words, if we can find $m$ linearly independent parameter
vectors such that, for each, we have a known solution $f_k(n)$, then
we can express the function $g$ as a linear combination of $f_k(n)$
for any parameters (because the $m$ $f_k(n)$ form a base for the
$m$-dimensional function space defined by the recurrence equations).</p>

<h3>How it works</h3>

<p>First, we need to check that the recurrence equations accept a
solution expressed as</p>

<div markdown="0">
\begin{align}
g(n) &amp; = \sum_{i=1}^m A_i(n)\alpha_i
\end{align}
</div>


<p>It is enough to plug this definition into the recurrence equations,
and make sure the different parameters always remain in different
terms.</p>

<p>Then we can either solve $f(n) = \sum_{i=1}^m A_i(n)\alpha_i$ for
known $f(n)$, or for known $\alpha_i$
parameters, as long as we end up with $m$ linearly independent
parameter vectors (or, as it is equivalent, $m$ linearly independent
known functions for specific parameters).</p>

<p>It is important to keep in mind that a solution can be searched from
both direction: either set a function and try to solve for the
parameters, or set the parameters and solve for the function.</p>

<h3>Homework exercise</h3>

<p>Given</p>

<div markdown="0">
\begin{align}
g(1) &amp; = \alpha&#92;&#92;
g(2n+j) &amp; = 3g(n) + \gamma n + \beta_j&amp;&amp;\text{for \(j=0, 1\) and \(n \gt 1 \)}&#92;&#92;
\end{align}
</div>


<p>We need to check that $g$ can be written as</p>

<div markdown="0">
\begin{align}
g(n) &amp; = \alpha A(n) + \beta_0 B_0(n) + \beta_1 B_1(n) + \gamma C(n)&#92;&#92;
\end{align}
</div>


<p>The base case is trivial. The recurrence case is</p>

<div markdown="0">
\begin{align}
g(2n) &amp; = 3g(n) + \gamma n + \beta_0&#92;&#92;
&amp; = 3(\alpha A(n) +  \beta_0 B_0(n) + \beta_1 B_1(n) + \gamma C(n)) + \gamma n \beta_0&#92;&#92;
&amp; = \alpha 3A(n) + \beta_0 (3 B_0(n) + 1) + \beta_1 3B_1(n) + \gamma (3C(n) + n)&#92;&#92;
g(2n+1) &amp; = 3g(n) + \gamma n + \beta_1&#92;&#92;
&amp; = 3(\alpha A(n) +  \beta_0 B_0(n) + \beta_1 B_1(n) + \gamma C(n)) + + \gamma n\beta_1&#92;&#92;
&amp; = \alpha 3A(n) + \beta_0 3 B_0(n)+ \beta_1 (3B_1(n) + 1) + \gamma (3C(n) + n)&#92;&#92;
\end{align}
</div>


<p>so $g$ can be expressed as a linear combination of other functions,
with the parameters as the coefficients.</p>

<p>Now, when I tried to solve this problem, I didn&#8217;t know I could set the
parameters to values that would lead to an easy solution ($\gamma = 0$
turns the problem into an easy to solve generalised radix-based
Josephus problem); instead I wasted a lot of time trying to find known
functions and solve for the parameters, which is why I have four steps
below instead of just two as in the book.</p>

<h4>$g(n) = n$</h4>

<p>As the book suggests, I tried to solve for $g(n) = n$:</p>

<div markdown="0">
\begin{align}
1 = g(1) &amp; = \alpha&amp;&amp;\alpha = 1&#92;&#92;
2n = g(2n) &amp; = 3g(n) + \gamma n + \beta_0&#92;&#92;
&amp; = 3n + \gamma n + \beta_0&amp;&amp;\gamma = -1, \beta_0 = 0&#92;&#92;
2n+1 = g(2n+1) &amp; = 3g(n) + \gamma n + \beta_1&#92;&#92;
&amp; = 3n - n + \beta_1&amp;&amp; \beta_1 = 1&#92;&#92;
\end{align}
</div>


<h4>$g(2^m+l) = 3^m$</h4>

<p>As the recurrence equation looks like the generalised radix-based
Josephus equation, I tried to solve for $g(2^m+1) = 3^m$:</p>

<div markdown="0">
\begin{align}
1 = g(1) &amp; = \alpha&amp;&amp;\alpha = 1&#92;&#92;
3^m = g(2^m+2l) &amp; = 3g(2^{m-1}+l) + \gamma (2^{m-1} + l) + \beta_0&#92;&#92;
&amp; = 3\cdot 3^{m-1} + \gamma (2^{m-1} + l) + \beta_0&amp;&amp; \beta_0, \gamma = 0&#92;&#92;
3^m = g(2^m+2l+1) &amp; = 3g(2^{m^1}+l) + \gamma (2^{m-1} + l) + \beta_1&#92;&#92;
&amp; = 3\cdot 3^{m-1}&amp;&amp;\beta_1 = 0&#92;&#92;
\end{align}
</div>


<h4>$g(n) = 1$</h4>

<p>I tried to solve for $g(n) = 1$, as it seemed useful to solve for a
constant (no linear combination of linearly independent non-constant
functions can produce a constant function).</p>

<div markdown="0">
\begin{align}
1 = g(1) &amp; = \alpha&amp;&amp; \alpha = 1&#92;&#92;
1 = g(2n+j) &amp; = 3g(n) + \gamma n + \beta_j&#92;&#92;
&amp; = 3 + \gamma n + \beta_j&amp;&amp; \gamma = 0, \beta_j = -2&#92;&#92;
\end{align}
</div>


<h4>$\alpha, \beta_1 = 1, \beta_0,  \gamma = 0$</h4>

<p>This is the step that took me the longest, and when I finally
understood I could fix the parameters, I was able to use the
radix-based Josephus solution.</p>

<p>The recurrence equations</p>

<div markdown="0">
\begin{align}
g(1) &amp; = 1&#92;&#92;
g(2n) &amp; = 3g(n)&#92;&#92;
g(2n+1) &amp; = 3g(n) + 1&#92;&#92;
\end{align}
</div>


<p>have as solution $g(2^m + (b_m\cdots b_0)) = 3^m + (b_m\cdots b_0)_3$.</p>

<h4>Solving for $g(n)$</h4>

<p>We have the equations</p>

<div markdown="0">
\begin{align}
A(n) - C(n) &amp; = n&#92;&#92;
A(2^m + l) &amp; = 3^m&#92;&#92;
A(n) -2(B_0(n) + B_1(n)) &amp; = 1&#92;&#92;
B_1(2^m+l) &amp; = h_3(l)&amp;&amp;\text{where \(h_3(b_m\cdots b_0) = (b_m\cdots b_0)_3\)}&#92;&#92;
\end{align}
</div>


<p>We have two functions already defined ($A(n)$ and $B_1(n)$), and the
other two equations give us the remaining function.</p>

<p>Now we can solve for $g(n)$:</p>

<div markdown="0">
\begin{align}
g(2^m+l) = \alpha 3^m &amp; + \beta_0 (\frac{3^m - 1}{2} - h_3(l))&#92;&#92;
&amp; + \beta_1 h_3(l) &#92;&#92;
&amp;+ \gamma (3^m + h_3(l) - 2^m - l)
\end{align}
</div>


<p>The $\gamma$ term is really $h_3(n) - n$.</p>

<p>The $\beta_0$ term is the same as $h_3(2^m-1-l)$, as can be seen by
observing that in base $3$, $3^m$ is $1$ followed by $m$ zeroes, so
$3^m-1$ is $m$ twos, and $\frac{3^m-1}{2}$ is $m$ ones, in other words
the same representation as the binary representation of $2^m-1$.</p>

<p>Now, the binary representation of $l$ is the same as the
representation in base $3$ of $h_3(l)$ (by definition of $h_3$), so
the binary representation of $2^m-1-l$ is the same as the
representation in base $3$ of $\frac{3^m-1}{2} - h_3(l)$.</p>

<p>With these two observations, it is possible to rewrite $g$ as</p>

<div markdown="0">
\begin{align}
g(1b_m\cdots b_0) &amp; = (\alpha\beta_{b_m}\cdots\beta_{b_0})_3 + \gamma ((1b_m\cdots b_0)_3 - (1b_m\cdots b_0)_2)
\end{align}
</div>


<p>which is the book solution.</p>

<h3>Faster solution</h3>

<p>It is enough to solve for
$\alpha, \beta_0, \beta_1 \ne 0, \gamma = 0$,
and to find the parameters for $g(n) = n$. The first gives $A$,
$B_0$ and $B_1$ directly by the generalised radix-based Josephus
solution, and the second one adds a constraint to solve for $C$ as well.</p>

<h3>Wrapping up</h3>

<p>As can be seen above, approaching the problem from both directions
(solving for known functions and solving for known parameters) can
result in time saved, and simplified expression of the solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Homework Exercises Part 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-chapter-1-homework-exercises-part-2/"/>
    <updated>2012-01-14T12:14:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-chapter-1-homework-exercises-part-2</id>
    <content type="html"><![CDATA[<p>I finally finished the homework exercises.</p>

<!-- more -->


<h2>Homework Exercises Part 2</h2>

<h3>Generalized Tower of Hanoi</h3>

<p>To solve this, I first observed that for $n=1$, we need $m_1$ moves,
and for $n \gt 1$, we need
$A(m_1, \cdots, m_{n-1}) + m_n + A(m_1, \cdots, m_{n-1})$ or
$2A(m_1, \cdots, m_{n-1}) + m_n$ moves.</p>

<p>This leads to the solution,</p>

<div markdown="0">
\begin{align}
A(m_1, \cdots, m_n) &amp;= \sum_{i=1}^n m_i 2^{n-i}&#92;&#92;
\end{align}
</div>


<p>which is trivially shown by induction. The base case:</p>

<div markdown="0">
\begin{align}
A(m_1) &amp; = \sum_{i=1}^1 m_i 2^{1-i}&#92;&#92;
&amp; = m_1 2^0&#92;&#92;
&amp; = m_1
\end{align}
</div>


<p>And for larger $n$, assuming
$A(m_1, \cdots, m_n) = \sum_{i=1}^n m_i 2^{n-i}$,</p>

<div markdown="0">
\begin{align}
A(m_1, \cdots, m_{n+1}) &amp; = 2A(m_1, \cdots, m_n) +
m_{n+1}&amp;&amp;\text{by definition}&#92;&#92;
&amp; = 2\sum_{i=1}^n m_i 2^{n-i} + m_{n+1}&amp;&amp;\text{induction hypothesis}&#92;&#92;
&amp; = \sum_{i=1}^{n} m_i 2^{n+1-i} + m_{n+1} 2^{0}&#92;&#92;
&amp; = \sum_{i=1}^{n+1} m_i 2^{n+1-i}&#92;&#92;
\end{align}
</div>


<h3>Zig-zag lines</h3>

<p>A geometric problem, but very similar to the previous intersecting
lines. A zig-zag is made of 3 segments, so a pair of zig-zag lines can
intersect at 9 different points. The first zig-zag line defines two
regions; each new zig-zag adds a new region, plus one more for each
intersection point.</p>

<p>This gives the following recurrence equations:</p>

<div markdown="0">
\begin{align}
ZZ_1 &amp; = 2&#92;&#92;
ZZ_n &amp; = ZZ_{n-1} + 9(n-1) + 1&#92;&#92;
\end{align}
</div>


<p>Using the linearity of the recurrence equation, it is easy to see that</p>

<div markdown="0">
\begin{align}
ZZ_n &amp; = ZZ_1 + 9S_{n-1} + (n-1)
\end{align}
</div>


<p>Here I used the linearity to compute solutions to both
$ZZ_n = ZZ_{n-1} + 9(n-1)$ and $ZZ_n = ZZ_{n-1} + 1$, which are
equally trivial. Then I combined the solutions into one.</p>

<p>I use (again) induction to confirm the solution. The base case is
$ZZ_1 = ZZ_1 + 9S_0 + 0$. And for other $n$, assuming
$ZZ_n = ZZ_1 + 9S_{n-1} + (n-1)$</p>

<div markdown="0">
\begin{align}
ZZ_{n+1} &amp; = ZZ_{n} + 9n + 1&amp;&amp;\text{by definition}&#92;&#92;
&amp; = ZZ_1 + 9S_{n-1} + (n-1) + 9n + 1&amp;&amp;\text{induction hypothesis}&#92;&#92;
&amp; = ZZ_1 + 9(S_{n-1} + n) + (n-1+1)&#92;&#92;
&amp; = ZZ_1 + 9S_n + n
\end{align}
</div>


<p>The formula can also be written as</p>

<div markdown="0">
\begin{align}
ZZ_n &amp; = \frac{9n^2-7n+2}{2}
\end{align}
</div>


<h3>Planes cutting cheese</h3>

<p>Again, a geometric problem. This one gave me more trouble. It
took me a while before finally seeing that a new plane intersection
with the previous ones will be a set of intersecting lines which
defines the regions the new plan will divide in two.</p>

<p>The number of regions formed by intersecting lines was solved in the
book, and defined as $L_n = S_n + 1$</p>

<p>So a plane cutting $n$ existing planes will define
$P_{n+1} = P_n + L_n$
new regions. This recurrence gives $P_5 = 26$ regions.</p>

<p>The book did not expect a closed formula for this exercise, as the
necessary techniques are only covered in chapter 5.</p>

<h3>Josephus co-conspirator</h3>

<p>The recurrence equation for $I(n)$ follow the structure of $J(n)$, but
with different base cases:</p>

<div markdown="0">
\begin{align}
I(2) &amp; = 2&amp;&amp;\text{\(I(1)\) is not defined}&#92;&#92;
I(2n) &amp; = 2I(n) - 1&#92;&#92;
I(2n+1) &amp; = 2I(n) + 1
\end{align}
</div>


<p>Here I generated the first few values to get inspired. I noticed that
$I(n)$ had increasing odd values for batches that were longer than for
$J(n)$: $3, 6, 12, 24, \cdots$.</p>

<p>These numbers are from the series $3\cdot 2^m$, so using the same
&#8220;intuitive&#8221; step as in the book, I tried to show that
$I(3\cdot 2^m + l) = 2l + 1$ with $0 \le l \lt 3\cdot 2^m$
(the formula does not work for $I(2)$, which has to be defined separately).</p>

<p>By induction on $m$: the base case is $I(3) = I(3\cdot 2^0 + l) = 1$.</p>

<p>Assuming $I(3\cdot 2^m + l) = 2l+1$, we have</p>

<div markdown="0">
\begin{align}
I(3\cdot2^{m+1} + 2l) &amp; = 2I(3\cdot 2^m + l) -1&amp;&amp;\text{by definition}&#92;&#92;
&amp;= 2(2l+1) -1&amp;&amp;\text{induction hypothesis}&#92;&#92;
&amp;= 4l+2-1&#92;&#92;
&amp;= 2(2l)+1&#92;&#92;
I(3\cdot 2^{m+1} + (2l+ 1)) &amp; = 2I(3\cdot 2^m + l) + 1&amp;&amp;\text{by definition}&#92;&#92;
&amp; = 2(2l+1) + 1&amp;&amp;\text{induction hypothesis}&#92;&#92;
\end{align}
</div>


<p>The book solution is defined in terms of $2^m+2^{m-1}+k$, which is
same:</p>

<div markdown="0">
\begin{align}
2^m+2^{m-1}+k &amp; = 2\cdot 2^{m-1} + 2^{m-1} + k&#92;&#92;
&amp; = 3\cdot 2^{m-1} + k
\end{align}
</div>


<p>with $1 \le m$, while I have $0 \le m$.</p>

<h3>Repertoire method</h3>

<p>I put the repertoire method in its own
<a href="http://blog.wakatta.jp/blog/2012/01/14/concrete-mathematics-repertoire-method/">post</a> as it
was both the most difficult exercise and the one where I learned the most.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR3 Maven Plugin - Eclipse setup]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/14/antlr3-maven-plugin-eclipse-setup/"/>
    <updated>2012-01-14T11:25:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/14/antlr3-maven-plugin-eclipse-setup</id>
    <content type="html"><![CDATA[<p>Setting up Eclipse and Maven is getting easier, but some cases
require a bit more search and work. As I was experimenting with the
<a href="http://www.antlr.org/">ANTLR</a>
<a href="http://antlr.org/antlr3-maven-plugin/index.html">Maven plugin</a>, I
found the default behaviour to be pretty much useless: Eclipse knew
nothing about the grammar files or the generated classes, so the rest
would not compile; even after adding the relevant source folders I
still had to run explicit Maven commands after modifying the grammar
files and refresh the workspace&#8230;</p>

<p>I eventually found a better way, which I document here.</p>

<!-- more -->


<p>There is an
<a href="http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+with+Maven">antlr3-maven-archetype</a>,
which I started from. However, for the purpose of clarity, I will
start from scratch here.</p>

<h3>Installing m2e</h3>

<p>The Maven plugin for Eclipse is called m2e (m2eclipse is an obsolete
version), and is available in the default Eclipse
Marketplace. However, the current version (1.0 at the time of writing)
does not handle the life cycle of some common Maven plugins very
well. In particular, it does not know where to put the generation of
classes from grammar files into the Eclipse life cycle.</p>

<p>The 1.1 milestone does it much better, so I suggest to install it. The
location is
<a href="http://download.eclipse.org/technology/m2e/milestones/1.1">http://download.eclipse.org/technology/m2e/milestones/1.1</a>,
which can be used for the &#8220;Install New Software&#8221; function.</p>

<h3>Creating a project with ANTLR</h3>

<p>Create a new Maven Project, and skip the archetype selection (i.e. use
simple project). As I said above, I could use the ANTLR v3 archetype,
but chose not to.</p>

<h4>Optional: set the target option</h4>

<p>By default Maven uses compiler source and target version 1.5. On Mac
OS X Lion, there is no JDK 1.5 (only 1.6), so I always update pom.xml
to set the <code>source</code> and <code>target</code> configuration options to something
meaningful:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>  <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Add ANTLR plugin</h4>

<p>I create a property for the ANTLR version, as I will need for both the
ANTLR plugin and the jar:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>   <span class="nt">&lt;antlr.version&gt;</span>3.4<span class="nt">&lt;/antlr.version&gt;</span>
</span><span class='line'> <span class="nt">&lt;/properties&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I add the plugin declaration</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.antlr<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>antlr3-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>${antlr.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>        <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;goal&gt;</span>antlr<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally I add the dependency to the ANTLR runtime:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.antlr<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>antlr-runtime<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>${antlr.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this stage, Eclipse is upset because the lifecycle configuration
<code>org.antlr:antlr3-maven-plugin:3.4:antlr</code> is not covered. But as we&#8217;re
using m2e 1.1, we can look for the appropriate connector in the m2e
Marketplace. There should be only one: antlr by Sonatype, which should
be installed.</p>

<h4>Packaging the ANTLR runtime with the code</h4>

<p>This is something that the original ANTLR v3 Maven archetype suggests:
to include the ANTLR runtime into the generated jar.</p>

<p>Using the
<a href="http://maven.apache.org/plugins/maven-assembly-plugin/">Maven Assembly Plugin</a>,
it is possible to declare what goes into the generated jar. As it is
self-contained, it is also possible to declare a main class (not done
below as I did not have a main class yet):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;descriptorRefs&gt;</span>
</span><span class='line'>      <span class="nt">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class="nt">&lt;/descriptorRef&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/descriptorRefs&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>make-assembly<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>      <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;goal&gt;</span>attached<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Tuning the Eclipse project</h4>

<p>Now, the ANTLR plugin can process code under
<code>src/main/antlr3</code>, so we can create this folder, and add it as source
folder in the Eclipse project properties. Creating or updating a
grammar file in Eclipse will also create or update</p>

<p>The ANTLR connector also added the <code>target/generated-sources/antlr3</code>
directory as another source folder, but it will disappear when
executing the Maven/Update Project Configuration action, so it is best
to add it manually. You can then change the properties for this folder
to check &#8216;Locked&#8217; (to avoid accidental edition) and &#8216;Derived&#8217; (to hide
the content from the &#8220;Open Resource&#8221; command).</p>

<p>Note that the plugin is unable to follow the <code>@header</code> directive
properly (that is, it will copy the directory structure of the grammar
file, instead of following the directory structure implied by the
<code>@header</code> directive), so the grammar files must use the same directory
structure as the Java package intended for the generated classes. In
other words, if you want your generated classes to have the package
<code>org.something</code>, you both need to put the grammar files under
<code>src/main/antlr3/org/something</code>, and use the <code>@header package</code>
directive to set the package of the generated classes.</p>

<p>It is also unable to handle grammar files directly under
<code>src/main/antlr3</code>. If you try, it will generate this error: &#8220;error(7):
cannot find or open file: null/NestedNameList.g&#8221; when running the
<code>process-sources</code> goal. Running this goal is also the only way to get
the error message if something is wrong with the grammar file (unless
you install an ANTLR Eclipse plugin, which I didn&#8217;t try).</p>

<p>Small gotcha: I found that with the current version of plugins,
connectors and so on, Eclipse does not detect changes to generated
classes directly: it is always one change behind, especially when
there are errors.</p>

<p>If you made a mistake in the grammar file that
causes the generated classes not to compile anymore, you would have to
change the grammar file twice for the error markers to go away; the
first time, Eclipse will correctly report that the errors in the
classes are gone, but the project error markers will stay; the second
change (even if you changed nothing, just add a character, delete it,
and save), and the error markers will finally disappear.</p>

<p>This is more annoying than really a serious problem, and in any case
the files are always properly generated, so if there is no error, all files
are kept up-to-date.</p>

<h5>Automating the above steps</h5>

<p>If you include the <code>build-helper-maven-plugin</code> plugin in your
<code>pom.xml</code>, then it is possible to automatically add the relevant
source folders to Eclipse:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>build-helper-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.7<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>add-antlr-source<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;phase&gt;</span>generate-sources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>      <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;goal&gt;</span>add-source<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>      <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;sources&gt;</span>
</span><span class='line'>          <span class="nt">&lt;source&gt;</span>src/main/antlr3<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>          <span class="nt">&lt;source&gt;</span>target/generated-sources/antlr3<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/sources&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use it, another connector is necessary, but it is found directly in
the m2e Marketplace.</p>

<p>Once in the <code>pom.xml</code>, just importing the project into Eclipse will
create the relevant source folders automatically. However the &#8216;Locked&#8217;
and &#8216;Derived&#8217; flags on the <code>target/generated-sources/antlr3</code> folder
are stored in the workspace <code>.metadata</code>, so these flags have to be set
manually for each workspace.</p>

<h3>The easier way</h3>

<p>If all the above seems tedious, it is because it is. The
<code>antlr3-maven-archetype</code> will generate much of it, but not for
instance the additional source folders.</p>

<p>I have the kind of laziness that causes me to spend hours trying to
save a few minutes later on, so I created my own archetype, a trivial
little thing whose only purpose is to get the basic setup in place
quickly.</p>

<p>It does not really do much, and perhaps should best seen as a
template, which is why the best use is to
<a href="https://github.com/fdumontmd/antlr3-simple-archetype">download</a> it,
adjust it to your own need, then install it locally.</p>

<p>Hope this helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Homework Exercises Part 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/09/concrete-mathematics-chapter-1-homework-exercises-part-1/"/>
    <updated>2012-01-09T20:23:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/09/concrete-mathematics-chapter-1-homework-exercises-part-1</id>
    <content type="html"><![CDATA[<p>I am working my way through the homework exercises, and so far I have
had more success than with the warmups. Here&#8217;s what I have solved so far.</p>

<!--more-->


<h2>Homework Exercises</h2>

<h3>Basic recurrence</h3>

<p>This one was fairly simple, so simple that I wasted one hour trying to
improve the solution.</p>

<p>Just computing the first few terms of the sequence:</p>

<div markdown="0">
\begin{align}
Q_0 &amp; = \alpha &#92;&#92;
Q_1 &amp; = \beta &#92;&#92;
Q_2 &amp; = \frac{1+\beta}{\alpha}&#92;&#92;
Q_3 &amp; = \frac{1+\alpha+\beta}{\alpha\beta}&#92;&#92;
Q_4 &amp; = \frac{\alpha\left( 1 + \alpha + \alpha\beta + \beta\right)}{\alpha\beta(1+\beta)}&#92;&#92;
&amp; = \frac{(1+\alpha)(1+\beta)}{\beta(1+\beta)}&#92;&#92;
&amp; = \frac{1+\alpha}{\beta}&#92;&#92;
Q_5 &amp; = \frac{\alpha\beta\left(1+\alpha+\beta \right)}{\beta \left( 1+\alpha+\beta \right)}&#92;&#92;
&amp; = \alpha&#92;&#92;
Q_6 &amp; = \frac{\beta\left( 1+\alpha \right)}{1+\alpha}&#92;&#92;
&amp; = \beta
\end{align}
</div>


<p>So the sequence is cyclic. I tried to find a closed formula, but the
book does not go that far, and it is unlikely to be possible.</p>

<h3>Product of averages</h3>

<h4>$P(n)$ implies $P(n-1)$</h4>

<p>First of all, I checked that nothing fishy was going on with the
selection of a particular $x_n$, but if $P(n)$ is true, then it is
true for every $x_1\cdots x_n$ set, and in particular for one with a
specific $x_n$.</p>

<p>So nothing fishy is going on.</p>

<p>Assuming the given value for $x_n$, we have</p>

<div markdown="0">
\begin{align}
\left( \frac{x_1 + \cdots + x_n}{n} \right)^n &amp; = \left( \frac{x_1 + \cdots + x_{n-1} + \frac{x_1+\cdots+x_{n-1}}{n-1}}{n}\right)^n&#92;&#92;
&amp; = \left( \frac{(n-1)x_1 + \cdots + (n-1)x_{n-1}+x_1+\cdots + x_{n-1}}{n(n-1)}\right)^n&#92;&#92;
&amp; = \left( \frac{n(x_1+\cdots+x_{n-1})}{n(n-1)}\right)^n&#92;&#92;
&amp; = \left( \frac{x_1+\cdots+x_{n-1}}{n-1}\right)^n&#92;&#92;
&amp; = x_n^n
\end{align}
</div>


<p>So, assuming $P(n)$, we have</p>

<div markdown="0">
\begin{align}
x_1\cdots x_{n-1}x_n &amp;\le x_n^n&#92;&#92;
x_1\cdots x_{n-1} &amp;\le x_n^{n-1}&#92;&#92;
x_1\cdots x_{n-1} &amp;\le \left( \frac{x_1+\cdots+x_{n-1}}{n-1}\right)^{n-1}&amp;&amp;\text{i.e. $P(n-1)$}
\end{align}
</div>


<h4>$P(n)$ and $P(2)$ implies $P(2n)$</h4>

<div markdown="0">
\begin{align}
x_1\cdots x_{2n} &amp; = x_1\cdots x_{n}x_{n+1}\cdots x_{2n}&amp;&amp;\text{associativity}&#92;&#92;
&amp; \le \left(\frac{x_1+\cdots+x_n}{n}\right)^n \left(\frac{x_{n+1}+\cdots+x_{2n}}{n}\right)^n&amp;&amp;\text{applying $P(n)$ twice}&#92;&#92;
&amp; = \left( \frac{x_1+\cdots+x_n}{n}\frac{x_{n+1}+\cdots+x_{2n}}{n}\right)^n&#92;&#92;
&amp; \le \left( \left(\frac{\frac{x_1+\cdots+x_n}{n} + \frac{x_{n+1}+\cdots+x_{2n}}{n}}{2} \right)^2\right)^n&amp;&amp;\text{applying $P(2)$}&#92;&#92;
&amp; = \left( \frac{x_1+\cdots+x_n+x_{n+1}+\cdots+x_{2n}}{2n}\right)^{2n}&amp;&amp;\text{i.e. $P(2n)$}&#92;&#92;
\end{align}
</div>


<h4>$P(n) \forall n \ge 1$</h4>

<p>The case for $P(1)$ is trivial, and $P(2)$ is already proven. We have
$P(n)$ implies $P(n-1)$ and $P(n)$ implies $P(2n)$.</p>

<p>One first approach is to use the basic induction step: we have $P(1)$,
$P(2)$, and we need $P(n) \implies P(n+1)$.</p>

<p>But $P(n) \implies P(2n) \implies P(2n-1) \implies \cdots \implies
P(2n-(n-1))$. The last one is $P(n1+)$, so the induction step holds.</p>

<p>Alternatively, we can show that to prove $P$ for a given $n$, we need
to prove $P$ for a smaller value. As naturals have a minimum, we must
eventually rely on $P(2)$, which would prove the whole chain.</p>

<p>To see this, for $n \ge 3$, if $n = 2m$, we need to prove $P(m)$; if
$n = 2m+1$, we need to prove $P(2m+2)$, which is implied by $P(m+1)$.</p>

<p>So, $\forall n \ge 3, \exists m \lt n \mid P(m) \implies P(n)$. That
with the base cases is enough to establish $P(n) \forall n$.</p>

<h3>Clockwise Tower of Hanoi</h3>

<p>First, both $Q_0$ and $R_0$ are trivial.</p>

<p>Then, to move $n$ discs from $A$ to $B$, you need to move $n-1$ discs
from $A$ to $C$ (counter-clockwise), then move one disc from $A$ to
$B$, then move the $n-1$ discs from $C$ to $B$ (again,
counter-clockwise).</p>

<p>This means $Q_n = R_{n-1} + 1 + R_{n-1} = 2R_{n-1} + 1$.</p>

<p>The case for $R_n$ is a bit more complex. My first (flawed) attempt
was to observe that to move $n$ discs from $B$ to $A$, you could move
them from $B$ to $C$, then $C$ to $A$. In other words,</p>

<div markdown="0">
\begin{align}
R_n &amp; \ge 2Q_n&#92;&#92;
&amp; = Q_n + 2R_{n-1} + 1&amp;&amp;\text{Replacing one \(Q_n\) by \(2R_{n-1}+1\)}&#92;&#92;
&amp; = Q_n + 4Q_{n-1} + 1&amp;&amp;\text{Replacing \(R_{n-1}\) by \(2Q_{n-1}\)}&#92;&#92;
\end{align}
</div>


<p>But the $4Q_{n-1}$ means moving the stack of $n-1$ discs $4$ times,
which is the same as moving it just one time (as $3$ times bring it
back to its original position).</p>

<p>So we&#8217;re left with just $Q_n + Q_{n-1} + 1$. But as I said, this
reasoning is flawed, as it mixes the count of moves with the effect of
moves (where $3$ moves are the same as $0$ move).</p>

<p>While it is possible to repair this reasoning by introducing special
operators that take two parameters (the number of discs, and the
number of steps), it is simpler to try and express $R_n$ strictly in
terms $n-1$ stacks and $1$ disc moves.</p>

<p>So, to move $n$ discs from $B$ to $A$, you need to move $n-1$ discs
from $B$ to $A$ (counter-clockwise), then one disc from $B$ to $C$
(clockwise), then the $n-1$ discs from $A$ to $B$ (clockwise), then
one disc from $C$ to $A$ (clockwise), then finally the $n-1$ discs
from $B$ to $A$ (counter-clockwise).</p>

<p>Or,</p>

<div markdown="0">
\begin{align}
R_n &amp;= R_{n-1} + 1 + Q_{n-1} + 1 + R_{n-1}&#92;&#92;
&amp; = 2R_{n-} + 1 + Q_{n-1} + 1&#92;&#92;
&amp; = Q_n + Q_{n-1} + 1&amp;&amp;\text{definition of \(Q_n\)}&#92;&#92;
\end{align}
</div>


<p>As the recurrence is expressed (initially) only in terms of necessary
moves of strictly smaller stacks, there is no risk of hiding moves
that are equivalent to no moves (as in my first attempt), so the
equation is the minimum number of moves.</p>

<h3>Double Tower of Hanoi</h3>

<h4>Basic Problem</h4>

<p>First, notice we should keep each pair together, because otherwise
they would block larger discs from moving. So each pair of move should
be used to relocate a pair of identical discs to another peg. So we
should expect to need twice as many moves as the original tower.</p>

<p>More precisely, with $A(n)$ the number of moves required to solve a
$2n$ Double Tower of Hanoi, we have:</p>

<div markdown="0">
\begin{align}
(1) &amp; = 2&#92;&#92;
A(n) &amp; = A(n-1) + 2 + A(n-1)&#92;&#92;
&amp; = 2A(n-1) + 2&#92;&#92;
\end{align}
</div>


<p>Using $A(n) + 2= U(n)$, we get</p>

<div markdown="0">
\begin{align}
U(1) &amp; = 4&#92;&#92;
U(n) &amp; = 2U(n-1)&#92;&#92;
&amp; 2^{n+1}&#92;&#92;
A(n) &amp; = 2^{n+1} -2&#92;&#92;
     &amp; = 2(T_n)&#92;&#92;
\end{align}
</div>


<h4>Order Preserving</h4>

<p>If we consider all the $2n$ discs as different, then in $T_{2n}=2^{2n}-1$
moves, we can recreate the same order as the original.</p>

<p>Of course, we can do better. It is enough to move each pair an even
number of times: the first time will switch their order; the second
one will restore it, &#8230;</p>

<p>This is similar to the warmup problem where we cannot move any disc
directly between any two pegs, so using the same constraint to move
any pair would get us to the target order in less than $2\cdot 3^n-1$.</p>

<p>But there is still a better way.</p>

<p>A $2$ discs problem needs exactly $3$ moves.  And the $4$ discs
problem will require just $11$ moves, rather than the $18$ that the
above formula predicts.</p>

<p>A wild guess: the number of moves is $4(2^n-1)-1$.</p>

<p>In trying to solve (or even write) the recurrence equation, it is
important to keep in mind that several ways to move the discs, each
with its own count, will be used.</p>

<p>We know we need two pairs of moves to relocate the two bottom discs
while keeping the order (assuming there are other discs). In doing so,
we will move the next two discs an even number of times, requiring
another 2 times to keep their order. So as long as we make sure the
last operation has the right (even) number of moves, we do not need to
keep this constraint on the other operations.</p>

<p>To recap: we need to move the last pair of discs $2$ times. So we first move
the $n-1$ pairs to a peg, then move the last pair to the other peg,
then the $n-1$ pairs to the first peg, then the last pair to the last
peg. At this stage, the $n-1$ discs have move an even number of times,
so their in the right order, even if we used the non order preserving
solution that was computed above (requiring $2T_{n-1}$ moves).</p>

<p>At this stage, a bit of notation should clarify:</p>

<div markdown="0">
\begin{align}
B(1) &amp; = 3&#92;&#92;
B(n) &amp; = A(n-1) + 2 + A(n-1) + 2 + B(n-1)&#92;&#92;
&amp; = 2T_{n-1} + 2 + 2T_{n-1} + 2 + B(n-1)&#92;&#92;
&amp; = 4T_{n-1}+4+B(n-1)&#92;&#92;
\end{align}
</div>


<p>Trying to prove the guess above:</p>

<div markdown="0">
\begin{align}
B(1) &amp; = 4(2^1-1) - 1&#92;&#92;
&amp; = 3&#92;&#92;
B(n) &amp; = 4(2^{n-1} -1) + 4 + B(n-1)&#92;&#92;
&amp; = 4\cdot 2^{n-1} + 4(2^{n-1} - 1) -1&#92;&#92;
&amp; = 4\cdot 2^n -4 -1&#92;&#92;
&amp; = 4(2^n-1)-1
\end{align}
</div>


<p>So the guess was right. It can also be rewritten as</p>

<div markdown="0">
\begin{align}
4(2^n-1)-1 &amp = 4\cdot 2^n - 4 -1&#92;&#92;
&amp; = 2^{n+2} - 5&#92;&#92;
\end{align}
</div>


<p>which is the book solution.</p>

<p>This being a bonus exercise, I currently experience an intense, although
pointless, sense of pride and achievement.</p>

<p>No doubt the other exercises will cut me down to size.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Warmups]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/07/concrete-mathematics-chapter-1-warmups/"/>
    <updated>2012-01-07T19:09:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/07/concrete-mathematics-chapter-1-warmups</id>
    <content type="html"><![CDATA[<p>It took me far longer than it should have, and I had a very partial
success; I guess my excuse is that my brain was still cold&#8230;</p>

<p>At least I can claim I did try to solve all the exercises; I really
spent hours on this.</p>

<!--more-->


<h2>Warmups</h2>

<h3>Horse colour</h3>

<p>I kind of botched this one, as I tried to answer it even before
reading the chapter&#8230; and my first instinct was that such a use of
induction (taking numbered subsets) was invalid.</p>

<p>Of course it is not. This is a perfectly valid approach, but, as the
book states, in the present case it breaks down for $n=2$.</p>

<p>Properly expressed with math notation, it becomes clear that the
&#8220;same colour&#8221; concept is a binary relation (a reflexive, symmetric
and transitive one). The key is <em>binary</em>: if every pair of horses were
the same colour, then induction could be used.</p>

<h3>Tower of Hanoi Variation</h3>

<p>The description in the book is somewhat confusing, as it states the
restriction in terms of absolute positions (that is, no direct move
between left peg and right peg), rather than relative (if you want to
move a disc between peg $A$ and peg $B$, you must first move it to peg $C$,
then to peg $B$).</p>

<p>The first approach does not work (that is, it is impossible to solve
the problem under these conditions), but obviously the authors meant
the second approach.</p>

<h4>Number of moves</h4>

<p>This variation can be solved using the exact same tools as the
original problem.</p>

<p>Assuming we want to move a stack from $A$ to $B$, using $C$ as
transfer peg: a single disc can be moved in $2$ steps ($A$ to $C$, $C$
to $B$); to move more than $1$, you first need to move the $n-1$ from
$A$ to $B$, then move $1$ disk from $A$ to $C$, move the $n-1$ discs
from $B$ back to $A$, move the one disc from $C$ to $B$, and finally
move the $n-1$ discs from $A$ to $B$.</p>

<p>More concisely:</p>

<div markdown="0">
$$
\begin{align}
T_1 &amp;= 2&amp;&amp;\text{base case}&#92;&#92;
T_n &amp;= T_{n-1} + 1 + T_{n-1} + 1 + T_{n-1}&#92;&#92;
&amp; = 3T_{n-1} + 2&amp;&amp;\text{recurrence equation}
\end{align}
$$
</div>


<p>Using the exact same method as in the book, let&#8217;s define
$T_n + 1= U_n$:</p>

<div markdown="0">
$$
\begin{align}
U_1 &amp;= T_1 + 1&#92;&#92;
&amp; = 3&#92;&#92;
U_n &amp;= T_n + 1&#92;&#92;
&amp; = 3(U_{n-1} -1) + 3&#92;&#92;
&amp; = 3U_{n-1} - 3 + 3&#92;&#92;
&amp; = 3U_{n-1}
\end{align}
$$
</div>


<p>Then, $U_n = 3^n$, and $T_n = 3^n-1$.</p>

<h4>Arrangements</h4>

<p>As discs must be sorted, to describe an arrangement it is enough to
list the peg for each disc. As there are $3$ pegs, this means
there are $3^n$ different arrangements.</p>

<p>The variation takes $3^n-1$ moves, but counting the starting position
as well, this means $3^n$ different positions, which is the same as
the total number of arrangements.</p>

<h3>Tower of Hanoi, Initial Setup Variation</h3>

<p>Once again, by induction: to move a disk to peg $B$:</p>

<p><em>Base case</em>: moving the smallest disc takes at most $1$ move ($0$ if
it is already on peg $B$), so $T_1 \le 1$;
<em>Recurrence</em>: to move the disc of size $n$, assuming it is on $A$, we
need to move all the smaller discs to $C$ (to clear both $A$ and $B$),
then move the disc of size $n$, and finally move all the smaller discs
to $B$. Calling the clearing operation $Cl_n$, we have
$T_n \le Cl_{n-1} + 1 + T_{n-1}$.</p>

<p>A moment of thought is enough to realise that $Cl_n$ amounts to the
same operation as $T_n$ (that is, move each disc to a specific peg,
no matter where it currently is), so we have $Cl_n = T_n$, and
therefore $T_n \le 2T_{n-1} + 1$, which is the same recurrence equation
as the original problem.</p>

<p>Therefore there is no position that is more that $2^n-1$ moves from
the target position.</p>

<h3>Venn Diagram with 4 circles</h3>

<p>I completely failed to solve this one, even though I spent most of the
time on this problem alone. I had the intuition that it could not be
done; I also found that the maximum number of regions would be 14, but
not matter what I tried, I could not prove it.</p>

<p>I tried to use Geometry, hoping that a minimal list of constraints on
the circles would prove that some of the regions that should be
restricted to two circles were in fact always covered by three or
more.</p>

<p>Eventually, when I gave up and looked at the solution, I still could not
understand it. So a circle can only intersect another one in at most 2
points. OK, so what?</p>

<p>After more research (the Google kind, this time), I found
<a href="http://www.brynmawr.edu/math/people/anmyers/PAPERS/Venn.pdf">this paper</a>
which explains why. Each intersection point creates a single new
region. Although once again I have no intuition I can trust in this
domain, in this case the reasoning seems similar enough to
intersecting lines that I feel somewhat confident.</p>

<p>So the above observation gives a recurrence equation:</p>

<div markdown="0">
$$
\begin{align}
C_1 &amp;= 2&#92;&#92;
C_n &amp;= C_{n-1} + 2(n-1)
\end{align}
$$
</div>


<p>Already, we have that $C_4 = 14$, which is less than the required
$16$ for a Venn diagram (and according to this
<a href="http://www.combinatorics.org/Surveys/ds5/VennEJC.html">document</a>),
four circles form a <em>Euler diagram</em>, not a Venn diagram.</p>

<p>Clearly a triangular number sequence is hiding in there. The
recurrence equations above can be rewritten as</p>

<div markdown="0">
$$
\begin{align}
C_n &amp;= 2+\sum_{i=1}^{n}2(i-1)&#92;&#92;
&amp;= 2+2\sum_{i=0}^{n-1}i&#92;&#92;
&amp;= 2+2\frac{n(n-1)}{2}&#92;&#92;
&amp;= n^2-n+2
\end{align}
$$
</div>


<h3>Bounded Regions in the Plane</h3>

<p>Another one where my intuition for Geometry completely failed me. I
had a correct start, identifying that each new line intersecting the
existing ones at $k$ points could at best create $k-1$ new bounded
regions, but when I try to check this I fumbled.</p>

<p>Yet the reason it simple: a line intersecting 2 others will either
define a bounded triangle, or cut an existing bounded region in two.</p>

<p>The new bounded regions are not made of arbitrary triple of lines, but
are next to each others in the plane; really this is similar to the
fence problem. So a line cutting $k$ other lines will create at best
$k-1$ new bounded region. The equality is achieved if there are no
parallel lines, and all the intersection points are distinct.</p>

<p>As the book observes, each new line will also add two new unbounded
regions (the original problem had that a new line would create
$k+1$ new regions).</p>

<p>Once again, the triangular number sequence is not far:</p>

<div markdown="0">
$$
\begin{align}
B_i &amp; = 0 &amp;&amp\text{for $1 &#92;le i &#92;lt 3$}&#92;&#92;
B_3 &amp; = 1&#92;&#92;
B_n &amp; = B_{n-1} + n - 2&#92;&#92;
&amp; = \sum_{i=2}^{n} i-2&#92;&#92;
&amp; = \sum_{i=0}^{n-2} i&#92;&#92;
&amp; = \frac{(n-1)(n-2)}{2}&#92;&#92;
&amp; = S_{n-2}
\end{align}
$$
</div>


<h3>Invalid Recurrence</h3>

<p>The recurrence for $H$ has a number of problems. The one I found is
that it only establishes the induction hypothesis for going from an
even number to an odd one; nothing can be said for going from an odd
number to an even one (and indeed, the hypothesis breaks then).</p>

<p>As the book mentions, another problem is the base case, which is
incompatible with the induction hypothesis.</p>

<h3>Wrapping up</h3>

<p>I spent way too much time on these exercises, but most of it was on
exercises with a geometric nature: I could not find an algebraic
description of these problems that would be suitable for the kind of
treatment this chapter is about. But once I had the equations, I was
able to solve the problems without trouble.</p>

<p>Next, the homework exercises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Notes]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics-chapter-1-notes/"/>
    <updated>2012-01-06T13:52:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics-chapter-1-notes</id>
    <content type="html"><![CDATA[<p>For the first post of this hopefully long series, I have a few notes I
wrote down as I was reading Chapter 1. Nothing revolutionary, but it
gives me a chance to play with math notation.</p>

<!--more-->


<h1>Lines in the Plane</h1>

<p>I must admit that my memories of Geometry are far, far away (the
subject was not addressed at all when I studied Mathematics at
university, and I had no need for Geometry in my work since), so I
spent perhaps an unreasonable amount of time to check the validity of
the most elementary steps.</p>

<p>It goes without saying that the exercises of a Geometric nature are
particularly challenging (as if I needed the extra difficulty).</p>

<h2>Intersecting lines</h2>

<p>The notion that one line will add $k$ new regions if it intersects
other lines at $k-1$ points is due to the fact that $k-1$ distinct
lines define at least $k$ regions (more if they are not all parallel),
and one more line that intersects them all will divide these $k$
regions in two.</p>

<h1>Josephus Problem</h1>

<h2>$J(5 \cdot 2^m) = 2^{m+1} + 1$</h2>

<p>This is based on the fact that $J(10) = 5$ and $J(2n) = 2J(n) -1$.</p>

<p>By induction:</p>

<p><em>Base case</em>: it is true for $m = 1$: $J(5\cdot 2) = J(10) = 5 =
2^{1+1} + 1$</p>

<p><em>Recurrence</em>: assuming it is true for $m$,</p>

<div markdown="0">
$$
\begin{align}
J(5\cdot 2^{m+1}) &amp;= J(2(5\cdot 2^m))&#92;&#92;
&amp;= 2J(5\cdot 2^m) - 1&amp;&amp;\text{as $J(2n) = 2J(n) -1$}&#92;&#92;
&amp;= 2(2^{m+1}+1) - 1&amp;&amp;\text{induction hypothesis}&#92;&#92;
&amp;= 2\cdot 2^{m+1} + 2 - 1&#92;&#92;
&amp;= 2^{m+2} + 1
\end{align}
$$
</div>


<h2>$A(2^{m}+l) = 2^{m}$</h2>

<p>It took me a while to convince myself that the $l$ was not a problem
here. This can be seen by considering $l$ in binary notation, and
using $A(2n) = 2A(n)$ and $A(2n+1) = 2A(n)$ to remove the rightmost
bit.</p>

<p>That is, with $2^m > l = (b_{m-1}b_{m-2}\cdots b_{1}b_{0})_2$,we have:</p>

<div markdown="0">
$$
\begin{align}
A(2^{m}+l) &amp;= A(2^{m}+(b_{m-1}b_{m-2}\cdots b_{1}b_{0})_2)&#92;&#92;
&amp;= 2A(2^{m-1}+(b_{m-1}b_{m-2}\cdots b_{1})_2)&#92;&#92;
&amp;= 2^{2}A(2^{m-2}+(b_{m-1}b_{m-2}\cdots b_{2})_2)&#92;&#92;
&amp;= 2^{3}A(2^{m-3}+(b_{m-1}b_{m-2}\cdots b_{3})_2)&#92;&#92;
&amp;= \cdots
\end{align}
$$
</div>


<p>At each iteration, whether $b_i$ is $0$ or $1$, we can ignore it when
dividing by $2$. And as $2^m &lt; l$, it takes no more than $m$ steps
(removing the $m$ bits $b_0$ to $b_{m-1}$) to reduce $A(2^m+l)$ to
$2^mA(1) = 2^m$</p>

<h2>Radix-based Generalised Josephus Solution</h2>

<p>The equation 1.18:</p>

<p>$$f \left( ( b_m b_{m-1} \cdots b_1 b_0)_d \right) = \left( \alpha_{b_m} \beta_{b_{m-1}} \beta_{b_{m-2}} \cdots \beta_{b_1} \beta_{b_0} \right)_c$$</p>

<p>is so unnaturally smart and simple that I thought the proof must be
missing. But in fact it is indeed trivial, and just as the book
states, follows from the rewriting of the argument in base $d$, then
recurrence over $m$ (with $m$ the number of digits or the argument in
base $d$).</p>

<p>In the next post in this series, I will start the exercises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics/"/>
    <updated>2012-01-06T13:16:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics</id>
    <content type="html"><![CDATA[<p>Stephen Hawking once said that his editor had warned him that each
equation in his book would halve the readership.</p>

<p>With that in mind, and taking into account the number of readers of
this blog (or lack thereof), would I dare put any equations?</p>

<p>You better believe it!</p>

<!--more-->


<p>I just picked up my old copy of
<a href="http://en.wikipedia.org/wiki/Concrete_Mathematics">Concrete Mathematics</a>,
a book I have too long neglected. The ultimate goal, of course, is
slaying the
<a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming">Beast</a>,
which I should try to complete before Donald E. Knuth passes away.
While I wish him a very long life, long enough at least to complete
<a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming#Volumes">Volume 5</a>,
and better yet 6 and 7, I should not take his remarkable health as an
excuse to dither.</p>

<p>For the math notation, I use <a href="http://www.mathjax.org/">MathJax</a>, a
JavaScript library that can parse either
<a href="http://www.w3.org/Math/">MathMl</a>, or much better
<a href="http://www.latex-project.org/">LaTeX</a> (which is based on
<a href="http://www.math.upenn.edu/TeX.html">TeX</a>, another gift of Donald
E. Knuth to the world).</p>

<p>The setup for this blog is based on this
<a href="http://greglus.com/blog/2011/11/29/integrate-MathJax-LaTeX-and-MathML-Markup-in-Octopress/">post</a>.</p>

<p>The quality of rendering is variable: pretty good in Firefox, OK in
Safari or Chrome, and no idea in IE or Opera. Of course, it is not as
good as the output of LaTeX, but for the Web it is acceptable.</p>

<p>For instance, given the recurrence</p>

<div markdown="0">
$$
\begin{align}
f(j) &amp; = \alpha_j, &amp;&amp;\text{for $1 &#92;leq j &#92;lt  d$}&#92;&#92;
f(dn + j) &amp; = cf(n) + \beta_j, &amp;&amp;\text{for $0 &#92;leq j &#92;lt d$ and $n &#92;geq 1$}
\end{align}
$$
</div>


<p>then the solution is</p>

<p>$$f \left( ( b_m b_{m-1} \cdots b_1 b_0)_d \right) = \left( \alpha_{b_m} \beta_{b_{m-1}} \beta_{b_{m-2}} \cdots \beta_{b_1} \beta_{b_0} \right)_c$$</p>

<p>(refer to the book for explanations).</p>

<p>Isn&#8217;t this lovely?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Neo4j Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/30/seven-databases-in-seven-weeks-neo4j-day-3/"/>
    <updated>2011-12-30T21:15:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/30/seven-databases-in-seven-weeks-neo4j-day-3</id>
    <content type="html"><![CDATA[<p>Third, last and quite short day with Neo4j. Today on the menu:
transactions, replication, and backups.</p>

<p>Transactions are a standard feature of relational databases, but NOSQL
databases seem to consider them too costly (of the other databases in
the book, only HBase and Redis also support transactions, as far as I
can tell). Neo4j does support them, along with rollbacks.</p>

<p>Replication is Neo4j&#8217;s answer for High Availability and, to some
extent, Scaling. The latter is limited as Neo4j does not partition the
data, so everything has to fit in each computer in the cluster.</p>

<p>Finally, backups are exactly what you would expect them to be. Neo4J
offers both full and incremental backups, which update a previous
backup.</p>

<!--more-->


<h3>Transactions</h3>

<p>I cannot comment much on transactions, as I could not use them: the
Gremlin shell from the Web Admin console could not find the required
enumeration (which I imported, though), while the Gremlin standalone
shell was giving me strange errors when I tried to import the relevant
classes.</p>

<p>I suppose pure Java would be more reliable, either as standalone code
or plugin, but I did not explore that possibility.</p>

<h3>High-Availability</h3>

<p>High-availability is achieved by deploying and linking together
several instances of Neo4j. The setup is somewhat tedious, as there
are additional processes to configure and run (the coordinators), and
four different configuration files to edit. Really, this is the kind
of things you&#8217;d wish <a href="http://whirr.apache.org/">Apache Whirr</a> would do
for you.</p>

<p>But if you want to do it manually, you should follow the
<a href="http://docs.neo4j.org/chunked/stable/ha-setup-tutorial.HTML">online documentation</a>
rather than the book version (at least in beta version 2.0): the book
use the property <code>ha.zoo_keeper_servers</code> in the <code>neo4j.properties</code>
configuration file, when the correct property is
<code>ha.coordinators</code>. What is worse is that it will look like it works,
until you try to write to a slave over the ReST API, which will fail
with an exception. Writes to the master would also not be pulled by
the slaves. Using the right property name fixes these problems.</p>

<p>Once set up, the cluster will have one master and several slaves. The
master contains the authoritative version of the data. The book
recommends to always write to slaves, as they have to push any update
to the master before completing the update, meaning you have a
guaranteed replication of your data. However, what the book does not
explain is how to figure out which server is slave, or even whether
the list of servers in the cluster can be discovered&#8230;.</p>

<p>Actually, it is possible to have some idea of which server is the
master by querying any server with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -H "Content-Type:application/json" -d '["org.neo4j:*"]' http://localhost:7471/db/managerver/jmx/query</span></code></pre></td></tr></table></div></figure>


<p>(assuming one of the server is listening to port <code>7471</code>). A sample
reply is shown (only partially, as it is very long) one the
<a href="http://docs.neo4j.org/chunked/snapshot/ha-setup-tutorial.html">HA setup tutorial</a>. But
the actual address of each server is not shown, and I could not find
any way to get the address property to be properly filled.</p>

<p>So the proper way to use such a cluster is probably to use the
<a href="http://haproxy.1wt.eu/">HAProxy</a>, as explained in
<a href="http://docs.neo4j.org/chunked/snapshot/ha-haproxy.html">Neo4j HA documentation</a>. It
can be configured to differentiate between master and slaves, and to
restrict connections to slaves (keeping the list updated with a
check). It can also split the requests by some specific parameter (for
instance, the user id), and direct the requests the same server for a
given value of the parameter. While Neo4j does not shard the data
itself, this mechanism can be used to shard the data cache (what must
be loaded in memory).</p>

<h3>Backups</h3>

<p>Neo4j support remote, full or incremental backups. Incremental backups
are properly understood as update to the previous backup (either full
or incremental), and are therefore much faster.</p>

<p>This is a good feature, and should be used often. But as I&#8217;m just
playing, and the notion of backup does not lend itself to exploration,
I just looked at them briefly.</p>

<h2>Exercises</h2>

<h3>Neo4j licensing guide</h3>

<p>The <a href="http://neo4j.org/licensing-guide/">guide</a> is fortunately quite
short.</p>

<h3>Read-only slaves</h3>

<p>This seems to be a description of the original HA feature in Neo4j,
but as far as I can tell it does not exist anymore. In fact, there is
an
<a href="https://github.com/neo4j/enterprise/commit/480256bfff036784dc82897d2348a16e3fbf6c03#ha/src/docs/dev/operation.txt">update</a>
to the official documentation to remove the mention of read-only
slave.</p>

<p>There used to be a Java class to create a server as read-only slave,
as documented
<a href="http://wiki.neo4j.org/index.php?title=Online_Backup_HA&amp;redirect=no#Starting_a_read-only_slave">here</a>,
but it no longer exists either.</p>

<h3>Maximum number of nodes supported</h3>

<p><a href="http://docs.neo4j.org/chunked/stable/questions.html#id474370">34.4 billion nodes</a>.</p>

<h3>Replication across three physical servers</h3>

<p>As I already <a href="http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2/">explained</a> how to setup a cluster of EC2 virtual machines
for Riak, I will go skip all the details.</p>

<p>I launched four instances: one will be the HAProxy server, the
remaining three the Neo4j servers.</p>

<h4>Security Setup</h4>

<p>All the rules but the first one are internal (i.e. the source is the
name of the security group, which should be specific to the cluster).</p>

<ul>
<li>22 (SSH) - source <code>0.0.0.0/0</code></li>
<li>2181: coordinator client port</li>
<li>2888: quorum election port</li>
<li>3888: leader election port</li>
<li>6001: inter cluster communication port</li>
<li>7474: web interface for the Neo4j servers</li>
<li>8080: admin interface for HAProxy</li>
<li>80: web interface for the proxy</li>
</ul>


<p>Neo4j does not need ranges, unlike Riak.</p>

<h4>Instance setups</h4>

<p>I connect to each of the Neo4j server, and download the Enterprise
edition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://dist.neo4j.org/neo4j-enterprise-1.5-unix.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>First step is to configure the coordinators. I edit the
<code>conf/coord.cfg</code> file and replace the server.1 property with the block</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server.1=10.202.90.131:2888:3888    
</span><span class='line'>server.2=10.202.81.171:2888:3888    
</span><span class='line'>server.3=10.195.78.222:2888:3888</span></code></pre></td></tr></table></div></figure>


<p>(I got the IP addresses by using the <code>ifconfig</code> command on each
instance). I also update the <code>data/coordinator/myid</code> of each instance
with own number (1 to 3).</p>

<p>I then modified each <code>conf/neo4j.properties</code>, setting each to its own
<code>ha.server_id</code>, and setting the <code>ha.coordinators</code> to
<code>10.202.90.131:2181,10.202.81.171:2181,10.195.78.222:2181</code>. I also
changed the <code>ha.server</code> to use the <code>eth0</code> IP address rather than <code>localhost</code>.</p>

<p>Finally, I modified each <code>conf/neo4j-server.properties</code>:</p>

<ul>
<li>the web server needs to listen to the <code>eth0</code> IP address rather than
<code>localhost</code> (for instance, <code>org.neo4j.server.webserver.address=10.202.90.131</code>);</li>
<li>the server needs to be set to HA mode:
<code>org.neo4j.server.database.mode=HA</code></li>
</ul>


<p>Surprisingly enough, the three servers did start and were configured properly&#8230;</p>

<p>I checked the setup with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -H "Content-Type:application/json" -d '["org.neo4j:*"]'
</span><span class='line'>http://10.202.90.131:7474/db/manage/server/jmx/query</span></code></pre></td></tr></table></div></figure>


<p>I looked for the string <code>InstancesInCluster</code>, and made sure there were
three known servers.</p>

<p>Finally I pushed something into the second (slave) server using</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X POST http://10.202.81.171:7474/db/data/node \
</span><span class='line'>-H "Content-Type: appliction/json" \
</span><span class='line'>-d '{"name": "P.G. Wodehouse", "genre": "British Humour"}'</span></code></pre></td></tr></table></div></figure>


<p>then tried to retrieve it from the third (slave) server with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://10.195.78.222:7474/db/data/node/1
</span><span class='line'>{
</span><span class='line'>  "outgoing_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/out",
</span><span class='line'>  "data" : {
</span><span class='line'>    "genre" : "British Humour",
</span><span class='line'>    "name" : "P.G. Wodehouse"
</span><span class='line'>  },
</span><span class='line'>  "traverse" : "http://10.195.78.222:7474/db/data/node/1/traverse/{returnType}",
</span><span class='line'>  "all_typed_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/all/{-list|&|types}",
</span><span class='line'>  "property" : "http://10.195.78.222:7474/db/data/node/1/properties/{key}",
</span><span class='line'>  "self" : "http://10.195.78.222:7474/db/data/node/1",
</span><span class='line'>  "properties" : "http://10.195.78.222:7474/db/data/node/1/properties",
</span><span class='line'>  "outgoing_typed_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/out/{-list|&|types}",
</span><span class='line'>  "incoming_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/in",
</span><span class='line'>  "extensions" : {
</span><span class='line'>  },
</span><span class='line'>  "create_relationship" : "http://10.195.78.222:7474/db/data/node/1/relationships",
</span><span class='line'>  "paged_traverse" : "http://10.195.78.222:7474/db/data/node/1/paged/traverse/{returnType}{?pageSize,leaseTime}",
</span><span class='line'>  "all_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/all",
</span><span class='line'>  "incoming_typed_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/in/{-list|&|types}"</span></code></pre></td></tr></table></div></figure>


<p>So far so good&#8230;</p>

<h3>Load-balancer</h3>

<p>Well, <a href="http://haproxy.1wt.eu">HAproxy</a> seems a good choice, so I&#8217;ll go with that.</p>

<p>The
<a href="http://docs.neo4j.org/chunked/snapshot/ha-haproxy.html">documentation</a>
proposes to restrict access to slaves using a &#8220;small extension&#8221;. This
is in fact a piece of Java code that can be downloaded from
<a href="https://github.com/dmontag/neo4j-hastatus-extension">Github</a>.</p>

<p>The compiled jar should be copied to the <code>lib</code> directory of each
instance, and the <code>conf/neo4j-server.properties</code> configuration file
updated to contain the line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.neo4j.server.thirdparty_jaxrs_classes=org.neo4j.server.hastatus=/hastatus</span></code></pre></td></tr></table></div></figure>


<p>as documented on the page above.</p>

<h4>Testing Locally</h4>

<p>As a first test, I deployed HAProxy on my own machine, using this
configuration file:</p>

<figure class='code'><figcaption><span> (haproxy_local.cfg)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/haproxy_local.cfg'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">global</span>
</span><span class='line'><span class="err">    daemon</span>
</span><span class='line'><span class="err">    maxconn 256</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">defaults</span>
</span><span class='line'><span class="err">    mode http</span>
</span><span class='line'><span class="err">    timeout connect 5000ms</span>
</span><span class='line'><span class="err">    timeout client 50000ms</span>
</span><span class='line'><span class="err">    timeout server 50000ms</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">frontend http-in</span>
</span><span class='line'><span class="err">    bind *:7000</span>
</span><span class='line'><span class="err">    default_backend neo4j-slaves</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">backend neo4j-slaves</span>
</span><span class='line'><span class="err">    option httpchk GET /hastatus/slave</span>
</span><span class='line'><span class="err">    server s1 localhost:7471 maxconn 32 check</span>
</span><span class='line'><span class="err">    server s2 localhost:7472 maxconn 32 check</span>
</span><span class='line'><span class="err">    server s3 localhost:7473 maxconn 32 check</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">listen admin</span>
</span><span class='line'><span class="err">    bind *:8080</span>
</span><span class='line'><span class="err">    stats enable</span>
</span></code></pre></td></tr></table></div></figure>


<p>I had installed HAProxy with
<a href="http://mxcl.github.com/homebrew/">Homebrew</a>. The config above does
not bind to port <code>*:80</code>, so I can run it without root privileges:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/sbin/haproxy -f haproxy_local.cfg</span></code></pre></td></tr></table></div></figure>


<p>Once up, I opened a browser on
<a href="http://localhost:8080/haproxy?stats">HAProxy stat page</a> (it is not
JSON, you really need a browser), to check that two instances of Neo4j
were configured as slaves and available.</p>

<p>Finally, I checked a Gremlin script with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST
</span><span class='line'>http://localhost:7000/db/data/ext/GremlinPlugin/graphdb/execute_script
</span><span class='line'>-H "content-type:application/json" -d '{"script":"g.V.name"}'
</span><span class='line'>[ "null", "null", "null", "null", "P.G. Wodehouse", "null", "P.G. Wodehouse", "P.G. Wodehouse" ]</span></code></pre></td></tr></table></div></figure>


<p>(the <code>7000</code> is the HAProxy port, not any of the Neo4j ports). I had a
few P.G. Wodehouse nodes I inserted when I was testing writes to slaves.</p>

<p>Ok, this is ready to be tested on the AWS cluster.</p>

<h4>Deploying on the cloud</h4>

<p>I used the small cluster deployed in the previous exercise. I just
copied the Neo4j HAStatus extension jar to each machine (in the <code>lib</code>
directory), and changed the <code>conf/neo4j-server.properties</code> exactly as
above.</p>

<p>I quickly checked that the extension was installed with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://10.202.90.131:7474/hastatus/master
</span><span class='line'>curl http://10.202.81.171:7474/hastatus/slave
</span><span class='line'>curl http://10.195.78.222:7474/hastatus/slave</span></code></pre></td></tr></table></div></figure>


<p>(each is supposed to return nothing. If there&#8217;s a problem, these
commands will return an error page).</p>

<p>Everything looks fine. Time to set up the HAProxy machine.</p>

<p>Once again, I followed the instructions from the
<a href="http://docs.neo4j.org/chunked/stable/ha-haproxy.html">Neo4j documentation</a>:
first I installed the &#8220;Development Tools&#8221;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y groupinstall 'Development Tools'</span></code></pre></td></tr></table></div></figure>


<p>This step is very fast because they all are stored in the Amazon
Cloud.</p>

<p>I retrieved the HAProxy code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.18.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>To build it, I used the command <code>make TARGET=26</code> (which means build
for a recent version of Linux).</p>

<p>I did not copy the executable, as I will run it without root
privileges anyway.</p>

<p>I created a file <code>haproxy.cfg</code> that contains:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global
</span><span class='line'>    daemon
</span><span class='line'>    maxconn 256
</span><span class='line'>
</span><span class='line'>defaults
</span><span class='line'>    mode http
</span><span class='line'>    timeout connect 5000ms
</span><span class='line'>    timeout client 50000ms
</span><span class='line'>    timeout server 50000ms
</span><span class='line'>
</span><span class='line'>frontend http-in
</span><span class='line'>    bind *:7000
</span><span class='line'>    default_backend neo4j-slaves
</span><span class='line'>
</span><span class='line'>backend neo4j-slaves
</span><span class='line'>    option httpchk GET /hastatus/slave
</span><span class='line'>    server s1 10.202.90.131:7474 maxconn 32 check
</span><span class='line'>    server s2 10.202.81.171:7474 maxconn 32 check
</span><span class='line'>    server s3 10.195.78.222:7474 maxconn 32 check
</span><span class='line'> 
</span><span class='line'>listen admin
</span><span class='line'>    bind *:8080
</span><span class='line'>    stats enable</span></code></pre></td></tr></table></div></figure>


<p>which is essentially the same file as the file <code>haproxy_local.cfg</code>
above.</p>

<p>I established SSH tunnels to ports <code>7000</code> and <code>8080</code>, checked the
status of the proxy on <code>http://localhost:8080/haproxy?stats</code> (I had
made a mistake to one of the IP address, so I fixed it and restarted
the proxy).</p>

<p>Finally, I was able to run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST http://localhost:7000/db/data/ext/GremlinPlugin/graphdb/execute_script \
</span><span class='line'>-H "content-type:application/json" -d '{"script":"g.V.name"}'
</span><span class='line'>[ "null", "P.G. Wodehouse" ]</span></code></pre></td></tr></table></div></figure>


<p>And all was good.</p>

<h2>Wrapping up Neo4j</h2>

<p>This is another database I had to fight all along the way. The
book, the available documentation, and the actual behaviour of the
database overlap only partially. Figuring out what is actually
possible and how to achieve it was harder than for any other databases
in the book.</p>

<p>One thing that was especially irritating is the error handling of the
Gremlin shell: a syntax error such as a missing closing quote renders
the shell unusable: it keeps complaining about the syntax error, but
offers no way to actually correct it. And I could find no way to
reset the shell, except by restarting the whole server&#8230;</p>

<p>This, and the fact that both the embedded interpreter or the
standalone shell are unstable in their own different ways (not to
mention slightly incompatible) makes Gremlin useless. But the
alternatives, Cipher or Java, are not really usable either: Cipher is
too limited, Java too verbose and its syntax ill suited.</p>

<p>This said, Neo4j occupies a fairly specific niche which does not have
many alternatives. Let&#8217;s hope the ecosystem stabilises into
something more coherent and stable.</p>

<h2>The other databases</h2>

<p>It seems the Redis might be available soon, but CouchDB is not there
yet. So I will probably switch to a different book for the time being.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Neo4j Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/29/seven-databases-in-seven-weeks-neo4j-day-2/"/>
    <updated>2011-12-29T09:17:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/29/seven-databases-in-seven-weeks-neo4j-day-2</id>
    <content type="html"><![CDATA[<p>Today we play further with Neo4j, exploring the ReST API, indexes, and
algorithms in various languages.</p>

<p>The ReST API is always available, although not the easiest thing to
work with. Besides what the book covers, I also learned how to extend
it, and how to bypass it for large loads.</p>

<p>Indexing can be manual, as the book shows, or automatic (although
the
<a href="http://docs.neo4j.org/chunked/snapshot/auto-indexing.html">documentation</a>
warns this is still an experimental feature).</p>

<p>Finally, the algorithms are mostly provided by an external library,
<a href="http://jung.sourceforge.net/">JUNG</a>, so its use require direct access
to the data, bypassing the server.</p>

<!--more-->


<h3>Creating an index on relationship</h3>

<p>As the index is of type <code>exact</code>, there is no need to create it first
(although it is
<a href="http://docs.neo4j.org/chunked/snapshot/rest-api-indexes.html#rest-api-create-node-index">possible</a>). Just
inserting data in the index will do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST http://localhost:7474/db/data/index/relationship/published \
</span><span class='line'>-H "Content-Type: application/json" \
</span><span class='line'>-d '{ "uri" : "http://localhost:7474/db/data/relationship/0", \
</span><span class='line'>"key" : "date", "value" : "1916-11-28" }'</span></code></pre></td></tr></table></div></figure>


<h3>About the ReST API</h3>

<p>Clearly this is not how one would want to program. I copied the
<a href="http://media.pragprog.com/titles/rwdata/code/neo4j/importer.rb"><code>importer.rb</code></a>
code from the book (instead of just using a downloaded version), and
ran it for hours before finding a bug in the data to create
indexes&#8230; Running it again with this bug fixed made it much faster
(as actors were reused instead of being duplicated).</p>

<p>There is a higher level API, <a href="http://neo4j.rubyforge.org/">Neo4j.rb</a>,
which runs on JRuby (so it does not use the ReST API). It should be
noted that this is not really a driver, but a library to manage a
Neo4j database directly in Ruby. Still, with it, it is possible to
create the database that will be used by a server. There are other
alternatives (the Gremlin console, for instance), but for Ruby it
seems to be one of the most advanced, and is still being improved.</p>

<p>There is also a ReST API wrapper called
<a href="https://github.com/maxdemarzi/neography">neography</a>, but as I&#8217;m
trying to save time I&#8217;ll go with Neo4j.rb.</p>

<p>To use this API you first need to clone the Git repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/andreasronge/neo4j.git</span></code></pre></td></tr></table></div></figure>


<p>In the <code>neo4j</code> directory, build then install the gem (making sure
the default Ruby is JRuby):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem build neo4j.gemspec
</span><span class='line'>  Successfully built RubyGem
</span><span class='line'>  Name: neo4j
</span><span class='line'>  Version: 1.3.1
</span><span class='line'>  File: neo4j-1.3.1-java.gem
</span><span class='line'>$ gem install neo4j-1.3.1-java.gem
</span><span class='line'>... (lot's of output elided)</span></code></pre></td></tr></table></div></figure>


<p>As I said above, it is possible to use it to feed data into a
database, but it should not be used while the server is running. I
used it to create the movie network, as it was significantly faster
than the book Ruby script.</p>

<p>To do so, I first rewrite the import script to use the <code>neo4j</code> gem. I
am also using the
<a href="http://neo4j.rubyforge.org/guides/batch_insert.html"><code>Neo4j::Batch::Inserter</code></a>
for extra performance; the resulting code is less readable, but not
significantly so. The script is mostly the same size as the original
one, but much easier to understand (if you know the <code>neo4j</code> gem).</p>

<figure class='code'><figcaption><span> (importer_driver.rb)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/importer_driver.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{rubygems neo4j}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="nb">require</span> <span class="n">r</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Movie</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">NodeMixin</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">index</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Actor</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">NodeMixin</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">index</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">has_n</span><span class="p">(</span><span class="ss">:acted_in</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="no">Movie</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">create_node</span><span class="p">({</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">},</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>    <span class="n">inserter</span><span class="o">.</span><span class="n">index_flush</span><span class="p">(</span><span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;begin processing...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Neo4j</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:storage_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;NEO4J_HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/data/graph.db&quot;</span>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">inserter</span> <span class="o">=</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">Batch</span><span class="o">::</span><span class="no">Inserter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">actor</span><span class="p">,</span> <span class="n">movie</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">next</span> <span class="k">if</span> <span class="n">actor</span><span class="o">.</span><span class="n">empty?</span> <span class="o">||</span> <span class="n">movie</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">actor_node</span> <span class="o">=</span> <span class="n">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="n">actor</span><span class="p">,</span> <span class="no">Actor</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movie_node</span> <span class="o">=</span> <span class="n">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="n">movie</span><span class="p">,</span> <span class="no">Movie</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">inserter</span><span class="o">.</span><span class="n">create_rel</span><span class="p">(</span><span class="no">Actor</span><span class="o">.</span><span class="n">acted_in</span><span class="p">,</span> <span class="n">actor_node</span><span class="p">,</span> <span class="n">movie_node</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;  </span><span class="si">#{</span><span class="n">count</span><span class="si">}</span><span class="s2"> relationships loaded&quot;</span> <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;done!&quot;</span>
</span><span class='line'><span class="n">inserter</span><span class="o">.</span><span class="n">shutdown</span>
</span></code></pre></td></tr></table></div></figure>


<p>I first shut down the Neo4j server. I defined a
<code>NEO4J_HOME</code> environment variable as the root of the Neo4j instance,
and cleared the content of <code>$NEO4J_HOME/data/graph.db</code> with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf $NEO4J_HOME/data/graph.db/*</span></code></pre></td></tr></table></div></figure>


<p>While not strictly necessary, this step helps ensure that the database
is always in a known (i.e. empty) state each time.</p>

<p>Finally I ran the script with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jruby importer_driver.rb performance.tsv</span></code></pre></td></tr></table></div></figure>


<p>The whole import took a little above 1 hour on my not really powerful
macBook Air. The original script never finished, even after running a
few hours.</p>

<p>I also found that index creation is the main cost: my first attempt at
loading data did not use indexes at all: the whole file was loaded in
less than 3 minutes (but of course the resulting graph was
unusable).</p>

<p>The script is not complete; it should certainly handle exceptions and
close the database properly. But for an initial load it does the job.</p>

<p>After it finished, I just restarted the server.</p>

<p>Note: I strongly suggest backing up the <code>data/graph.db</code> directory just
after the initial load (and before starting the server). I had a crash
while running the Kevin Bacon queries, and Neo4j unhelpfully lost the
property data file, forcing me to import again&#8230;</p>

<p>A data corruption during a read only operation does not inspire
confidence&#8230;</p>

<h3>Indexes</h3>

<p>Once thing I had not properly understood, and which caused me some
problems as I was trying to learn how to use the driver, is that
all indexes use Lucene. They are either <code>exact</code> or <code>fulltext</code>, and can
be queried as shown here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:7474/db/data/index/node/
</span><span class='line'>{
</span><span class='line'>  "movies" : {
</span><span class='line'>    "template" : "http://localhost:7474/db/data/index/node/movies/{key}/{value}",
</span><span class='line'>    "provider" : "lucene",
</span><span class='line'>    "type" : "exact"
</span><span class='line'>  },
</span><span class='line'>  "actors" : {
</span><span class='line'>    "template" : "http://localhost:7474/db/data/index/node/actors/{key}/{value}",
</span><span class='line'>    "provider" : "lucene",
</span><span class='line'>    "type" : "exact"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>So the fact that the driver only supports Lucene indexes is not a
limitation. There is nothing else (although presumably there could be).</p>

<h3>Extending Neo4j</h3>

<p>As I found on this
<a href="http://blog.neo4j.org/2010/12/neo4j-12-m06-is-out-better-rest.html">post</a>,
it is fairly easy to extend the ReST API with arbitrary
code. Deploying the code is a simple as copying the jar at the right
location.</p>

<p>The
<a href="http://docs.neo4j.org/chunked/snapshot/server-plugins.html">official documentation</a>
is mostly an updated version of the post above.</p>

<p>I claimed
<a href="http://blog.wakatta.jp/blog/2011/12/28/seven-databases-in-seven-weeks-neo4j-day-1/">yesterday</a>
that it was impossible to the ReST API directly to list just the names
of all the nodes.</p>

<p>Of course, today I know I could pass a Gremlin expression through
ReST, and get the same result as in the console. But that could be
considered cheating.</p>

<p>The alternative is to use extend the ReST with a plugin, as I show
here.</p>

<p>As always, the use of Maven is recommended. My <code>pom.xml</code> loads the
<code>server-api</code> for Neo4j:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/list_names/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>listNames<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>      <span class="nt">&lt;neo4j.version&gt;</span>1.5<span class="nt">&lt;/neo4j.version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.neo4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>server-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>${neo4j.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Java code is simplified by the use of annotations. The code
returns an iterator that extract the names of the underlying node
iterator:</p>

<figure class='code'><figcaption><span> (ListNames.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/list_names/ListNames.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.GraphDatabaseService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.Node</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.Description</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.Name</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.PluginTarget</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.ServerPlugin</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.Source</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Description</span><span class="o">(</span><span class="s">&quot;An extension to list all node names&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListNames</span> <span class="kd">extends</span> <span class="n">ServerPlugin</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Name</span><span class="o">(</span><span class="s">&quot;list_all_names&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Description</span><span class="o">(</span><span class="s">&quot;List all the node names&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@PluginTarget</span><span class="o">(</span><span class="n">GraphDatabaseService</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">getAllNames</span><span class="o">(</span><span class="nd">@Source</span> <span class="n">GraphDatabaseService</span> <span class="n">graphDb</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">nodeIterator</span> <span class="o">=</span> <span class="n">graphDb</span><span class="o">.</span><span class="na">getAllNodes</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="k">new</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="nd">@Override</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// do nothing </span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="nd">@Override</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="n">String</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                          <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">nodeIterator</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>                      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                          <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>                      <span class="o">}</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="nd">@Override</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                      <span class="k">return</span> <span class="n">nodeIterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">};</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, it is important to have add a file
<code>META-INF/services/org.neo4j.server.plugins.ServerPlugin</code> with the
complete name of the new plugins (in this case, just one):</p>

<figure class='code'><figcaption><span> (org.neo4j.server.plugins.ServerPlugin)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/list_names/org.neo4j.server.plugins.ServerPlugin'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">jp.wakatta.ListNames</span>
</span></code></pre></td></tr></table></div></figure>


<p>The jar should be copied to the <code>plugins</code> directory of the Neo4j
instance, and Neo4j restarted.</p>

<p>It is possible to test the correct deployment of the plugin using the
ReST API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl  http://localhost:7474/db/data/
</span><span class='line'>{
</span><span class='line'>  "relationship_index" : "http://localhost:7474/db/data/index/relationship",
</span><span class='line'>  "node" : "http://localhost:7474/db/data/node",
</span><span class='line'>  "relationship_types" : "http://localhost:7474/db/data/relationship/types",
</span><span class='line'>  "neo4j_version" : "1.5",
</span><span class='line'>  "batch" : "http://localhost:7474/db/data/batch",
</span><span class='line'>  "extensions_info" : "http://localhost:7474/db/data/ext",
</span><span class='line'>  "node_index" : "http://localhost:7474/db/data/index/node",
</span><span class='line'>  "reference_node" : "http://localhost:7474/db/data/node/0",
</span><span class='line'>  "extensions" : {
</span><span class='line'>    "CypherPlugin" : {
</span><span class='line'>      "execute_query" : "http://localhost:7474/db/data/ext/CypherPlugin/graphdb/execute_query"
</span><span class='line'>    },
</span><span class='line'>    "GremlinPlugin" : {
</span><span class='line'>      "execute_script" : "http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script"
</span><span class='line'>    },
</span><span class='line'>    "ListNames" : {
</span><span class='line'>      "list_all_names" : "http://localhost:7474/db/data/ext/ListNames/graphdb/list_all_names"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The query returns the list of each extension, as well as the URL to
call it. Using the <code>GET</code> method, the extension is self documenting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:7474/db/data/ext/ListNames/grphdb/list_all_names
</span><span class='line'>{
</span><span class='line'>  "extends" : "graphdb",
</span><span class='line'>  "description" : "List all the node names",
</span><span class='line'>  "name" : "list_all_names",
</span><span class='line'>  "parameters" : [ ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Finally, it can be invoked with the <code>POST</code> method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST http://localhost:7474/db/data/ext/ListNames/grphdb/list_all_names
</span><span class='line'>[ "", "actor", "film", "Leif Andrée", "7X - This is Our Kids ", ...</span></code></pre></td></tr></table></div></figure>


<h2>Of course Kevin Bacon</h2>

<p>This section is about the code of the book version beta 2.0.</p>

<p>I had trouble to get the code to work in Neo4j 1.5. Here I document
the alternative code I came up with and used.</p>

<h3>Defining steps in Gremlin</h3>

<p>I could not get the book code to define the <code>costars</code> step to work: it
seems <code>outV</code> does not accept a filter expression as argument.</p>

<p>Even with the addition of a dedicated <code>filter</code> step, I could not
filter properly. Instead, I started from scratch, using the
<a href="https://github.com/tinkerpop/gremlin/wiki/User-Defined-Steps">Gremlin wiki</a>
code as a basis:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Gremlin.defineStep('costars',
</span><span class='line'>                   [Vertex, Pipe],
</span><span class='line'>                   {_().sideEffect{start = it}.
</span><span class='line'>                       outE('Movie#acted_in').inV.inE('Movie#acted_in').
</span><span class='line'>                       outV.filter{!start.equals(it)}.uniqueObject()})</span></code></pre></td></tr></table></div></figure>


<p>Note the use of <code>sideEffect</code> to introduce the variable <code>start</code> into
the expression. Not doing this (and instead following the book code),
the filter was not working at all (i.e. the start node was
still part of the result). Also I have a different type for the
relationship (<code>Movie#acted_in</code>) as it was generated by Neo4j.rb.</p>

<h3>From Elvis to Kevin Bacon</h3>

<p>The <code>loop</code> step does not emit intermediate node by default, so while
the query in the book is accepted, it does not return any result
because the actual degree of separation between Elvis and Kevin Bacon
is just 3.</p>

<p>The latest version of Gremlin extends the basic <code>loop</code> pattern to emit
intermediate nodes if requested, but this is not possible with the
version embedded in Neo4j 1.5 admin console.</p>

<p>The standalone Gremlin shell version 1.3 is a bit too old (it links
against Neo4j version 1.5.M01, whose database format is not compatible
with version 1.5&#8217;s format). So I tried the current head of the Git
<a href="https://github.com/tinkerpop/gremlin">repository</a>.</p>

<p>To build it you will need to download half the Internet, so be
patient.</p>

<p>The build command is <code>mvn install</code> (the install step will make the
scripts to launch the console).</p>

<p>Once started, you can load the database with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g = new Neo4jGraph('/users/x/neo4j-enterprise-1.5/data/graph.db')</span></code></pre></td></tr></table></div></figure>


<p>The code <code>costars</code> step that was working in the console no longer does
in the shell. I had to replace the <code>uniqueObject()</code> step with
<code>dedup()</code>, and make sure
everything is on a single line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Gremlin.defineStep('costars', [Vertex, Pipe], {_().sideEffect{start = it}.outE('Movie#acted_in').inV.inE('Movie#acted_in').outV.filter{!start.equals(it)}.dedup()})</span></code></pre></td></tr></table></div></figure>


<p>Finally, the command to find nodes by index has to explicitly use the
index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bacon = g.idx('Actor_exact')[['name':'Kevin Bacon']].next()
</span><span class='line'>elvis = g.idx('Actor_exact')[['name':'Elvis Presley']].next()</span></code></pre></td></tr></table></div></figure>


<p>(if you created the data using the original import command, the index
name is <code>actors</code>).</p>

<p>As frustrating as it all is, the end result is that the <code>loop</code> step
can now be used as needed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>elvis.costars.loop(1){ it.loops &lt; 4}{true}.filter{it.equals(bacon)}.paths.next().name.grep{it}</span></code></pre></td></tr></table></div></figure>


<p>I also had to change the query once more to use <code>next</code> instead of <code>&gt;&gt; 1</code> as
in the book, as that does not work in the latest version of Gremlin
either.</p>

<h3>Random walk</h3>

<p>Once again, I had to change the code from the book to get it to work:
adding a dedicated <code>filter</code> step did the trick:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bacon.outE.filter{ rand.nextDouble() &lt;= 0.01 }.inV.inE.outV.loop(5){ it.loops &lt; 3 }.count()</span></code></pre></td></tr></table></div></figure>


<p>The <code>loop</code> argument does not change, as the filter expression already
counted as a step in the book version.</p>

<h3>Centrality</h3>

<p>I had a small problem with the book code: the query is not run if the
command is followed by <code>; ''</code> (which the book uses to prevent the
display of the results). Just running this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role_count = [:]; count = 0
</span><span class='line'>g.V.in.groupCount(role_count).loop(2){ count++ &lt; 1000 }
</span><span class='line'>role_count.sort{a,b -&gt; a.value &lt;=&gt; b.value}</span></code></pre></td></tr></table></div></figure>


<p>works. Why on earth would such a small change have such an impact is
beyond me. Now I&#8217;m scared of Groovy.</p>

<h3>JUNG Algorithms</h3>

<p>This time the book code was working as intended, but I found that
there is an even more central actor than Donald Sutherland: Bobby
Vitale&#8230;</p>

<h2>Exercises</h2>

<h3>Neo4j ReST API</h3>

<p>The documentation is <a href="http://docs.neo4j.org/chunked/stable/rest-api.html">here</a>.</p>

<h3>Binding or ReST API</h3>

<p>See above my useo Neo4j.rb.</p>

<h3>API for the JUNG project</h3>

<p>The API is <a href="http://jung.sourceforge.net/doc/api/index.html">here</a>.</p>

<h3>Path-finding as a step</h3>

<p>I am using the Gremlin shell, rather than the Neo4j console.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Gremlin.defineStep('path_to', [Vertex, Pipe], {Vertex to, Integer max -&gt; _().costars.loop(1){ it.loops &lt; max }{true}.filter{it.equals(to)}})     </span></code></pre></td></tr></table></div></figure>


<p>I used the possibility to pass arguments to the closure to introduce
both the target node and the loop limit as parameters. Otherwise the
code is identical to the one I was using above. With this, the
path from Elvis to Kevin Bacon becomes</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gremlin&gt; elvis.path_to3(bacon, 4).paths.next().name.grep{it}
</span><span class='line'>==&gt;Elvis Presley    
</span><span class='line'>==&gt;Frankie and Johnny
</span><span class='line'>==&gt;Nathan Lane
</span><span class='line'>==&gt;He Said, She Said
</span><span class='line'>==&gt;Kevin Bacon</span></code></pre></td></tr></table></div></figure>


<h3>A family graph</h3>

<p>I used Ruby (with the Neo4j.rb library). The code first defines a
<code>family</code> data structure that maps each family member to other members
keyed by their relationships.</p>

<p>The code first iterate over the family members and inserts them; it
then goes over the <code>family</code> structure a second time to insert the
relationships.</p>

<figure class='code'><figcaption><span> (family.rb)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/family.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{rubygems neo4j}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="nb">require</span> <span class="n">r</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">NodeMixin</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">index</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">create_node</span><span class="p">({</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">},</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>    <span class="n">inserter</span><span class="o">.</span><span class="n">index_flush</span><span class="p">(</span><span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">family</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;Alice&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibbling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Walter&#39;</span><span class="o">]</span><span class="p">,</span><span class="ss">:child_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="p">,</span> <span class="s1">&#39;Peggy&#39;</span><span class="o">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Bob&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibbling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Eve&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:child_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="p">,</span> <span class="s1">&#39;Peggy&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Carol&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibbling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Alice&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:child_od</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="p">,</span> <span class="s1">&#39;Peggy&#39;</span><span class="o">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Trent&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Peggy&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:parent_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Peggy&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:parent_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Eve&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Bob&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Walter&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:sibling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Dave&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Dave&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Walter&#39;</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;begin processing...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Neo4j</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:storage_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;NEO4J_HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/data/graph.db&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">inserter</span> <span class="o">=</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">Batch</span><span class="o">::</span><span class="no">Inserter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">family</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span>
</span><span class='line'>  <span class="n">inserter</span><span class="o">.</span><span class="n">create_node</span><span class="p">({</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="n">k</span><span class="p">},</span> <span class="no">Person</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">inserter</span><span class="o">.</span><span class="n">index_flush</span><span class="p">(</span><span class="no">Person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">family</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="p">,</span> <span class="n">os</span><span class="o">|</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span>
</span><span class='line'>      <span class="n">inserter</span><span class="o">.</span><span class="n">create_rel</span><span class="p">(</span><span class="n">r</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="no">Person</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="no">Person</span><span class="p">)</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>                          <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;done!&quot;</span>
</span><span class='line'><span class="n">inserter</span><span class="o">.</span><span class="n">shutdown</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Run a JUNG algorithm</h3>

<p>I tried to run a simple Dijkstra shortest path algorithm in Gremlin, but
eventually had to give up as the shell kept giving me weird exceptions
when I tried to load the required class. Furthermore, the graph being
directed from the actor nodes to the movie nodes, there is not path
between anything but an actor and one of its movies (and the JUNG
class to transform a directed graph to an undirected one seems to
convert the whole graph eagerly).</p>

<p>Eventually I gave up, dumped the movie database, and used the family
graph instead.</p>

<p>The code is in Java, the language I used after Groovy scared me with
these weird exceptions (Java is boring but predictable).</p>

<p>The hardest perhaps was to figure out the dependencies for the
<code>pom.xml</code>:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/graph_algo/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>graph-algo<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>      <span class="nt">&lt;neo4j.version&gt;</span>1.5<span class="nt">&lt;/neo4j.version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>  <span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>tinkerpop-repository<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;name&gt;</span>TinkerPop Maven2 Repository<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>http://tinkerpop.com/maven2<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.neo4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>neo4j<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>${neo4j.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>net.sf.jung<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>jung-graph-impl<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.0.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>com.tinkerpop.gremlin<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>gremlin-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.4<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>com.tinkerpop.blueprints<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>blueprints-neo4j-graph<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>com.tinkerpop.blueprints<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>blueprints-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>com.tinkerpop.blueprints<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>blueprints-graph-jung<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code in Java is verbose; especially I could not find a simple way
to look up nodes in the BluePrints graph, nor could I use the
properties of the Neo4j nodes from the BluePrints vertices&#8230;</p>

<figure class='code'><figcaption><span> (GraphAlgorithm.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/graph_algo/GraphAlgorithm.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.GraphDatabaseService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.Node</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.kernel.EmbeddedGraphDatabase</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.Edge</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.Vertex</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.impls.neo4j.Neo4jGraph</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.oupls.jung.GraphJung</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">edu.uci.ics.jung.algorithms.shortestpath.DijkstraShortestPath</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">edu.uci.ics.jung.graph.Graph</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GraphAlgorithm</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">neo4jHome</span> <span class="o">=</span> <span class="s">&quot;/users/x/neo4j-test&quot;</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>          <span class="n">neo4jHome</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">GraphDatabaseService</span> <span class="n">graphDb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EmbeddedGraphDatabase</span><span class="o">(</span><span class="n">neo4jHome</span> <span class="o">+</span> <span class="s">&quot;/data/graph.db/&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">com</span><span class="o">.</span><span class="na">tinkerpop</span><span class="o">.</span><span class="na">blueprints</span><span class="o">.</span><span class="na">pgm</span><span class="o">.</span><span class="na">Graph</span> <span class="n">g</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Neo4jGraph</span><span class="o">(</span><span class="n">graphDb</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Graph</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Edge</span><span class="o">&gt;</span> <span class="n">j</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GraphJung</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">DijkstraShortestPath</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Edge</span><span class="o">&gt;</span> <span class="n">dijkstra</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DijkstraShortestPath</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Edge</span><span class="o">&gt;(</span><span class="n">j</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Node</span> <span class="n">trent</span> <span class="o">=</span> <span class="n">graphDb</span><span class="o">.</span><span class="na">index</span><span class="o">().</span><span class="na">forNodes</span><span class="o">(</span><span class="s">&quot;Person_exact&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Trent&quot;</span><span class="o">).</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Node</span> <span class="n">dave</span> <span class="o">=</span> <span class="n">graphDb</span><span class="o">.</span><span class="na">index</span><span class="o">().</span><span class="na">forNodes</span><span class="o">(</span><span class="s">&quot;Person_exact&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Dave&quot;</span><span class="o">).</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Distance between Trent and Dave:&quot;</span> <span class="o">+</span> <span class="n">dijkstra</span><span class="o">.</span><span class="na">getDistance</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">getVertex</span><span class="o">(</span><span class="n">trent</span><span class="o">.</span><span class="na">getId</span><span class="o">()),</span> <span class="n">g</span><span class="o">.</span><span class="na">getVertex</span><span class="o">(</span><span class="n">dave</span><span class="o">.</span><span class="na">getId</span><span class="o">())));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Distance between Trent and everybody:&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="nl">kv:</span> <span class="n">dijkstra</span><span class="o">.</span><span class="na">getDistanceMap</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">getVertex</span><span class="o">(</span><span class="n">trent</span><span class="o">.</span><span class="na">getId</span><span class="o">())).</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">graphDb</span><span class="o">.</span><span class="na">getNodeById</span><span class="o">((</span><span class="n">Long</span><span class="o">)</span> <span class="n">kv</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">getId</span><span class="o">()).</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; =&gt; &quot;</span> <span class="o">+</span> <span class="n">kv</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">g</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>      <span class="n">graphDb</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>    
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running it produces</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Distance between Trent and Dave:3.0
</span><span class='line'>Distance between Trent and everybody:
</span><span class='line'>Trent =&gt; 0.0
</span><span class='line'>Carol =&gt; 1.0
</span><span class='line'>Peggy =&gt; 1.0
</span><span class='line'>Alice =&gt; 1.0
</span><span class='line'>Bob =&gt; 1.0
</span><span class='line'>Walter =&gt; 2.0
</span><span class='line'>Eve =&gt; 2.0
</span><span class='line'>Dave =&gt; 3.0</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up Day 2</h2>

<p>I must say that today was a rather frustrating experience. Neo4j
ecosystem is still evolving, but this means that most of the
documentation I came upon was already obsolete. The navigation on the
data was at time very hard to figure out, and the error messages
(really, the underlying Java exception) not helpful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Neo4j Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/28/seven-databases-in-seven-weeks-neo4j-day-1/"/>
    <updated>2011-12-28T17:05:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/28/seven-databases-in-seven-weeks-neo4j-day-1</id>
    <content type="html"><![CDATA[<p>As the book is still in beta and incomplete, I skip CouchDB (the
chapter is not there yet in beta 2.0), and will spend this week with
<a href="http://neo4j.org/">Neo4j</a>.</p>

<p>Neo4j is a graph database, meaning it focuses on navigation between
vertices (called nodes in Neo4j), through edges (called
relationships). While other databases made it possible to join various
pieces of data, Neo4j treats this as the main semantic mechanism</p>

<!--more-->


<p>Neo4j can be distributed for high-availability, and is partition
tolerant, but sharding is not supported (at the time of writing).</p>

<p>The first day focuses on basic creation and navigation of data. <a href="http://docs.neo4j.org/chunked/stable/graphdb-neo4j-nodes.html">Nodes</a>
and
<a href="http://docs.neo4j.org/chunked/stable/graphdb-neo4j-relationships.html">relationships</a>
are the basic entities; by default nodes have just an id, while
relationships are identified by the out and in nodes, and a type.</p>

<p>To spice this up a bit, it is possible to attach
<a href="http://docs.neo4j.org/chunked/stable/graphdb-neo4j-properties.html">properties</a>
to both nodes and relationships. Values can be scalar or arrays of
basic types (boolean, number, or string).</p>

<p>To navigate the data, the easiest seems to be the use of
<a href="https://github.com/tinkerpop/gremlin/wiki">Gremlin</a>, a language and
database independent graph traversal language (the language has to be
a JVM one).</p>

<h2>Exercises</h2>

<h3>Neo4j Wiki</h3>

<p>The Wiki is <a href="http://wiki.neo4j.org/content/Main_Page">here</a>.</p>

<h3>Gremlin Documentation</h3>

<p>There is a <a href="https://github.com/tinkerpop/gremlin/wiki">wiki</a>.</p>

<h3>List of Gremlin Steps</h3>

<p>They are listed on the
<a href="https://github.com/tinkerpop/gremlin/wiki/Gremlin-Steps">wiki</a>.</p>

<h3>Neo4j Shells</h3>

<p>It is hard not to find them, as they&#8217;re already in the Web Admin
Console. Both
<a href="http://docs.neo4j.org/chunked/snapshot/cypher-query-lang.html">Cipher</a>
and the
<a href="http://docs.neo4j.org/chunked/snapshot/rest-api.html">ReST API</a> can
be used directly from the console, although the ReST API is limited
there (for instance the <code>traverse</code> operation is not supported). Full
access requires an external client such as <code>curl</code>.</p>

<h3>Find all node names with another shell</h3>

<p>In Cipher, there is no direct way to use all nodes as a starting
point, so instead I try to find all nodes linked to the first one
through a path that can be empty (i.e. the starting node is also
included). To remove duplicates, I use the
<a href="http://docs.neo4j.org/chunked/snapshot/query-aggregation.html#aggregation-distinct"><code>DISTINCT</code></a>
function, but it must be applied in the context of an aggregation, so
I have to apply
<a href="http://docs.neo4j.org/chunked/snapshot/query-aggregation.html#aggregation-collect"><code>COLLECT</code></a>
as well:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>START n=node(0)
</span><span class='line'>MATCH n-[*0..]-x
</span><span class='line'>RETURN COLLECT(DISTINCT x.name)</span></code></pre></td></tr></table></div></figure>


<p>which produces</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; +----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>==&gt; | collect(distinct x.name)                                                                                                                                             |
</span><span class='line'>==&gt; +----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>==&gt; | List(Prancing Wolf Ice Wine 2007, riesling, Prancing Wolf Spatleses 2007, Prancing Wolf Winery, Prancing Wolf Kabinett 2002, Tom, Wine Expert Monthly, Patty, Alice) |
</span><span class='line'>==&gt;
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>Not exactly as easy as the Gremlin equivalent <code>g.V.name</code>.</p>

<p>There is no way to achieve anything similar using the
ReST API, as
its traversal operation only returns full objects (either nodes,
relationships or paths), and not properties.</p>

<h3>Delete all the nodes and edges in your database</h3>

<p>Well, the book already showed the powerful <code>g.clear</code> Gremlin
command. It should be followed by <code>g.addVertex()</code> to get back to the
original state (with just one node).</p>

<p>And that&#8217;s all for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks MongoDB Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/25/seven-databases-in-seven-weeks-mongodb-day-3/"/>
    <updated>2011-12-25T17:18:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/25/seven-databases-in-seven-weeks-mongodb-day-3</id>
    <content type="html"><![CDATA[<p>Final day with MongoDB. First to cover geospatial indexing; then to
explore MongoDB&#8217;s approach to the CAP theorem.</p>

<!--more-->


<p>Like PostgreSQL, MongoDB has integrated support for geometric of
geographic data and queries. Finding the neighbours of a point or
location is trivial, and such queries are optimized using dedicated
kind of indexes.</p>

<p>Regarding the CAP theorem, MongoDB strictly separates Availability
from Partition tolerance: replica sets are designed for availability,
using a quorum approach (like Riak) to select the most recent data in
case of conflict.</p>

<p>Sharding is the dedicated mechanism for partitions. A replica set can
own a shard of the data.</p>

<p>Unlike with Riak, where availability and partitioning are functions of
the properties set on buckets, MongoDB requires the whole topology to
be explicitly configured. I assume that what MongoDB loses in
flexibility, it gets it back in predictability.</p>

<h2>Exercises</h2>

<h3>Replica set configuration options</h3>

<p>The documentation is
<a href="http://www.mongodb.org/display/DOCS/Replica+Set+Configuration">here</a>.</p>

<h3>Spherical geo index</h3>

<p>I don&#8217;t know if this is another instance of the book describing
features from old version of MongoDB, but there is no such thing as a
spherical geo index.</p>

<p>Spherical searches rely on standard <code>2d</code> indexing, as explained
<a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing#GeospatialIndexing-TheEarthisRoundbutMapsareFlat">here</a>.</p>

<h3>Find all cities within a 50 mile radius of London</h3>

<p>To solve this exercise, it is necessary to format the data as required
in the
<a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing#GeospatialIndexing-NewSphericalModel">documentation</a>. Unfortunately,
the data files in the code for the second beta version of the book use
latitude, longitude whereas MongoDB expects longitude, latitude
(i.e. a X, Y coordinate).</p>

<p>I used the small script below to reformat the data file, and imported
the reformated one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sed -e 's/^\(.*\)latitude\(.*\), *longitude\([^}]*\)}\(.*\)$/\1longitude\3, latitude\2}\4/' \
</span><span class='line'>mongo_cities1000.json &gt; mongo_cities1000_lon_lat.json</span></code></pre></td></tr></table></div></figure>


<p>With that loaded, and with the geospatial indexing in place, MongoDB
is ready to run the queries.</p>

<p>First I need to locate London. There are a few places named London,
but I assume the authors meant the one in England. I create a <code>centre</code>
variable to be used in the queries.</p>

<figure class='code'><figcaption><span>Finding London  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">london</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">cities</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;London&#39;</span><span class="p">,</span> <span class="nx">country</span><span class="o">:</span> <span class="s1">&#39;GB&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">centre</span> <span class="o">=</span> <span class="p">[</span><span class="nx">london</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">longitude</span><span class="p">,</span> <span class="nx">london</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">latitude</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>As indicated in the documentation, I have to measure distances in
radians. For this I need to know the
<a href="http://en.wikipedia.org/wiki/Earth_radius">Earth Radius</a> in miles.</p>

<figure class='code'><figcaption><span>Earth Radius and Range  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">earthRadius</span> <span class="o">=</span> <span class="mi">3959</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">range</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally I can run my queries. I have a few options:</p>

<h4><code>geoNear</code> command</h4>

<p>I can pass the <code>spherical: true</code> option to the <code>geoNear</code> command. By
default, the query will only return 100 results.</p>

<figure class='code'><figcaption><span>geoNear  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">runCommand</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">geoNear</span><span class="o">:</span> <span class="s2">&quot;cities&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">near</span><span class="o">:</span> <span class="nx">centre</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">spherical</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">maxDistance</span><span class="o">:</span> <span class="nx">range</span><span class="o">/</span><span class="nx">earthRadius</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it turns out, there are far more cities in this range. A circle of
500 miles radius around London includes much of Western Europe:</p>

<div class="gmap" id="map_canvas"></div>


<p>To get unlimited results, I set the number of possible results to the
number of cities:</p>

<figure class='code'><figcaption><span>unlimited geoNear  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">runCommand</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">geoNear</span><span class="o">:</span> <span class="s2">&quot;cities&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">near</span><span class="o">:</span> <span class="nx">centre</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">spherical</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">num</span><span class="o">:</span> <span class="nx">db</span><span class="p">.</span><span class="nx">cities</span><span class="p">.</span><span class="nx">count</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">maxDistance</span><span class="o">:</span> <span class="nx">range</span><span class="o">/</span><span class="nx">earthRadius</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>$within</code> operator</h4>

<p>Alternatively, I can use the <code>$within</code> operator. I get the spherical
behaviour by specifying a <code>centerSphere</code>:</p>

<figure class='code'><figcaption><span>$within  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">cities</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">location</span><span class="o">:</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">$within</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$centerSphere</span><span class="o">:</span> <span class="p">[</span><span class="nx">centre</span><span class="p">,</span> <span class="nx">range</span><span class="o">/</span><span class="nx">earthRadius</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This query will return cities within the range, just like the
unlimited <code>geoNear</code> one.</p>

<h3>Sharded replicas</h3>

<p>This is the kind of things that is not overly difficult, but
tedious. And I don&#8217;t like tedious.</p>

<p>As a good UNIX geek, I&#8217;d rather spend hours to automate what would
have taken me 10 minutes to do manually. So here&#8217;s the automated setup
in Bash scripts.</p>

<p>First I create all the necessary directories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir mongo{1..6}
</span><span class='line'>mkdir mongoconfig</span></code></pre></td></tr></table></div></figure>


<p>Then I start two sets of 3 replicas that can also be sharded:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in {1..6}; do
</span><span class='line'>  s=$(( (i-1 ) / 3 + 1))
</span><span class='line'>  mongod --replSet shard$s --shardsvr --dbpath ./mongo$i \
</span><span class='line'>  --port 2701$i --logpath ./mongod\_$i.log --rest &
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>I setup each replica set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in 1 2; do
</span><span class='line'>  members=""
</span><span class='line'>  p=$(( (i-1) * 3 + 1))
</span><span class='line'>  for j in 1 2 3; do
</span><span class='line'>    members="$members, { \_id: $j, host: 'localhost:2701$((p+j-1))'}"
</span><span class='line'>  done
</span><span class='line'>  members=${members:1} 
</span><span class='line'>  mongo localhost:2701$p &lt;&lt;HERE
</span><span class='line'>rs.initiate({
</span><span class='line'>  _id: 'shard$i',
</span><span class='line'>  members: [ $members ]
</span><span class='line'>})
</span><span class='line'>HERE
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>At this point it is good to wait a minute for the replica sets to be
fully online.</p>

<p>Next step is to figure out the shards URL: they are composed of the
shard name, followed by the list of comma separated servers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shards=()
</span><span class='line'>for i in 1 2; do
</span><span class='line'>  p=$(( (i-1) * 3 + 1))
</span><span class='line'>  output=`mongo --quiet localhost:2701$p/test&lt;&lt;HERE
</span><span class='line'>db.isMaster().setName + '/' + db.isMaster().hosts
</span><span class='line'>HERE`
</span><span class='line'>  shards=( "${shards\[@]}" ${output%?bye} )
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>Now it is time to start the config server. I move it to the port <code>27019</code> as <code>27016</code> is already in use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongod --configsvr --dbpath ./mongoconfig --port 27019 --logpath=mongoconfig.log &
</span><span class='line'>sleep 1
</span><span class='line'>mongos --configdb localhost:27019 --chunkSize 1 --port 27020 --logpath=mongos.log &</span></code></pre></td></tr></table></div></figure>


<p>And finally I add the shards to the config mongo, and enable sharding
on <code>test</code> for both the <code>cities</code> collection and GridFS:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for shard in ${shards[@]}; do
</span><span class='line'>  echo $shard
</span><span class='line'>  mongo localhost:27020/admin --quiet &lt;&lt;HERE
</span><span class='line'>db.runCommand( { addshard: "$shard" })
</span><span class='line'>HERE
</span><span class='line'>done
</span><span class='line'>mongo localhost:27020/admin --quiet &lt;&lt;HERE
</span><span class='line'>db.runCommand( { enablesharding : "test" } );
</span><span class='line'>db.runCommand( { shardcollection : "test.cities", key : {name : 1} } );
</span><span class='line'>db.runCommand( { shardcollection : "test.fs.chunks", key : { files_id : 1 } } )
</span><span class='line'>HERE</span></code></pre></td></tr></table></div></figure>


<p>I can check that everything looks ok with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongo localhost:27020/admin --quiet &lt;&lt;HERE
</span><span class='line'>db.runCommand( { listshards : 1 })
</span><span class='line'>HERE</span></code></pre></td></tr></table></div></figure>


<p>Of course, all these scripts would be useless to actually distribute
the servers on different machines. Given some time, I&#8217;ll try to setup
a AWS EC2 cluster as I did for Riak.</p>

<p>At this point, I tried to import the cities data file. It was somewhat
slower than without replicas, but not significantly so.</p>

<p>I also added a file, using the same command as in the book.</p>

<p>Now, to test the replicas, I killed the two primary servers (to
identify them, I used <code>ps auxw | grep mongod</code>, which gave me the
process id I needed to kill).</p>

<p>With two servers down, <code>mongofiles -h localhost:27020 get my_file.txt</code>
was still able to retrieve the file.</p>

<h2>Wrapping up MongoDB</h2>

<p>MongoDB is the first database besides PostgreSQL I feel comfortable
using. They both provide more &#8220;database-like&#8221; features than either
Riak or HBase: integrated queries, advanced indexing, &#8230; The use of
JavaScript is well integrated and pleasant to use.</p>

<p>Moreover, MongoDB&#8217;s approach to the CAP theorem is simple. While it is
less flexible or dynamic than Riak&#8217;s, its simplicity makes it easy to
reason about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks MongoDB Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/24/seven-databases-in-seven-weeks-mongodb-day-2/"/>
    <updated>2011-12-24T14:49:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/24/seven-databases-in-seven-weeks-mongodb-day-2</id>
    <content type="html"><![CDATA[<p>Today the book covers all kinds of queries goodness in MongoDB:
indexing, advanced group queries, and MapReduce.</p>

<p>Once again, the contrast with Riak is stark. MongoDB is able to
optimize queries on its JSON documents because it understand the
format directly (whereas it is stored as an opaque block in Riak).
Using JavaScript is also simpler: no need to quote the function codes;
just pass a function object to the commands that need one.</p>

<!--more-->


<h3>Indexes</h3>

<p>MongoDB comes by default with fairly sophisticated indexing
options. Perhaps not as many as PostgreSQL, but still very
flexible. Two basic types, range (B-Tree) and geospatial indexes;
multikeys (with the ability to sort each key in a different order);
sparse, &#8230;</p>

<p>Combined with the
<a href="http://www.mongodb.org/display/DOCS/Explain"><code>explain</code></a> function,
this makes classic (i.e. non MapReduce) queries usable.</p>

<p>Thus MongoDB is a good hybrid between traditional databases (although
document rather than schema oriented), and new MapReduce platforms
such as <a href="http://hadoop.apache.org/"><code>Hadoop</code></a>.</p>

<h3>Aggregation</h3>

<p>MongoDB also supports a number of aggregation functions. The most
flexible one,
<a href="http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Group"><code>group</code></a>,
is not compatible with sharding, but otherwise it provides yet more
coverage of relational database features.</p>

<h3>MapReduce</h3>

<p>Using MongoDB&#8217;s
<a href="http://www.mongodb.org/display/DOCS/MapReduce"><code>mapreduce</code></a> is much
easier than using Riak`s: the functions do not have to be passed as
strings, they can be stored in the server directly from the shell, and
because MongoDB understand JSON directly, there is not need to first
parse the document</p>

<p>On the other hand, Riak&#8217;s agnostic approach makes
it possible to MapReduce other kinds of data.</p>

<h2>Exercises</h2>

<h3>Shortcut for the admin commands</h3>

<p>I could not find a single place with the info. The mongo shell
<a href="http://api.mongodb.org/js/current/">API</a> has no central list of
functions; instead they are spread in the documentation or source for
each prototype.</p>

<p>In general, an admin command that takes a MongoDB object as a
first argument will have an equivalent method in the relevant prototype.</p>

<p>For instance, the
<a href="http://www.mongodb.org/display/DOCS/List+of+Database+Commands"><code>dbStats</code></a>
command takes a
<a href="http://api.mongodb.org/js/current/symbols/_global_.html#DB"><code>DB</code></a>;
in the
<a href="http://api.mongodb.org/js/current/symbols/src/shell_db.js.html"><code>db.js</code></a>
source file of the <code>DB</code> prototype, there is a <code>stats</code> method that
invokes the <code>dbStats</code> command.</p>

<h3>Online documentation for Queries and Cursors</h3>

<p>As stated in the
<a href="http://www.mongodb.org/display/DOCS/Queries+and+Cursors">documentation</a>,
MongoDB returns a cursor for each queries; it is up to the client to
iterate over the cursor to retrieve results.</p>

<p>The mongo shell usually hides the existence of cursors, but even there
it is possible to expose them, using JavaScript.</p>

<h3>MongoDB documentation for MapReduce</h3>

<p>The documentation is
<a href="http://www.mongodb.org/display/DOCS/MapReduce">here</a>.</p>

<h3>Collection function code</h3>

<p>In each case, I got the code by running <code>db.towns.functionName</code> (note
the absence of parenthesis). The mongo shell direct access to
JavaScript source code is especially convenient.</p>

<h4>Collection <code>help</code></h4>

<p>The source code is just a long list of <code>print</code> statements.</p>

<h4>Collection <code>findOne</code></h4>

<p>The code will first execute a query, returning a cursor. The cursor is
then checked for the presence of results; if there is any, the first
one is returned.</p>

<h4>Collection <code>stats</code></h4>

<p>This function will simply delegate the job to the <code>runCommand</code> method,
invoking the <code>collStats</code> command.</p>

<h3>Finalize method</h3>

<p>The <code>finalize</code> function is very simple: rename the attribute <code>count</code>
to <code>total</code>:</p>

<figure class='code'><figcaption><span>finalize function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finalize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">total</span><span class="o">:</span> <span class="nx">value</span><span class="p">.</span><span class="nx">count</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use it, just add the <code>finalize</code> attribute to the <code>mapReduce</code> command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">results</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">runCommand</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">mapReduce</span><span class="o">:</span> <span class="s1">&#39;phones&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">reduce</span><span class="o">:</span> <span class="nx">reduce</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">finalize</span><span class="o">:</span> <span class="nx">finalize</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">out</span><span class="o">:</span> <span class="s1">&#39;phones.report&#39;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I can check  the result with <code>db.phones.report.find()</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.phones.report.find()
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 1 }, "value" : { "total" : 35 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 2 }, "value" : { "total" : 30 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 3 }, "value" : { "total" : 35 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 4 }, "value" : { "total" : 22 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 5 }, "value" : { "total" : 35 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 6 }, "value" : { "total" : 19 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 7 }, "value" : { "total" : 32 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 8 }, "value" : { "total" : 32 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 1 }, "value" : { "total" : 7 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 2 }, "value" : { "total" : 5 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 3 }, "value" : { "total" : 5 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 4 }, "value" : { "total" : 10 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 5 }, "value" : { "total" : 6 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 6 }, "value" : { "total" : 4 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 7 }, "value" : { "total" : 6 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 8 }, "value" : { "total" : 5 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 1 }, "value" : { "total" : 116 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 2 }, "value" : { "total" : 103 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 3 }, "value" : { "total" : 118 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 4 }, "value" : { "total" : 104 } }
</span><span class='line'>has more</span></code></pre></td></tr></table></div></figure>


<h3>Use of driver</h3>

<p>I used Java, and simply reimplemented the original Phones collection
in a different database:</p>

<figure class='code'><figcaption><span> (MongoTest.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/mongo/src/main/java/jp/wakatta/MongoTest.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">random</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">round</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.BasicDBObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DB</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DBCollection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DBObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.Mongo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MongoTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// connect to the database server</span>
</span><span class='line'>          <span class="c1">// note: use 127.0.0.1 instead of localhost</span>
</span><span class='line'>          <span class="c1">// as mongoDB only listen to the loopback</span>
</span><span class='line'>          <span class="c1">// interface and not the ethernet one</span>
</span><span class='line'>          <span class="n">Mongo</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mongo</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// make sure we&#39;re in a clean state</span>
</span><span class='line'>          <span class="n">m</span><span class="o">.</span><span class="na">dropDatabase</span><span class="o">(</span><span class="s">&quot;java&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// create and access the database</span>
</span><span class='line'>          <span class="n">DB</span> <span class="n">db</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">getDB</span><span class="o">(</span><span class="s">&quot;java&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// create collection and populate it</span>
</span><span class='line'>          <span class="n">DBCollection</span> <span class="n">phones</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">getCollection</span><span class="o">(</span><span class="s">&quot;phones&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">populatePhones</span><span class="o">(</span> <span class="mi">800</span><span class="o">,</span> <span class="mi">5550000</span><span class="o">,</span> <span class="mi">5650000</span> <span class="o">,</span> <span class="n">phones</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// create index</span>
</span><span class='line'>          <span class="n">phones</span><span class="o">.</span><span class="na">createIndex</span><span class="o">(</span><span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">(</span><span class="s">&quot;display&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// list the indexes</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">DBObject</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">phones</span><span class="o">.</span><span class="na">getIndexInfo</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">DBObject</span> <span class="n">o</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>          <span class="c1">// close and cleanup</span>
</span><span class='line'>          <span class="n">m</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">populatePhones</span><span class="o">(</span><span class="kt">long</span> <span class="n">area</span><span class="o">,</span> <span class="kt">long</span> <span class="n">start</span><span class="o">,</span> <span class="kt">long</span> <span class="n">stop</span><span class="o">,</span> <span class="n">DBCollection</span> <span class="n">coll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">long</span> <span class="n">i</span><span class="o">=</span><span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">stop</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">long</span> <span class="n">country</span> <span class="o">=</span> <span class="n">round</span><span class="o">(</span><span class="n">floor</span><span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="n">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">8</span><span class="o">)));</span>
</span><span class='line'>          <span class="kt">long</span> <span class="n">num</span> <span class="o">=</span> <span class="o">(</span><span class="n">country</span> <span class="o">*</span> <span class="mi">10000000000</span><span class="n">l</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">area</span> <span class="o">*</span> <span class="mi">10000000</span><span class="o">)</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>          <span class="n">BasicDBObject</span> <span class="n">phone</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">();</span>
</span><span class='line'>          <span class="n">BasicDBObject</span> <span class="n">components</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">();</span>
</span><span class='line'>          <span class="n">phone</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;_id&quot;</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>          <span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;country&quot;</span><span class="o">,</span> <span class="n">country</span><span class="o">);</span>
</span><span class='line'>          <span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;area&quot;</span><span class="o">,</span> <span class="n">area</span><span class="o">);</span>
</span><span class='line'>          <span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;prefix&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>          <span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;number&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="n">phone</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;components&quot;</span><span class="o">,</span> <span class="n">components</span><span class="o">);</span>
</span><span class='line'>          <span class="n">phone</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;display&quot;</span><span class="o">,</span> <span class="s">&quot;+&quot;</span> <span class="o">+</span> <span class="n">country</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">area</span> <span class="o">+</span> <span class="s">&quot;-&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="n">coll</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">phone</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the complete project, I just used Maven to fetch the MongoDB
driver:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/mongo/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>mongo-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>mongo-test<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.mongodb<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>mongo-java-driver<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.7.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>  <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>          <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>              <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ugly, but it does the job.</p>

<p>And that&#8217;s all for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks MongoDB Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/23/seven-databases-in-seven-weeks-mongodb-day-1/"/>
    <updated>2011-12-23T08:19:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/23/seven-databases-in-seven-weeks-mongodb-day-1</id>
    <content type="html"><![CDATA[<p>It has been &#8230; a little over a week since I closed with HBase so it
is time to move to the next database in the program:
<a href="http://www.mongodb.org/">MongoDB</a>. It is a so-called
<a href="http://en.wikipedia.org/wiki/Document-oriented_database">document oriented database</a>,
relying on Javascript and JSON like Riak but, MongoDB, unlike Riak,
has a built-in support for querying, and can also perform partial
updates.</p>

<p>Fittingly, this first day is about CRUD and queries.</p>

<!--more-->


<h3>CRUD in MongoDB</h3>

<p>Unlike Riak, MongoDB makes a difference between Create and Update
operations. It is not possible to insert documents with the same id
twice in the same collection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.test.insert( { _id: 'one', value: 1 } )
</span><span class='line'>&gt; db.test.find()
</span><span class='line'>{ "_id" : "one", "value" : 1 }
</span><span class='line'>&gt; db.test.insert( { _id: 'one', value: 2 } )
</span><span class='line'>E11000 duplicate key error index: book.test.$_id_  dup key: { : "one" }</span></code></pre></td></tr></table></div></figure>


<p>Like in SQL, the Read, Update and Delete operations all operate on the
result of a search. And because the criteria query for a search is
just a JSON document, it is possible to reuse it in different
contexts. Combined with JavaScript as a query/shell language, this
makes a very flexible combination.</p>

<h3>Reaching into objects</h3>

<p>As documents are naturally nested, it is important to know how to
refer to nested attributes and how to use them in queries.</p>

<p>Using the JSON nesting notation is possible but does not have the
expected semantic (unless you change your expectations):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.towns.find( { mayor: { name: 'Sam Adams' } }, {name: 1} )
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>The query above returns nothing, despite the fact that there is a town
whose mayor is named &#8216;Sam Adams&#8217;. The problem here is that this
specific notation will match documents in the collection whose <code>mayor</code>
attribute has the exact value <code>{ name: 'Sam Adams' }</code>, rather than
merely those whose <code>mayor</code> attribute has a sub-attribute <code>name</code> with
the <code>Sam Adams</code> value (and possible other sub-attributes, a
possibility that the first query denies).</p>

<p>The correct form for the query is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.towns.find( { 'mayor.name' : 'Sam Adams' }, {name: 1})
</span><span class='line'>{ "_id" : ObjectId("4eed55b0ef971f5317e68e91"), "name" : "Portland" }
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.mongodb.org/display/DOCS/Dot+Notation+%28Reaching+into+Objects%29">This documentation</a>
from the official website was very useful to me in clarifying this aspect.</p>

<h3>The <a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-Metaoperator%3A%7B%7B%24not%7D%7D"><code>$not</code></a> operator</h3>

<p>I first got curious about this operator because the example from the
book did not work. It generated an error in MongoDB 2.0.2 (the latest
at the time of writing).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;exports.foods&#39;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$not</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;burgers&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">_id</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">name</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The error is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>error: { "$err" : "invalid use of $not", "code" : 13034 }</span></code></pre></td></tr></table></div></figure>


<p>From the
<a href="https://github.com/mongodb/mongo/blob/master/src/mongo/db/queryutil.cpp">source code</a>,
it seems $not cannot be applied to a (implicit) equal operator. So the
book code should be using <code>$ne</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s1">&#39;exports.foods.name&#39;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$ne</span><span class="o">:</span> <span class="s1">&#39;burgers&#39;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It does not help that the online shell (accessible from the &#8216;Try it
out&#8217; link on <a href="http://www.mongodb.org/">http://www.mongodb.org/</a>) does
not return an error for the book query. It does not return anything
at all, so it is still not correct.</p>

<p>Still, even with 2.0.2, this query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.countries.find( {$not: { name: 'United States' } } )
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>is accepted but does not return every country but US. Yet again it
returns nothing.</p>

<p>As far as I can tell, this query is actually incorrect (the <code>$not</code>
operator should be applied to an operator, not a match), so its value
is irrelevant, but it is worrying that the parser allows this code.</p>

<p>The general problem is that the semantic of <code>$not</code> is not exactly
the same as the similar operator from logic. So basic logic reasoning
cannot help.</p>

<p>I suppose this is just something to keep in mind: be wary of using
<code>$not</code>.</p>

<h2>Exercises</h2>

<h3>The online MongoDB documentation</h3>

<p>is <a href="http://www.mongodb.org/display/DOCS/Manual">here</a>.</p>

<h3>Query using regular expressions</h3>

<p>As explained
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-RegularExpressions">here</a>,
MongoDB supports two notations: a direct JavaScript regexp object
using <code>/.../</code> and slightly more verbose but more flexible <code>$regexp</code>
operator. The syntax for the regular expression in both cases is the
same.</p>

<h3>MongoDB drivers</h3>

<p>The <a href="http://www.mongodb.org/display/DOCS/Drivers">list of drivers</a>.</p>

<h3>Print a JSON document containing <code>{ "hello" : "world" }</code></h3>

<p>The <code>tojson</code> function can display (and pretty-print) JSON documents:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tojson</span><span class="p">({</span> <span class="s2">&quot;hello&quot;</span><span class="o">:</span> <span class="s2">&quot;world&quot;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Find a town by case insensitive regular expression search</h3>

<p>This would be the <code>i</code> option to the regular expression:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="sr">/new/i</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Find all cities whose names contain an ‘e’, and are famous for food or beer.</h3>

<p>A good use for the
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24in"><code>$in</code></a>
operator:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="sr">/e/</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">famous_for</span> <span class="o">:</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">$in</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">,</span> <span class="s1">&#39;beer&#39;</span><span class="p">]</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>or the equivalent but verbose:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="sr">/e/</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">$or</span><span class="o">:</span> <span class="p">[{</span><span class="nx">famous_for</span> <span class="o">:</span> <span class="s1">&#39;food&#39;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">famous_for</span><span class="o">:</span> <span class="s1">&#39;beer&#39;</span><span class="p">}</span> <span class="p">]</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Find all countries that do not export tasty bacon</h3>

<p>To find countries that export tasty bacon, one has to use
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24elemMatch"><code>$elemMatch</code></a>. It
should not come as a surprise that it is used here as well, but with
the dreaded <code>$not</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span><span class="s1">&#39;exports.foods&#39;</span><span class="o">:</span>
</span><span class='line'>     <span class="p">{</span> <span class="nx">$not</span><span class="o">:</span>
</span><span class='line'>       <span class="p">{</span><span class="nx">$elemMatch</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bacon&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">tasty</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>produces</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;ca&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Canada&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;mx&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Mexico&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(I had not deleted Canada from the database).</p>

<p>The seemingly equivalent</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">$not</span><span class="o">:</span>
</span><span class='line'>      <span class="p">{</span><span class="s1">&#39;exports.foods&#39;</span><span class="o">:</span>
</span><span class='line'>       <span class="p">{</span> <span class="nx">$elemMatch</span><span class="o">:</span>
</span><span class='line'>         <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bacon&#39;</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">tasty</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>will not work. It does not return anything. See above my findings on <code>$not</code>.</p>

<h3>Create a database <code>blogger</code> with a collection of <code>articles</code></h3>

<h4>A new database:</h4>

<p>Creating a new database is extremely easy: just name it when you
launch the <code>mongo</code> shell command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongo blogger</span></code></pre></td></tr></table></div></figure>


<h4>A new collection:</h4>

<p>Like for the database, a collection is created just by inserting
something in it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">articles</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Frederic&#39;</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;my@email.org&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">creation</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">test</span><span class="o">:</span> <span class="s1">&#39;Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...&#39;</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Update the article with an array of comments</h4>

<p>With the operator
<a href="http://www.mongodb.org/display/DOCS/Updating#Updating-%24set"><code>$set</code></a>,
I can specify just what I need to update, not the whole document as in
Riak:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">articles</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span><span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;4ef3c78c7d67f191b06653e4&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">$set</span><span class="o">:</span> <span class="p">{</span> <span class="nx">comments</span><span class="o">:</span>
</span><span class='line'>             <span class="p">[</span> <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Me too&#39;</span><span class="p">},</span>
</span><span class='line'>               <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Me three&#39;</span><span class="p">},</span>
</span><span class='line'>               <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Carol&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;I know all your secret&#39;</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>           <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can check the inserted value with <code>db.articles.findOne()</code> (without
arguments it returns the first element in the collection, and pretty
prints it):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;4ef3c78c7d67f191b06653e4&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="s2">&quot;comments&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                        <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Alice&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;Me too&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                        <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;Me three&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                        <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Carol&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;I know all your secrets&quot;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="s2">&quot;creation&quot;</span> <span class="o">:</span> <span class="nx">ISODate</span><span class="p">(</span><span class="s2">&quot;2011-12-23T00:13:00.636Z&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="s2">&quot;email&quot;</span> <span class="o">:</span> <span class="s2">&quot;my@email.org&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Frederic&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;test&quot;</span> <span class="o">:</span> <span class="s2">&quot;Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tomorrow will cover indexing, and more advanced uses of the data (such
as MapReduce).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak on EC2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2/"/>
    <updated>2011-12-17T14:36:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2</id>
    <content type="html"><![CDATA[<p>The third day with Riak had proposed to deploy Riak on a
<a href="http://aws.amazon.com/ec2/">EC2</a> cluster as an exercise. I could not
do it then due to poor network connectivity and lack of time (I was
traveling), but I did it since and here I explain how.</p>

<!--more-->


<p>EC2 is a service from Amazon to commission a number of virtual
computers with specific performance characteristics, and with use
charged by the hour (the rate depending of the performance).</p>

<p>The whole process is fairly simple and flexible. I got my computers up
and running in minutes. Setting up Riak was a bit more involved (I
should probably had tried on my local network first), but eventually I
was able to load the data and run the queries I wanted.</p>

<p>In outline, here&#8217;s the process</p>

<ul>
<li>figure out the security requirements</li>
<li>think about the cluster organisation</li>
<li>create a few instances of virtual computers</li>
<li>create the security configuration</li>
<li>connect to each machine and set it up</li>
<li>open an SSL tunnel</li>
<li>&#8230;</li>
<li>Profit!</li>
</ul>


<p>And now the details.</p>

<h3>Security requirements</h3>

<p>There will be a few machines, and I need each Riak instance to speak
to each other. This means I need to keep all the required ports open.</p>

<p>As each instance is on a different machine (presumably, I could have
several instances on each machine but I want to keep things simple), I
can use the same ports for each instance. I will just have to give
them different names.</p>

<p>Basho has a helpful
<a href="http://wiki.basho.com/Network-Security-and-Firewall-Configurations.html">page</a>
on this topic. It lists the defaults ports (all of them TCP):</p>

<ul>
<li>epmd&#8217;s listener: 4369</li>
<li>handoff_port listener: 8099</li>
<li>web_port: 8098</li>
<li>pb_port: 8087</li>
<li>plus a range than can be configured. As I have just a small
network, I restrict this range to 6000-6999.</li>
</ul>


<p>These are the ports I will open in my configuration settings.</p>

<h3>Cluster organisation</h3>

<p>I want a simple setup:</p>

<ul>
<li>3 machines</li>
<li>first one is the ring leader</li>
<li>first one is also my interface for client connections</li>
</ul>


<p>So I need to set 3 machines up, make the last two join the first, and
open an SSL tunnel from my local machine to the ring leader.</p>

<h3>EC2 instances</h3>

<p>First I had to sign up to <a href="http://aws.amazon.com/">AWS</a>.</p>

<p>Once this is done, I can use the console, select the EC2 tab, and
click on &#8220;Launch Instance&#8221;.</p>

<p>I chose &#8220;Launch Classic Wizard&#8221; to have as much flexibility as possible:</p>

<p><img src="https://lh6.googleusercontent.com/-MKXddn82uO8/Tu23KOzMhGI/AAAAAAAAB6Y/XpOren_ANVk/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.26.png"></p>

<p>Then I select a basic 64bit Amazon Linux:</p>

<p><img src="https://lh3.googleusercontent.com/--F8ajmA-58c/Tu23KHI9YNI/AAAAAAAAB6U/1fCrHF_tqg0/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.34.png"></p>

<p>I request 3 instances of type Micro (I&#8217;m just playing; I don&#8217;t really care about performance):</p>

<p><img src="https://lh4.googleusercontent.com/-w31FLsR0iC8/Tu2222Q_ZtI/AAAAAAAAB58/E-E86lTf7xg/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.44.png"></p>

<p>I just click through the next two screens (I do not have any specific need for such tuning):</p>

<p><img src="https://lh5.googleusercontent.com/-kRBmxXnSwRc/Tu222wmgj4I/AAAAAAAAB50/U1Rwuqv6R9o/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.05.png">
<img src="https://lh3.googleusercontent.com/-WiqCpx2PT70/Tu222Iz5nTI/AAAAAAAAB5s/k1ZuuVs1yrE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.08.png"></p>

<p>For the key pair, I just give a name, then download the file. I will use it later to connect to my new machines:</p>

<p><img src="https://lh4.googleusercontent.com/-JEnCFjVIM54/Tu222D8yOGI/AAAAAAAAB5o/qdAleXN-iDU/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.28.png"></p>

<p>For the security, I first name my group, then I can use this name as the source parameter for the rules. All the rules are Custom TCP ones; I just need to give the ports (as determined above):</p>

<p><img src="https://lh3.googleusercontent.com/-dSxG8pYQLEc/Tu222KSxpgI/AAAAAAAAB5w/AtiqjF-QTts/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.41.18.png"></p>

<p>And then I can finally start my new machines.</p>

<p>On my first attempts, two of the machines did not start; I just created a couple of new machines of the same kind (64bit Amazon Linux Micro), and put them in the same security group.</p>

<p>Here are the complete security rules (I had to add some after the initial setup):</p>

<p><img src="https://lh6.googleusercontent.com/-tSUcf1TbrLQ/Tu23KB_o3wI/AAAAAAAAB6Q/2OopRB6HFeE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252017.05.42.png"></p>

<p>With this, I have a small cluster of machines. Time to connect and put
them to good use.</p>

<h3>Configuring each machine</h3>

<p>From the EC2 Dashboard, I can access my instances, and get the address for each.</p>

<p>Using the private key downloaded earlier, I can open an SSH connection
to each machine. Note that the user is by default called <code>ec2-user</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i riak-private.pem ec2-user@&lt;MACHINE_NAME&gt;</span></code></pre></td></tr></table></div></figure>


<p>On each, I first need to install riak. I download it directly from
Basho <a href="http://downloads.basho.com/riak/CURRENT/">website</a>.</p>

<p>Each machine has some basic tools, but no Erlang compiler. To avoid
any complications, I chose and retrieved a binary distribution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://downloads.basho.com/riak/CURRENT/riak-1.0.2-1.el6.x86_64.rpm</span></code></pre></td></tr></table></div></figure>


<p>Then I  installed the  downloaded package  (<code>ec2-user</code> can  use <code>sudo</code>
without having to provide a password):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rpm -Uvh riak-1.0.2-1.el6.x86_64.rpm</span></code></pre></td></tr></table></div></figure>


<p>There are a few error messages (or perhaps warnings), but the package
is installed and running.</p>

<p>Riak is installed but not started yet. It is important to get the
configuration right before starting it.</p>

<h4>Common configuration</h4>

<p>For each server, I give it a name that includes the local network IP
address (not the loopback IP address <code>127.0.0.1</code>). It is important,
otherwise the machines cannot talk to each others.</p>

<p>I can get it by running <code>ifconfig</code>. I look for the ethernet setup and especially the <code>inet</code> value:
this is the IP address in Amazon private network. I need to remember
the IP address for what I will call the first machine, so I copy it
somewhere (and call it here <code>&lt;IP_ADDRESS_1&gt;</code>)</p>

<p>Using <code>sudo -e /etc/riak/vm.args</code>, I can edit the name of each node. I set it to <code>riak_ec2_1@&lt;IP_ADDRESS&gt;</code>, (or <code>riak_ec2_2</code>, <code>riak_ec2_3</code>, &#8230;).</p>

<p>Note: the editor will be <code>vi</code>.</p>

<p>I also need to change the <code>app.config</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo -e /etc/riak/app.config`</span></code></pre></td></tr></table></div></figure>


<p>I first need to insert a range restriction configuration. I insert the
following block near the top:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ kernel, [
</span><span class='line'>            {inet_dist_listen_min, 6000},
</span><span class='line'>            {inet_dist_listen_max, 6999}
</span><span class='line'>            ]},</span></code></pre></td></tr></table></div></figure>


<p>For the first machine (the one named <code>riak_ec2_1</code>), I also need to
extend the <code>http</code> interface list. By default it only listen to the
loopback interface (<code>127.0.0.1</code>), but I also need it to listen to the
ethernet interface (see above). Otherwise, I will not be able to set
the SSL tunnel up.</p>

<p>So I replace the lines that read</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{http, [ {"127.0.0.1", 8098 } ]},</span></code></pre></td></tr></table></div></figure>


<p>by something like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{http, [ {"127.0.0.1", 8098 }, {"&lt;IP_ADDRESS_1&gt;", 8098} ]},</span></code></pre></td></tr></table></div></figure>


<p>Once this is done, I started the instances:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo riak start</span></code></pre></td></tr></table></div></figure>


<p>I can test each instance with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8098/stats | python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>Finally, I can link all instances together by executing on the second
and third machine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo riak-admin join riak_ec2_1@&lt;IP_ADDRESS_1&gt;</span></code></pre></td></tr></table></div></figure>


<p>Testing again the status should show three instances in the same ring.</p>

<p>In case of error, uninstall riak, delete the <code>/var/lib/riak</code> directory,
and start again (as I did).</p>

<h3>Setting up the SSL tunnel</h3>

<p>Nothing simpler. Using the first machine name (the one I configured
for connection from the ethernet interface):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i riak-private.pem -f ec2-user@&lt;MACHINE_NAME&gt; \
</span><span class='line'>-L 8098:ec2-user@&lt;MACHINE_NAME&gt;:8098 -N</span></code></pre></td></tr></table></div></figure>


<p>And now I can run from my local machine</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8098/stats | python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>and get the status of the Riak server as if it was local.</p>

<h3>Loading data and running queries</h3>

<p>The book suggest to use the example data from Basho&#8217;s
<a href="http://wiki.basho.com/Loading-Data-and-Running-MapReduce-Queries.html">website</a>,
which is what I did. I downloaded the
<a href="http://wiki.basho.com/attachments/goog.csv"><code>goog.csv</code></a> data file and
the <a href="http://wiki.basho.com/attachments/load_data"><code>load_data</code></a>
script. I changed the port number in the latter to use 8098 instead of
8091, then I just ran it: the data is send through the SSL tunnel and
loaded in my EC2 cluster (but it is very slow).</p>

<p>Once this was done, I checked the various queries proposed on the page, and also implemented the MapReduce Challenge:</p>

<h3>MapReduce Challenge</h3>

<p>The MapReduce Challenge is to compute the days with the highest volume
of dollar traded. This first step is to compute this value, as it is
not part of the initial data.</p>

<p>I use a definition found
<a href="http://wiki.fool.com/Daily_dollar_volume">here</a>, which makes
intuitive sense: <code>Volume*(High - Low)/2</code></p>

<h4>Dollar Traded Volume by Month</h4>

<p>I need to keep both the date and the amount, so my map function will
keep both items in a data structured indexed by month:</p>

<figure class='code'><figcaption><span>Dollar Traded by Month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">month</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pair</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when reducing, I can compare the traded amount and keep the best:</p>

<figure class='code'><figcaption><span>Highest by month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">month</span> <span class="k">in</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">?</span>
</span><span class='line'>  <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To test the whole, I can use the following command, then copy and
paste the query, and execute with <code>Ctrl-D</code>. The command below is run on
my local machine, but thanks to the SSL tunnel, it will execute on the
cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST http://127.0.0.1:8098/mapred \
</span><span class='line'>-H "Content-Type: application/json" -d @-</span></code></pre></td></tr></table></div></figure>


<p>And the query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"inputs":"goog",
</span><span class='line'> "query":[{"map":{"language":"javascript",
</span><span class='line'>                  "source":"function(value, keyData, arg) {
</span><span class='line'>  var data = Riak.mapValuesJson(value)[0];
</span><span class='line'>  var month = value.key.split('-').slice(0,2).join('-');
</span><span class='line'>  var pair = {};
</span><span class='line'>  pair['date'] = value.key;
</span><span class='line'>  pair['traded'] = data.Volume * (data.High - data.Low) / 2;
</span><span class='line'>  var obj = {};
</span><span class='line'>  obj[month] = pair;
</span><span class='line'>  return [obj];
</span><span class='line'>}"}},
</span><span class='line'>         {"reduce":{"language":"javascript",
</span><span class='line'>                    "source":"function(values, arg) {
</span><span class='line'>  return [ values.reduce(function(acc, item) {
</span><span class='line'>    for(var month in item) {
</span><span class='line'>      if(acc[month]) {
</span><span class='line'>        acc[month] = acc[month]['traded'] &lt; item[month]['traded'] ?
</span><span class='line'>  item[month] : acc[month];
</span><span class='line'>      } else acc[month] = item[month];
</span><span class='line'>    }
</span><span class='line'>    return acc;
</span><span class='line'>  })
</span><span class='line'>  ];
</span><span class='line'>}",
</span><span class='line'>         "keep":true}}]}</span></code></pre></td></tr></table></div></figure>


<h4>Day by Highest Dollar Traded</h4>

<p>For this one I use a similar approach: I create pairs with the date
and the amount of dollar traded, but this pair is what I return
directly (instead of returning it indexed by month).</p>

<p>Indexing by date would not work as in the reduce step I would have to
keep the result in a simple (i.e. not indexed) variable, and therefore
would forget the date. By keeping both data items (the date and the
volume traded in dollar) in the same object, I can reduce a list of
such objects to a single item and still retain all the relevant information.</p>

<p>The mapping function creates just a pair object from the data:</p>

<figure class='code'><figcaption><span>Dollar Traded by Day  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reducing function retains the best date by volume traded in dollar
for each batch. It is simpler than the previous one as the values are
simple (i.e. not indexed):</p>

<figure class='code'><figcaption><span>Highest ever  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">){</span>
</span><span class='line'>             <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">)</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">item</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nx">item</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>             <span class="k">else</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>             <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>         <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"inputs":"goog",
</span><span class='line'> "query":[{"map":{"language":"javascript",
</span><span class='line'>                  "source":"function(value, keyData, arg) {
</span><span class='line'>  var data = Riak.mapValuesJson(value)[0];
</span><span class='line'>  var obj = {};
</span><span class='line'>  obj['date'] = value.key;
</span><span class='line'>  obj['traded'] = data.Volume * (data.High - data.Low) / 2;
</span><span class='line'>  return [obj];
</span><span class='line'>}"}},
</span><span class='line'>         {"reduce":{"language":"javascript",
</span><span class='line'>                    "source":"function(values, arg){
</span><span class='line'>  return [ values.reduce(function(acc, item){
</span><span class='line'>                 if(acc) { acc = (acc['traded'] &lt; item['traded']) ? item : acc; }
</span><span class='line'>                 else { acc = item[date]; }
</span><span class='line'>             return acc;
</span><span class='line'>            })
</span><span class='line'>         ];
</span><span class='line'>}",
</span><span class='line'>         "keep":true}}]}</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3/"/>
    <updated>2011-12-15T16:27:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3</id>
    <content type="html"><![CDATA[<p>The third day with HBase is a bit short, but opens to a world of
possibilities: the Cloud.</p>

<p>This is where HBase belongs. No personal (or even that many corporate)
networks are large enough to let it perform correctly.</p>

<p>HBase depends on a large number of servers running in parallel for
its performance, and there are few other places to find that many
machines.</p>

<!--more-->


<h3>Thrift</h3>

<p>The first topic for today is <a href="http://thrift.apache.org/">Thrift</a>, a
generic remote interface to program servers (and a gift from the new
Evil Empire, Facebook).</p>

<p>It is a tool to document a binary API, and generate client stubs to
use this API. HBase supports such an API, making it possible to write
clients in a variety of languages.</p>

<p>Using Thrift on your own project (on the server side, if you have any)
would make it possible to use different languages on the client side,
depending on whichever better fits the needs (scripting languages for
glue scripts, &#8230;)</p>

<p>When I tried the example from the book, I had to change the connection
address of the <code>thrift_example.rb</code> code from <code>localhost</code> to
<code>127.0.0.1</code>, otherwise Thrift would refuse the connection.</p>

<h3>Whirr</h3>

<p><a href="http://whirr.apache.org/">Whirr</a> is far more exciting. It is a tool
to deploy and configure some specific servers on (among others)
<a href="http://aws.amazon.com/ec2/">Amazon EC2</a>.</p>

<p>The first, and perhaps the most complex step is to open an account on
<a href="http://aws.amazon.com/">AWS</a>. It will require a phone, a credit card,
a computer, and some time. And perhaps a couple of emails if the
account opening remains stuck in &#8220;Pending verification&#8221; status.</p>

<p>Once this is done, Whirr can be used to create instances (be careful
with that: Amazon will charge at least one hour for each server even
if you take it down after a couple of minutes), download and install
specific servers (mostly from the <a href="http://hadoop.apache.org/">Hadoop</a>
family), configure them, all of this from the comfort of the command
line (which is my case is cosily close to a cup of warm coco, so it is
very comfortable indeed).</p>

<p>All you have to do is retrieve you security token from your AWS
account page, create a public/private key pair, then write a recipe
file (which describes what kind of machines and how many you need,
what to install on each, &#8230;), and Whirr takes care of the rest. The
first two steps only have to be done once; you can deploy as many
recipes as you need.</p>

<p>The setup process takes a few minutes, then you can connect with SSH
to one of your remote servers.</p>

<p>Whirr also creates a security configuration for each recipe, opening
only the ports that are required by the servers in the recipe,
limiting source of the connections to specific servers. You can also
edit the security rules directly in the recipe if you want.</p>

<p>The ease with which this can be done is really surprising. It reminds
me of how easy it was to deploy a Rails application on
<a href="http://www.heroku.com/">Heroku</a>.</p>

<p>Now, I do not have any foreseen uses for such computing capacity, but
I can see how it could be helpful for any organisation to be able to
run occasional large data processing jobs without having to maintain a
permanent data center.</p>

<h2>Exercises</h2>

<p>There is only one exercise today: to open a Thrift connection to an
AWS deployed HBase.</p>

<p>First is to get Thrift to run on the deployed machines. The book
suggest to connect by SSH and start the instance there, but there is a
better way if you know you will need Thrift: ask Whirr to deploy it
automatically.</p>

<p>In the file below, I&#8217;ve added the server <code>hbase-thriftserver</code> to the
master server:</p>

<figure class='code'><figcaption><span>hbase.properties (hbase.properties)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/hbase/hbase.properties'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Licensed to the Apache Software Foundation (ASF) under one or more</span>
</span><span class='line'><span class="c"># contributor license agreements.  See the NOTICE file distributed with</span>
</span><span class='line'><span class="c"># this work for additional information regarding copyright ownership.</span>
</span><span class='line'><span class="c"># The ASF licenses this file to You under the Apache License, Version 2.0</span>
</span><span class='line'><span class="c"># (the &quot;License&quot;); you may not use this file except in compliance with</span>
</span><span class='line'><span class="c"># the License.  You may obtain a copy of the License at</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#     http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="c"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="c"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="c"># See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="c"># limitations under the License.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># HBase 0.90.x on Cloudera Hadoop Cluster on AWS EC2</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'>
</span><span class='line'><span class="c"># Read the Configuration Guide for more info:</span>
</span><span class='line'><span class="c"># http://incubator.apache.org/whirr/configuration-guide.html</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the cluster name here</span>
</span><span class='line'><span class="na">whirr.cluster-name</span><span class="o">=</span><span class="s">hbase-0.90</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the number of machines in the cluster here</span>
</span><span class='line'><span class="na">whirr.instance-templates</span><span class="o">=</span><span class="s">1 zookeeper+hadoop-namenode+hadoop-jobtracker+hbase-master+hbase-thriftserver,1 hadoop-datanode+hadoop-tasktracker+hbase-regionserver</span>
</span><span class='line'>
</span><span class='line'><span class="c"># replication level should not be higher than number of data nodes</span>
</span><span class='line'><span class="na">hbase-site.dfs.replication</span><span class="o">=</span><span class="s">2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For EC2 set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables.</span>
</span><span class='line'><span class="na">whirr.provider</span><span class="o">=</span><span class="s">aws-ec2</span>
</span><span class='line'><span class="na">whirr.identity</span><span class="o">=</span><span class="s">${env:AWS_ACCESS_KEY_ID}</span>
</span><span class='line'><span class="na">whirr.credential</span><span class="o">=</span><span class="s">${env:AWS_SECRET_ACCESS_KEY}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The size of the instance to use. See http://aws.amazon.com/ec2/instance-types/</span>
</span><span class='line'><span class="na">whirr.hardware-id</span><span class="o">=</span><span class="s">c1.xlarge</span>
</span><span class='line'><span class="c"># Ubuntu 10.04 LTS Lucid. See http://alestic.com/</span>
</span><span class='line'><span class="na">whirr.image-id</span><span class="o">=</span><span class="s">us-east-1/ami-da0cf8b3</span>
</span><span class='line'><span class="c"># If you choose a different location, make sure whirr.image-id is updated too</span>
</span><span class='line'><span class="na">whirr.location-id</span><span class="o">=</span><span class="s">us-east-1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># By default use the user system SSH keys. Override them here.</span>
</span><span class='line'><span class="na">whirr.private-key-file</span><span class="o">=</span><span class="s">keys/id_rsa</span>
</span><span class='line'><span class="na">whirr.public-key-file</span><span class="o">=</span><span class="s">keys/id_rsa.pub</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The HBase version to use.</span>
</span><span class='line'><span class="na">whirr.hbase.tarball.url</span><span class="o">=</span><span class="s">http://apache.cu.be/hbase/hbase-0.90.4/hbase-0.90.4.tar.gz</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The Hadoop version to use. See http://hbase.apache.org/book/hadoop.html</span>
</span><span class='line'><span class="c"># The default Hadoop version used by Whirr does not fulfill the HBase 0.90.x requirements.</span>
</span><span class='line'><span class="c"># Whirr will replace the hadoop-core jar in HBase with the one from the actually installed Hadoop.</span>
</span><span class='line'><span class="c"># This example uses Cloudera&#39;s CDH3.</span>
</span><span class='line'><span class="na">whirr.hadoop.tarball.url</span><span class="o">=</span><span class="s">http://archive.cloudera.com/cdh/3/hadoop-0.20.2-cdh3u2.tar.gz</span>
</span></code></pre></td></tr></table></div></figure>


<p>As for the connection to the Thrift server, the method described in
the book is to open the port 9090 to the world, and to hope to be the
only one to know about this port: a likely possibility, but who would
want to take such a chance in production?</p>

<p>Fortunately, there is a better solution: SSH Tunneling. It is very
easy to set up and requires nothing but what we already have.</p>

<p>The general idea is to open a ssh tunnel between a local port and a
remote port: whatever you puts in the local port is taken by ssh,
transported over the SSH connection; once it reaches the remote
machine, the remote ssh instance will forward the data to the remote
port, as if it was a client running on the remote machine.</p>

<p>The transport between the two machines only requires the remote one to
have the SSH port open (which is both the case, and secure). You have
to use authentication and encryption for the transport.</p>

<p>And what is required to implement this SSH tunneling:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i keys/id_rsa -f ${USER}@&lt;SERVER_NAME&gt; -L 9090:&lt;SERVER_NAME&gt;:9090 -N</span></code></pre></td></tr></table></div></figure>


<p>(from the directory where you created the <code>keys</code> directory)</p>

<p>Here I map the local port 9090 to the remote machine&#8217;s port 9090. That
way I don&#8217;t even have to change my <code>thrift_example.rb</code> code. But of
course, if I had to connect to different machines, I would use
different ports.</p>

<p>The Thrift server was automatically started by the recipe.</p>

<p>With this in place, and after creating some tables in the remote
HBase:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby thrift_example.rb 
</span><span class='line'>links
</span><span class='line'>  from:
</span><span class='line'>    maxVersions: 1
</span><span class='line'>    compression: NONE
</span><span class='line'>    bloomFilterType: ROWCOL
</span><span class='line'>  to:
</span><span class='line'>    maxVersions: 1
</span><span class='line'>    compression: NONE
</span><span class='line'>    bloomFilterType: ROWCOL
</span><span class='line'>wiki
</span><span class='line'>  revision:
</span><span class='line'>    maxVersions: 2147483647
</span><span class='line'>    compression: NONE
</span><span class='line'>    bloomFilterType: NONE
</span><span class='line'>  text:
</span><span class='line'>    maxVersions: 2147483647
</span><span class='line'>    compression: GZ
</span><span class='line'>    bloomFilterType: ROW</span></code></pre></td></tr></table></div></figure>


<p>(be careful not to use LZO as a compression algorithm in the remote
HBase, as I did when I tried the first time: the default HBase has no
LZO support and will fail when you try to enable a table with LZO compression).</p>

<p>To take a tunnel down, you&#8217;ll have to find and kill it (as far as I
can tell). If you have no other ssh connections, <code>killall ssh</code> is a
simple solution. In any case, the connection will be cut when the
remote servers are destroyed.</p>

<h2>Wrapping up HBase</h2>

<p>I like what I see with HBase: the project has strong backers among its
users (Yahoo, Facebook, &#8230;); it belongs to a large family of tools
that help to design Big Data solutions, and integrates well with some
Cloud networks</p>

<p>The model is easy to understand (the book mentions the possibility of
eventual consistency due to regional replication, but this remains a
simpler model than Riak&#8217;s), and close to the original MapReduce
concept.</p>

<p>This is really one tool I will have a closer look to in the near
future.</p>
]]></content>
  </entry>
  
</feed>
