<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2012-01-06T16:22:00+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Notes]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics-chapter-1-notes/"/>
    <updated>2012-01-06T13:52:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics-chapter-1-notes</id>
    <content type="html"><![CDATA[<p>For the first post of this hopefully long series, I have a few notes I
wrote down as I was reading Chapter 1. Nothing revolutionary, but it
gives me a chance to play with math notation.</p>

<!--more-->


<h1>Lines in the Plane</h1>

<p>I must admit that my memories of Geometry are far, far away (the
subject was not addressed at all when I studied Mathematics at
university, and I had no need for Geometry in my work since), so I
spent perhaps an unreasonable amount of time to check the validity of
the most elementary steps.</p>

<p>It goes without saying that the exercises of a Geometric nature are
particularly challenging (as if I needed the extra difficulty).</p>

<h2>Intersecting lines</h2>

<p>The notion that one line will add $k$ new regions if it intersects
other lines at $k-1$ points is due to the fact that $k-1$ distinct
lines define at least $k$ regions (more if they are not all parallel),
and one more line that intersects them all will divide these $k$
regions in two.</p>

<h1>Josephus Problem</h1>

<h2>$J(5 \cdot 2^m) = 2^{m+1} + 1$</h2>

<p>This is based on the fact that $J(10) = 5$ and $J(2n) = 2J(n) -1$.</p>

<p>By recurrence:</p>

<p><em>Base case</em>: it is true for $m = 1$: $J(5\cdot 2) = J(10) = 5 =
2^{1+1} + 1$</p>

<p><em>Recurrence</em>: assuming it is true for $m$,</p>

<div markdown="0">
$$
\begin{align}
J(5\cdot 2^{m+1}) &amp;= J(2(5\cdot 2^m))&#92;&#92;
&amp;= 2J(5\cdot 2^m) - 1&amp;&amp;\text{as $J(2n) = 2J(n) -1$}&#92;&#92;
&amp;= 2(2^{m+1}+1) - 1&amp;&amp;\text{by recurrence}&#92;&#92;
&amp;= 2\cdot 2^{m+1} + 2 - 1&#92;&#92;
&amp;= 2^{m+2} + 1
\end{align}
$$
</div>


<h2>$A(2^{m}+l) = 2^{m}$</h2>

<p>It took me a while to convince myself that the $l$ was not a problem
here. This can be seen by considering $l$ in binary notation, and
using $A(2n) = 2A(n)$ and $A(2n+1) = 2A(n)$ to remove the rightmost
bit.</p>

<p>That is, with $2^m > l = (b_{m-1}b_{m-2}\cdots b_{1}b_{0})_2$,we have:</p>

<div markdown="0">
$$
\begin{align}
A(2^{m}+l) &amp;= A(2^{m}+(b_{m-1}b_{m-2}\cdots b_{1}b_{0})_2)&#92;&#92;
&amp;= 2A(2^{m-1}+(b_{m-1}b_{m-2}\cdots b_{1})_2)&#92;&#92;
&amp;= 2^{2}A(2^{m-2}+(b_{m-1}b_{m-2}\cdots b_{2})_2)&#92;&#92;
&amp;= 2^{3}A(2^{m-3}+(b_{m-1}b_{m-2}\cdots b_{3})_2)&#92;&#92;
&amp;= \cdots
\end{align}
$$
</div>


<p>At each iteration, whether $b_i$ is $0$ or $1$, we can ignore it when
dividing by $2$. And as $2^m &lt; l$, it takes no more than $m$ steps
(removing the $m$ bits $b_0$ to $b_{m-1}$) to reduce $A(2^m+l)$ to
$2^mA(1) = 2^m$</p>

<h2>Radix-based Generalised Josephus Solution</h2>

<p>The equation 1.18:</p>

<p>$$f \left( ( b_m b_{m-1} \cdots b_1 b_0)_d \right) = \left( \alpha_{b_m} \beta_{b_{m-1}} \beta_{b_{m-2}} \cdots \beta_{b_1} \beta_{b_0} \right)_c$$</p>

<p>is so unnaturally smart and simple that I thought the proof must be
missing. But in fact it is indeed trivial, and just as the book
states, follows from the rewriting of the argument in base $d$, then
recurrence over $m$ (with $m$ the number of digits or the argument in
base $d$).</p>

<p>In the next post in this series, I will start the exercises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics/"/>
    <updated>2012-01-06T13:16:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics</id>
    <content type="html"><![CDATA[<p>Stephen Hawking once said that his editor had warned him that each
equation in his book would halve the readership.</p>

<p>With that in mind, and taking into account the number of readers of
this blog (or lack thereof), would I dare put any equations?</p>

<p>You better believe it!</p>

<!--more-->


<p>I just picked up my old copy of
<a href="http://en.wikipedia.org/wiki/Concrete_Mathematics">Concrete Mathematics</a>,
a book I have too long neglected. The ultimate goal, of course, is
slaying the
<a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming">Beast</a>,
which I should try to complete before Donald E. Knuth passes away.
While I wish him a very long life, long enough at least to complete
<a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming#Volumes">Volume 5</a>,
and better yet 6 and 7, I should not take his remarkable health as an
excuse to dither.</p>

<p>For the math notation, I use <a href="http://www.mathjax.org/">MathJax</a>, a
JavaScript library that can parse either
<a href="http://www.w3.org/Math/">MathMl</a>, or much better
<a href="http://www.latex-project.org/">LaTeX</a> (which is based on
<a href="http://www.math.upenn.edu/TeX.html">TeX</a>, another gift of Donald
E. Knuth to the world).</p>

<p>The setup for this blog is based on this
<a href="http://greglus.com/blog/2011/11/29/integrate-MathJax-LaTeX-and-MathML-Markup-in-Octopress/">post</a>.</p>

<p>The quality of rendering is variable: pretty good in Firefox, OK in
Safari or Chrome, and no idea in IE or Opera. Of course, it is not as
good as the output of LaTeX, but for the Web it is acceptable.</p>

<p>Given the recurrence</p>

<div markdown="0">
$$
\begin{align}
f(j) &amp; = \alpha_j, &amp;&amp;\text{for $1 &#92;leq j &#92;lt  d$}&#92;&#92;
f(dn + j) &amp; = cf(n) + \beta_j, &amp;&amp;\text{for $0 &#92;leq j &#92;lt d$ and $n &#92;geq 1$}
\end{align}
$$
</div>


<p>then the solution is</p>

<p>$$f \left( ( b_m b_{m-1} \cdots b_1 b_0)_d \right) = \left( \alpha_{b_m} \beta_{b_{m-1}} \beta_{b_{m-2}} \cdots \beta_{b_1} \beta_{b_0} \right)_c$$</p>

<p>(refer to the book for explanations).</p>

<p>Isn&#8217;t this lovely?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Neo4j Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/30/seven-databases-in-seven-weeks-neo4j-day-3/"/>
    <updated>2011-12-30T21:15:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/30/seven-databases-in-seven-weeks-neo4j-day-3</id>
    <content type="html"><![CDATA[<p>Third, last and quite short day with Neo4j. Today on the menu:
transactions, replication, and backups.</p>

<p>Transactions are a standard feature of relational databases, but NOSQL
databases seem to consider them too costly (of the other databases in
the book, only HBase and Redis also support transactions, as far as I
can tell). Neo4j does support them, along with rollbacks.</p>

<p>Replication is Neo4j&#8217;s answer for High Availability and, to some
extent, Scaling. The latter is limited as Neo4j does not partition the
data, so everything has to fit in each computer in the cluster.</p>

<p>Finally, backups are exactly what you would expect them to be. Neo4J
offers both full and incremental backups, which update a previous
backup.</p>

<!--more-->


<h3>Transactions</h3>

<p>I cannot comment much on transactions, as I could not use them: the
Gremlin shell from the Web Admin console could not find the required
enumeration (which I imported, though), while the Gremlin standalone
shell was giving me strange errors when I tried to import the relevant
classes.</p>

<p>I suppose pure Java would be more reliable, either as standalone code
or plugin, but I did not explore that possibility.</p>

<h3>High-Availability</h3>

<p>High-availability is achieved by deploying and linking together
several instances of Neo4j. The setup is somewhat tedious, as there
are additional processes to configure and run (the coordinators), and
four different configuration files to edit. Really, this is the kind
of things you&#8217;d wish <a href="http://whirr.apache.org/">Apache Whirr</a> would do
for you.</p>

<p>But if you want to do it manually, you should follow the
<a href="http://docs.neo4j.org/chunked/stable/ha-setup-tutorial.HTML">online documentation</a>
rather than the book version (at least in beta version 2.0): the book
use the property <code>ha.zoo_keeper_servers</code> in the <code>neo4j.properties</code>
configuration file, when the correct property is
<code>ha.coordinators</code>. What is worse is that it will look like it works,
until you try to write to a slave over the ReST API, which will fail
with an exception. Writes to the master would also not be pulled by
the slaves. Using the right property name fixes these problems.</p>

<p>Once set up, the cluster will have one master and several slaves. The
master contains the authoritative version of the data. The book
recommends to always write to slaves, as they have to push any update
to the master before completing the update, meaning you have a
guaranteed replication of your data. However, what the book does not
explain is how to figure out which server is slave, or even whether
the list of servers in the cluster can be discovered&#8230;.</p>

<p>Actually, it is possible to have some idea of which server is the
master by querying any server with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -H "Content-Type:application/json" -d '["org.neo4j:*"]' http://localhost:7471/db/managerver/jmx/query</span></code></pre></td></tr></table></div></figure>


<p>(assuming one of the server is listening to port <code>7471</code>). A sample
reply is shown (only partially, as it is very long) one the
<a href="http://docs.neo4j.org/chunked/snapshot/ha-setup-tutorial.html">HA setup tutorial</a>. But
the actual address of each server is not shown, and I could not find
any way to get the address property to be properly filled.</p>

<p>So the proper way to use such a cluster is probably to use the
<a href="http://haproxy.1wt.eu/">HAProxy</a>, as explained in
<a href="http://docs.neo4j.org/chunked/snapshot/ha-haproxy.html">Neo4j HA documentation</a>. It
can be configured to differentiate between master and slaves, and to
restrict connections to slaves (keeping the list updated with a
check). It can also split the requests by some specific parameter (for
instance, the user id), and direct the requests the same server for a
given value of the parameter. While Neo4j does not shard the data
itself, this mechanism can be used to shard the data cache (what must
be loaded in memory).</p>

<h3>Backups</h3>

<p>Neo4j support remote, full or incremental backups. Incremental backups
are properly understood as update to the previous backup (either full
or incremental), and are therefore much faster.</p>

<p>This is a good feature, and should be used often. But as I&#8217;m just
playing, and the notion of backup does not lend itself to exploration,
I just looked at them briefly.</p>

<h2>Exercises</h2>

<h3>Neo4j licensing guide</h3>

<p>The <a href="http://neo4j.org/licensing-guide/">guide</a> is fortunately quite
short.</p>

<h3>Read-only slaves</h3>

<p>This seems to be a description of the original HA feature in Neo4j,
but as far as I can tell it does not exist anymore. In fact, there is
an
<a href="https://github.com/neo4j/enterprise/commit/480256bfff036784dc82897d2348a16e3fbf6c03#ha/src/docs/dev/operation.txt">update</a>
to the official documentation to remove the mention of read-only
slave.</p>

<p>There used to be a Java class to create a server as read-only slave,
as documented
<a href="http://wiki.neo4j.org/index.php?title=Online_Backup_HA&amp;redirect=no#Starting_a_read-only_slave">here</a>,
but it no longer exists either.</p>

<h3>Maximum number of nodes supported</h3>

<p><a href="http://docs.neo4j.org/chunked/stable/questions.html#id474370">34.4 billion nodes</a>.</p>

<h3>Replication across three physical servers</h3>

<p>As I already <a href="http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2/">explained</a> how to setup a cluster of EC2 virtual machines
for Riak, I will go skip all the details.</p>

<p>I launched four instances: one will be the HAProxy server, the
remaining three the Neo4j servers.</p>

<h4>Security Setup</h4>

<p>All the rules but the first one are internal (i.e. the source is the
name of the security group, which should be specific to the cluster).</p>

<ul>
<li>22 (SSH) - source <code>0.0.0.0/0</code></li>
<li>2181: coordinator client port</li>
<li>2888: quorum election port</li>
<li>3888: leader election port</li>
<li>6001: inter cluster communication port</li>
<li>7474: web interface for the Neo4j servers</li>
<li>8080: admin interface for HAProxy</li>
<li>80: web interface for the proxy</li>
</ul>


<p>Neo4j does not need ranges, unlike Riak.</p>

<h4>Instance setups</h4>

<p>I connect to each of the Neo4j server, and download the Enterprise
edition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://dist.neo4j.org/neo4j-enterprise-1.5-unix.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>First step is to configure the coordinators. I edit the
<code>conf/coord.cfg</code> file and replace the server.1 property with the block</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server.1=10.202.90.131:2888:3888    
</span><span class='line'>server.2=10.202.81.171:2888:3888    
</span><span class='line'>server.3=10.195.78.222:2888:3888</span></code></pre></td></tr></table></div></figure>


<p>(I got the IP addresses by using the <code>ifconfig</code> command on each
instance). I also update the <code>data/coordinator/myid</code> of each instance
with own number (1 to 3).</p>

<p>I then modified each <code>conf/neo4j.properties</code>, setting each to its own
<code>ha.server_id</code>, and setting the <code>ha.coordinators</code> to
<code>10.202.90.131:2181,10.202.81.171:2181,10.195.78.222:2181</code>. I also
changed the <code>ha.server</code> to use the <code>eth0</code> IP address rather than <code>localhost</code>.</p>

<p>Finally, I modified each <code>conf/neo4j-server.properties</code>:</p>

<ul>
<li>the web server needs to listen to the <code>eth0</code> IP address rather than
<code>localhost</code> (for instance, <code>org.neo4j.server.webserver.address=10.202.90.131</code>);</li>
<li>the server needs to be set to HA mode:
<code>org.neo4j.server.database.mode=HA</code></li>
</ul>


<p>Surprisingly enough, the three servers did start and were configured properly&#8230;</p>

<p>I checked the setup with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -H "Content-Type:application/json" -d '["org.neo4j:*"]'
</span><span class='line'>http://10.202.90.131:7474/db/manage/server/jmx/query</span></code></pre></td></tr></table></div></figure>


<p>I looked for the string <code>InstancesInCluster</code>, and made sure there were
three known servers.</p>

<p>Finally I pushed something into the second (slave) server using</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X POST http://10.202.81.171:7474/db/data/node \
</span><span class='line'>-H "Content-Type: appliction/json" \
</span><span class='line'>-d '{"name": "P.G. Wodehouse", "genre": "British Humour"}'</span></code></pre></td></tr></table></div></figure>


<p>then tried to retrieve it from the third (slave) server with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://10.195.78.222:7474/db/data/node/1
</span><span class='line'>{
</span><span class='line'>  "outgoing_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/out",
</span><span class='line'>  "data" : {
</span><span class='line'>    "genre" : "British Humour",
</span><span class='line'>    "name" : "P.G. Wodehouse"
</span><span class='line'>  },
</span><span class='line'>  "traverse" : "http://10.195.78.222:7474/db/data/node/1/traverse/{returnType}",
</span><span class='line'>  "all_typed_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/all/{-list|&|types}",
</span><span class='line'>  "property" : "http://10.195.78.222:7474/db/data/node/1/properties/{key}",
</span><span class='line'>  "self" : "http://10.195.78.222:7474/db/data/node/1",
</span><span class='line'>  "properties" : "http://10.195.78.222:7474/db/data/node/1/properties",
</span><span class='line'>  "outgoing_typed_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/out/{-list|&|types}",
</span><span class='line'>  "incoming_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/in",
</span><span class='line'>  "extensions" : {
</span><span class='line'>  },
</span><span class='line'>  "create_relationship" : "http://10.195.78.222:7474/db/data/node/1/relationships",
</span><span class='line'>  "paged_traverse" : "http://10.195.78.222:7474/db/data/node/1/paged/traverse/{returnType}{?pageSize,leaseTime}",
</span><span class='line'>  "all_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/all",
</span><span class='line'>  "incoming_typed_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/in/{-list|&|types}"</span></code></pre></td></tr></table></div></figure>


<p>So far so good&#8230;</p>

<h3>Load-balancer</h3>

<p>Well, <a href="http://haproxy.1wt.eu">HAproxy</a> seems a good choice, so I&#8217;ll go with that.</p>

<p>The
<a href="http://docs.neo4j.org/chunked/snapshot/ha-haproxy.html">documentation</a>
proposes to restrict access to slaves using a &#8220;small extension&#8221;. This
is in fact a piece of Java code that can be downloaded from
<a href="https://github.com/dmontag/neo4j-hastatus-extension">Github</a>.</p>

<p>The compiled jar should be copied to the <code>lib</code> directory of each
instance, and the <code>conf/neo4j-server.properties</code> configuration file
updated to contain the line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.neo4j.server.thirdparty_jaxrs_classes=org.neo4j.server.hastatus=/hastatus</span></code></pre></td></tr></table></div></figure>


<p>as documented on the page above.</p>

<h4>Testing Locally</h4>

<p>As a first test, I deployed HAProxy on my own machine, using this
configuration file:</p>

<figure class='code'><figcaption><span> (haproxy_local.cfg)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/haproxy_local.cfg'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">global</span>
</span><span class='line'><span class="err">    daemon</span>
</span><span class='line'><span class="err">    maxconn 256</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">defaults</span>
</span><span class='line'><span class="err">    mode http</span>
</span><span class='line'><span class="err">    timeout connect 5000ms</span>
</span><span class='line'><span class="err">    timeout client 50000ms</span>
</span><span class='line'><span class="err">    timeout server 50000ms</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">frontend http-in</span>
</span><span class='line'><span class="err">    bind *:7000</span>
</span><span class='line'><span class="err">    default_backend neo4j-slaves</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">backend neo4j-slaves</span>
</span><span class='line'><span class="err">    option httpchk GET /hastatus/slave</span>
</span><span class='line'><span class="err">    server s1 localhost:7471 maxconn 32 check</span>
</span><span class='line'><span class="err">    server s2 localhost:7472 maxconn 32 check</span>
</span><span class='line'><span class="err">    server s3 localhost:7473 maxconn 32 check</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">listen admin</span>
</span><span class='line'><span class="err">    bind *:8080</span>
</span><span class='line'><span class="err">    stats enable</span>
</span></code></pre></td></tr></table></div></figure>


<p>I had installed HAProxy with
<a href="http://mxcl.github.com/homebrew/">Homebrew</a>. The config above does
not bind to port <code>*:80</code>, so I can run it without root privileges:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/sbin/haproxy -f haproxy_local.cfg</span></code></pre></td></tr></table></div></figure>


<p>Once up, I opened a browser on
<a href="http://localhost:8080/haproxy?stats">HAProxy stat page</a> (it is not
JSON, you really need a browser), to check that two instances of Neo4j
were configured as slaves and available.</p>

<p>Finally, I checked a Gremlin script with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST
</span><span class='line'>http://localhost:7000/db/data/ext/GremlinPlugin/graphdb/execute_script
</span><span class='line'>-H "content-type:application/json" -d '{"script":"g.V.name"}'
</span><span class='line'>[ "null", "null", "null", "null", "P.G. Wodehouse", "null", "P.G. Wodehouse", "P.G. Wodehouse" ]</span></code></pre></td></tr></table></div></figure>


<p>(the <code>7000</code> is the HAProxy port, not any of the Neo4j ports). I had a
few P.G. Wodehouse nodes I inserted when I was testing writes to slaves.</p>

<p>Ok, this is ready to be tested on the AWS cluster.</p>

<h4>Deploying on the cloud</h4>

<p>I used the small cluster deployed in the previous exercise. I just
copied the Neo4j HAStatus extension jar to each machine (in the <code>lib</code>
directory), and changed the <code>conf/neo4j-server.properties</code> exactly as
above.</p>

<p>I quickly checked that the extension was installed with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://10.202.90.131:7474/hastatus/master
</span><span class='line'>curl http://10.202.81.171:7474/hastatus/slave
</span><span class='line'>curl http://10.195.78.222:7474/hastatus/slave</span></code></pre></td></tr></table></div></figure>


<p>(each is supposed to return nothing. If there&#8217;s a problem, these
commands will return an error page).</p>

<p>Everything looks fine. Time to set up the HAProxy machine.</p>

<p>Once again, I followed the instructions from the
<a href="http://docs.neo4j.org/chunked/stable/ha-haproxy.html">Neo4j documentation</a>:
first I installed the &#8220;Development Tools&#8221;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y groupinstall 'Development Tools'</span></code></pre></td></tr></table></div></figure>


<p>This step is very fast because they all are stored in the Amazon
Cloud.</p>

<p>I retrieved the HAProxy code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.18.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>To build it, I used the command <code>make TARGET=26</code> (which means build
for a recent version of Linux).</p>

<p>I did not copy the executable, as I will run it without root
privileges anyway.</p>

<p>I created a file <code>haproxy.cfg</code> that contains:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global
</span><span class='line'>    daemon
</span><span class='line'>    maxconn 256
</span><span class='line'>
</span><span class='line'>defaults
</span><span class='line'>    mode http
</span><span class='line'>    timeout connect 5000ms
</span><span class='line'>    timeout client 50000ms
</span><span class='line'>    timeout server 50000ms
</span><span class='line'>
</span><span class='line'>frontend http-in
</span><span class='line'>    bind *:7000
</span><span class='line'>    default_backend neo4j-slaves
</span><span class='line'>
</span><span class='line'>backend neo4j-slaves
</span><span class='line'>    option httpchk GET /hastatus/slave
</span><span class='line'>    server s1 10.202.90.131:7474 maxconn 32 check
</span><span class='line'>    server s2 10.202.81.171:7474 maxconn 32 check
</span><span class='line'>    server s3 10.195.78.222:7474 maxconn 32 check
</span><span class='line'> 
</span><span class='line'>listen admin
</span><span class='line'>    bind *:8080
</span><span class='line'>    stats enable</span></code></pre></td></tr></table></div></figure>


<p>which is essentially the same file as the file <code>haproxy_local.cfg</code>
above.</p>

<p>I established SSH tunnels to ports <code>7000</code> and <code>8080</code>, checked the
status of the proxy on <code>http://localhost:8080/haproxy?stats</code> (I had
made a mistake to one of the IP address, so I fixed it and restarted
the proxy).</p>

<p>Finally, I was able to run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST http://localhost:7000/db/data/ext/GremlinPlugin/graphdb/execute_script \
</span><span class='line'>-H "content-type:application/json" -d '{"script":"g.V.name"}'
</span><span class='line'>[ "null", "P.G. Wodehouse" ]</span></code></pre></td></tr></table></div></figure>


<p>And all was good.</p>

<h2>Wrapping up Neo4j</h2>

<p>This is another database I had to fight all along the way. The
book, the available documentation, and the actual behaviour of the
database overlap only partially. Figuring out what is actually
possible and how to achieve it was harder than for any other databases
in the book.</p>

<p>One thing that was especially irritating is the error handling of the
Gremlin shell: a syntax error such as a missing closing quote renders
the shell unusable: it keeps complaining about the syntax error, but
offers no way to actually correct it. And I could find no way to
reset the shell, except by restarting the whole server&#8230;</p>

<p>This, and the fact that both the embedded interpreter or the
standalone shell are unstable in their own different ways (not to
mention slightly incompatible) makes Gremlin useless. But the
alternatives, Cipher or Java, are not really usable either: Cipher is
too limited, Java too verbose and its syntax ill suited.</p>

<p>This said, Neo4j occupies a fairly specific niche which does not have
many alternatives. Let&#8217;s hope the ecosystem stabilises into
something more coherent and stable.</p>

<h2>The other databases</h2>

<p>It seems the Redis might be available soon, but CouchDB is not there
yet. So I will probably switch to a different book for the time being.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Neo4j Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/29/seven-databases-in-seven-weeks-neo4j-day-2/"/>
    <updated>2011-12-29T09:17:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/29/seven-databases-in-seven-weeks-neo4j-day-2</id>
    <content type="html"><![CDATA[<p>Today we play further with Neo4j, exploring the ReST API, indexes, and
algorithms in various languages.</p>

<p>The ReST API is always available, although not the easiest thing to
work with. Besides what the book covers, I also learned how to extend
it, and how to bypass it for large loads.</p>

<p>Indexing can be manual, as the book shows, or automatic (although
the
<a href="http://docs.neo4j.org/chunked/snapshot/auto-indexing.html">documentation</a>
warns this is still an experimental feature).</p>

<p>Finally, the algorithms are mostly provided by an external library,
<a href="http://jung.sourceforge.net/">JUNG</a>, so its use require direct access
to the data, bypassing the server.</p>

<!--more-->


<h3>Creating an index on relationship</h3>

<p>As the index is of type <code>exact</code>, there is no need to create it first
(although it is
<a href="http://docs.neo4j.org/chunked/snapshot/rest-api-indexes.html#rest-api-create-node-index">possible</a>). Just
inserting data in the index will do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST http://localhost:7474/db/data/index/relationship/published \
</span><span class='line'>-H "Content-Type: application/json" \
</span><span class='line'>-d '{ "uri" : "http://localhost:7474/db/data/relationship/0", \
</span><span class='line'>"key" : "date", "value" : "1916-11-28" }'</span></code></pre></td></tr></table></div></figure>


<h3>About the ReST API</h3>

<p>Clearly this is not how one would want to program. I copied the
<a href="http://media.pragprog.com/titles/rwdata/code/neo4j/importer.rb"><code>importer.rb</code></a>
code from the book (instead of just using a downloaded version), and
ran it for hours before finding a bug in the data to create
indexes&#8230; Running it again with this bug fixed made it much faster
(as actors were reused instead of being duplicated).</p>

<p>There is a higher level API, <a href="http://neo4j.rubyforge.org/">Neo4j.rb</a>,
which runs on JRuby (so it does not use the ReST API). It should be
noted that this is not really a driver, but a library to manage a
Neo4j database directly in Ruby. Still, with it, it is possible to
create the database that will be used by a server. There are other
alternatives (the Gremlin console, for instance), but for Ruby it
seems to be one of the most advanced, and is still being improved.</p>

<p>There is also a ReST API wrapper called
<a href="https://github.com/maxdemarzi/neography">neography</a>, but as I&#8217;m
trying to save time I&#8217;ll go with Neo4j.rb.</p>

<p>To use this API you first need to clone the Git repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/andreasronge/neo4j.git</span></code></pre></td></tr></table></div></figure>


<p>In the <code>neo4j</code> directory, build then install the gem (making sure
the default Ruby is JRuby):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem build neo4j.gemspec
</span><span class='line'>  Successfully built RubyGem
</span><span class='line'>  Name: neo4j
</span><span class='line'>  Version: 1.3.1
</span><span class='line'>  File: neo4j-1.3.1-java.gem
</span><span class='line'>$ gem install neo4j-1.3.1-java.gem
</span><span class='line'>... (lot's of output elided)</span></code></pre></td></tr></table></div></figure>


<p>As I said above, it is possible to use it to feed data into a
database, but it should not be used while the server is running. I
used it to create the movie network, as it was significantly faster
than the book Ruby script.</p>

<p>To do so, I first rewrite the import script to use the <code>neo4j</code> gem. I
am also using the
<a href="http://neo4j.rubyforge.org/guides/batch_insert.html"><code>Neo4j::Batch::Inserter</code></a>
for extra performance; the resulting code is less readable, but not
significantly so. The script is mostly the same size as the original
one, but much easier to understand (if you know the <code>neo4j</code> gem).</p>

<figure class='code'><figcaption><span> (importer_driver.rb)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/importer_driver.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{rubygems neo4j}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="nb">require</span> <span class="n">r</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Movie</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">NodeMixin</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">index</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Actor</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">NodeMixin</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">index</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">has_n</span><span class="p">(</span><span class="ss">:acted_in</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="no">Movie</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">create_node</span><span class="p">({</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">},</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>    <span class="n">inserter</span><span class="o">.</span><span class="n">index_flush</span><span class="p">(</span><span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;begin processing...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Neo4j</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:storage_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;NEO4J_HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/data/graph.db&quot;</span>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">inserter</span> <span class="o">=</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">Batch</span><span class="o">::</span><span class="no">Inserter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">actor</span><span class="p">,</span> <span class="n">movie</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">next</span> <span class="k">if</span> <span class="n">actor</span><span class="o">.</span><span class="n">empty?</span> <span class="o">||</span> <span class="n">movie</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">actor_node</span> <span class="o">=</span> <span class="n">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="n">actor</span><span class="p">,</span> <span class="no">Actor</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movie_node</span> <span class="o">=</span> <span class="n">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="n">movie</span><span class="p">,</span> <span class="no">Movie</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">inserter</span><span class="o">.</span><span class="n">create_rel</span><span class="p">(</span><span class="no">Actor</span><span class="o">.</span><span class="n">acted_in</span><span class="p">,</span> <span class="n">actor_node</span><span class="p">,</span> <span class="n">movie_node</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;  </span><span class="si">#{</span><span class="n">count</span><span class="si">}</span><span class="s2"> relationships loaded&quot;</span> <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;done!&quot;</span>
</span><span class='line'><span class="n">inserter</span><span class="o">.</span><span class="n">shutdown</span>
</span></code></pre></td></tr></table></div></figure>


<p>I first shut down the Neo4j server. I defined a
<code>NEO4J_HOME</code> environment variable as the root of the Neo4j instance,
and cleared the content of <code>$NEO4J_HOME/data/graph.db</code> with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf $NEO4J_HOME/data/graph.db/*</span></code></pre></td></tr></table></div></figure>


<p>While not strictly necessary, this step helps ensure that the database
is always in a known (i.e. empty) state each time.</p>

<p>Finally I ran the script with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jruby importer_driver.rb performance.tsv</span></code></pre></td></tr></table></div></figure>


<p>The whole import took a little above 1 hour on my not really powerful
macBook Air. The original script never finished, even after running a
few hours.</p>

<p>I also found that index creation is the main cost: my first attempt at
loading data did not use indexes at all: the whole file was loaded in
less than 3 minutes (but of course the resulting graph was
unusable).</p>

<p>The script is not complete; it should certainly handle exceptions and
close the database properly. But for an initial load it does the job.</p>

<p>After it finished, I just restarted the server.</p>

<p>Note: I strongly suggest backing up the <code>data/graph.db</code> directory just
after the initial load (and before starting the server). I had a crash
while running the Kevin Bacon queries, and Neo4j unhelpfully lost the
property data file, forcing me to import again&#8230;</p>

<p>A data corruption during a read only operation does not inspire
confidence&#8230;</p>

<h3>Indexes</h3>

<p>Once thing I had not properly understood, and which caused me some
problems as I was trying to learn how to use the driver, is that
all indexes use Lucene. They are either <code>exact</code> or <code>fulltext</code>, and can
be queried as shown here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:7474/db/data/index/node/
</span><span class='line'>{
</span><span class='line'>  "movies" : {
</span><span class='line'>    "template" : "http://localhost:7474/db/data/index/node/movies/{key}/{value}",
</span><span class='line'>    "provider" : "lucene",
</span><span class='line'>    "type" : "exact"
</span><span class='line'>  },
</span><span class='line'>  "actors" : {
</span><span class='line'>    "template" : "http://localhost:7474/db/data/index/node/actors/{key}/{value}",
</span><span class='line'>    "provider" : "lucene",
</span><span class='line'>    "type" : "exact"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>So the fact that the driver only supports Lucene indexes is not a
limitation. There is nothing else (although presumably there could be).</p>

<h3>Extending Neo4j</h3>

<p>As I found on this
<a href="http://blog.neo4j.org/2010/12/neo4j-12-m06-is-out-better-rest.html">post</a>,
it is fairly easy to extend the ReST API with arbitrary
code. Deploying the code is a simple as copying the jar at the right
location.</p>

<p>The
<a href="http://docs.neo4j.org/chunked/snapshot/server-plugins.html">official documentation</a>
is mostly an updated version of the post above.</p>

<p>I claimed
<a href="http://blog.wakatta.jp/blog/2011/12/28/seven-databases-in-seven-weeks-neo4j-day-1/">yesterday</a>
that it was impossible to the ReST API directly to list just the names
of all the nodes.</p>

<p>Of course, today I know I could pass a Gremlin expression through
ReST, and get the same result as in the console. But that could be
considered cheating.</p>

<p>The alternative is to use extend the ReST with a plugin, as I show
here.</p>

<p>As always, the use of Maven is recommended. My <code>pom.xml</code> loads the
<code>server-api</code> for Neo4j:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/list_names/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>listNames<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>      <span class="nt">&lt;neo4j.version&gt;</span>1.5<span class="nt">&lt;/neo4j.version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.neo4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>server-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>${neo4j.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Java code is simplified by the use of annotations. The code
returns an iterator that extract the names of the underlying node
iterator:</p>

<figure class='code'><figcaption><span> (ListNames.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/list_names/ListNames.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.GraphDatabaseService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.Node</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.Description</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.Name</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.PluginTarget</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.ServerPlugin</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.Source</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Description</span><span class="o">(</span><span class="s">&quot;An extension to list all node names&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListNames</span> <span class="kd">extends</span> <span class="n">ServerPlugin</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Name</span><span class="o">(</span><span class="s">&quot;list_all_names&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Description</span><span class="o">(</span><span class="s">&quot;List all the node names&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@PluginTarget</span><span class="o">(</span><span class="n">GraphDatabaseService</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">getAllNames</span><span class="o">(</span><span class="nd">@Source</span> <span class="n">GraphDatabaseService</span> <span class="n">graphDb</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">nodeIterator</span> <span class="o">=</span> <span class="n">graphDb</span><span class="o">.</span><span class="na">getAllNodes</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="k">new</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="nd">@Override</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// do nothing </span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="nd">@Override</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="n">String</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                          <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">nodeIterator</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>                      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                          <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>                      <span class="o">}</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="nd">@Override</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                      <span class="k">return</span> <span class="n">nodeIterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">};</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, it is important to have add a file
<code>META-INF/services/org.neo4j.server.plugins.ServerPlugin</code> with the
complete name of the new plugins (in this case, just one):</p>

<figure class='code'><figcaption><span> (org.neo4j.server.plugins.ServerPlugin)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/list_names/org.neo4j.server.plugins.ServerPlugin'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">jp.wakatta.ListNames</span>
</span></code></pre></td></tr></table></div></figure>


<p>The jar should be copied to the <code>plugins</code> directory of the Neo4j
instance, and Neo4j restarted.</p>

<p>It is possible to test the correct deployment of the plugin using the
ReST API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl  http://localhost:7474/db/data/
</span><span class='line'>{
</span><span class='line'>  "relationship_index" : "http://localhost:7474/db/data/index/relationship",
</span><span class='line'>  "node" : "http://localhost:7474/db/data/node",
</span><span class='line'>  "relationship_types" : "http://localhost:7474/db/data/relationship/types",
</span><span class='line'>  "neo4j_version" : "1.5",
</span><span class='line'>  "batch" : "http://localhost:7474/db/data/batch",
</span><span class='line'>  "extensions_info" : "http://localhost:7474/db/data/ext",
</span><span class='line'>  "node_index" : "http://localhost:7474/db/data/index/node",
</span><span class='line'>  "reference_node" : "http://localhost:7474/db/data/node/0",
</span><span class='line'>  "extensions" : {
</span><span class='line'>    "CypherPlugin" : {
</span><span class='line'>      "execute_query" : "http://localhost:7474/db/data/ext/CypherPlugin/graphdb/execute_query"
</span><span class='line'>    },
</span><span class='line'>    "GremlinPlugin" : {
</span><span class='line'>      "execute_script" : "http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script"
</span><span class='line'>    },
</span><span class='line'>    "ListNames" : {
</span><span class='line'>      "list_all_names" : "http://localhost:7474/db/data/ext/ListNames/graphdb/list_all_names"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The query returns the list of each extension, as well as the URL to
call it. Using the <code>GET</code> method, the extension is self documenting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:7474/db/data/ext/ListNames/grphdb/list_all_names
</span><span class='line'>{
</span><span class='line'>  "extends" : "graphdb",
</span><span class='line'>  "description" : "List all the node names",
</span><span class='line'>  "name" : "list_all_names",
</span><span class='line'>  "parameters" : [ ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Finally, it can be invoked with the <code>POST</code> method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X POST http://localhost:7474/db/data/ext/ListNames/grphdb/list_all_names
</span><span class='line'>[ "", "actor", "film", "Leif Andrée", "7X - This is Our Kids ", ...</span></code></pre></td></tr></table></div></figure>


<h2>Of course Kevin Bacon</h2>

<p>This section is about the code of the book version beta 2.0.</p>

<p>I had trouble to get the code to work in Neo4j 1.5. Here I document
the alternative code I came up with and used.</p>

<h3>Defining steps in Gremlin</h3>

<p>I could not get the book code to define the <code>costars</code> step to work: it
seems <code>outV</code> does not accept a filter expression as argument.</p>

<p>Even with the addition of a dedicated <code>filter</code> step, I could not
filter properly. Instead, I started from scratch, using the
<a href="https://github.com/tinkerpop/gremlin/wiki/User-Defined-Steps">Gremlin wiki</a>
code as a basis:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Gremlin.defineStep('costars',
</span><span class='line'>                   [Vertex, Pipe],
</span><span class='line'>                   {_().sideEffect{start = it}.
</span><span class='line'>                       outE('Movie#acted_in').inV.inE('Movie#acted_in').
</span><span class='line'>                       outV.filter{!start.equals(it)}.uniqueObject()})</span></code></pre></td></tr></table></div></figure>


<p>Note the use of <code>sideEffect</code> to introduce the variable <code>start</code> into
the expression. Not doing this (and instead following the book code),
the filter was not working at all (i.e. the start node was
still part of the result). Also I have a different type for the
relationship (<code>Movie#acted_in</code>) as it was generated by Neo4j.rb.</p>

<h3>From Elvis to Kevin Bacon</h3>

<p>The <code>loop</code> step does not emit intermediate node by default, so while
the query in the book is accepted, it does not return any result
because the actual degree of separation between Elvis and Kevin Bacon
is just 3.</p>

<p>The latest version of Gremlin extends the basic <code>loop</code> pattern to emit
intermediate nodes if requested, but this is not possible with the
version embedded in Neo4j 1.5 admin console.</p>

<p>The standalone Gremlin shell version 1.3 is a bit too old (it links
against Neo4j version 1.5.M01, whose database format is not compatible
with version 1.5&#8217;s format). So I tried the current head of the Git
<a href="https://github.com/tinkerpop/gremlin">repository</a>.</p>

<p>To build it you will need to download half the Internet, so be
patient.</p>

<p>The build command is <code>mvn install</code> (the install step will make the
scripts to launch the console).</p>

<p>Once started, you can load the database with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g = new Neo4jGraph('/users/x/neo4j-enterprise-1.5/data/graph.db')</span></code></pre></td></tr></table></div></figure>


<p>The code <code>costars</code> step that was working in the console no longer does
in the shell. I had to replace the <code>uniqueObject()</code> step with
<code>dedup()</code>, and make sure
everything is on a single line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Gremlin.defineStep('costars', [Vertex, Pipe], {_().sideEffect{start = it}.outE('Movie#acted_in').inV.inE('Movie#acted_in').outV.filter{!start.equals(it)}.dedup()})</span></code></pre></td></tr></table></div></figure>


<p>Finally, the command to find nodes by index has to explicitly use the
index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bacon = g.idx('Actor_exact')[['name':'Kevin Bacon']].next()
</span><span class='line'>elvis = g.idx('Actor_exact')[['name':'Elvis Presley']].next()</span></code></pre></td></tr></table></div></figure>


<p>(if you created the data using the original import command, the index
name is <code>actors</code>).</p>

<p>As frustrating as it all is, the end result is that the <code>loop</code> step
can now be used as needed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>elvis.costars.loop(1){ it.loops &lt; 4}{true}.filter{it.equals(bacon)}.paths.next().name.grep{it}</span></code></pre></td></tr></table></div></figure>


<p>I also had to change the query once more to use <code>next</code> instead of <code>&gt;&gt; 1</code> as
in the book, as that does not work in the latest version of Gremlin
either.</p>

<h3>Random walk</h3>

<p>Once again, I had to change the code from the book to get it to work:
adding a dedicated <code>filter</code> step did the trick:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bacon.outE.filter{ rand.nextDouble() &lt;= 0.01 }.inV.inE.outV.loop(5){ it.loops &lt; 3 }.count()</span></code></pre></td></tr></table></div></figure>


<p>The <code>loop</code> argument does not change, as the filter expression already
counted as a step in the book version.</p>

<h3>Centrality</h3>

<p>I had a small problem with the book code: the query is not run if the
command is followed by <code>; ''</code> (which the book uses to prevent the
display of the results). Just running this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role_count = [:]; count = 0
</span><span class='line'>g.V.in.groupCount(role_count).loop(2){ count++ &lt; 1000 }
</span><span class='line'>role_count.sort{a,b -&gt; a.value &lt;=&gt; b.value}</span></code></pre></td></tr></table></div></figure>


<p>works. Why on earth would such a small change have such an impact is
beyond me. Now I&#8217;m scared of Groovy.</p>

<h3>JUNG Algorithms</h3>

<p>This time the book code was working as intended, but I found that
there is an even more central actor than Donald Sutherland: Bobby
Vitale&#8230;</p>

<h2>Exercises</h2>

<h3>Neo4j ReST API</h3>

<p>The documentation is <a href="http://docs.neo4j.org/chunked/stable/rest-api.html">here</a>.</p>

<h3>Binding or ReST API</h3>

<p>See above my useo Neo4j.rb.</p>

<h3>API for the JUNG project</h3>

<p>The API is <a href="http://jung.sourceforge.net/doc/api/index.html">here</a>.</p>

<h3>Path-finding as a step</h3>

<p>I am using the Gremlin shell, rather than the Neo4j console.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Gremlin.defineStep('path_to', [Vertex, Pipe], {Vertex to, Integer max -&gt; _().costars.loop(1){ it.loops &lt; max }{true}.filter{it.equals(to)}})     </span></code></pre></td></tr></table></div></figure>


<p>I used the possibility to pass arguments to the closure to introduce
both the target node and the loop limit as parameters. Otherwise the
code is identical to the one I was using above. With this, the
path from Elvis to Kevin Bacon becomes</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gremlin&gt; elvis.path_to3(bacon, 4).paths.next().name.grep{it}
</span><span class='line'>==&gt;Elvis Presley    
</span><span class='line'>==&gt;Frankie and Johnny
</span><span class='line'>==&gt;Nathan Lane
</span><span class='line'>==&gt;He Said, She Said
</span><span class='line'>==&gt;Kevin Bacon</span></code></pre></td></tr></table></div></figure>


<h3>A family graph</h3>

<p>I used Ruby (with the Neo4j.rb library). The code first defines a
<code>family</code> data structure that maps each family member to other members
keyed by their relationships.</p>

<p>The code first iterate over the family members and inserts them; it
then goes over the <code>family</code> structure a second time to insert the
relationships.</p>

<figure class='code'><figcaption><span> (family.rb)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/family.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{rubygems neo4j}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="nb">require</span> <span class="n">r</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">NodeMixin</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">index</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">create_node</span><span class="p">({</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">},</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>    <span class="n">inserter</span><span class="o">.</span><span class="n">index_flush</span><span class="p">(</span><span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">family</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;Alice&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibbling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Walter&#39;</span><span class="o">]</span><span class="p">,</span><span class="ss">:child_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="p">,</span> <span class="s1">&#39;Peggy&#39;</span><span class="o">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Bob&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibbling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Eve&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:child_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="p">,</span> <span class="s1">&#39;Peggy&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Carol&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibbling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Alice&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:child_od</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="p">,</span> <span class="s1">&#39;Peggy&#39;</span><span class="o">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Trent&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Peggy&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:parent_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Peggy&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:parent_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Eve&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Bob&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Walter&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:sibling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Dave&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Dave&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Walter&#39;</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;begin processing...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Neo4j</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:storage_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;NEO4J_HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/data/graph.db&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">inserter</span> <span class="o">=</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">Batch</span><span class="o">::</span><span class="no">Inserter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">family</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span>
</span><span class='line'>  <span class="n">inserter</span><span class="o">.</span><span class="n">create_node</span><span class="p">({</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="n">k</span><span class="p">},</span> <span class="no">Person</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">inserter</span><span class="o">.</span><span class="n">index_flush</span><span class="p">(</span><span class="no">Person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">family</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="p">,</span> <span class="n">os</span><span class="o">|</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span>
</span><span class='line'>      <span class="n">inserter</span><span class="o">.</span><span class="n">create_rel</span><span class="p">(</span><span class="n">r</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="no">Person</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="no">Person</span><span class="p">)</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>                          <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;done!&quot;</span>
</span><span class='line'><span class="n">inserter</span><span class="o">.</span><span class="n">shutdown</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Run a JUNG algorithm</h3>

<p>I tried to run a simple Dijkstra shortest path algorithm in Gremlin, but
eventually had to give up as the shell kept giving me weird exceptions
when I tried to load the required class. Furthermore, the graph being
directed from the actor nodes to the movie nodes, there is not path
between anything but an actor and one of its movies (and the JUNG
class to transform a directed graph to an undirected one seems to
convert the whole graph eagerly).</p>

<p>Eventually I gave up, dumped the movie database, and used the family
graph instead.</p>

<p>The code is in Java, the language I used after Groovy scared me with
these weird exceptions (Java is boring but predictable).</p>

<p>The hardest perhaps was to figure out the dependencies for the
<code>pom.xml</code>:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/graph_algo/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>graph-algo<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>      <span class="nt">&lt;neo4j.version&gt;</span>1.5<span class="nt">&lt;/neo4j.version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>          <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>              <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>              <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>              <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>  <span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>tinkerpop-repository<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;name&gt;</span>TinkerPop Maven2 Repository<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>http://tinkerpop.com/maven2<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.neo4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>neo4j<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>${neo4j.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>net.sf.jung<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>jung-graph-impl<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.0.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>com.tinkerpop.gremlin<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>gremlin-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.4<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>com.tinkerpop.blueprints<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>blueprints-neo4j-graph<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>com.tinkerpop.blueprints<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>blueprints-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>com.tinkerpop.blueprints<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>blueprints-graph-jung<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code in Java is verbose; especially I could not find a simple way
to look up nodes in the BluePrints graph, nor could I use the
properties of the Neo4j nodes from the BluePrints vertices&#8230;</p>

<figure class='code'><figcaption><span> (GraphAlgorithm.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/neo4j/graph_algo/GraphAlgorithm.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.GraphDatabaseService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.Node</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.kernel.EmbeddedGraphDatabase</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.Edge</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.Vertex</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.impls.neo4j.Neo4jGraph</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.oupls.jung.GraphJung</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">edu.uci.ics.jung.algorithms.shortestpath.DijkstraShortestPath</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">edu.uci.ics.jung.graph.Graph</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GraphAlgorithm</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">neo4jHome</span> <span class="o">=</span> <span class="s">&quot;/users/x/neo4j-test&quot;</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>          <span class="n">neo4jHome</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">GraphDatabaseService</span> <span class="n">graphDb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EmbeddedGraphDatabase</span><span class="o">(</span><span class="n">neo4jHome</span> <span class="o">+</span> <span class="s">&quot;/data/graph.db/&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">com</span><span class="o">.</span><span class="na">tinkerpop</span><span class="o">.</span><span class="na">blueprints</span><span class="o">.</span><span class="na">pgm</span><span class="o">.</span><span class="na">Graph</span> <span class="n">g</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Neo4jGraph</span><span class="o">(</span><span class="n">graphDb</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Graph</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Edge</span><span class="o">&gt;</span> <span class="n">j</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GraphJung</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">DijkstraShortestPath</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Edge</span><span class="o">&gt;</span> <span class="n">dijkstra</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DijkstraShortestPath</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Edge</span><span class="o">&gt;(</span><span class="n">j</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Node</span> <span class="n">trent</span> <span class="o">=</span> <span class="n">graphDb</span><span class="o">.</span><span class="na">index</span><span class="o">().</span><span class="na">forNodes</span><span class="o">(</span><span class="s">&quot;Person_exact&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Trent&quot;</span><span class="o">).</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Node</span> <span class="n">dave</span> <span class="o">=</span> <span class="n">graphDb</span><span class="o">.</span><span class="na">index</span><span class="o">().</span><span class="na">forNodes</span><span class="o">(</span><span class="s">&quot;Person_exact&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Dave&quot;</span><span class="o">).</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Distance between Trent and Dave:&quot;</span> <span class="o">+</span> <span class="n">dijkstra</span><span class="o">.</span><span class="na">getDistance</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">getVertex</span><span class="o">(</span><span class="n">trent</span><span class="o">.</span><span class="na">getId</span><span class="o">()),</span> <span class="n">g</span><span class="o">.</span><span class="na">getVertex</span><span class="o">(</span><span class="n">dave</span><span class="o">.</span><span class="na">getId</span><span class="o">())));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Distance between Trent and everybody:&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="nl">kv:</span> <span class="n">dijkstra</span><span class="o">.</span><span class="na">getDistanceMap</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">getVertex</span><span class="o">(</span><span class="n">trent</span><span class="o">.</span><span class="na">getId</span><span class="o">())).</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">graphDb</span><span class="o">.</span><span class="na">getNodeById</span><span class="o">((</span><span class="n">Long</span><span class="o">)</span> <span class="n">kv</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">getId</span><span class="o">()).</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; =&gt; &quot;</span> <span class="o">+</span> <span class="n">kv</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">g</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>      <span class="n">graphDb</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>    
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running it produces</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Distance between Trent and Dave:3.0
</span><span class='line'>Distance between Trent and everybody:
</span><span class='line'>Trent =&gt; 0.0
</span><span class='line'>Carol =&gt; 1.0
</span><span class='line'>Peggy =&gt; 1.0
</span><span class='line'>Alice =&gt; 1.0
</span><span class='line'>Bob =&gt; 1.0
</span><span class='line'>Walter =&gt; 2.0
</span><span class='line'>Eve =&gt; 2.0
</span><span class='line'>Dave =&gt; 3.0</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up Day 2</h2>

<p>I must say that today was a rather frustrating experience. Neo4j
ecosystem is still evolving, but this means that most of the
documentation I came upon was already obsolete. The navigation on the
data was at time very hard to figure out, and the error messages
(really, the underlying Java exception) not helpful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Neo4j Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/28/seven-databases-in-seven-weeks-neo4j-day-1/"/>
    <updated>2011-12-28T17:05:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/28/seven-databases-in-seven-weeks-neo4j-day-1</id>
    <content type="html"><![CDATA[<p>As the book is still in beta and incomplete, I skip CouchDB (the
chapter is not there yet in beta 2.0), and will spend this week with
<a href="http://neo4j.org/">Neo4j</a>.</p>

<p>Neo4j is a graph database, meaning it focuses on navigation between
vertices (called nodes in Neo4j), through edges (called
relationships). While other databases made it possible to join various
pieces of data, Neo4j treats this as the main semantic mechanism</p>

<!--more-->


<p>Neo4j can be distributed for high-availability, and is partition
tolerant, but sharding is not supported (at the time of writing).</p>

<p>The first day focuses on basic creation and navigation of data. <a href="http://docs.neo4j.org/chunked/stable/graphdb-neo4j-nodes.html">Nodes</a>
and
<a href="http://docs.neo4j.org/chunked/stable/graphdb-neo4j-relationships.html">relationships</a>
are the basic entities; by default nodes have just an id, while
relationships are identified by the out and in nodes, and a type.</p>

<p>To spice this up a bit, it is possible to attach
<a href="http://docs.neo4j.org/chunked/stable/graphdb-neo4j-properties.html">properties</a>
to both nodes and relationships. Values can be scalar or arrays of
basic types (boolean, number, or string).</p>

<p>To navigate the data, the easiest seems to be the use of
<a href="https://github.com/tinkerpop/gremlin/wiki">Gremlin</a>, a language and
database independent graph traversal language (the language has to be
a JVM one).</p>

<h2>Exercises</h2>

<h3>Neo4j Wiki</h3>

<p>The Wiki is <a href="http://wiki.neo4j.org/content/Main_Page">here</a>.</p>

<h3>Gremlin Documentation</h3>

<p>There is a <a href="https://github.com/tinkerpop/gremlin/wiki">wiki</a>.</p>

<h3>List of Gremlin Steps</h3>

<p>They are listed on the
<a href="https://github.com/tinkerpop/gremlin/wiki/Gremlin-Steps">wiki</a>.</p>

<h3>Neo4j Shells</h3>

<p>It is hard not to find them, as they&#8217;re already in the Web Admin
Console. Both
<a href="http://docs.neo4j.org/chunked/snapshot/cypher-query-lang.html">Cipher</a>
and the
<a href="http://docs.neo4j.org/chunked/snapshot/rest-api.html">ReST API</a> can
be used directly from the console, although the ReST API is limited
there (for instance the <code>traverse</code> operation is not supported). Full
access requires an external client such as <code>curl</code>.</p>

<h3>Find all node names with another shell</h3>

<p>In Cipher, there is no direct way to use all nodes as a starting
point, so instead I try to find all nodes linked to the first one
through a path that can be empty (i.e. the starting node is also
included). To remove duplicates, I use the
<a href="http://docs.neo4j.org/chunked/snapshot/query-aggregation.html#aggregation-distinct"><code>DISTINCT</code></a>
function, but it must be applied in the context of an aggregation, so
I have to apply
<a href="http://docs.neo4j.org/chunked/snapshot/query-aggregation.html#aggregation-collect"><code>COLLECT</code></a>
as well:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>START n=node(0)
</span><span class='line'>MATCH n-[*0..]-x
</span><span class='line'>RETURN COLLECT(DISTINCT x.name)</span></code></pre></td></tr></table></div></figure>


<p>which produces</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; +----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>==&gt; | collect(distinct x.name)                                                                                                                                             |
</span><span class='line'>==&gt; +----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>==&gt; | List(Prancing Wolf Ice Wine 2007, riesling, Prancing Wolf Spatleses 2007, Prancing Wolf Winery, Prancing Wolf Kabinett 2002, Tom, Wine Expert Monthly, Patty, Alice) |
</span><span class='line'>==&gt;
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>Not exactly as easy as the Gremlin equivalent <code>g.V.name</code>.</p>

<p>There is no way to achieve anything similar using the
ReST API, as
its traversal operation only returns full objects (either nodes,
relationships or paths), and not properties.</p>

<h3>Delete all the nodes and edges in your database</h3>

<p>Well, the book already showed the powerful <code>g.clear</code> Gremlin
command. It should be followed by <code>g.addVertex()</code> to get back to the
original state (with just one node).</p>

<p>And that&#8217;s all for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks MongoDB Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/25/seven-databases-in-seven-weeks-mongodb-day-3/"/>
    <updated>2011-12-25T17:18:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/25/seven-databases-in-seven-weeks-mongodb-day-3</id>
    <content type="html"><![CDATA[<p>Final day with MongoDB. First to cover geospatial indexing; then to
explore MongoDB&#8217;s approach to the CAP theorem.</p>

<!--more-->


<p>Like PostgreSQL, MongoDB has integrated support for geometric of
geographic data and queries. Finding the neighbours of a point or
location is trivial, and such queries are optimized using dedicated
kind of indexes.</p>

<p>Regarding the CAP theorem, MongoDB strictly separates Availability
from Partition tolerance: replica sets are designed for availability,
using a quorum approach (like Riak) to select the most recent data in
case of conflict.</p>

<p>Sharding is the dedicated mechanism for partitions. A replica set can
own a shard of the data.</p>

<p>Unlike with Riak, where availability and partitioning are functions of
the properties set on buckets, MongoDB requires the whole topology to
be explicitly configured. I assume that what MongoDB loses in
flexibility, it gets it back in predictability.</p>

<h2>Exercises</h2>

<h3>Replica set configuration options</h3>

<p>The documentation is
<a href="http://www.mongodb.org/display/DOCS/Replica+Set+Configuration">here</a>.</p>

<h3>Spherical geo index</h3>

<p>I don&#8217;t know if this is another instance of the book describing
features from old version of MongoDB, but there is no such thing as a
spherical geo index.</p>

<p>Spherical searches rely on standard <code>2d</code> indexing, as explained
<a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing#GeospatialIndexing-TheEarthisRoundbutMapsareFlat">here</a>.</p>

<h3>Find all cities within a 50 mile radius of London</h3>

<p>To solve this exercise, it is necessary to format the data as required
in the
<a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing#GeospatialIndexing-NewSphericalModel">documentation</a>. Unfortunately,
the data files in the code for the second beta version of the book use
latitude, longitude whereas MongoDB expects longitude, latitude
(i.e. a X, Y coordinate).</p>

<p>I used the small script below to reformat the data file, and imported
the reformated one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sed -e 's/^\(.*\)latitude\(.*\), *longitude\([^}]*\)}\(.*\)$/\1longitude\3, latitude\2}\4/' \
</span><span class='line'>mongo_cities1000.json &gt; mongo_cities1000_lon_lat.json</span></code></pre></td></tr></table></div></figure>


<p>With that loaded, and with the geospatial indexing in place, MongoDB
is ready to run the queries.</p>

<p>First I need to locate London. There are a few places named London,
but I assume the authors meant the one in England. I create a <code>centre</code>
variable to be used in the queries.</p>

<figure class='code'><figcaption><span>Finding London  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">london</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">cities</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;London&#39;</span><span class="p">,</span> <span class="nx">country</span><span class="o">:</span> <span class="s1">&#39;GB&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">centre</span> <span class="o">=</span> <span class="p">[</span><span class="nx">london</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">longitude</span><span class="p">,</span> <span class="nx">london</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">latitude</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>As indicated in the documentation, I have to measure distances in
radians. For this I need to know the
<a href="http://en.wikipedia.org/wiki/Earth_radius">Earth Radius</a> in miles.</p>

<figure class='code'><figcaption><span>Earth Radius and Range  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">earthRadius</span> <span class="o">=</span> <span class="mi">3959</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">range</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally I can run my queries. I have a few options:</p>

<h4><code>geoNear</code> command</h4>

<p>I can pass the <code>spherical: true</code> option to the <code>geoNear</code> command. By
default, the query will only return 100 results.</p>

<figure class='code'><figcaption><span>geoNear  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">runCommand</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">geoNear</span><span class="o">:</span> <span class="s2">&quot;cities&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">near</span><span class="o">:</span> <span class="nx">centre</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">spherical</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">maxDistance</span><span class="o">:</span> <span class="nx">range</span><span class="o">/</span><span class="nx">earthRadius</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it turns out, there are far more cities in this range. A circle of
500 miles radius around London includes much of Western Europe:</p>

<div class="gmap" id="map_canvas"></div>


<p>To get unlimited results, I set the number of possible results to the
number of cities:</p>

<figure class='code'><figcaption><span>unlimited geoNear  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">runCommand</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">geoNear</span><span class="o">:</span> <span class="s2">&quot;cities&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">near</span><span class="o">:</span> <span class="nx">centre</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">spherical</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">num</span><span class="o">:</span> <span class="nx">db</span><span class="p">.</span><span class="nx">cities</span><span class="p">.</span><span class="nx">count</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">maxDistance</span><span class="o">:</span> <span class="nx">range</span><span class="o">/</span><span class="nx">earthRadius</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>$within</code> operator</h4>

<p>Alternatively, I can use the <code>$within</code> operator. I get the spherical
behaviour by specifying a <code>centerSphere</code>:</p>

<figure class='code'><figcaption><span>$within  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">cities</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">location</span><span class="o">:</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">$within</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$centerSphere</span><span class="o">:</span> <span class="p">[</span><span class="nx">centre</span><span class="p">,</span> <span class="nx">range</span><span class="o">/</span><span class="nx">earthRadius</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This query will return cities within the range, just like the
unlimited <code>geoNear</code> one.</p>

<h3>Sharded replicas</h3>

<p>This is the kind of things that is not overly difficult, but
tedious. And I don&#8217;t like tedious.</p>

<p>As a good UNIX geek, I&#8217;d rather spend hours to automate what would
have taken me 10 minutes to do manually. So here&#8217;s the automated setup
in Bash scripts.</p>

<p>First I create all the necessary directories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir mongo{1..6}
</span><span class='line'>mkdir mongoconfig</span></code></pre></td></tr></table></div></figure>


<p>Then I start two sets of 3 replicas that can also be sharded:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in {1..6}; do
</span><span class='line'>  s=$(( (i-1 ) / 3 + 1))
</span><span class='line'>  mongod --replSet shard$s --shardsvr --dbpath ./mongo$i \
</span><span class='line'>  --port 2701$i --logpath ./mongod\_$i.log --rest &
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>I setup each replica set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in 1 2; do
</span><span class='line'>  members=""
</span><span class='line'>  p=$(( (i-1) * 3 + 1))
</span><span class='line'>  for j in 1 2 3; do
</span><span class='line'>    members="$members, { \_id: $j, host: 'localhost:2701$((p+j-1))'}"
</span><span class='line'>  done
</span><span class='line'>  members=${members:1} 
</span><span class='line'>  mongo localhost:2701$p &lt;&lt;HERE
</span><span class='line'>rs.initiate({
</span><span class='line'>  _id: 'shard$i',
</span><span class='line'>  members: [ $members ]
</span><span class='line'>})
</span><span class='line'>HERE
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>At this point it is good to wait a minute for the replica sets to be
fully online.</p>

<p>Next step is to figure out the shards URL: they are composed of the
shard name, followed by the list of comma separated servers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shards=()
</span><span class='line'>for i in 1 2; do
</span><span class='line'>  p=$(( (i-1) * 3 + 1))
</span><span class='line'>  output=`mongo --quiet localhost:2701$p/test&lt;&lt;HERE
</span><span class='line'>db.isMaster().setName + '/' + db.isMaster().hosts
</span><span class='line'>HERE`
</span><span class='line'>  shards=( "${shards\[@]}" ${output%?bye} )
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>Now it is time to start the config server. I move it to the port <code>27019</code> as <code>27016</code> is already in use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongod --configsvr --dbpath ./mongoconfig --port 27019 --logpath=mongoconfig.log &
</span><span class='line'>sleep 1
</span><span class='line'>mongos --configdb localhost:27019 --chunkSize 1 --port 27020 --logpath=mongos.log &</span></code></pre></td></tr></table></div></figure>


<p>And finally I add the shards to the config mongo, and enable sharding
on <code>test</code> for both the <code>cities</code> collection and GridFS:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for shard in ${shards[@]}; do
</span><span class='line'>  echo $shard
</span><span class='line'>  mongo localhost:27020/admin --quiet &lt;&lt;HERE
</span><span class='line'>db.runCommand( { addshard: "$shard" })
</span><span class='line'>HERE
</span><span class='line'>done
</span><span class='line'>mongo localhost:27020/admin --quiet &lt;&lt;HERE
</span><span class='line'>db.runCommand( { enablesharding : "test" } );
</span><span class='line'>db.runCommand( { shardcollection : "test.cities", key : {name : 1} } );
</span><span class='line'>db.runCommand( { shardcollection : "test.fs.chunks", key : { files_id : 1 } } )
</span><span class='line'>HERE</span></code></pre></td></tr></table></div></figure>


<p>I can check that everything looks ok with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongo localhost:27020/admin --quiet &lt;&lt;HERE
</span><span class='line'>db.runCommand( { listshards : 1 })
</span><span class='line'>HERE</span></code></pre></td></tr></table></div></figure>


<p>Of course, all these scripts would be useless to actually distribute
the servers on different machines. Given some time, I&#8217;ll try to setup
a AWS EC2 cluster as I did for Riak.</p>

<p>At this point, I tried to import the cities data file. It was somewhat
slower than without replicas, but not significantly so.</p>

<p>I also added a file, using the same command as in the book.</p>

<p>Now, to test the replicas, I killed the two primary servers (to
identify them, I used <code>ps auxw | grep mongod</code>, which gave me the
process id I needed to kill).</p>

<p>With two servers down, <code>mongofiles -h localhost:27020 get my_file.txt</code>
was still able to retrieve the file.</p>

<h2>Wrapping up MongoDB</h2>

<p>MongoDB is the first database besides PostgreSQL I feel comfortable
using. They both provide more &#8220;database-like&#8221; features than either
Riak or HBase: integrated queries, advanced indexing, &#8230; The use of
JavaScript is well integrated and pleasant to use.</p>

<p>Moreover, MongoDB&#8217;s approach to the CAP theorem is simple. While it is
less flexible or dynamic than Riak&#8217;s, its simplicity makes it easy to
reason about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks MongoDB Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/24/seven-databases-in-seven-weeks-mongodb-day-2/"/>
    <updated>2011-12-24T14:49:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/24/seven-databases-in-seven-weeks-mongodb-day-2</id>
    <content type="html"><![CDATA[<p>Today the book covers all kinds of queries goodness in MongoDB:
indexing, advanced group queries, and MapReduce.</p>

<p>Once again, the contrast with Riak is stark. MongoDB is able to
optimize queries on its JSON documents because it understand the
format directly (whereas it is stored as an opaque block in Riak).
Using JavaScript is also simpler: no need to quote the function codes;
just pass a function object to the commands that need one.</p>

<!--more-->


<h3>Indexes</h3>

<p>MongoDB comes by default with fairly sophisticated indexing
options. Perhaps not as many as PostgreSQL, but still very
flexible. Two basic types, range (B-Tree) and geospatial indexes;
multikeys (with the ability to sort each key in a different order);
sparse, &#8230;</p>

<p>Combined with the
<a href="http://www.mongodb.org/display/DOCS/Explain"><code>explain</code></a> function,
this makes classic (i.e. non MapReduce) queries usable.</p>

<p>Thus MongoDB is a good hybrid between traditional databases (although
document rather than schema oriented), and new MapReduce platforms
such as <a href="http://hadoop.apache.org/"><code>Hadoop</code></a>.</p>

<h3>Aggregation</h3>

<p>MongoDB also supports a number of aggregation functions. The most
flexible one,
<a href="http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Group"><code>group</code></a>,
is not compatible with sharding, but otherwise it provides yet more
coverage of relational database features.</p>

<h3>MapReduce</h3>

<p>Using MongoDB&#8217;s
<a href="http://www.mongodb.org/display/DOCS/MapReduce"><code>mapreduce</code></a> is much
easier than using Riak`s: the functions do not have to be passed as
strings, they can be stored in the server directly from the shell, and
because MongoDB understand JSON directly, there is not need to first
parse the document</p>

<p>On the other hand, Riak&#8217;s agnostic approach makes
it possible to MapReduce other kinds of data.</p>

<h2>Exercises</h2>

<h3>Shortcut for the admin commands</h3>

<p>I could not find a single place with the info. The mongo shell
<a href="http://api.mongodb.org/js/current/">API</a> has no central list of
functions; instead they are spread in the documentation or source for
each prototype.</p>

<p>In general, an admin command that takes a MongoDB object as a
first argument will have an equivalent method in the relevant prototype.</p>

<p>For instance, the
<a href="http://www.mongodb.org/display/DOCS/List+of+Database+Commands"><code>dbStats</code></a>
command takes a
<a href="http://api.mongodb.org/js/current/symbols/_global_.html#DB"><code>DB</code></a>;
in the
<a href="http://api.mongodb.org/js/current/symbols/src/shell_db.js.html"><code>db.js</code></a>
source file of the <code>DB</code> prototype, there is a <code>stats</code> method that
invokes the <code>dbStats</code> command.</p>

<h3>Online documentation for Queries and Cursors</h3>

<p>As stated in the
<a href="http://www.mongodb.org/display/DOCS/Queries+and+Cursors">documentation</a>,
MongoDB returns a cursor for each queries; it is up to the client to
iterate over the cursor to retrieve results.</p>

<p>The mongo shell usually hides the existence of cursors, but even there
it is possible to expose them, using JavaScript.</p>

<h3>MongoDB documentation for MapReduce</h3>

<p>The documentation is
<a href="http://www.mongodb.org/display/DOCS/MapReduce">here</a>.</p>

<h3>Collection function code</h3>

<p>In each case, I got the code by running <code>db.towns.functionName</code> (note
the absence of parenthesis). The mongo shell direct access to
JavaScript source code is especially convenient.</p>

<h4>Collection <code>help</code></h4>

<p>The source code is just a long list of <code>print</code> statements.</p>

<h4>Collection <code>findOne</code></h4>

<p>The code will first execute a query, returning a cursor. The cursor is
then checked for the presence of results; if there is any, the first
one is returned.</p>

<h4>Collection <code>stats</code></h4>

<p>This function will simply delegate the job to the <code>runCommand</code> method,
invoking the <code>collStats</code> command.</p>

<h3>Finalize method</h3>

<p>The <code>finalize</code> function is very simple: rename the attribute <code>count</code>
to <code>total</code>:</p>

<figure class='code'><figcaption><span>finalize function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finalize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">total</span><span class="o">:</span> <span class="nx">value</span><span class="p">.</span><span class="nx">count</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use it, just add the <code>finalize</code> attribute to the <code>mapReduce</code> command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">results</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">runCommand</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">mapReduce</span><span class="o">:</span> <span class="s1">&#39;phones&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">reduce</span><span class="o">:</span> <span class="nx">reduce</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">finalize</span><span class="o">:</span> <span class="nx">finalize</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">out</span><span class="o">:</span> <span class="s1">&#39;phones.report&#39;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I can check  the result with <code>db.phones.report.find()</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.phones.report.find()
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 1 }, "value" : { "total" : 35 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 2 }, "value" : { "total" : 30 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 3 }, "value" : { "total" : 35 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 4 }, "value" : { "total" : 22 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 5 }, "value" : { "total" : 35 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 6 }, "value" : { "total" : 19 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 7 }, "value" : { "total" : 32 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 8 }, "value" : { "total" : 32 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 1 }, "value" : { "total" : 7 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 2 }, "value" : { "total" : 5 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 3 }, "value" : { "total" : 5 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 4 }, "value" : { "total" : 10 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 5 }, "value" : { "total" : 6 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 6 }, "value" : { "total" : 4 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 7 }, "value" : { "total" : 6 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 8 }, "value" : { "total" : 5 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 1 }, "value" : { "total" : 116 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 2 }, "value" : { "total" : 103 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 3 }, "value" : { "total" : 118 } }
</span><span class='line'>{ "_id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 4 }, "value" : { "total" : 104 } }
</span><span class='line'>has more</span></code></pre></td></tr></table></div></figure>


<h3>Use of driver</h3>

<p>I used Java, and simply reimplemented the original Phones collection
in a different database:</p>

<figure class='code'><figcaption><span> (MongoTest.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/mongo/src/main/java/jp/wakatta/MongoTest.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">random</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">round</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.BasicDBObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DB</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DBCollection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DBObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.Mongo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MongoTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// connect to the database server</span>
</span><span class='line'>          <span class="c1">// note: use 127.0.0.1 instead of localhost</span>
</span><span class='line'>          <span class="c1">// as mongoDB only listen to the loopback</span>
</span><span class='line'>          <span class="c1">// interface and not the ethernet one</span>
</span><span class='line'>          <span class="n">Mongo</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mongo</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// make sure we&#39;re in a clean state</span>
</span><span class='line'>          <span class="n">m</span><span class="o">.</span><span class="na">dropDatabase</span><span class="o">(</span><span class="s">&quot;java&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// create and access the database</span>
</span><span class='line'>          <span class="n">DB</span> <span class="n">db</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">getDB</span><span class="o">(</span><span class="s">&quot;java&quot;</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// create collection and populate it</span>
</span><span class='line'>          <span class="n">DBCollection</span> <span class="n">phones</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">getCollection</span><span class="o">(</span><span class="s">&quot;phones&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">populatePhones</span><span class="o">(</span> <span class="mi">800</span><span class="o">,</span> <span class="mi">5550000</span><span class="o">,</span> <span class="mi">5650000</span> <span class="o">,</span> <span class="n">phones</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// create index</span>
</span><span class='line'>          <span class="n">phones</span><span class="o">.</span><span class="na">createIndex</span><span class="o">(</span><span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">(</span><span class="s">&quot;display&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// list the indexes</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">DBObject</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">phones</span><span class="o">.</span><span class="na">getIndexInfo</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">DBObject</span> <span class="n">o</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>          <span class="c1">// close and cleanup</span>
</span><span class='line'>          <span class="n">m</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">populatePhones</span><span class="o">(</span><span class="kt">long</span> <span class="n">area</span><span class="o">,</span> <span class="kt">long</span> <span class="n">start</span><span class="o">,</span> <span class="kt">long</span> <span class="n">stop</span><span class="o">,</span> <span class="n">DBCollection</span> <span class="n">coll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">long</span> <span class="n">i</span><span class="o">=</span><span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">stop</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">long</span> <span class="n">country</span> <span class="o">=</span> <span class="n">round</span><span class="o">(</span><span class="n">floor</span><span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="n">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">8</span><span class="o">)));</span>
</span><span class='line'>          <span class="kt">long</span> <span class="n">num</span> <span class="o">=</span> <span class="o">(</span><span class="n">country</span> <span class="o">*</span> <span class="mi">10000000000</span><span class="n">l</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">area</span> <span class="o">*</span> <span class="mi">10000000</span><span class="o">)</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>          <span class="n">BasicDBObject</span> <span class="n">phone</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">();</span>
</span><span class='line'>          <span class="n">BasicDBObject</span> <span class="n">components</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">();</span>
</span><span class='line'>          <span class="n">phone</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;_id&quot;</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>          <span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;country&quot;</span><span class="o">,</span> <span class="n">country</span><span class="o">);</span>
</span><span class='line'>          <span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;area&quot;</span><span class="o">,</span> <span class="n">area</span><span class="o">);</span>
</span><span class='line'>          <span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;prefix&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>          <span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;number&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="n">phone</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;components&quot;</span><span class="o">,</span> <span class="n">components</span><span class="o">);</span>
</span><span class='line'>          <span class="n">phone</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;display&quot;</span><span class="o">,</span> <span class="s">&quot;+&quot;</span> <span class="o">+</span> <span class="n">country</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">area</span> <span class="o">+</span> <span class="s">&quot;-&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="n">coll</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">phone</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the complete project, I just used Maven to fetch the MongoDB
driver:</p>

<figure class='code'><figcaption><span> (pom.xml)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/mongo/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>mongo-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>mongo-test<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.mongodb<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>mongo-java-driver<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.7.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>  <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>          <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>              <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ugly, but it does the job.</p>

<p>And that&#8217;s all for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks MongoDB Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/23/seven-databases-in-seven-weeks-mongodb-day-1/"/>
    <updated>2011-12-23T08:19:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/23/seven-databases-in-seven-weeks-mongodb-day-1</id>
    <content type="html"><![CDATA[<p>It has been &#8230; a little over a week since I closed with HBase so it
is time to move to the next database in the program:
<a href="http://www.mongodb.org/">MongoDB</a>. It is a so-called
<a href="http://en.wikipedia.org/wiki/Document-oriented_database">document oriented database</a>,
relying on Javascript and JSON like Riak but, MongoDB, unlike Riak,
has a built-in support for querying, and can also perform partial
updates.</p>

<p>Fittingly, this first day is about CRUD and queries.</p>

<!--more-->


<h3>CRUD in MongoDB</h3>

<p>Unlike Riak, MongoDB makes a difference between Create and Update
operations. It is not possible to insert documents with the same id
twice in the same collection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.test.insert( { _id: 'one', value: 1 } )
</span><span class='line'>&gt; db.test.find()
</span><span class='line'>{ "_id" : "one", "value" : 1 }
</span><span class='line'>&gt; db.test.insert( { _id: 'one', value: 2 } )
</span><span class='line'>E11000 duplicate key error index: book.test.$_id_  dup key: { : "one" }</span></code></pre></td></tr></table></div></figure>


<p>Like in SQL, the Read, Update and Delete operations all operate on the
result of a search. And because the criteria query for a search is
just a JSON document, it is possible to reuse it in different
contexts. Combined with JavaScript as a query/shell language, this
makes a very flexible combination.</p>

<h3>Reaching into objects</h3>

<p>As documents are naturally nested, it is important to know how to
refer to nested attributes and how to use them in queries.</p>

<p>Using the JSON nesting notation is possible but does not have the
expected semantic (unless you change your expectations):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.towns.find( { mayor: { name: 'Sam Adams' } }, {name: 1} )
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>The query above returns nothing, despite the fact that there is a town
whose mayor is named &#8216;Sam Adams&#8217;. The problem here is that this
specific notation will match documents in the collection whose <code>mayor</code>
attribute has the exact value <code>{ name: 'Sam Adams' }</code>, rather than
merely those whose <code>mayor</code> attribute has a sub-attribute <code>name</code> with
the <code>Sam Adams</code> value (and possible other sub-attributes, a
possibility that the first query denies).</p>

<p>The correct form for the query is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.towns.find( { 'mayor.name' : 'Sam Adams' }, {name: 1})
</span><span class='line'>{ "_id" : ObjectId("4eed55b0ef971f5317e68e91"), "name" : "Portland" }
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.mongodb.org/display/DOCS/Dot+Notation+%28Reaching+into+Objects%29">This documentation</a>
from the official website was very useful to me in clarifying this aspect.</p>

<h3>The <a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-Metaoperator%3A%7B%7B%24not%7D%7D"><code>$not</code></a> operator</h3>

<p>I first got curious about this operator because the example from the
book did not work. It generated an error in MongoDB 2.0.2 (the latest
at the time of writing).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;exports.foods&#39;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$not</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;burgers&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">_id</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">name</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The error is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>error: { "$err" : "invalid use of $not", "code" : 13034 }</span></code></pre></td></tr></table></div></figure>


<p>From the
<a href="https://github.com/mongodb/mongo/blob/master/src/mongo/db/queryutil.cpp">source code</a>,
it seems $not cannot be applied to a (implicit) equal operator. So the
book code should be using <code>$ne</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s1">&#39;exports.foods.name&#39;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$ne</span><span class="o">:</span> <span class="s1">&#39;burgers&#39;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It does not help that the online shell (accessible from the &#8216;Try it
out&#8217; link on <a href="http://www.mongodb.org/">http://www.mongodb.org/</a>) does
not return an error for the book query. It does not return anything
at all, so it is still not correct.</p>

<p>Still, even with 2.0.2, this query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.countries.find( {$not: { name: 'United States' } } )
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>is accepted but does not return every country but US. Yet again it
returns nothing.</p>

<p>As far as I can tell, this query is actually incorrect (the <code>$not</code>
operator should be applied to an operator, not a match), so its value
is irrelevant, but it is worrying that the parser allows this code.</p>

<p>The general problem is that the semantic of <code>$not</code> is not exactly
the same as the similar operator from logic. So basic logic reasoning
cannot help.</p>

<p>I suppose this is just something to keep in mind: be wary of using
<code>$not</code>.</p>

<h2>Exercises</h2>

<h3>The online MongoDB documentation</h3>

<p>is <a href="http://www.mongodb.org/display/DOCS/Manual">here</a>.</p>

<h3>Query using regular expressions</h3>

<p>As explained
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-RegularExpressions">here</a>,
MongoDB supports two notations: a direct JavaScript regexp object
using <code>/.../</code> and slightly more verbose but more flexible <code>$regexp</code>
operator. The syntax for the regular expression in both cases is the
same.</p>

<h3>MongoDB drivers</h3>

<p>The <a href="http://www.mongodb.org/display/DOCS/Drivers">list of drivers</a>.</p>

<h3>Print a JSON document containing <code>{ "hello" : "world" }</code></h3>

<p>The <code>tojson</code> function can display (and pretty-print) JSON documents:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tojson</span><span class="p">({</span> <span class="s2">&quot;hello&quot;</span><span class="o">:</span> <span class="s2">&quot;world&quot;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Find a town by case insensitive regular expression search</h3>

<p>This would be the <code>i</code> option to the regular expression:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="sr">/new/i</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Find all cities whose names contain an ‘e’, and are famous for food or beer.</h3>

<p>A good use for the
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24in"><code>$in</code></a>
operator:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="sr">/e/</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">famous_for</span> <span class="o">:</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">$in</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">,</span> <span class="s1">&#39;beer&#39;</span><span class="p">]</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>or the equivalent but verbose:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="sr">/e/</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">$or</span><span class="o">:</span> <span class="p">[{</span><span class="nx">famous_for</span> <span class="o">:</span> <span class="s1">&#39;food&#39;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">famous_for</span><span class="o">:</span> <span class="s1">&#39;beer&#39;</span><span class="p">}</span> <span class="p">]</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Find all countries that do not export tasty bacon</h3>

<p>To find countries that export tasty bacon, one has to use
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24elemMatch"><code>$elemMatch</code></a>. It
should not come as a surprise that it is used here as well, but with
the dreaded <code>$not</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span><span class="s1">&#39;exports.foods&#39;</span><span class="o">:</span>
</span><span class='line'>     <span class="p">{</span> <span class="nx">$not</span><span class="o">:</span>
</span><span class='line'>       <span class="p">{</span><span class="nx">$elemMatch</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bacon&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">tasty</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>produces</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;ca&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Canada&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;mx&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Mexico&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(I had not deleted Canada from the database).</p>

<p>The seemingly equivalent</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">$not</span><span class="o">:</span>
</span><span class='line'>      <span class="p">{</span><span class="s1">&#39;exports.foods&#39;</span><span class="o">:</span>
</span><span class='line'>       <span class="p">{</span> <span class="nx">$elemMatch</span><span class="o">:</span>
</span><span class='line'>         <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bacon&#39;</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">tasty</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>will not work. It does not return anything. See above my findings on <code>$not</code>.</p>

<h3>Create a database <code>blogger</code> with a collection of <code>articles</code></h3>

<h4>A new database:</h4>

<p>Creating a new database is extremely easy: just name it when you
launch the <code>mongo</code> shell command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongo blogger</span></code></pre></td></tr></table></div></figure>


<h4>A new collection:</h4>

<p>Like for the database, a collection is created just by inserting
something in it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">articles</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Frederic&#39;</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;my@email.org&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">creation</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">test</span><span class="o">:</span> <span class="s1">&#39;Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...&#39;</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Update the article with an array of comments</h4>

<p>With the operator
<a href="http://www.mongodb.org/display/DOCS/Updating#Updating-%24set"><code>$set</code></a>,
I can specify just what I need to update, not the whole document as in
Riak:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">articles</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span><span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;4ef3c78c7d67f191b06653e4&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">$set</span><span class="o">:</span> <span class="p">{</span> <span class="nx">comments</span><span class="o">:</span>
</span><span class='line'>             <span class="p">[</span> <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Me too&#39;</span><span class="p">},</span>
</span><span class='line'>               <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Me three&#39;</span><span class="p">},</span>
</span><span class='line'>               <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Carol&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;I know all your secret&#39;</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>           <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can check the inserted value with <code>db.articles.findOne()</code> (without
arguments it returns the first element in the collection, and pretty
prints it):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;4ef3c78c7d67f191b06653e4&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="s2">&quot;comments&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                        <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Alice&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;Me too&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                        <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;Me three&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                        <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Carol&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;I know all your secrets&quot;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="s2">&quot;creation&quot;</span> <span class="o">:</span> <span class="nx">ISODate</span><span class="p">(</span><span class="s2">&quot;2011-12-23T00:13:00.636Z&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="s2">&quot;email&quot;</span> <span class="o">:</span> <span class="s2">&quot;my@email.org&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Frederic&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;test&quot;</span> <span class="o">:</span> <span class="s2">&quot;Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tomorrow will cover indexing, and more advanced uses of the data (such
as MapReduce).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak on EC2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2/"/>
    <updated>2011-12-17T14:36:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2</id>
    <content type="html"><![CDATA[<p>The third day with Riak had proposed to deploy Riak on a
<a href="http://aws.amazon.com/ec2/">EC2</a> cluster as an exercise. I could not
do it then due to poor network connectivity and lack of time (I was
traveling), but I did it since and here I explain how.</p>

<!--more-->


<p>EC2 is a service from Amazon to commission a number of virtual
computers with specific performance characteristics, and with use
charged by the hour (the rate depending of the performance).</p>

<p>The whole process is fairly simple and flexible. I got my computers up
and running in minutes. Setting up Riak was a bit more involved (I
should probably had tried on my local network first), but eventually I
was able to load the data and run the queries I wanted.</p>

<p>In outline, here&#8217;s the process</p>

<ul>
<li>figure out the security requirements</li>
<li>think about the cluster organisation</li>
<li>create a few instances of virtual computers</li>
<li>create the security configuration</li>
<li>connect to each machine and set it up</li>
<li>open an SSL tunnel</li>
<li>&#8230;</li>
<li>Profit!</li>
</ul>


<p>And now the details.</p>

<h3>Security requirements</h3>

<p>There will be a few machines, and I need each Riak instance to speak
to each other. This means I need to keep all the required ports open.</p>

<p>As each instance is on a different machine (presumably, I could have
several instances on each machine but I want to keep things simple), I
can use the same ports for each instance. I will just have to give
them different names.</p>

<p>Basho has a helpful
<a href="http://wiki.basho.com/Network-Security-and-Firewall-Configurations.html">page</a>
on this topic. It lists the defaults ports (all of them TCP):</p>

<ul>
<li>epmd&#8217;s listener: 4369</li>
<li>handoff_port listener: 8099</li>
<li>web_port: 8098</li>
<li>pb_port: 8087</li>
<li>plus a range than can be configured. As I have just a small
network, I restrict this range to 6000-6999.</li>
</ul>


<p>These are the ports I will open in my configuration settings.</p>

<h3>Cluster organisation</h3>

<p>I want a simple setup:</p>

<ul>
<li>3 machines</li>
<li>first one is the ring leader</li>
<li>first one is also my interface for client connections</li>
</ul>


<p>So I need to set 3 machines up, make the last two join the first, and
open an SSL tunnel from my local machine to the ring leader.</p>

<h3>EC2 instances</h3>

<p>First I had to sign up to <a href="http://aws.amazon.com/">AWS</a>.</p>

<p>Once this is done, I can use the console, select the EC2 tab, and
click on &#8220;Launch Instance&#8221;.</p>

<p>I chose &#8220;Launch Classic Wizard&#8221; to have as much flexibility as possible:</p>

<p><img src="https://lh6.googleusercontent.com/-MKXddn82uO8/Tu23KOzMhGI/AAAAAAAAB6Y/XpOren_ANVk/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.26.png"></p>

<p>Then I select a basic 64bit Amazon Linux:</p>

<p><img src="https://lh3.googleusercontent.com/--F8ajmA-58c/Tu23KHI9YNI/AAAAAAAAB6U/1fCrHF_tqg0/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.34.png"></p>

<p>I request 3 instances of type Micro (I&#8217;m just playing; I don&#8217;t really care about performance):</p>

<p><img src="https://lh4.googleusercontent.com/-w31FLsR0iC8/Tu2222Q_ZtI/AAAAAAAAB58/E-E86lTf7xg/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.44.png"></p>

<p>I just click through the next two screens (I do not have any specific need for such tuning):</p>

<p><img src="https://lh5.googleusercontent.com/-kRBmxXnSwRc/Tu222wmgj4I/AAAAAAAAB50/U1Rwuqv6R9o/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.05.png">
<img src="https://lh3.googleusercontent.com/-WiqCpx2PT70/Tu222Iz5nTI/AAAAAAAAB5s/k1ZuuVs1yrE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.08.png"></p>

<p>For the key pair, I just give a name, then download the file. I will use it later to connect to my new machines:</p>

<p><img src="https://lh4.googleusercontent.com/-JEnCFjVIM54/Tu222D8yOGI/AAAAAAAAB5o/qdAleXN-iDU/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.28.png"></p>

<p>For the security, I first name my group, then I can use this name as the source parameter for the rules. All the rules are Custom TCP ones; I just need to give the ports (as determined above):</p>

<p><img src="https://lh3.googleusercontent.com/-dSxG8pYQLEc/Tu222KSxpgI/AAAAAAAAB5w/AtiqjF-QTts/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.41.18.png"></p>

<p>And then I can finally start my new machines.</p>

<p>On my first attempts, two of the machines did not start; I just created a couple of new machines of the same kind (64bit Amazon Linux Micro), and put them in the same security group.</p>

<p>Here are the complete security rules (I had to add some after the initial setup):</p>

<p><img src="https://lh6.googleusercontent.com/-tSUcf1TbrLQ/Tu23KB_o3wI/AAAAAAAAB6Q/2OopRB6HFeE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252017.05.42.png"></p>

<p>With this, I have a small cluster of machines. Time to connect and put
them to good use.</p>

<h3>Configuring each machine</h3>

<p>From the EC2 Dashboard, I can access my instances, and get the address for each.</p>

<p>Using the private key downloaded earlier, I can open an SSH connection
to each machine. Note that the user is by default called <code>ec2-user</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i riak-private.pem ec2-user@&lt;MACHINE_NAME&gt;</span></code></pre></td></tr></table></div></figure>


<p>On each, I first need to install riak. I download it directly from
Basho <a href="http://downloads.basho.com/riak/CURRENT/">website</a>.</p>

<p>Each machine has some basic tools, but no Erlang compiler. To avoid
any complications, I chose and retrieved a binary distribution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://downloads.basho.com/riak/CURRENT/riak-1.0.2-1.el6.x86_64.rpm</span></code></pre></td></tr></table></div></figure>


<p>Then I  installed the  downloaded package  (<code>ec2-user</code> can  use <code>sudo</code>
without having to provide a password):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rpm -Uvh riak-1.0.2-1.el6.x86_64.rpm</span></code></pre></td></tr></table></div></figure>


<p>There are a few error messages (or perhaps warnings), but the package
is installed and running.</p>

<p>Riak is installed but not started yet. It is important to get the
configuration right before starting it.</p>

<h4>Common configuration</h4>

<p>For each server, I give it a name that includes the local network IP
address (not the loopback IP address <code>127.0.0.1</code>). It is important,
otherwise the machines cannot talk to each others.</p>

<p>I can get it by running <code>ifconfig</code>. I look for the ethernet setup and especially the <code>inet</code> value:
this is the IP address in Amazon private network. I need to remember
the IP address for what I will call the first machine, so I copy it
somewhere (and call it here <code>&lt;IP_ADDRESS_1&gt;</code>)</p>

<p>Using <code>sudo -e /etc/riak/vm.args</code>, I can edit the name of each node. I set it to <code>riak_ec2_1@&lt;IP_ADDRESS&gt;</code>, (or <code>riak_ec2_2</code>, <code>riak_ec2_3</code>, &#8230;).</p>

<p>Note: the editor will be <code>vi</code>.</p>

<p>I also need to change the <code>app.config</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo -e /etc/riak/app.config`</span></code></pre></td></tr></table></div></figure>


<p>I first need to insert a range restriction configuration. I insert the
following block near the top:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ kernel, [
</span><span class='line'>            {inet_dist_listen_min, 6000},
</span><span class='line'>            {inet_dist_listen_max, 6999}
</span><span class='line'>            ]},</span></code></pre></td></tr></table></div></figure>


<p>For the first machine (the one named <code>riak_ec2_1</code>), I also need to
extend the <code>http</code> interface list. By default it only listen to the
loopback interface (<code>127.0.0.1</code>), but I also need it to listen to the
ethernet interface (see above). Otherwise, I will not be able to set
the SSL tunnel up.</p>

<p>So I replace the lines that read</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{http, [ {"127.0.0.1", 8098 } ]},</span></code></pre></td></tr></table></div></figure>


<p>by something like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{http, [ {"127.0.0.1", 8098 }, {"&lt;IP_ADDRESS_1&gt;", 8098} ]},</span></code></pre></td></tr></table></div></figure>


<p>Once this is done, I started the instances:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo riak start</span></code></pre></td></tr></table></div></figure>


<p>I can test each instance with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8098/stats | python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>Finally, I can link all instances together by executing on the second
and third machine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo riak-admin join riak_ec2_1@&lt;IP_ADDRESS_1&gt;</span></code></pre></td></tr></table></div></figure>


<p>Testing again the status should show three instances in the same ring.</p>

<p>In case of error, uninstall riak, delete the <code>/var/lib/riak</code> directory,
and start again (as I did).</p>

<h3>Setting up the SSL tunnel</h3>

<p>Nothing simpler. Using the first machine name (the one I configured
for connection from the ethernet interface):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i riak-private.pem -f ec2-user@&lt;MACHINE_NAME&gt; \
</span><span class='line'>-L 8098:ec2-user@&lt;MACHINE_NAME&gt;:8098 -N</span></code></pre></td></tr></table></div></figure>


<p>And now I can run from my local machine</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8098/stats | python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>and get the status of the Riak server as if it was local.</p>

<h3>Loading data and running queries</h3>

<p>The book suggest to use the example data from Basho&#8217;s
<a href="http://wiki.basho.com/Loading-Data-and-Running-MapReduce-Queries.html">website</a>,
which is what I did. I downloaded the
<a href="http://wiki.basho.com/attachments/goog.csv"><code>goog.csv</code></a> data file and
the <a href="http://wiki.basho.com/attachments/load_data"><code>load_data</code></a>
script. I changed the port number in the latter to use 8098 instead of
8091, then I just ran it: the data is send through the SSL tunnel and
loaded in my EC2 cluster (but it is very slow).</p>

<p>Once this was done, I checked the various queries proposed on the page, and also implemented the MapReduce Challenge:</p>

<h3>MapReduce Challenge</h3>

<p>The MapReduce Challenge is to compute the days with the highest volume
of dollar traded. This first step is to compute this value, as it is
not part of the initial data.</p>

<p>I use a definition found
<a href="http://wiki.fool.com/Daily_dollar_volume">here</a>, which makes
intuitive sense: <code>Volume*(High - Low)/2</code></p>

<h4>Dollar Traded Volume by Month</h4>

<p>I need to keep both the date and the amount, so my map function will
keep both items in a data structured indexed by month:</p>

<figure class='code'><figcaption><span>Dollar Traded by Month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">month</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pair</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when reducing, I can compare the traded amount and keep the best:</p>

<figure class='code'><figcaption><span>Highest by month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">month</span> <span class="k">in</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">?</span>
</span><span class='line'>  <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To test the whole, I can use the following command, then copy and
paste the query, and execute with <code>Ctrl-D</code>. The command below is run on
my local machine, but thanks to the SSL tunnel, it will execute on the
cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST http://127.0.0.1:8098/mapred \
</span><span class='line'>-H "Content-Type: application/json" -d @-</span></code></pre></td></tr></table></div></figure>


<p>And the query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"inputs":"goog",
</span><span class='line'> "query":[{"map":{"language":"javascript",
</span><span class='line'>                  "source":"function(value, keyData, arg) {
</span><span class='line'>  var data = Riak.mapValuesJson(value)[0];
</span><span class='line'>  var month = value.key.split('-').slice(0,2).join('-');
</span><span class='line'>  var pair = {};
</span><span class='line'>  pair['date'] = value.key;
</span><span class='line'>  pair['traded'] = data.Volume * (data.High - data.Low) / 2;
</span><span class='line'>  var obj = {};
</span><span class='line'>  obj[month] = pair;
</span><span class='line'>  return [obj];
</span><span class='line'>}"}},
</span><span class='line'>         {"reduce":{"language":"javascript",
</span><span class='line'>                    "source":"function(values, arg) {
</span><span class='line'>  return [ values.reduce(function(acc, item) {
</span><span class='line'>    for(var month in item) {
</span><span class='line'>      if(acc[month]) {
</span><span class='line'>        acc[month] = acc[month]['traded'] &lt; item[month]['traded'] ?
</span><span class='line'>  item[month] : acc[month];
</span><span class='line'>      } else acc[month] = item[month];
</span><span class='line'>    }
</span><span class='line'>    return acc;
</span><span class='line'>  })
</span><span class='line'>  ];
</span><span class='line'>}",
</span><span class='line'>         "keep":true}}]}</span></code></pre></td></tr></table></div></figure>


<h4>Day by Highest Dollar Traded</h4>

<p>For this one I use a similar approach: I create pairs with the date
and the amount of dollar traded, but this pair is what I return
directly (instead of returning it indexed by month).</p>

<p>Indexing by date would not work as in the reduce step I would have to
keep the result in a simple (i.e. not indexed) variable, and therefore
would forget the date. By keeping both data items (the date and the
volume traded in dollar) in the same object, I can reduce a list of
such objects to a single item and still retain all the relevant information.</p>

<p>The mapping function creates just a pair object from the data:</p>

<figure class='code'><figcaption><span>Dollar Traded by Day  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reducing function retains the best date by volume traded in dollar
for each batch. It is simpler than the previous one as the values are
simple (i.e. not indexed):</p>

<figure class='code'><figcaption><span>Highest ever  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">){</span>
</span><span class='line'>             <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">)</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">item</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nx">item</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>             <span class="k">else</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>             <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>         <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"inputs":"goog",
</span><span class='line'> "query":[{"map":{"language":"javascript",
</span><span class='line'>                  "source":"function(value, keyData, arg) {
</span><span class='line'>  var data = Riak.mapValuesJson(value)[0];
</span><span class='line'>  var obj = {};
</span><span class='line'>  obj['date'] = value.key;
</span><span class='line'>  obj['traded'] = data.Volume * (data.High - data.Low) / 2;
</span><span class='line'>  return [obj];
</span><span class='line'>}"}},
</span><span class='line'>         {"reduce":{"language":"javascript",
</span><span class='line'>                    "source":"function(values, arg){
</span><span class='line'>  return [ values.reduce(function(acc, item){
</span><span class='line'>                 if(acc) { acc = (acc['traded'] &lt; item['traded']) ? item : acc; }
</span><span class='line'>                 else { acc = item[date]; }
</span><span class='line'>             return acc;
</span><span class='line'>            })
</span><span class='line'>         ];
</span><span class='line'>}",
</span><span class='line'>         "keep":true}}]}</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3/"/>
    <updated>2011-12-15T16:27:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3</id>
    <content type="html"><![CDATA[<p>The third day with HBase is a bit short, but opens to a world of
possibilities: the Cloud.</p>

<p>This is where HBase belongs. No personal (or even that many corporate)
networks are large enough to let it perform correctly.</p>

<p>HBase depends on a large number of servers running in parallel for
its performance, and there are few other places to find that many
machines.</p>

<!--more-->


<h3>Thrift</h3>

<p>The first topic for today is <a href="http://thrift.apache.org/">Thrift</a>, a
generic remote interface to program servers (and a gift from the new
Evil Empire, Facebook).</p>

<p>It is a tool to document a binary API, and generate client stubs to
use this API. HBase supports such an API, making it possible to write
clients in a variety of languages.</p>

<p>Using Thrift on your own project (on the server side, if you have any)
would make it possible to use different languages on the client side,
depending on whichever better fits the needs (scripting languages for
glue scripts, &#8230;)</p>

<p>When I tried the example from the book, I had to change the connection
address of the <code>thrift_example.rb</code> code from <code>localhost</code> to
<code>127.0.0.1</code>, otherwise Thrift would refuse the connection.</p>

<h3>Whirr</h3>

<p><a href="http://whirr.apache.org/">Whirr</a> is far more exciting. It is a tool
to deploy and configure some specific servers on (among others)
<a href="http://aws.amazon.com/ec2/">Amazon EC2</a>.</p>

<p>The first, and perhaps the most complex step is to open an account on
<a href="http://aws.amazon.com/">AWS</a>. It will require a phone, a credit card,
a computer, and some time. And perhaps a couple of emails if the
account opening remains stuck in &#8220;Pending verification&#8221; status.</p>

<p>Once this is done, Whirr can be used to create instances (be careful
with that: Amazon will charge at least one hour for each server even
if you take it down after a couple of minutes), download and install
specific servers (mostly from the <a href="http://hadoop.apache.org/">Hadoop</a>
family), configure them, all of this from the comfort of the command
line (which is my case is cosily close to a cup of warm coco, so it is
very comfortable indeed).</p>

<p>All you have to do is retrieve you security token from your AWS
account page, create a public/private key pair, then write a recipe
file (which describes what kind of machines and how many you need,
what to install on each, &#8230;), and Whirr takes care of the rest. The
first two steps only have to be done once; you can deploy as many
recipes as you need.</p>

<p>The setup process takes a few minutes, then you can connect with SSH
to one of your remote servers.</p>

<p>Whirr also creates a security configuration for each recipe, opening
only the ports that are required by the servers in the recipe,
limiting source of the connections to specific servers. You can also
edit the security rules directly in the recipe if you want.</p>

<p>The ease with which this can be done is really surprising. It reminds
me of how easy it was to deploy a Rails application on
<a href="http://www.heroku.com/">Heroku</a>.</p>

<p>Now, I do not have any foreseen uses for such computing capacity, but
I can see how it could be helpful for any organisation to be able to
run occasional large data processing jobs without having to maintain a
permanent data center.</p>

<h2>Exercises</h2>

<p>There is only one exercise today: to open a Thrift connection to an
AWS deployed HBase.</p>

<p>First is to get Thrift to run on the deployed machines. The book
suggest to connect by SSH and start the instance there, but there is a
better way if you know you will need Thrift: ask Whirr to deploy it
automatically.</p>

<p>In the file below, I&#8217;ve added the server <code>hbase-thriftserver</code> to the
master server:</p>

<figure class='code'><figcaption><span>hbase.properties (hbase.properties)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/hbase/hbase.properties'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Licensed to the Apache Software Foundation (ASF) under one or more</span>
</span><span class='line'><span class="c"># contributor license agreements.  See the NOTICE file distributed with</span>
</span><span class='line'><span class="c"># this work for additional information regarding copyright ownership.</span>
</span><span class='line'><span class="c"># The ASF licenses this file to You under the Apache License, Version 2.0</span>
</span><span class='line'><span class="c"># (the &quot;License&quot;); you may not use this file except in compliance with</span>
</span><span class='line'><span class="c"># the License.  You may obtain a copy of the License at</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#     http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="c"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="c"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="c"># See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="c"># limitations under the License.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># HBase 0.90.x on Cloudera Hadoop Cluster on AWS EC2</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'>
</span><span class='line'><span class="c"># Read the Configuration Guide for more info:</span>
</span><span class='line'><span class="c"># http://incubator.apache.org/whirr/configuration-guide.html</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the cluster name here</span>
</span><span class='line'><span class="na">whirr.cluster-name</span><span class="o">=</span><span class="s">hbase-0.90</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the number of machines in the cluster here</span>
</span><span class='line'><span class="na">whirr.instance-templates</span><span class="o">=</span><span class="s">1 zookeeper+hadoop-namenode+hadoop-jobtracker+hbase-master+hbase-thriftserver,1 hadoop-datanode+hadoop-tasktracker+hbase-regionserver</span>
</span><span class='line'>
</span><span class='line'><span class="c"># replication level should not be higher than number of data nodes</span>
</span><span class='line'><span class="na">hbase-site.dfs.replication</span><span class="o">=</span><span class="s">2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For EC2 set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables.</span>
</span><span class='line'><span class="na">whirr.provider</span><span class="o">=</span><span class="s">aws-ec2</span>
</span><span class='line'><span class="na">whirr.identity</span><span class="o">=</span><span class="s">${env:AWS_ACCESS_KEY_ID}</span>
</span><span class='line'><span class="na">whirr.credential</span><span class="o">=</span><span class="s">${env:AWS_SECRET_ACCESS_KEY}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The size of the instance to use. See http://aws.amazon.com/ec2/instance-types/</span>
</span><span class='line'><span class="na">whirr.hardware-id</span><span class="o">=</span><span class="s">c1.xlarge</span>
</span><span class='line'><span class="c"># Ubuntu 10.04 LTS Lucid. See http://alestic.com/</span>
</span><span class='line'><span class="na">whirr.image-id</span><span class="o">=</span><span class="s">us-east-1/ami-da0cf8b3</span>
</span><span class='line'><span class="c"># If you choose a different location, make sure whirr.image-id is updated too</span>
</span><span class='line'><span class="na">whirr.location-id</span><span class="o">=</span><span class="s">us-east-1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># By default use the user system SSH keys. Override them here.</span>
</span><span class='line'><span class="na">whirr.private-key-file</span><span class="o">=</span><span class="s">keys/id_rsa</span>
</span><span class='line'><span class="na">whirr.public-key-file</span><span class="o">=</span><span class="s">keys/id_rsa.pub</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The HBase version to use.</span>
</span><span class='line'><span class="na">whirr.hbase.tarball.url</span><span class="o">=</span><span class="s">http://apache.cu.be/hbase/hbase-0.90.4/hbase-0.90.4.tar.gz</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The Hadoop version to use. See http://hbase.apache.org/book/hadoop.html</span>
</span><span class='line'><span class="c"># The default Hadoop version used by Whirr does not fulfill the HBase 0.90.x requirements.</span>
</span><span class='line'><span class="c"># Whirr will replace the hadoop-core jar in HBase with the one from the actually installed Hadoop.</span>
</span><span class='line'><span class="c"># This example uses Cloudera&#39;s CDH3.</span>
</span><span class='line'><span class="na">whirr.hadoop.tarball.url</span><span class="o">=</span><span class="s">http://archive.cloudera.com/cdh/3/hadoop-0.20.2-cdh3u2.tar.gz</span>
</span></code></pre></td></tr></table></div></figure>


<p>As for the connection to the Thrift server, the method described in
the book is to open the port 9090 to the world, and to hope to be the
only one to know about this port: a likely possibility, but who would
want to take such a chance in production?</p>

<p>Fortunately, there is a better solution: SSH Tunneling. It is very
easy to set up and requires nothing but what we already have.</p>

<p>The general idea is to open a ssh tunnel between a local port and a
remote port: whatever you puts in the local port is taken by ssh,
transported over the SSH connection; once it reaches the remote
machine, the remote ssh instance will forward the data to the remote
port, as if it was a client running on the remote machine.</p>

<p>The transport between the two machines only requires the remote one to
have the SSH port open (which is both the case, and secure). You have
to use authentication and encryption for the transport.</p>

<p>And what is required to implement this SSH tunneling:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i keys/id_rsa -f ${USER}@&lt;SERVER_NAME&gt; -L 9090:&lt;SERVER_NAME&gt;:9090 -N</span></code></pre></td></tr></table></div></figure>


<p>(from the directory where you created the <code>keys</code> directory)</p>

<p>Here I map the local port 9090 to the remote machine&#8217;s port 9090. That
way I don&#8217;t even have to change my <code>thrift_example.rb</code> code. But of
course, if I had to connect to different machines, I would use
different ports.</p>

<p>The Thrift server was automatically started by the recipe.</p>

<p>With this in place, and after creating some tables in the remote
HBase:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby thrift_example.rb 
</span><span class='line'>links
</span><span class='line'>  from:
</span><span class='line'>    maxVersions: 1
</span><span class='line'>    compression: NONE
</span><span class='line'>    bloomFilterType: ROWCOL
</span><span class='line'>  to:
</span><span class='line'>    maxVersions: 1
</span><span class='line'>    compression: NONE
</span><span class='line'>    bloomFilterType: ROWCOL
</span><span class='line'>wiki
</span><span class='line'>  revision:
</span><span class='line'>    maxVersions: 2147483647
</span><span class='line'>    compression: NONE
</span><span class='line'>    bloomFilterType: NONE
</span><span class='line'>  text:
</span><span class='line'>    maxVersions: 2147483647
</span><span class='line'>    compression: GZ
</span><span class='line'>    bloomFilterType: ROW</span></code></pre></td></tr></table></div></figure>


<p>(be careful not to use LZO as a compression algorithm in the remote
HBase, as I did when I tried the first time: the default HBase has no
LZO support and will fail when you try to enable a table with LZO compression).</p>

<p>To take a tunnel down, you&#8217;ll have to find and kill it (as far as I
can tell). If you have no other ssh connections, <code>killall ssh</code> is a
simple solution. In any case, the connection will be cut when the
remote servers are destroyed.</p>

<h2>Wrapping up HBase</h2>

<p>I like what I see with HBase: the project has strong backers among its
users (Yahoo, Facebook, &#8230;); it belongs to a large family of tools
that help to design Big Data solutions, and integrates well with some
Cloud networks</p>

<p>The model is easy to understand (the book mentions the possibility of
eventual consistency due to regional replication, but this remains a
simpler model than Riak&#8217;s), and close to the original MapReduce
concept.</p>

<p>This is really one tool I will have a closer look to in the near
future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/12/seven-databases-in-seven-weeks-hbase-day-2/"/>
    <updated>2011-12-12T23:46:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/12/seven-databases-in-seven-weeks-hbase-day-2</id>
    <content type="html"><![CDATA[<p>And on the second day with HBase, we load it with <a href="http://www.wikipedia.org/">Wikipedia</a>. Actually I had to do it twice to get it to work: on my first attempt the process kind of froze at about 200,000 articles.</p>

<!--more-->


<p>After some digging (and finding this very helpful <a href="http://ofps.oreilly.com/titles/9781449396107/installation.html">page</a> from <a href="http://ofps.oreilly.com/titles/9781449396107/">HBase: The Definitive Guide</a>), I tried again with a different setting for the limit on open files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ulimit -n 10240</span></code></pre></td></tr></table></div></figure>


<p>With that, HBase was able to keep churning along (the limit is per session, so HBase had to be restarted). I started the import process in the morning, and when I finally stopped it it had passed 10,000,000 pages (not all of them actual articles). Parsing links was equally successful.</p>

<h3>Consistency</h3>

<p>Unlike Riak, which offers <a href="http://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>, HBase ensures row level consistency. This means that each row has only one value, and a write to the row is either entirely successful, or not performed at all (so an update will never be applied partially).</p>

<p>This idea that each row is atomic is a simple yet effective mental model; I feel I should be able to use this model to design reliable solutions on HBase. To make them fast as well is a different matter entirely: I&#8217;d first need more experience with the concept of column families and their various options.</p>

<h3>Logging</h3>

<p>HBase uses <a href="http://en.wikipedia.org/wiki/Write-ahead_logging">Write-Ahead Logging</a>, exactly like PostgreSQL and many other databases (Riak too) and file systems. This is a low level mechanism designed to help with consistency: first a description of the updates is written into a log file (and flushed); then the update is performed. If there&#8217;s a problem during the update, it is always possible to compare the write-ahead log and execute again whatever updates are missing or partial.</p>

<h3>Regions and servers</h3>

<p>I must say I am still a bit unclear on this topic: I have a standalone instance of HBase, so naturally there is no distribution involved.</p>

<p>HBase first keep the data sorted by key, and distributes contiguous chunks of data to each region (growing the number of regions if needed).</p>

<h3>HBase and names</h3>

<p>In a typical relational database, just as in a normal programming language, the name you give to things (tables, columns or variables) is a programmer oriented feature that has no impact on performance.</p>

<p>The idea that you should use short variable names for &#8216;performance reason&#8217; is either a joke or a beginner&#8217;s mistake.</p>

<p>Except in HBase, where the length of names can impact storage performance. See the <a href="http://hbase.apache.org/book.html#rowkey.design">HBase book, Try to minimize row and column sizes</a>.</p>

<h2>Exercises</h2>

<h3>Compression in HBase</h3>

<p>I could not really find any article on the pros and cons of compression in either HBase or Hadoop. I guess the pros and cons here are the same as any other use of compression: trading IO for CPU. Smaller (because compressed) data can be saved to and read from the disk faster, but at the cost of higher CPU usage.</p>

<h3>Bloom filters</h3>

<p>Bloom filters are describe on the always helpful <a href="http://en.wikipedia.org/wiki/Bloom_filter">Wikipedia</a>. Such a filter is a tool to determine quickly if a piece of information in not in a specific storage, with a configurable probability for false positive.</p>

<p>Say you have a key value distributed data store. For each store, you maintain a Bloom filter of the keys.</p>

<p>Assuming you are looking for a key, you can use the Bloom filters to quickly determine where to look further.</p>

<p>If a Bloom filter for a store states the key is not present, you know you can ignore the store. If it says the key is present, it could be wrong, so you have to look. How often it returns yes when it should say no is a trade-off between the size of the filter and the probability of error.</p>

<p>With HBase being distributed by default, knowing where to look for a key or a key, column pair can increase performance.</p>

<h3>Column family options for compression</h3>

<p>There use to be <code>RECORD</code> and <code>BLOCK</code> options, but they appear deprecated. What is left is to specify the compression algorithm for either regular compression, or compacting compression (which happens when HBase reorganize the store). The compacting compression setting can use the same values (i.e. algorithm names) as the compression setting. In the shell, the option is <code>COMPRESSION_COMPACT</code>.</p>

<p>The available algorithms are <code>NONE</code> (no encryption), <code>GZ</code>, <code>LZO</code> and <code>SNAPPY</code> (which is probably better still than LZO).</p>

<h3>Column family compression design consideration</h3>

<p>I could not find any definitive answer to this, but I would guess that:</p>

<ul>
<li>already compressed data (such as JPEG) should be in an uncompressed column family</li>
<li>rarely used by very large data could use a slower but more efficient algorithm such as GZ</li>
<li>small but very often used families should not be compressed</li>
</ul>


<h3>Installing LZO</h3>

<p>To install LZO compression is not exactly trivial, especially on Mac OS X.</p>

<p>The first step is to install the library; I did it with <a href="http://mxcl.github.com/homebrew/">Homebrew</a>. It installs 64 bits versions by default; the only thing to remember is that by default on Mac OS X 10.7, the default compiler is <a href="http://llvm.org">LLVM</a>, but often <a href="http://gcc.gnu.org/">GCC</a> is better.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo brew install lzo --use-gcc</span></code></pre></td></tr></table></div></figure>


<p>and LZO will end up under <code>/usr/local/Cellar/lzo/2.06/</code></p>

<p>Next step is to build the hadoop LZO plugin. The basic information is available on the Hadoop <a href="http://wiki.apache.org/hadoop/UsingLzoCompression">wiki</a>, but the main repository it refers to is obsolete. There is another, maintained <a href="https://github.com/toddlipcon/hadoop-lzo">repository</a> on Github.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/toddlipcon/hadoop-lzo</span></code></pre></td></tr></table></div></figure>


<h4>Mac OS X</h4>

<p>Building on Linux should work right away, but Mac OS X (especially 10.7) is slightly different in frustrating way. The <code>ld</code> command is not GNU, but BSD, so it does not understand the same options.</p>

<p>To get the library to compile, you need to edit the <code>build.xml</code> file and clear the <code>LDFLAGS</code> (by default the value is <code>-Wl,--no-as-needed</code>, it needs to be empty).</p>

<p>Liquid error: ClassNotFound: no lexer for alias &#8216;txt&#8217; found</p>

<p>From inside the repository, it can be applied with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>patch -p1 &lt; hadoop-lzo.patch</span></code></pre></td></tr></table></div></figure>


<p>Once this is done, the <code>ant</code> invocation documented in the Wiki should almost work. Two things need to be changed: first is the use of <code>GCC</code> instead of <code>LLVM</code> (by setting the <code>CC</code> variable); second is the strange name of the <code>include</code> directory for Java. The build script expects it under <code>$JAVA_HOME/include</code>, but of course in Mac OS X it had to be somewhere else (<code>/System/Library/Frameworks/JavaVM.framework/Headers</code>, if you need to know), so I added it directly to the include path <code>C_INCLUDE_PATH</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>env JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/ \
</span><span class='line'>C_INCLUDE_PATH=/System/Library/Frameworks/JavaVM.framework/Headers:/usr/local/Cellar/lzo/2.06/include/ \
</span><span class='line'>LIBRARY_PATH=/usr/local/Cellar/lzo/2.06/lib/ CFAGS='-arch x86_64' \
</span><span class='line'>CC=/usr/bin/gcc-4.2  ant clean compile-native test tar</span></code></pre></td></tr></table></div></figure>


<p>Normally, you should now have a <code>build</code> directory with the jar and native libraries.</p>

<p>The final step is to deploy this in HBase. HBase expect everything to be under the <code>$HBASE_HOME/lib</code>. The instructions from the wiki give the right commands (I just added the creation of the <code>$HBASE_HOME/lib/native</code> directory, which does not exist by default):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp build/hadoop-lzo-0.4.15/hadoop-lzo-0.4.15.jar $HBASE_HOME/lib/
</span><span class='line'>mkdir -p $HBASE_HOME/lib/native
</span><span class='line'>tar -cBf - -C build/hadoop-lzo-0.4.15/lib/native/ . | tar -xBvf - -C $HBASE_HOME/lib/native</span></code></pre></td></tr></table></div></figure>


<p>Now you can test whether the new library is enabled: run the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/hbase org.apache.hadoop.hbase.util.CompressionTest /tmp/data.lzo lzo</span></code></pre></td></tr></table></div></figure>


<p>and it should output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>11/12/14 09:13:21 INFO lzo.GPLNativeCodeLoader: Loaded native gpl library
</span><span class='line'>11/12/14 09:13:21 INFO lzo.LzoCodec: Successfully loaded & initialized native-lzo library [hadoop-lzo rev c7d54fffe5a853c437ee23413ba71fc6af23c91d]
</span><span class='line'>11/12/14 09:13:21 INFO compress.CodecPool: Got brand-new compressor
</span><span class='line'>SUCCESS</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. The most frustrating part is that HBase will appear to hang when you try to enable a table that uses LZO compression if anything went wrong (and forgot to test as above). The logs will reveal that <code>hadoop-native</code> cannot be found. This means that the native libraries cannot be loaded. So make sure that you have all the files below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.0.dylib
</span><span class='line'>$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.a
</span><span class='line'>$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.dylib
</span><span class='line'>$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.la</span></code></pre></td></tr></table></div></figure>


<p>After that, restart the server, and you can use LZO compression instead of GZ.</p>

<p>And this completes Day 2. Next and final day is about deploying HBase to the cloud. This might take more than just a day as I need some time to figure out how to use <a href="http://aws.amazon.com/ec2/">AWS EC2</a> and which options to choose, but hopefully I&#8217;ll be able to deploy Riak there as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/11/seven-databases-in-seven-weeks-hbase-day-1/"/>
    <updated>2011-12-11T12:57:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/11/seven-databases-in-seven-weeks-hbase-day-1</id>
    <content type="html"><![CDATA[<p>New week, new database. This week is about <a href="">HBase</a>, a product that
has a significant enterprisy feel about it. First it is written in
Java, the de facto enterprise language. Then it is already in
production in very large big data consumers (Facebook among others).</p>

<p>Perhaps more surprising is the fact that it even runs at all on a
single, personal computer (as the book states, 5 dedicated servers is
the recommended minimal configuration).</p>

<!--more-->


<p>Today is a fairly short day. Getting HBase to run, creating a single
table and a couple of rows, and that&#8217;s it.</p>

<p>As for Riak, I recommend downloading the
<a href="http://www.apache.org/dyn/closer.cgi?path=hbase/hbase-0.90.3/hbase-0.90.3.tar.gz">HBase package</a>
rather than trying your luck with the Homebrew version. HBase runs
directly from the extraction directory, and already includes all the
dependencies.</p>

<p>Just edit the hbase-site.xml configuratio file as the book recommends,
and you&#8217;re good to go.</p>

<h2>Exercises</h2>

<h3>put_many function</h3>

<p>This function is more an exercise in Ruby than in HBase. The code is
just a variant of what is already in the book.</p>

<figure class='code'><figcaption><span>put_many.rb  (put_many.rb)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/hbase/put_many.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># recap some definition to make this definition self-contained</span>
</span><span class='line'><span class="n">import</span> <span class="s1">&#39;org.apache.hadoop.hbase.client.HTable&#39;</span>
</span><span class='line'><span class="n">import</span> <span class="s1">&#39;org.apache.hadoop.hbase.client.Put&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">jbytes</span><span class="p">(</span> <span class="o">*</span><span class="n">args</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">arg</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_java_bytes</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># actual exercise</span>
</span><span class='line'><span class="k">def</span> <span class="nf">put_many</span><span class="p">(</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">column_values</span><span class="p">)</span>
</span><span class='line'>  <span class="n">table</span> <span class="o">=</span> <span class="no">HTable</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@hbase</span><span class="o">.</span><span class="n">configuration</span><span class="p">,</span> <span class="n">table_name</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">p</span> <span class="o">=</span> <span class="no">Put</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="o">*</span><span class="n">jbytes</span><span class="p">(</span> <span class="n">row</span> <span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">column_values</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="n">kf</span><span class="p">,</span> <span class="n">kn</span><span class="p">)</span> <span class="o">=</span> <span class="n">k</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kn</span> <span class="o">||=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="nb">p</span><span class="o">.</span><span class="n">add</span><span class="p">(</span> <span class="o">*</span><span class="n">jbytes</span><span class="p">(</span> <span class="n">kf</span><span class="p">,</span> <span class="n">kn</span><span class="p">,</span> <span class="n">v</span> <span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">table</span><span class="o">.</span><span class="n">put</span><span class="p">(</span> <span class="nb">p</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Use the put_many function</h3>

<p>Invoking the <code>put_many</code> function then checking the insert:</p>

<figure class='code'><figcaption><span>Testing put_many  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">put_many</span> <span class="s1">&#39;wiki&#39;</span><span class="p">,</span> <span class="s1">&#39;Some title&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;text:&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Some article text&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;revision:author&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;jschmoe&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;revision:comment&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;no comment&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;wiki&#39;</span><span class="p">,</span> <span class="s1">&#39;Some title&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>generates</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>COLUMN                CELL                                                      
</span><span class='line'> revision:author      timestamp=1323575657943, value=jschmoe                    
</span><span class='line'> revision:comment     timestamp=1323575657943, value=no comment                 
</span><span class='line'> text:                timestamp=1323575657943, value=Some article text          
</span><span class='line'>3 row(s) in 0.5340 seconds</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all for today. Tomorrow will be a bit more fun: first a
significant take on of Wikipedia files, then using HBase to play with
the loaded data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/09/seven-databases-in-seven-weeks-riak-day-3/"/>
    <updated>2011-12-09T22:32:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/09/seven-databases-in-seven-weeks-riak-day-3</id>
    <content type="html"><![CDATA[<p>Today we complete the tour of Riak features. First conflict resolution
with vector clocks; then pre and post-commit hooks, and finally
searching Riak data with a <a href="http://lucene.apache.org/">Solr</a>
compatible interface.</p>

<!--more-->


<h3>Setting up Riak</h3>

<p>Over the last few days, I have been trying different ways to get Riak up and running.</p>

<p>Following the book advice, I recommend installing Riak from the
sources. Actually, you can just build it, build the <code>devrel</code> target,
and run from the <code>dev</code> directory.</p>

<p>On Mac OS X, <a href="http://mxcl.github.com/homebrew/">Homebrew</a> usually
works for me, but I like my servers to run with their own user, so I
<code>sudo brew install</code> the packages. In the case of Riak, this does not
work at all (the files have incorrect ownership and useless permissions).</p>

<p>There is a small bug in Riak 1.0.2 that causes it to return a 500 HTTP
error when the precommit hook fails, instead of the expected 403. The
problem is a spurious variable binding in Erlang. The patch below
fixes this error; it also make it possible to build Riak with Erlang R14B04.</p>

<figure class='code'><figcaption><span>riak 1.0.2 patch  (riak-1.0.2.patch)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/riak/riak-1.0.2.patch'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>diff -rupN riak-1.0.2-orig/deps/riak_kv/src/riak_kv_wm_object.erl riak-1.0.2/deps/riak_kv/src/riak_kv_wm_object.erl
</span><span class='line'>--- riak-1.0.2-orig/deps/riak_kv/src/riak_kv_wm_object.erl    2011-11-18 04:50:52.000000000 +0900
</span><span class='line'>+++ riak-1.0.2/deps/riak_kv/src/riak_kv_wm_object.erl 2011-12-11 13:27:52.000000000 +0900
</span><span class='line'>@@ -966,8 +966,8 @@ handle_common_error(Reason, RD, Ctx) -&gt;
</span><span class='line'>     case {error, Reason} of
</span><span class='line'>         {error, precommit_fail} -&gt;
</span><span class='line'>             {{halt, 403}, send_precommit_error(RD, undefined), Ctx};
</span><span class='line'>-        {error, {precommit_fail, Reason}} -&gt;
</span><span class='line'>-            {{halt, 403}, send_precommit_error(RD, Reason), Ctx};
</span><span class='line'>+        {error, {precommit_fail, Message}} -&gt;
</span><span class='line'>+            {{halt, 403}, send_precommit_error(RD, Message), Ctx};
</span><span class='line'>         {error, too_many_fails} -&gt;
</span><span class='line'>             {{halt, 503}, wrq:append_to_response_body(&quot;Too Many write failures&quot;
</span><span class='line'>                     &quot; to satisfy W/DW\n&quot;, RD), Ctx};
</span><span class='line'>diff -rupN riak-1.0.2-orig/rebar.config riak-1.0.2/rebar.config
</span><span class='line'>--- riak-1.0.2-orig/rebar.config  2011-11-18 05:17:47.000000000 +0900
</span><span class='line'>+++ riak-1.0.2/rebar.config   2011-12-11 13:28:21.000000000 +0900
</span><span class='line'>@@ -1,6 +1,6 @@
</span><span class='line'> {sub_dirs, [&quot;rel&quot;]}.
</span><span class='line'>
</span><span class='line'>-{require_otp_vsn, &quot;R14B0[23]&quot;}.
</span><span class='line'>+{require_otp_vsn, &quot;R14B0[234]&quot;}.
</span><span class='line'>
</span><span class='line'> {cover_enabled, true}.
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Apply it in the Riak 1.0.2 directory: <code>patch -p1 &lt; ../riak-1.0.2.patch</code>.</p>

<p>It can also be applied on a repository pulled from <a href="https://github.com/basho/riak">github</a>, but the
latest version has already the patch for Erlang R14B04, so you can
ignore that patch.</p>

<p><em>Update (2012/12/13):</em> my fix has been merged into the main Riak github repository,
so you no longer need to apply the patch if you get the latest source
by Git.</p>

<h3>Vector Clocks</h3>

<p><a href="http://en.wikipedia.org/wiki/Vector_clock">Vector clocks</a> are a
common mechanism to attach a precise time to events occurring
concurrently. By having each event producer keep tracks of the vector
clock of events it is responding to, it becomes possible to identify
sequences and branches in the timing of events (when running
concurrently, time is no longer linear, but can be a graph, or even
worse, a tree, where various participants ignore each other&#8217;s
responses).</p>

<p>In particular, vector clocks allow a participant to detect conflicts
in the data, and take remedial actions.</p>

<p>Unfortunately, the notion of conflict resolution is not trivial; and
with Riak all or nothing updates, there is almost no information left
to do a merge (with concurrent file modifications, on the other hand,
if the updated areas are different, it might be possible to apply both
changes to the original version, which is what version control systems
typically do).</p>

<p>It does not help that, once again, the example chosen by the authors
to illustrate the concept is poor: the idea that a score given by a
number of judges can simply be averaged when a conflict occurs gives a
rather weird meaning to the score. It would make more sense for each
score to be stored in a different property, and averaged when they are
all present&#8230;</p>

<p>It could have been useful to show how more elaborate data (with
multiple properties) can be merge based on the identity of the client
(the book passes a client id but does not use it afterwards, so it
might not be possible to retrieve it).</p>

<h3>Pre and post-commit hooks</h3>

<p>Riak allows code to be executed before and after changes on the
database. This is similar to checks and triggers in PostgreSQL, but
the post-commit hooks are more powerful as they can perform pretty
much anything (although I have not explored triggers in other
languages, such as Perl, Python, &#8230; that PostgreSQL supports).</p>

<p>Note: when I tried the example, I had a 500 Internal Server Error
instead of the expected 403 Forbidden return code. I eventually
tracked it down to a bug in the Erlang base code; see my explanations
above to install and patch Riak.</p>

<h3>Indexing and Searching</h3>

<p>Unlike what is stated in the first beta of the book, search is a
standard feature in Riak (at least 1.0.2). Just edit the <code>app.config</code>
file, look for search, and change the <code>enable</code> property to <code>true</code>.</p>

<p>Once search is enabled, it is recommended to change the index schema
to declare how to index and search various fields. Otherwise, the
search will not work as the book describes it. In particular, search
for a specific breed will not be case insensitive.</p>

<p>So, after enabling search in each server, I use the command
<code>dev1/bin/search-cmd install animals</code> to enable auto-indexing on data
updates (indexes can also be built from files, to the extent that you
have them).</p>

<p>Then I exported the default index with <code>dev1/bin/search-cmd get-schema
animals</code> (the output must be piped into a file).</p>

<p>I modified the file to add a declaration for the <code>breed</code> field,
following examples from the original
<a href="http://wiki.basho.com/Riak-Search---Schema.html">documentation</a>.</p>

<figure class='code'><figcaption><span>animals schema  (animals.json)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/riak/animals.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">%%</span> <span class="nx">Schema</span> <span class="k">for</span> <span class="s1">&#39;animals&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">schema</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">version</span><span class="p">,</span> <span class="s2">&quot;1.1&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">n_val</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">default_field</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;breed&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">]},</span>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_num&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_num&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_int&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_int&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_dt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_dt&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_date&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_date&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_txt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">full</span> <span class="nx">text</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">        {dynamic_field, [</span>
</span><span class='line'><span class="s2">            {name, &quot;</span><span class="o">*</span><span class="nx">_txt</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">            {type, string},</span>
</span><span class='line'><span class="s2">            {analyzer_factory, {erlang, text_analyzers, standard_analyzer_factory}}</span>
</span><span class='line'><span class="s2">        ]},</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        %% Field names ending in &quot;</span><span class="nx">_text</span><span class="s2">&quot; are indexed as full text&quot;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_text&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Everything</span> <span class="k">else</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">string</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I loaded the schema back into Riak with <code>dev1/bin/search-cmd set-schema animals animals.json</code></p>

<p>Now I can load the data as the book proposes (note that as I&#8217;m using
the standard <code>dev1</code> Riak server instead of a dedicated one, the port
is 8091 and not 8098).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X PUT http://127.0.0.1:8091/riak/animals/dragon \
</span><span class='line'>-H "Content-Type: application/json" \
</span><span class='line'>-d '{"nickname" : "Dragon", "breed" : "Briard", "score" : 1 }'
</span><span class='line'>$ curl -X PUT http://127.0.0.1:8091/riak/animals/ace \
</span><span class='line'>-H "Content-Type: application/json" \
</span><span class='line'>-d '{"nickname" : "The Wonder Dog", "breed" : "German Shepherd", "score" : 3 }'
</span><span class='line'>$ curl -X PUT http://127.0.0.1:8091/riak/animals/rtt \
</span><span class='line'>-H "Content-Type: application/json" \
</span><span class='line'>-d '{"nickname" : "Rin Tin Tin", "breed" : "German Shepherd", "score" : 4 }'</span></code></pre></td></tr></table></div></figure>


<p>And now the output of a search is as expected:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:8091/solr/animals/select?q=breed:shepherd
</span><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;response&gt;
</span><span class='line'>  &lt;lst name="responseHeader"&gt;
</span><span class='line'>    &lt;int name="status"&gt;0&lt;/int&gt;
</span><span class='line'>    &lt;int name="QTime"&gt;1&lt;/int&gt;
</span><span class='line'>    &lt;lst name="params"&gt;
</span><span class='line'>      &lt;str name="indent"&gt;on&lt;/str&gt;
</span><span class='line'>      &lt;str name="start"&gt;0&lt;/str&gt;
</span><span class='line'>      &lt;str name="q"&gt;breed:shepherd&lt;/str&gt;
</span><span class='line'>      &lt;str name="q.op"&gt;or&lt;/str&gt;
</span><span class='line'>      &lt;str name="filter"&gt;&lt;/str&gt;
</span><span class='line'>      &lt;str name="df"&gt;value&lt;/str&gt;
</span><span class='line'>      &lt;str name="wt"&gt;standard&lt;/str&gt;
</span><span class='line'>      &lt;str name="version"&gt;1.1&lt;/str&gt;
</span><span class='line'>      &lt;str name="rows"&gt;2&lt;/str&gt;
</span><span class='line'>    &lt;/lst&gt;
</span><span class='line'>  &lt;/lst&gt;
</span><span class='line'>  &lt;result name="response" numFound="2" start="0" maxScore="0.353553"&gt;
</span><span class='line'>    &lt;doc&gt;
</span><span class='line'>      &lt;str name="id"&gt;ace
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="breed"&gt;German Shepherd
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="nickname"&gt;The Wonder Dog
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="score"&gt;3
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>    &lt;/doc&gt;
</span><span class='line'>    &lt;doc&gt;
</span><span class='line'>      &lt;str name="id"&gt;rtt
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="breed"&gt;German Shepherd
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="nickname"&gt;Rin Tin Tin
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="score"&gt;4
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>    &lt;/doc&gt;
</span><span class='line'>  &lt;/result&gt;
</span><span class='line'>&lt;/response&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Exercises</h2>

<h3>Indexing on score</h3>

<p>For this I first modified the index schema again:</p>

<figure class='code'><figcaption><span>animals schema improved  (animals-score.json)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/riak/animals-score.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">%%</span> <span class="nx">Schema</span> <span class="k">for</span> <span class="s1">&#39;animals&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">schema</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">version</span><span class="p">,</span> <span class="s2">&quot;1.1&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">n_val</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">default_field</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;breed&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">]},</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;score&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]},</span>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_num&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_num&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_int&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_int&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_dt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_dt&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_date&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_date&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_txt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">full</span> <span class="nx">text</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">        {dynamic_field, [</span>
</span><span class='line'><span class="s2">            {name, &quot;</span><span class="o">*</span><span class="nx">_txt</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">            {type, string},</span>
</span><span class='line'><span class="s2">            {analyzer_factory, {erlang, text_analyzers, standard_analyzer_factory}}</span>
</span><span class='line'><span class="s2">        ]},</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        %% Field names ending in &quot;</span><span class="nx">_text</span><span class="s2">&quot; are indexed as full text&quot;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_text&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Everything</span> <span class="k">else</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">string</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I reentered the data (see above) to get it indexed.</p>

<p>Finally, I input a query in Firefox, to let it figure out the HTTP
escape characters. The result is used below with curl (both outputs
were identical):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8091/solr/animals/select?q=score:%5B2%20TO%204%5D
</span><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;response&gt;
</span><span class='line'>  &lt;lst name="responseHeader"&gt;
</span><span class='line'>    &lt;int name="status"&gt;0&lt;/int&gt;
</span><span class='line'>    &lt;int name="QTime"&gt;3&lt;/int&gt;
</span><span class='line'>    &lt;lst name="params"&gt;
</span><span class='line'>      &lt;str name="indent"&gt;on&lt;/str&gt;
</span><span class='line'>      &lt;str name="start"&gt;0&lt;/str&gt;
</span><span class='line'>      &lt;str name="q"&gt;score:[2 TO 4]&lt;/str&gt;
</span><span class='line'>      &lt;str name="q.op"&gt;or&lt;/str&gt;
</span><span class='line'>      &lt;str name="filter"&gt;&lt;/str&gt;
</span><span class='line'>      &lt;str name="df"&gt;value&lt;/str&gt;
</span><span class='line'>      &lt;str name="wt"&gt;standard&lt;/str&gt;
</span><span class='line'>      &lt;str name="version"&gt;1.1&lt;/str&gt;
</span><span class='line'>      &lt;str name="rows"&gt;2&lt;/str&gt;
</span><span class='line'>    &lt;/lst&gt;
</span><span class='line'>  &lt;/lst&gt;
</span><span class='line'>  &lt;result name="response" numFound="2" start="0" maxScore="0.00000e+0"&gt;
</span><span class='line'>    &lt;doc&gt;
</span><span class='line'>      &lt;str name="id"&gt;ace
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="breed"&gt;German Shepherd
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="nickname"&gt;The Wonder Dog
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;int name="score"&gt;3
</span><span class='line'>      &lt;/int&gt;
</span><span class='line'>    &lt;/doc&gt;
</span><span class='line'>    &lt;doc&gt;
</span><span class='line'>      &lt;str name="id"&gt;rtt
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="breed"&gt;German Shepherd
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="nickname"&gt;Rin Tin Tin
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;int name="score"&gt;4
</span><span class='line'>      &lt;/int&gt;
</span><span class='line'>    &lt;/doc&gt;
</span><span class='line'>  &lt;/result&gt;
</span><span class='line'>&lt;/response&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Distributed Riak</h3>

<p>I don&#8217;t see much of a problem with this, I&#8217;ll give it a try when I get
home. There are already 4 different development servers easily
available in a standard Riak package, so using one on each machine
would do the trick. Of course, when adding the various servers to the
ring, the hostname must be changed, but this should really be a piece
of cake.</p>

<h2>Wrapping up Riak</h2>

<p>It seems Riak is a low level data store that trades easy of use and
packaged features for high availability and flexible for
performance cost.</p>

<p>I can see how this could be in theory appealing in some circumstances,
but I don&#8217;t really see how to put such a framework to use.</p>

<p>SQL databases don&#8217;t just come with a nice engine optimised for
relational queries; they also come with decades of experience, general
guidelines for schema design and domain specific schema organisations.</p>

<p>All these contribute to make the meaning of the data clear and
useful. With Riak the quorum option can be used as a decision
mechanism, but beside it is not obvious what meaning to give to a
piece of information that has two or more concurrent variations. And
of course consistency can no longer be implemented on more than one key
no matter what.</p>

<p>This means that a solution based on Riak will be significantly
different from one using an SQL database. Perhaps it would feel more
natural to an object oriented programmer who thinks in terms of
objects and object references. But even in this context, the vector
clock based resolution should still be difficult to design properly.</p>

<p>The book in this regard fails even to acknowledge the problem; it
concentrates on tools but does not give any framework to guide in the
design of a solution built on Riak.</p>

<p>I still has to check the
<a href="http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html">Amazon Dynamo Paper</a>
and the other relevant literature, so I have hope yet I will come up with a
reasonable understanding of all this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-2/"/>
    <updated>2011-12-08T22:59:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-2</id>
    <content type="html"><![CDATA[<p>Day 2 with Riak, to cover Mapreduce, distribution, rings and consistency.</p>

<p>Mapreduce will be familiar to anyone who has been paying attention to Google. The basic idea comes from functional programming, but Google showed how it could be used to distribute the load over many machines (this in turn spawned two distinct recent developments in software: one is the range of databases explicitly built around the concept of Mapreduce; the other is the idea that functional languages are better suited to do concurrent and parallel programming).</p>

<!--more-->


<h3>A followup to yesterday simple trick</h3>

<p>There is an alternative, maybe even simpler than yesterday&#8217;s use of <code>python -mjson.tool</code>. It is shown (maybe a bit late) in the book: using an <code>Accept: text/plain</code> header in the HTTP request, as in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -H "Accept: text/plain" http://localhost:8091/stats</span></code></pre></td></tr></table></div></figure>


<p>This asks Riak to return plain text instead of json data; Riak helpfully interprets that as meaning the same data, but formatted for people. The advantage of this approach is that is still works even when <code>curl</code> generates extra output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -v -H "Accept: text/plain" http//localhost:8091/stats</span></code></pre></td></tr></table></div></figure>


<p>will both generate verbose debugging output, and get the data in human format.</p>

<h3>Nothing wrong with Mapreduce per se, but&#8230;</h3>

<p>I understand that the examples have to remain simple enough to be implementable on a (possible shared) single personal computer, but I still think that the authors are being dishonest when they contrast Mapreduce to an &#8220;SQL&#8221; based solution.</p>

<p>The problem with this solution is that it is just what a self-taught coder with no understanding of SQL might produced (ok, I&#8217;m being unfair. Some college educated programmer I have known actually write code like that as well). But this idea of pushing the code to the data instead of pulling the data to the code is exactly what a database like PostgreSQL does.</p>

<p>An actual SQL solution would be much simpler, would run fully in the database (no need for a script to create the initial data), and would deliver the data long before you&#8217;d be done coding and debugging the Javascript Mapreduce code.</p>

<figure class='code'><figcaption><span>A real SQL solution  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- SQL supports composite primary key, which this problem maps well to</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">hotel</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">floor</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">room</span>  <span class="nb">int</span>  <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">capacity</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">style</span> <span class="nb">char</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="k">CHECK</span> <span class="p">(</span><span class="n">style</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;single&#39;</span><span class="p">,</span> <span class="s1">&#39;double&#39;</span><span class="p">,</span> <span class="s1">&#39;queen&#39;</span><span class="p">,</span> <span class="s1">&#39;king&#39;</span><span class="p">,</span> <span class="s1">&#39;suite&#39;</span><span class="p">)</span> <span class="p">),</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">floor</span><span class="p">,</span> <span class="n">room</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- a simple function to provide a easy to use random range</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">random</span><span class="p">(</span><span class="nb">numeric</span><span class="p">,</span> <span class="nb">numeric</span><span class="p">)</span>
</span><span class='line'><span class="k">RETURNS</span> <span class="nb">numeric</span> <span class="k">AS</span>
</span><span class='line'><span class="err">$$</span>
</span><span class='line'>   <span class="k">SELECT</span> <span class="p">(</span><span class="err">$</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="err">$</span><span class="mi">2</span> <span class="o">-</span> <span class="err">$</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">random</span><span class="p">())::</span><span class="nb">numeric</span><span class="p">;</span>
</span><span class='line'><span class="err">$$</span> <span class="k">LANGUAGE</span> <span class="s1">&#39;sql&#39;</span> <span class="k">VOLATILE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- using generate_series and the random function above</span>
</span><span class='line'><span class="c1">-- to fill all the rooms, in pure PostgreSQL </span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">hotel</span> <span class="p">(</span><span class="n">floor</span><span class="p">,</span> <span class="n">room</span><span class="p">,</span> <span class="n">style</span><span class="p">,</span> <span class="n">capacity</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">SELECT</span> <span class="n">f</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="p">(</span><span class="nb">ARRAY</span><span class="p">[</span><span class="s1">&#39;single&#39;</span><span class="p">,</span> <span class="s1">&#39;double&#39;</span><span class="p">,</span> <span class="s1">&#39;queen&#39;</span><span class="p">,</span> <span class="s1">&#39;king&#39;</span><span class="p">,</span> <span class="s1">&#39;suite&#39;</span><span class="p">])[</span><span class="n">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span> <span class="n">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span> <span class="k">FROM</span>
</span><span class='line'>    <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span> <span class="k">AS</span> <span class="n">f</span><span class="p">,</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">99</span><span class="p">)</span> <span class="k">AS</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- the basic query</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">style</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">hotel</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">style</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- same query with filter</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">style</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">hotel</span> <span class="k">WHERE</span> <span class="n">floor</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">style</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It does not help that actually testing the code on Riak, I had to wait about 10 seconds while PostgreSQL answer was immediate. Of course, I have 3 instances of Riak on a single machine, which is certainly not a typical setup.</p>

<p>Riak is on a specific point among the trade off line to which data stores are constrained by the <a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP theorem</a>. It would have been better to work on an example (maybe using more complex data, loaded from a file, like the movie database in PostgreSQL Day 3) that plays into Riak strengths rather showing how badly it performs compared to a much easier and more natural solution in SQL.</p>

<p>It might have been enough to ask the reader to imagine the dataset to be so large that it could not fit in a single server (for instance, a simulation of the <a href="http://en.wikipedia.org/wiki/Hilbert's_paradox_of_the_Grand_Hotel">Hilbert&#8217;s Hotel</a>), or to simulate a rocky network by shutting down some nodes at awkward moments, and show how Riak still delivers the goods. In such conditions most SQL databases would start to show their limits, and these would be legitimate.</p>

<h3>Another comment on the example</h3>

<p>If you run all the examples and the exercises, you will notice something interesting: there is a floor 101. That&#8217;s actually a bug in the initial seeding script: the room number should range over 0 to 99, not 1 to 100. Mapping composite keys to a single value is not always safe. Oh well&#8230;</p>

<p>I&#8217;ve changed my script after I went through everything, rebuild the data, and ran everything again.</p>

<figure class='code'><figcaption><span>Updated seeding script  (hotel.rb)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/riak/hotel.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># generate loads and loads of rooms with random styles and capacities</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ripple&#39;</span>
</span><span class='line'><span class="no">STYLES</span> <span class="o">=</span> <span class="sx">%w{single double queen king suite}</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:http_port</span> <span class="o">=&gt;</span> <span class="mi">8091</span><span class="p">)</span>
</span><span class='line'><span class="n">bucket</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="s1">&#39;rooms&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># Create 100 floors to the building</span>
</span><span class='line'><span class="k">for</span> <span class="n">floor</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span>
</span><span class='line'>  <span class="n">current_rooms_block</span> <span class="o">=</span> <span class="n">floor</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Making rooms </span><span class="si">#{</span><span class="n">current_rooms_block</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">current_rooms_block</span> <span class="o">+</span> <span class="mi">99</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="c1"># Put 100 rooms on each floor (huge hotel!)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">room</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">99</span>
</span><span class='line'>    <span class="c1"># Create a unique room number as the key</span>
</span><span class='line'>    <span class="n">ro</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">RObject</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="p">(</span><span class="n">current_rooms_block</span> <span class="o">+</span> <span class="n">room</span><span class="p">))</span>
</span><span class='line'>    <span class="c1"># Randomly grab a room style, and make up a capacity</span>
</span><span class='line'>    <span class="n">style</span> <span class="o">=</span> <span class="no">STYLES</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">STYLES</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="n">capacity</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="c1"># Store the room information as a JSON value </span>
</span><span class='line'>    <span class="n">ro</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s2">&quot;application/json&quot;</span>
</span><span class='line'>    <span class="n">ro</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;style&#39;</span> <span class="o">=&gt;</span> <span class="n">style</span><span class="p">,</span> <span class="s1">&#39;capacity&#39;</span> <span class="o">=&gt;</span> <span class="n">capacity</span><span class="p">}</span>
</span><span class='line'>    <span class="n">ro</span><span class="o">.</span><span class="n">store</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Partial updates are not supported, unless they are</h3>

<p>So I said yesterday that partial updates are not supported. And if they are, I really have not found a way to get them to work.</p>

<p>Except for buckets. You can update properties of a bucket without having to specify every one of them. Which is good. But still, it might have been good for the rest of the data to have this feature.</p>

<p>The fact that the properties of buckets are probably fixed, meaning you can&#8217;t remove any, makes a partial update non ambiguous. Supporting partial updates on generic data would require a way to specify whether the update was complete or partial, and a way to remove properties. I can see why Riak designers chose not to go that way, but it still feels a bit ad hoc overall.</p>

<h3>CAP choices</h3>

<p>The section called &#8220;On Consistency and Durability&#8221; is more interesting, and better shows which features Riak attempts to provide.</p>

<p>The ability to choose from various strategies to implement consistency and durability certainly introduces additional ways to make a mistake, but it also offers flexibility where the relational databases typically offer little.</p>

<h2>Exercises</h2>

<h3>Online Riak Mapreduce documentation</h3>

<p>The documentation is <a href="http://wiki.basho.com/MapReduce.html">http://wiki.basho.com/MapReduce.html</a>.</p>

<h3>Riak contrib functions</h3>

<p>Google is a good friend. The central <a href="http://contrib.basho.com/">site</a> and the <a href="https://github.com/basho/riak_function_contrib">repository</a>.</p>

<h3>Keys filter documentation</h3>

<p><a href="http://wiki.basho.com/Key-Filters.html">http://wiki.basho.com/Key-Filters.html</a></p>

<h3>Total capacity by floor</h3>

<p>The first step is to map the original data to an array of capacity indexed by floor. What has not been seen so far is how to get the <code>key</code> of an object, but it is just another property (directly in <code>v</code>, not in the <code>values</code> array):</p>

<figure class='code'><figcaption><span>Mapping data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">parsed_data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">floor</span> <span class="o">=</span> <span class="o">~~</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">data</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parsed_data</span><span class="p">.</span><span class="nx">capacity</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">data</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A quick test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
</span><span class='line'>{
</span><span class='line'>  "inputs":[
</span><span class='line'>    ["rooms","101"],["rooms","102"],["rooms","103"]],
</span><span class='line'>  "query":[
</span><span class='line'>    {"map":{
</span><span class='line'>      "language":"javascript",
</span><span class='line'>      "source":
</span><span class='line'>      "function(v) {
</span><span class='line'>        var parsed_data = JSON.parse(v.values[0].data); 
</span><span class='line'>        var data = {};
</span><span class='line'>        var floor = ~~(parseInt(v.key) / 100);
</span><span class='line'>        data[floor] = parsed_data.capacity; 
</span><span class='line'>        return [data];
</span><span class='line'>      }"}
</span><span class='line'>  } ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>[{"1":3},{"1":2},{"1":2}]</span></code></pre></td></tr></table></div></figure>


<p>Ok, looking good. Now the <code>reduce</code> part. It is strictly identical to the book&#8217;s <code>reduce</code> function, but I just renamed some variables to make it clear what is being iterated over:</p>

<figure class='code'><figcaption><span>Reducing data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">totals</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">floor</span> <span class="k">in</span> <span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="nx">totals</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>        <span class="nx">totals</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">floor</span><span class="p">];</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">totals</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">floor</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">totals</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
</span><span class='line'>{
</span><span class='line'>  "inputs":[
</span><span class='line'>    ["rooms","101"],["rooms","102"],["rooms","103"]],
</span><span class='line'>  "query":[
</span><span class='line'>    {"map":{
</span><span class='line'>      "language":"javascript",
</span><span class='line'>      "source":
</span><span class='line'>      "function(v) {
</span><span class='line'>        var parsed_data = JSON.parse(v.values[0].data); 
</span><span class='line'>        var data = {};
</span><span class='line'>        var floor = ~~(parseInt(v.key) / 100);
</span><span class='line'>        data[floor] = parsed_data.capacity; 
</span><span class='line'>        return [data];
</span><span class='line'>      }"}
</span><span class='line'>  },
</span><span class='line'>  {"reduce": {
</span><span class='line'>      "language": "javascript",
</span><span class='line'>      "source":
</span><span class='line'>        "function(v) {
</span><span class='line'>            var totals = {};
</span><span class='line'>            for (var i in v) {
</span><span class='line'>              for(var floor in v[i]) {
</span><span class='line'>                if( totals[floor] ) 
</span><span class='line'>                  totals[floor] += v[i][floor];
</span><span class='line'>                else
</span><span class='line'>                  totals[floor] = v[i][floor];
</span><span class='line'>              } 
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            return [totals];
</span><span class='line'>          }"}
</span><span class='line'>  } ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>[{"1":7}]</span></code></pre></td></tr></table></div></figure>


<p>Ok, still looking good. Let&#8217;s run it on the whole set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
</span><span class='line'>{
</span><span class='line'>  "inputs":"rooms",
</span><span class='line'>  "query":[
</span><span class='line'>    {"map":{
</span><span class='line'>      "language":"javascript",
</span><span class='line'>      "source":
</span><span class='line'>      "function(v) {
</span><span class='line'>        var parsed_data = JSON.parse(v.values[0].data); 
</span><span class='line'>        var data = {};
</span><span class='line'>        var floor = ~~(parseInt(v.key) / 100);
</span><span class='line'>        data[floor] = parsed_data.capacity; 
</span><span class='line'>        return [data];
</span><span class='line'>      }"}
</span><span class='line'>  },
</span><span class='line'>  {"reduce": {
</span><span class='line'>      "language": "javascript",
</span><span class='line'>      "source":
</span><span class='line'>        "function(v) {
</span><span class='line'>            var totals = {};
</span><span class='line'>            for (var i in v) {
</span><span class='line'>              for(var floor in v[i]) {
</span><span class='line'>                if( totals[floor] ) 
</span><span class='line'>                  totals[floor] += v[i][floor];
</span><span class='line'>                else
</span><span class='line'>                  totals[floor] = v[i][floor];
</span><span class='line'>              } 
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            return [totals];
</span><span class='line'>          }"}
</span><span class='line'>  } ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>[
</span><span class='line'>    {
</span><span class='line'>        "1": 456, 
</span><span class='line'>        "10": 445, 
</span><span class='line'>        "100": 452, 
</span><span class='line'>        "11": 448, 
</span><span class='line'>        "12": 482, 
</span><span class='line'>        "13": 452, 
</span><span class='line'>        "14": 489, 
</span><span class='line'>        "15": 467, 
</span><span class='line'>        "16": 461, 
</span><span class='line'>        "17": 471, 
</span><span class='line'>        "18": 426, 
</span><span class='line'>        "19": 426, 
</span><span class='line'>        "2": 394, 
</span><span class='line'>        "20": 413, 
</span><span class='line'>        "21": 428, 
</span><span class='line'>        "22": 460, 
</span><span class='line'>        "23": 447, 
</span><span class='line'>        "24": 443, 
</span><span class='line'>        "25": 430, 
</span><span class='line'>        "26": 430, 
</span><span class='line'>        "27": 447, 
</span><span class='line'>        "28": 486, 
</span><span class='line'>        "29": 429, 
</span><span class='line'>        "3": 437, 
</span><span class='line'>        "30": 434, 
</span><span class='line'>        "31": 415, 
</span><span class='line'>        "32": 483, 
</span><span class='line'>        "33": 460, 
</span><span class='line'>        "34": 440, 
</span><span class='line'>        "35": 519, 
</span><span class='line'>        "36": 492, 
</span><span class='line'>        "37": 422, 
</span><span class='line'>        "38": 413, 
</span><span class='line'>        "39": 439, 
</span><span class='line'>        "4": 451, 
</span><span class='line'>        "40": 440, 
</span><span class='line'>        "41": 458, 
</span><span class='line'>        "42": 386, 
</span><span class='line'>        "43": 488, 
</span><span class='line'>        "44": 428, 
</span><span class='line'>        "45": 423, 
</span><span class='line'>        "46": 487, 
</span><span class='line'>        "47": 463, 
</span><span class='line'>        "48": 408, 
</span><span class='line'>        "49": 422, 
</span><span class='line'>        "5": 417, 
</span><span class='line'>        "50": 464, 
</span><span class='line'>        "51": 434, 
</span><span class='line'>        "52": 429, 
</span><span class='line'>        "53": 468, 
</span><span class='line'>        "54": 412, 
</span><span class='line'>        "55": 440, 
</span><span class='line'>        "56": 427, 
</span><span class='line'>        "57": 458, 
</span><span class='line'>        "58": 420, 
</span><span class='line'>        "59": 438, 
</span><span class='line'>        "6": 426, 
</span><span class='line'>        "60": 464, 
</span><span class='line'>        "61": 446, 
</span><span class='line'>        "62": 412, 
</span><span class='line'>        "63": 431, 
</span><span class='line'>        "64": 445, 
</span><span class='line'>        "65": 435, 
</span><span class='line'>        "66": 444, 
</span><span class='line'>        "67": 449, 
</span><span class='line'>        "68": 460, 
</span><span class='line'>        "69": 474, 
</span><span class='line'>        "7": 436, 
</span><span class='line'>        "70": 473, 
</span><span class='line'>        "71": 431, 
</span><span class='line'>        "72": 457, 
</span><span class='line'>        "73": 426, 
</span><span class='line'>        "74": 454, 
</span><span class='line'>        "75": 463, 
</span><span class='line'>        "76": 406, 
</span><span class='line'>        "77": 464, 
</span><span class='line'>        "78": 441, 
</span><span class='line'>        "79": 502, 
</span><span class='line'>        "8": 421, 
</span><span class='line'>        "80": 477, 
</span><span class='line'>        "81": 422, 
</span><span class='line'>        "82": 441, 
</span><span class='line'>        "83": 466, 
</span><span class='line'>        "84": 447, 
</span><span class='line'>        "85": 488, 
</span><span class='line'>        "86": 486, 
</span><span class='line'>        "87": 414, 
</span><span class='line'>        "88": 463, 
</span><span class='line'>        "89": 494, 
</span><span class='line'>        "9": 446, 
</span><span class='line'>        "90": 441, 
</span><span class='line'>        "91": 459, 
</span><span class='line'>        "92": 433, 
</span><span class='line'>        "93": 488, 
</span><span class='line'>        "94": 450, 
</span><span class='line'>        "95": 442, 
</span><span class='line'>        "96": 479, 
</span><span class='line'>        "97": 460, 
</span><span class='line'>        "98": 429, 
</span><span class='line'>        "99": 445
</span><span class='line'>    }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h3>Restrict the capacity count to floors 42 and 43</h3>

<p>It should be enough that the key be between 4200 and 4390:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
</span><span class='line'>{
</span><span class='line'>  "inputs":{
</span><span class='line'>  "bucket": "rooms",
</span><span class='line'>  "key_filters": [["string_to_int"], ["between", 4200, 4399]]
</span><span class='line'>  },
</span><span class='line'>  "query":[
</span><span class='line'>    {"map":{
</span><span class='line'>      "language":"javascript",
</span><span class='line'>      "source":
</span><span class='line'>      "function(v) {
</span><span class='line'>        var parsed_data = JSON.parse(v.values[0].data); 
</span><span class='line'>        var data = {};
</span><span class='line'>        var floor = ~~(parseInt(v.key) / 100);
</span><span class='line'>        data[floor] = parsed_data.capacity; 
</span><span class='line'>        return [data];
</span><span class='line'>      }"}
</span><span class='line'>  },
</span><span class='line'>  {"reduce": {
</span><span class='line'>      "language": "javascript",
</span><span class='line'>      "source":
</span><span class='line'>        "function(v) {
</span><span class='line'>            var totals = {};
</span><span class='line'>            for (var i in v) {
</span><span class='line'>              for(var floor in v[i]) {
</span><span class='line'>                if( totals[floor] ) 
</span><span class='line'>                  totals[floor] += v[i][floor];
</span><span class='line'>                else
</span><span class='line'>                  totals[floor] = v[i][floor];
</span><span class='line'>              } 
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            return [totals];
</span><span class='line'>          }"}
</span><span class='line'>  } ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>[{"42":386,"43":488}]</span></code></pre></td></tr></table></div></figure>


<p>The output matches what was computed for the whole set of rooms, which is always a good thing.</p>

<p>And this completes Day 2. I must admit I have so far mixed feelings: I understand better what Riak tries to achieve, but the example is just not the kind of things Riak should be used for, and the Mapreduce syntax is a bit heavy (although, fortunately, very regular).</p>

<p>Tomorrow will cover Vector Clocks, the mechanism that Riak exposes both to move conflicts resolution to the client side, and to help the client to implement a decent resolution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-1/"/>
    <updated>2011-12-08T10:22:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-1</id>
    <content type="html"><![CDATA[<p>The second database is <a href="http://basho.com/products/riak-overview/">Riak</a>, a key-value distributed store. Key-value stores a not really new (many property or configuration files are really basic key-value stores, and <a href="http://en.wikipedia.org/wiki/Berkeley_DB">Berkeley DB</a> has long been a good choice for those who needed something a little bit more robust than simple files but not as complex as a relational database).</p>

<p>Still, going from this simple concept to a distributed store that can execute data processing on each of its nodes requires more than simply scaling things up, and I hope that this book will give me some idea of how such a store (and the other NoSQL) might fit in the solution landscape.</p>

<!--more-->


<p>
But that is probably getting a bit ahead of myself; right now I&#8217;d be happy just to know how to use Riak.</p>

<p>The client can be the simple <a href="http://curl.haxx.se/"><code>cURL</code></a> command, as Riak&#8217;s interface is based on HTTP. This simplifies the technical stack, but pushes some of the complexity on the client. It is clear that Riak will not provide anything as easy and convenient as PostgreSQL&#8217;s <code>psql</code>.</p>

<p>Riak&#8217;s basic API is a REST based CRUD (with Create being pretty much the same as Update). Additional attributes, such as meta-data or the more important links are passed as headers in the HTTP request.</p>

<p>It is simple, but somewhat inconvenient: there is no concept of partial update. When you want to update an object, you need to pass all the relevant data: meta-data, links, and content. Forget to mention one, and Riak will forget it too.</p>

<h3>When was this book written?</h3>

<p>I had <a href="">noticed</a> that the book refers to PostgreSQL 9.0 when <a href="http://www.postgresql.org/docs/9.1/static/release-9-1-2.html">9.1</a> has been out for a while. In this chapter on Riak, the author uses an apparently old format for the URLs, <code>/riak/bucket/key</code>, whereas the <a href="http://wiki.basho.com/HTTP-Store-Object.html">official documentation</a> recommends <code>/buckets/bucket/keys/key</code> (for instance, <code>/buckets/animals/keys/polly</code>). Both formats can be used and are interoperable, but there is no need to teach already deprecated formats.</p>

<p>Of course, I found out about this new format after I completed all the exercises for today. So I will still use the old format for today.</p>

<p>Presumably this will be fixed by the time the book gets published.</p>

<h3>Simple but useful trick</h3>

<p>Reading unformatted JSON data can be difficult. I found that Python provides a simple way to pretty print JSON output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>(there are certainly other tools. Python is just the first one I came upon). To turn this into a simple, easy to use command, I added this to my <code>.profile</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias ppjs='python -mjson.tool'
</span><span class='line'>alias ppjsless='python -mjson.tool | less'</span></code></pre></td></tr></table></div></figure>


<p>That way, I can just pipe the output of <code>curl</code> into <code>ppjsless</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8091/stats | ppjsless</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This unfortunately does not work with <code>curl</code> additional output (such as HTTP headers).</p>

<h2>Exercises</h2>

<h3>Online documentation</h3>

<p>The root of the wiki is <a href="http://wiki.basho.com/">here</a>, and the HTTP (not just REST) API is <a href="http://wiki.basho.com/HTTP-API.html">here</a>.</p>

<h3>Mime types</h3>

<p>As always, <a href="http://en.wikipedia.org/wiki/Internet_media_type">Wikipedia</a> is very useful.</p>

<h3>Differences between the dev1, dev2 and dev3 servers</h3>

<p>The only difference is the port number. But there is some intelligence in the startup script to map each server to its own directory for permanent storage.</p>

<h3>Link from Polly to her picture</h3>

<p>This creates the link. Note, as I mentioned above, that the content needs to be repeated. Putting no body would cause a <code>curl</code> error (as an HTTP <code>PUT</code> request must have a body):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X PUT http://localhost:8091/riak/animals/polly \
</span><span class='line'>-H "Content-type: application/json" \
</span><span class='line'>-H "Link: &lt;/riak/photo/polly.jpg&gt;; riaktag=\"photo\"" \
</span><span class='line'>-d '{"nickname" : "Sweet Polly Purebred", "breed" : "Purebred"}'</span></code></pre></td></tr></table></div></figure>


<p>The image can be retrived from Polly by following the link:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8091/riak/animals/polly/_,photo,_</span></code></pre></td></tr></table></div></figure>


<p>or, using the new format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8091/buckets/animals/keys/polly/_,photo,_</span></code></pre></td></tr></table></div></figure>


<h3><code>POST</code> a new type of document</h3>

<p>Here I upload the Seven Databases in Seven Weeks (legal) PDF:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X POST http://localhost:8091/riak/documents \
</span><span class='line'>-H "Content-type: application/pdf" \
</span><span class='line'>--data-binary @seven-databases-in-seven-weeks_b1_0.pdf </span></code></pre></td></tr></table></div></figure>


<p>I use the <code>-i</code> option to retrieve the HTTP headers of the response and get the generated key. The command above has this output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 100 Continue
</span><span class='line'>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Vary: Accept-Encoding
</span><span class='line'>Server: MochiWeb/1.1 WebMachine/1.9.0 (someone had painted it blue)
</span><span class='line'>Location: /riak/documents/6WCpgTjMpvHiojiHeH7vsGBXdHC
</span><span class='line'>Date: Thu, 08 Dec 2011 09:16:18 GMT
</span><span class='line'>Content-Type: application/pdf
</span><span class='line'>Content-Length: 0</span></code></pre></td></tr></table></div></figure>


<p>Otherwise, I could list the keys for this bucket:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8091/riak/documents?keys=true | ppjs
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>    "keys": [
</span><span class='line'>        "6WCpgTjMpvHiojiHeH7vsGBXdHC"
</span><span class='line'>    ], 
</span><span class='line'>    "props": {
</span><span class='line'>        "allow_mult": false, 
</span><span class='line'>        "basic_quorum": false, 
</span><span class='line'>        "big_vclock": 50, 
</span><span class='line'>        "chash_keyfun": {
</span><span class='line'>            "fun": "chash_std_keyfun", 
</span><span class='line'>            "mod": "riak_core_util"
</span><span class='line'>        }, 
</span><span class='line'>        "dw": "quorum", 
</span><span class='line'>        "last_write_wins": false, 
</span><span class='line'>        "linkfun": {
</span><span class='line'>            "fun": "mapreduce_linkfun", 
</span><span class='line'>            "mod": "riak_kv_wm_link_walker"
</span><span class='line'>        }, 
</span><span class='line'>        "n_val": 3, 
</span><span class='line'>        "name": "documents", 
</span><span class='line'>        "notfound_ok": true, 
</span><span class='line'>        "old_vclock": 86400, 
</span><span class='line'>        "postcommit": [], 
</span><span class='line'>        "pr": 0, 
</span><span class='line'>        "precommit": [], 
</span><span class='line'>        "pw": 0, 
</span><span class='line'>        "r": "quorum", 
</span><span class='line'>        "rw": "quorum", 
</span><span class='line'>        "small_vclock": 10, 
</span><span class='line'>        "w": "quorum", 
</span><span class='line'>        "young_vclock": 20
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>I can use the URL below to retrieve the document in a browser:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8091/riak/documents/6WCpgTjMpvHiojiHeH7vsGBXdHC</span></code></pre></td></tr></table></div></figure>


<h3><code>PUT</code> a medecine image and link to Ace</h3>

<p>Once again, nothing too complex, but everything has to be done at the same time, as partial updates are not possible:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X PUT http://localhost:8091/riak/medecine/antibiotics \
</span><span class='line'>-H "Content-type: image/jpeg" -H "Link: &lt;/riak/animals/ace&gt;; riaktag=\"for\"" \
</span><span class='line'>--data-binary @medecine.jpg </span></code></pre></td></tr></table></div></figure>


<p>Then the image itself can be retrieve at:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8091/riak/medecine/antibiotics</span></code></pre></td></tr></table></div></figure>


<p>Finally, I can get the poor patient by following links:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:8091/riak/medecine/antibiotics/animals,for,_
</span><span class='line'>
</span><span class='line'>--ZhESIca7K0r54xNT0w737ZZDbvl
</span><span class='line'>Content-Type: multipart/mixed; boundary=WZgHw2YUOMNtda2iM46bNdvXxt7
</span><span class='line'>
</span><span class='line'>--WZgHw2YUOMNtda2iM46bNdvXxt7
</span><span class='line'>X-Riak-Vclock: a85hYGBgzGDKBVIcR4M2cvvdjT+YwZTImsfKUDcx5ARfFgA=
</span><span class='line'>Location: /riak/animals/ace
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Link: &lt;/riak/animals&gt;; rel="up"
</span><span class='line'>Etag: 6egZ1heUAPW7DEy0HjO7K0
</span><span class='line'>Last-Modified: Thu, 08 Dec 2011 01:40:14 GMT
</span><span class='line'>
</span><span class='line'>{"nickname" : "The Wonder Dog", "breed" : "German Shepherd"}
</span><span class='line'>--WZgHw2YUOMNtda2iM46bNdvXxt7--
</span><span class='line'>
</span><span class='line'>--ZhESIca7K0r54xNT0w737ZZDbvl--</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 1. The basic REST API is not complex, but its simplicity cuts both ways. There is a lot of typing required; I expect client libraries to be much easier to use, at the cost of having to write an application or script to do anything.</p>

<p>Tomorrow will cover MapReduce in the context of Riak.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/04/seven-databases-in-seven-weeks-postgresql-day-3/"/>
    <updated>2011-12-04T20:19:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/04/seven-databases-in-seven-weeks-postgresql-day-3</id>
    <content type="html"><![CDATA[<p>Third and final day with PostgreSQL. Today all kind of text and other fancy searches are looked at. Here the SQL standard is resolutely left behind, as pretty much everything is PostgreSQL specific.</p>

<p>PostgreSQL manages advanced index data structures that allow it to efficiently query data using something better than basic comparisons. It especially shines in its handling of geospatial data (searching by distance is a non-trivial problem), but has many options for text searches as well.</p>

<!--more-->


<p>Now, it can be easy to get carried away and try to use PostgreSQL for everything, even when a superior alternative option exists. If I had any need for a full text search, I would also look at <a href="http://lucene.apache.org/java/docs/index.html">Lucene</a> and related options. But PostgreSQL can still provide an easy, integrated solution for many situations.</p>

<h3>On indexes</h3>

<p>Indexes are not like pixie dust: you cannot just add some and hope all your performance problems will go away (as I learned the hard way). Benchmarks and the <a href="http://www.postgresql.org/docs/current/static/sql-explain.html"><code>EXPLAIN</code></a> command must be used to confirm the improvements brought by any index.</p>

<p>This section is based on the first beta version of the book. I hope they fill clarify this part in the final version.</p>

<p>First, let&#8217;s look a bit more at the fist index introduced today:</p>

<figure class='code'><figcaption><span>Text Pattern index  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">movies_title_pattern</span> <span class="k">ON</span> <span class="n">movies</span> <span class="p">(</span><span class="n">title</span> <span class="n">text_pattern_ops</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The book states that is creates an index for pattern matching. Think about it for a few seconds, try to imagine what it would look like&#8230; Yes, the solution is not trivial, so being able to index for pattern matching sounds like magic. Or pixie dust. But does it work?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT title FROM movies WHERE title ILIKE 'stardust_%';
</span><span class='line'>                       QUERY PLAN                        
</span><span class='line'>---------------------------------------------------------
</span><span class='line'> Seq Scan on movies  (cost=0.00..160.76 rows=1 width=15)
</span><span class='line'>   Filter: (title ~~* 'stardust_%'::text)
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>It seems that no, it does not work. The optimizer proposes to use a sequential scan, not an index.</p>

<p>The problem here is that <code>ILIKE</code> is not really supported by the optimizer. It is a PostgreSQL extension which, while useful, is not that well integrated. The standard (and SQL compliant) way to do a case insensitive search is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT title FROM movies WHERE lower(title) LIKE 'stardust_%';
</span><span class='line'>                        QUERY PLAN                        
</span><span class='line'>----------------------------------------------------------
</span><span class='line'> Seq Scan on movies  (cost=0.00..167.91 rows=14 width=15)
</span><span class='line'>   Filter: (lower(title) ~~ 'stardust_%'::text)
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>Ok, not quite there yet. But that&#8217;s normal. We are not using the column directly, so an index on the original values is not going to work. However PostgreSQL has a very nice feature called functional index: it is possible to create an index on the result of a function. Let&#8217;s drop the original index and create one with <code>lower(title)</code> as the indexed value:</p>

<figure class='code'><figcaption><span>Case insensitive Pattern index  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DROP</span> <span class="k">INDEX</span> <span class="n">movies_title_pattern</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">movies_title_pattern</span> <span class="k">ON</span> <span class="n">movies</span> <span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="n">text_pattern_ops</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does it look better now?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT title FROM movies WHERE lower(title) LIKE 'stardust_%';
</span><span class='line'>                                             QUERY PLAN                                             
</span><span class='line'>----------------------------------------------------------------------------------------------------
</span><span class='line'> Bitmap Heap Scan on movies  (cost=4.40..46.55 rows=14 width=15)
</span><span class='line'>   Filter: (lower(title) ~~ 'stardust_%'::text)
</span><span class='line'>   -&gt;  Bitmap Index Scan on movies_title_pattern  (cost=0.00..4.40 rows=14 width=0)
</span><span class='line'>         Index Cond: ((lower(title) ~&gt;=~ 'stardust'::text) AND (lower(title) ~&lt;~ 'stardusu'::text))
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>Yes, that&#8217;s better. What about <code>ILIKE</code>?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT title FROM movies WHERE title ILIKE 'stardust_%';
</span><span class='line'>                       QUERY PLAN                        
</span><span class='line'>---------------------------------------------------------
</span><span class='line'> Seq Scan on movies  (cost=0.00..160.76 rows=1 width=15)
</span><span class='line'>   Filter: (title ~~* 'stardust_%'::text)
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>No, it still cannot use the index.</p>

<p>What about the regular expression query?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT COUNT(*) FROM movies WHERE title !~* '^the.*';
</span><span class='line'>                           QUERY PLAN                            
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'> Aggregate  (cost=166.32..166.33 rows=1 width=0)
</span><span class='line'>   -&gt;  Seq Scan on movies  (cost=0.00..160.76 rows=2225 width=0)
</span><span class='line'>         Filter: (title !~* '^the.*'::text)
</span><span class='line'>(3 rows)</span></code></pre></td></tr></table></div></figure>


<p>No, it does not like the case insensitive operator. Would a <code>lower(title)</code> conversion work?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT COUNT(*) FROM movies WHERE lower(title) !~ '^the.*';
</span><span class='line'>                           QUERY PLAN                            
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'> Aggregate  (cost=175.03..175.04 rows=1 width=0)
</span><span class='line'>   -&gt;  Seq Scan on movies  (cost=0.00..167.91 rows=2847 width=0)
</span><span class='line'>         Filter: (lower(title) !~ '^the.*'::text)
</span><span class='line'>(3 rows)</span></code></pre></td></tr></table></div></figure>


<p>Still not. Well, we&#8217;re not looking for a particular pattern, but for everything else. A negation is not easy to propagate through the optimizer logic, so it should not be surprising that it still cannot use the index. But this (almost) similar query does:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT COUNT(*) FROM movies WHERE lower(title) ~ '^the.*';
</span><span class='line'>                                           QUERY PLAN                                           
</span><span class='line'>------------------------------------------------------------------------------------------------
</span><span class='line'> Aggregate  (cost=46.59..46.60 rows=1 width=0)
</span><span class='line'>   -&gt;  Bitmap Heap Scan on movies  (cost=4.40..46.55 rows=14 width=0)
</span><span class='line'>         Filter: (lower(title) ~ '^the.*'::text)
</span><span class='line'>         -&gt;  Bitmap Index Scan on movies_title_pattern  (cost=0.00..4.40 rows=14 width=0)
</span><span class='line'>               Index Cond: ((lower(title) ~&gt;=~ 'the'::text) AND (lower(title) ~&lt;~ 'thf'::text))
</span><span class='line'>(5 rows)</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, the trigram based index can help <code>ILIKE</code> queries as explained <a href="http://www.postgresonline.com/journal/archives/212-PostgreSQL-9.1-Trigrams-teaching-LIKE-and-ILIKE-new-tricks.html">here</a> (in general, the <a href="http://www.postgresonline.com/">Postgres OnLine Journal</a> is a very good resource on PostgreSQL more advanced features).</p>

<p>But the general conclusion and take-home lesson is that adding indexes without checking their impact on queries is more than useless: it adds cost on data creation and update, with no compensation at query time.</p>

<h2>Exercises</h2>

<h3>Contributed Packages</h3>

<p>The contributed packages shipped with PostgreSQL are documented <a href="http://www.postgresql.org/docs/current/static/contrib.html">here</a>.</p>

<h3>POSIX Regex</h3>

<p>The Wikipedia <a href="http://en.wikipedia.org/wiki/Regular_expression#Syntax">page</a> on the topic is already very good.</p>

<h3>Stored Procedure based movie recommendation</h3>

<p>I&#8217;m assuming the name of an actor or movie can have errors (after all, end users are known to make and cause errors). The first step will be to identify whether the name is closer to an actor&#8217;s name or a movie&#8217;s name. The second step will use existing queries to either propose 5 movies from the same actor if the name was closer to an actor&#8217;s name or 5 similar movies (using the cube bounding technique) if the name was closer to a movie&#8217;s.</p>

<p>The use of <code>UNION</code> over several strategies to identify either movies or actors gives a lot of freedom. I use the <code>levenshtein</code> function to select the best match identified by each strategy.</p>

<p>Also, because the full text search query must have a specific format (for instance, each search term must be separated by <code>&amp;</code>), I use a few text replacement functions to clean up the input search.</p>

<p>Finally, the return value is a <code>setof</code> <code>movies</code>. The meaning is that I will return rows that have the same type as rows from the <code>movies</code> table. If the query was simple, I could just use the <code>SELECT</code> statement as the body for the function, but as I have to chose between queries, I use the <a href=""><code>RETURN NEXT</code></a> command instead. Explanations can be found in the fine PostgreSQL <a href="http://www.postgresql.org/docs/current/static/plpgsql-control-structures.html">manual</a>.</p>

<figure class='code'><figcaption><span>suggestMovies function  (suggest_movies.sql)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/postgresql/suggest_movies.sql'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">suggest_movies</span><span class="p">(</span><span class="k">search</span> <span class="nb">text</span><span class="p">)</span>
</span><span class='line'><span class="k">RETURNS</span> <span class="k">SETOF</span> <span class="n">movies</span> <span class="k">AS</span> <span class="err">$$</span>
</span><span class='line'><span class="k">DECLARE</span>
</span><span class='line'>  <span class="n">found_name</span> <span class="nb">text</span><span class="p">;</span>
</span><span class='line'>  <span class="n">found_type</span> <span class="nb">char</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">tempmovie</span> <span class="n">movies</span><span class="o">%</span><span class="n">rowtype</span><span class="p">;</span>
</span><span class='line'>  <span class="n">movie_query</span> <span class="n">tsquery</span><span class="p">;</span>
</span><span class='line'><span class="k">BEGIN</span>
</span><span class='line'>  <span class="n">movie_query</span> <span class="p">:</span><span class="o">=</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="k">replace</span><span class="p">(</span><span class="n">regexp_replace</span><span class="p">(</span><span class="k">trim</span><span class="p">(</span><span class="k">search</span><span class="p">),</span> <span class="s1">&#39; +&#39;</span> <span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">),</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;&amp;&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="k">INTO</span> <span class="n">found_name</span><span class="p">,</span> <span class="n">found_type</span>
</span><span class='line'>              <span class="n">name</span><span class="p">,</span> <span class="k">type</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span> <span class="k">AS</span> <span class="k">type</span><span class="p">,</span> <span class="n">levenshtein</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="k">search</span><span class="p">),</span> <span class="k">lower</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">))</span> <span class="k">AS</span> <span class="n">dist</span>
</span><span class='line'>      <span class="k">FROM</span> <span class="n">actors</span> <span class="n">a</span> <span class="k">WHERE</span> <span class="k">search</span> <span class="o">%</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">UNION</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span> <span class="k">AS</span> <span class="k">type</span><span class="p">,</span> <span class="n">levenshtein</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="k">search</span><span class="p">),</span> <span class="k">lower</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">))</span> <span class="k">AS</span> <span class="n">dist</span>
</span><span class='line'>        <span class="k">FROM</span> <span class="n">actors</span> <span class="n">a</span> <span class="k">WHERE</span> <span class="n">metaphone</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="o">=</span> <span class="n">metaphone</span><span class="p">(</span><span class="k">search</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="k">UNION</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="n">title</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span> <span class="s1">&#39;M&#39;</span> <span class="k">AS</span> <span class="k">type</span><span class="p">,</span> <span class="n">levenshtein</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="k">search</span><span class="p">),</span> <span class="k">lower</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">title</span><span class="p">))</span> <span class="k">AS</span> <span class="n">dist</span>
</span><span class='line'>      <span class="k">FROM</span> <span class="n">movies</span> <span class="n">m</span> <span class="k">WHERE</span> <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">title</span><span class="p">)</span> <span class="o">@@</span> <span class="n">movie_query</span>
</span><span class='line'>       <span class="p">)</span> <span class="n">t</span>
</span><span class='line'>  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">dist</span> <span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">IF</span> <span class="n">found_type</span> <span class="o">=</span> <span class="s1">&#39;A&#39;</span> <span class="k">THEN</span>
</span><span class='line'>    <span class="k">FOR</span> <span class="n">tempmovie</span> <span class="k">IN</span> <span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="n">movies</span> <span class="n">m</span> <span class="k">NATURAL</span> <span class="k">JOIN</span> <span class="n">movies_actors</span> <span class="k">NATURAL</span> <span class="k">JOIN</span> <span class="n">actors</span>
</span><span class='line'>                     <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="n">found_name</span> <span class="k">LIMIT</span> <span class="mi">5</span> <span class="n">LOOP</span>
</span><span class='line'>      <span class="k">RETURN</span> <span class="k">NEXT</span> <span class="n">tempmovie</span><span class="p">;</span>
</span><span class='line'>    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
</span><span class='line'>  <span class="k">ELSE</span>
</span><span class='line'>    <span class="k">FOR</span> <span class="n">tempmovie</span> <span class="k">IN</span> <span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="n">movies</span> <span class="n">m</span><span class="p">,</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">SELECT</span> <span class="n">genre</span><span class="p">,</span> <span class="n">title</span> <span class="k">FROM</span> <span class="n">movies</span> <span class="k">WHERE</span> <span class="n">title</span> <span class="o">=</span> <span class="n">found_name</span><span class="p">)</span> <span class="n">s</span>
</span><span class='line'>                       <span class="k">WHERE</span> <span class="n">cube_enlarge</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">genre</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span> <span class="o">@&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">genre</span> <span class="k">AND</span> <span class="n">s</span><span class="p">.</span><span class="n">title</span> <span class="o">&lt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>                       <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">cube_distance</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">genre</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">genre</span><span class="p">)</span> <span class="k">LIMIT</span> <span class="mi">5</span> <span class="n">LOOP</span>
</span><span class='line'>      <span class="k">RETURN</span> <span class="k">NEXT</span> <span class="n">tempmovie</span><span class="p">;</span>
</span><span class='line'>    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
</span><span class='line'>  <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
</span><span class='line'><span class="k">END</span><span class="p">;</span>
</span><span class='line'><span class="err">$$</span> <span class="k">LANGUAGE</span> <span class="n">plpgsql</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from suggest_movies('Ben Aflk');
</span><span class='line'> movie_id |       title       |                          genre                          
</span><span class='line'>----------+-------------------+---------------------------------------------------------
</span><span class='line'>       22 | Armageddon        | (5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      146 | Good Will Hunting | (0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      476 | Forces of Nature  | (0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      514 | Dogma             | (0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      609 | Chasing Amy       | (0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>(5 rows)
</span><span class='line'>
</span><span class='line'>book=# select * from suggest_movies('Broos Weells');
</span><span class='line'> movie_id |       title       |                          genre                           
</span><span class='line'>----------+-------------------+----------------------------------------------------------
</span><span class='line'>        6 | The Fifth Element | (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0)
</span><span class='line'>        9 | Twelve Monkeys    | (0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0)
</span><span class='line'>       22 | Armageddon        | (5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      171 | Die Hard          | (7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      230 | Pulp Fiction      | (0, 0, 0, 12, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0)
</span><span class='line'>(5 rows)
</span><span class='line'>
</span><span class='line'>book=# select * from suggest_movies('war star');
</span><span class='line'> movie_id |                     title                      |                          genre                          
</span><span class='line'>----------+------------------------------------------------+---------------------------------------------------------
</span><span class='line'>      532 | Star Wars: Episode V - The Empire Strikes Back | (0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 10, 0, 0, 0)
</span><span class='line'>     2862 | Avatar                                         | (0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 10, 0, 0, 0)
</span><span class='line'>     1357 | Explorers                                      | (0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0)
</span><span class='line'>      325 | Krull                                          | (0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 7, 0, 0, 0)
</span><span class='line'>      193 | E.T. The Extra-Terrestrial                     | (0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0)
</span><span class='line'>(5 rows)</span></code></pre></td></tr></table></div></figure>


<p>Groovy.</p>

<h2>Wrapping Up PostgreSQL</h2>

<p>Well, not really wrapping it up. I&#8217;ll keep using it, if only for fun. This database is powerful, mature, well documented, and extremely flexible over the domain of relational modeling. It is possible to define user defined types with arbitrary content, and fancy indexing. If you find an obscure academic paper describing a exotic indexing for a new datatype, chances are that PostgreSQL will support it, given enough C programming.</p>

<p>The comments from the book on this database are very fair, and I would strongly recommend anyone to give it a good and honest evaluation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-2/"/>
    <updated>2011-12-03T14:54:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-2</id>
    <content type="html"><![CDATA[<p>Second day with PostgreSQL, this time to discuss advanced queries, stored procedures, and rewriting rules.</p>

<p>The relational model was designed to make it easy to extract meaningful information from the database (although here the operative word is meaningful rather than easy). Aggregations pretty much require a schema to return anything worth the effort (and if you don&#8217;t believe it, what exactly is the average value of 1, blue and 3?).</p>

<p>Stored procedures can help to move some business intelligence from the main application to the database. Whether it is a good idea is an open question (and I think the knee-jerk negative answer is too often guided by ignorance rather than experience), but the idea of having enough rules in the database that multiple applications can connect to it safely (or safely enough) is worth considering: it enables other applications, some of which might be incompatible with the main business application, to use the business data (many reporting and ETL solutions might fall into this category). The choice is between control and openness (and which one is correct depends on the situation).</p>

<p>Finally, rewriting rules is a less common feature of SQL databases, but essentially it allows the database designer to create updatable views, implement versioning on specific tables, and so on.</p>

<!--more-->


<p>I have a small peeve with the book so far: all too often the authors rely on implicit column ordering when manipulating data. I happen to have a different order for the columns of <code>events</code> (which was created as an exercise <a href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1/">yesterday</a>), so many <code>INSERT</code> examples no longer work.</p>

<p>But in general, it is good to specify the columns in an <code>INSERT</code>, as in:</p>

<figure class='code'><figcaption><span>INSERT with explicit columns  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Your Favorite Band&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-06 21:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-06 23:00&#39;</span><span class="p">,</span> <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Crystal Ballroom&#39;</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to create &#8216;My Place&#8217;:</p>

<figure class='code'><figcaption><span>INSERT My Place  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">countries</span> <span class="p">(</span><span class="n">country_code</span><span class="p">,</span> <span class="n">country_name</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;jp&#39;</span><span class="p">,</span> <span class="s1">&#39;Japan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">cities</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">postal_code</span><span class="p">,</span> <span class="n">country_code</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Shinjuku&#39;</span><span class="p">,</span> <span class="s1">&#39;160-0022&#39;</span><span class="p">,</span> <span class="s1">&#39;jp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">venues</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">type</span><span class="p">,</span> <span class="n">postal_code</span><span class="p">,</span> <span class="n">country_code</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;My Place&#39;</span><span class="p">,</span> <span class="s1">&#39;private&#39;</span><span class="p">,</span> <span class="s1">&#39;160-0022&#39;</span><span class="p">,</span> <span class="s1">&#39;jp&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, to add the new events:</p>

<figure class='code'><figcaption><span>INSERT new events  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Steven King&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 21:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 23:00:00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Powell&#39;&#39;s Books&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Dinner with Mom&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 18:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 20:30:00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;My Place&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Valentine&#39;&#39;s Day&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-14 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-14 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, there is never any ambiguity as to what is inserted.</p>

<h3>Window functions</h3>

<p>The book covers window functions, but in this first beta version of the book at least, the explanation is not very illuminating.</p>

<p>Basically, <a href="http://www.postgresql.org/docs/current/static/functions-window.html">window functions</a> are a generalization of aggregate functions. Aggregate functions operates on a range of rows selected by a <code>GROUP BY</code> clause. For each group, there will be only one row, where columns are either grouped by columns, or aggregates.</p>

<p>Window functions also operate on a range of rows, but there is one range for each row in the filtered table. The range can be created in a way similar to <code>GROUP BY</code> (using the <code>PARTITION OVER</code> clause), but can also be created by taking all the rows up to the current one, or 2 rows before, 2 rows after, and the current one, &#8230; Such a range is called a window. There are <a href="http://www.postgresql.org/docs/current/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS">many ways</a> to define them.</p>

<p>For instance, say we want to know, for each events, how many events have happened (including the current one), we can try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT title, starts, COUNT(*) OVER (ORDER BY starts) FROM events;
</span><span class='line'>       title        |       starts        | count 
</span><span class='line'>--------------------+---------------------+-------
</span><span class='line'> Your Favorite Band | 2012-02-06 21:00:00 |     1
</span><span class='line'> Valentine's Day    | 2012-02-14 00:00:00 |     2
</span><span class='line'> My Book Signing    | 2012-02-15 17:30:00 |     3
</span><span class='line'> Dinner with Mom    | 2012-02-26 18:00:00 |     4
</span><span class='line'> Steven King        | 2012-02-26 21:00:00 |     5
</span><span class='line'> April Fools Day    | 2012-04-01 00:00:00 |     6
</span><span class='line'> House Party        | 2012-05-03 23:00:00 |     7
</span><span class='line'> Christmas Day      | 2012-12-25 00:00:00 |     8
</span><span class='line'> Valentine's Day    | 2013-02-14 00:00:00 |     9
</span><span class='line'>(9 rows)</span></code></pre></td></tr></table></div></figure>


<p>The <code>OVER</code> does not specify a <code>PARTITION</code>, but an <code>ORDER</code>, which means that the <code>COUNT(*)</code> function operates on all the rows from first one to current one (ordered by the <code>starts</code> column). Actually, the <code>COUNT(*)</code> function is the same as the (proper) window function <code>RANK</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT title, starts, RANK() OVER (ORDER BY starts) FROM events;
</span><span class='line'>       title        |       starts        | rank 
</span><span class='line'>--------------------+---------------------+------
</span><span class='line'> Your Favorite Band | 2012-02-06 21:00:00 |    1
</span><span class='line'> Valentine's Day    | 2012-02-14 00:00:00 |    2
</span><span class='line'> My Book Signing    | 2012-02-15 17:30:00 |    3
</span><span class='line'> Dinner with Mom    | 2012-02-26 18:00:00 |    4
</span><span class='line'> Steven King        | 2012-02-26 21:00:00 |    5
</span><span class='line'> April Fools Day    | 2012-04-01 00:00:00 |    6
</span><span class='line'> House Party        | 2012-05-03 23:00:00 |    7
</span><span class='line'> Christmas Day      | 2012-12-25 00:00:00 |    8
</span><span class='line'> Valentine's Day    | 2013-02-14 00:00:00 |    9
</span><span class='line'>(9 rows)</span></code></pre></td></tr></table></div></figure>


<p>What about computing the order of each events, but by year? Nothing easier:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT title, starts, RANK() OVER (PARTITION BY extract(year from starts) ORDER BY starts) FROM events;
</span><span class='line'>       title        |       starts        | rank 
</span><span class='line'>--------------------+---------------------+------
</span><span class='line'> Your Favorite Band | 2012-02-06 21:00:00 |    1
</span><span class='line'> Valentine's Day    | 2012-02-14 00:00:00 |    2
</span><span class='line'> My Book Signing    | 2012-02-15 17:30:00 |    3
</span><span class='line'> Dinner with Mom    | 2012-02-26 18:00:00 |    4
</span><span class='line'> Steven King        | 2012-02-26 21:00:00 |    5
</span><span class='line'> April Fools Day    | 2012-04-01 00:00:00 |    6
</span><span class='line'> House Party        | 2012-05-03 23:00:00 |    7
</span><span class='line'> Christmas Day      | 2012-12-25 00:00:00 |    8
</span><span class='line'> Valentine's Day    | 2013-02-14 00:00:00 |    1
</span><span class='line'>(9 rows)</span></code></pre></td></tr></table></div></figure>


<p>Ok, this is not very fancy. But with numeric data, window functions are more powerful. Lets say we collect daily measures into a new table:</p>

<figure class='code'><figcaption><span>Window function example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">observation</span> <span class="p">(</span>
</span><span class='line'>   <span class="k">day</span> <span class="k">timestamp</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>   <span class="n">measure</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">observation</span> <span class="p">(</span><span class="k">day</span><span class="p">,</span> <span class="n">measure</span><span class="p">)</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="nb">date</span> <span class="s1">&#39;2011-12-01&#39;</span> <span class="k">AS</span> <span class="k">day</span><span class="p">,</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)::</span><span class="nb">int</span> <span class="k">as</span> <span class="n">measure</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could use the usual aggregate functions, for instance <code>AVG</code> and <code>SUM</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT AVG(measure), SUM(measure) FROM observation;
</span><span class='line'>         avg         | sum  
</span><span class='line'>---------------------+------
</span><span class='line'> 54.9600000000000000 | 5496
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>We have pretty much all the details. If there&#8217;s any trend, we would not see it. But with window functions, it is possible to compute running averages (and actually, two different ones):</p>

<figure class='code'><figcaption><span>Window function example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">day</span><span class="p">,</span> <span class="k">AVG</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">2</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="mi">2</span> <span class="n">FOLLOWING</span><span class="p">)</span> <span class="k">as</span> <span class="n">short_avg</span><span class="p">,</span>
</span><span class='line'>  <span class="k">AVG</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">5</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="mi">5</span> <span class="n">FOLLOWING</span><span class="p">)</span> <span class="k">as</span> <span class="n">long_avg</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">day</span><span class="p">)</span> <span class="k">as</span> <span class="n">running_sum</span> <span class="k">FROM</span> <span class="n">observation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(results omitted because they are too long). Here, the <code>AVG(measure)</code> is applied to a window of either 5 rows for <code>short_avg</code> or 11 rows for <code>long_avg</code>, and there&#8217;s a running sum in <code>running_sum</code>.</p>

<p>Pretty cool, I&#8217;d say.</p>

<h3>Rules</h3>

<p><a href="http://www.postgresql.org/docs/current/static/sql-createrule.html">Rules</a> are very useful as well. Here&#8217;s how I&#8217;d implement the <code>INSERT</code> on <code>holidays</code>:</p>

<figure class='code'><figcaption><span>INSERT on holidays  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">RULE</span> <span class="n">insert_holidays</span> <span class="k">AS</span> <span class="k">ON</span> <span class="k">INSERT</span> <span class="k">TO</span> <span class="n">holidays</span> <span class="k">DO</span> <span class="k">INSTEAD</span>
</span><span class='line'>  <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">colors</span><span class="p">)</span>
</span><span class='line'>  <span class="k">values</span> <span class="p">(</span><span class="k">NEW</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="nb">date</span><span class="o">+</span><span class="nb">interval</span> <span class="s1">&#39;23 hour 59 minutes&#39;</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">colors</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the syntax to manipulate dates and timestamp. It is fairly readable and compact enough.</p>

<h2>Exercises</h2>

<h3>Aggregate Functions</h3>

<p>The aggregate functions are documented <a href="http://www.postgresql.org/docs/current/static/functions-aggregate.html">here</a>, while the window functions are <a href="http://www.postgresql.org/docs/current/static/functions-window.html">here</a>.</p>

<h3>GUI</h3>

<p>Honestly, I don&#8217;t really use any. <code>psql</code> is really powerful. For those of the GUI persuasion, there are a few <a href="http://wiki.postgresql.org/wiki/Community_Guide_to_PostgreSQL_GUI_Tools">options</a>.</p>

<h3>DELETE Rule</h3>

<figure class='code'><figcaption><span>DELETE rule on venues  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">RULE</span> <span class="n">delete_venue</span> <span class="k">AS</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="k">TO</span> <span class="n">venues</span> <span class="k">DO</span> <span class="k">INSTEAD</span>
</span><span class='line'>  <span class="k">UPDATE</span> <span class="n">venues</span> <span class="k">SET</span> <span class="n">active</span> <span class="o">=</span> <span class="k">false</span> <span class="k">WHERE</span> <span class="n">venue_id</span> <span class="o">=</span> <span class="k">OLD</span><span class="p">.</span><span class="n">venue_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this rule in place, deleting from <code>venues</code> now set the <code>active</code> flag to false:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# DELETE FROM venues WHERE name = 'My Place';
</span><span class='line'>DELETE 0
</span><span class='line'>book=# SELECT * FROM venues;
</span><span class='line'> venue_id |       name       | street_address |  type   | postal_code | country_code | active 
</span><span class='line'>----------+------------------+----------------+---------+-------------+--------------+--------
</span><span class='line'>        1 | Crystal Ballroom |                | public  | 97205       | us           | t
</span><span class='line'>        2 | Powell's Books   |                | public  | 97205       | us           | t
</span><span class='line'>        5 | Run's House      |                | public  | 97205       | us           | t
</span><span class='line'>        4 | My Place         |                | private | 160-0022    | jp           | f
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<h3>generate_series in crosstab</h3>

<p>The documentation for <a href="http://www.postgresql.org/docs/current/static/tablefunc.html"><code>crosstab</code></a> has already an example for using <a href="http://www.postgresql.org/docs/current/static/functions-srf.html"><code>generate_series</code></a>:</p>

<figure class='code'><figcaption><span>generate_series in crosstab  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">crosstab</span><span class="p">(</span>
</span><span class='line'><span class="s1">&#39;SELECT extract(year from starts) as year,</span>
</span><span class='line'><span class="s1">extract(month from starts) as month, count(*) FROM events</span>
</span><span class='line'><span class="s1">GROUP BY year, month&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;SELECT m FROM generate_series(1, 12) m&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'><span class="k">year</span> <span class="nb">int</span><span class="p">,</span>
</span><span class='line'><span class="n">jan</span> <span class="nb">int</span><span class="p">,</span> <span class="n">feb</span> <span class="nb">int</span><span class="p">,</span> <span class="n">mar</span> <span class="nb">int</span><span class="p">,</span> <span class="n">apr</span> <span class="nb">int</span><span class="p">,</span> <span class="n">may</span> <span class="nb">int</span><span class="p">,</span> <span class="n">jun</span> <span class="nb">int</span><span class="p">,</span> <span class="n">jul</span> <span class="nb">int</span><span class="p">,</span> <span class="n">aug</span> <span class="nb">int</span><span class="p">,</span> <span class="n">sep</span> <span class="nb">int</span><span class="p">,</span> <span class="n">oct</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nov</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">dec</span> <span class="nb">int</span>
</span><span class='line'><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">YEAR</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output remains the same:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> year | jan | feb | mar | apr | may | jun | jul | aug | sep | oct | nov | dec 
</span><span class='line'>------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----
</span><span class='line'> 2012 |     |   5 |     |   1 |   1 |     |     |     |     |     |     |   1
</span><span class='line'> 2013 |     |   1 |     |     |     |     |     |     |     |     |     |    
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<h3>Weekly pivot</h3>

<p>The hardest, perhaps, is to find how to convince PostgreSQL to apply <a href="http://www.postgresql.org/docs/current/static/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE"><code>div</code></a> to the passed arguments, but a bit of type declaration using <code>::</code> does the trick. Also, <code>crosstab</code> is not overly smart, so the <code>month</code> and <code>week</code> columns must be in order, otherwise the counts for the two February (one in 2012 and one in 2013) are different:</p>

<figure class='code'><figcaption><span>Weekly pivot  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">crosstab</span><span class="p">(</span>
</span><span class='line'><span class="s1">&#39;SELECT extract(month from starts) as month, </span>
</span><span class='line'><span class="s1"> div(extract (day from starts)::int, 7) + 1 as week, count(*) FROM events</span>
</span><span class='line'><span class="s1">GROUP BY month, week ORDER BY month, week&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;SELECT m FROM generate_series(1, 5) m&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'><span class="k">month</span> <span class="nb">int</span><span class="p">,</span>
</span><span class='line'><span class="n">week_1</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_2</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_3</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_4</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_5</span> <span class="nb">int</span>
</span><span class='line'><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">MONTH</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The query produces:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> month | week_1 | week_2 | week_3 | week_4 | week_5 
</span><span class='line'>-------+--------+--------+--------+--------+--------
</span><span class='line'>     2 |      1 |        |      3 |      2 |       
</span><span class='line'>     4 |      1 |        |        |        |       
</span><span class='line'>     5 |      1 |        |        |        |       
</span><span class='line'>    12 |        |        |        |      1 |       
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1/"/>
    <updated>2011-12-03T12:22:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1</id>
    <content type="html"><![CDATA[<p>The first database in the series is a relational database, and what better choice than <a href="http://www.postgresql.org">PostgreSQL</a>?</p>

<!--more-->


<p>Of course, <a href="http://www.mysql.com/">MySQL</a> is more popular, but if we are going to talk about SQL and the relational model, it is better to pick a database that actually takes these concepts seriously.</p>

<p>The idea to start with a relational database is a good one. I feel that many who embrace NoSQL do so because they do not understand either SQL or the relational model. I was surprised to discover that some of my college educated colleagues did not know SQL at all. They were taught mostly about Java and object oriented design (I would ask for a refund). SQL databases have been developed, refined, and used in production for about 40 years. That&#8217;s more than half the history of computers, they&#8217;re likely to be part of the landscape for a few more decades, so ignoring them may be trendy but it is not wise.</p>

<p>About the PostgreSQL version: the book appears to have been long in the making, as it still refers the reader to the version 9.0, while <a href="http://www.postgresql.org/docs/9.1/static/release-9-1-1.html">9.1</a> has been out for a few months.</p>

<p>Installing then extensions that are needed for this book is easier with 9.1. Just using <a href="http://www.postgresql.org/docs/current/static/sql-createextension.html"><code>CREATE EXTENSION</code></a>:</p>

<figure class='code'><figcaption><span>Installing Extensions  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">tablefunc</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">dict_xsyn</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">fuzzystrmatch</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">pg_trgm</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="k">cube</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Removing them is done with the command <a href="http://www.postgresql.org/docs/current/static/sql-dropextension.html"><code>DROP EXTENSION</code></a>.</p>

<h3>The events table</h3>

<p>The code to create and fills the <code>events</code> table:</p>

<figure class='code'><figcaption><span>Creating and filling the events table  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">events</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">event_id</span> <span class="nb">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>  <span class="n">title</span> <span class="nb">text</span><span class="p">,</span>
</span><span class='line'>  <span class="n">starts</span> <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ends</span> <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>  <span class="n">venue_id</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">REFERENCES</span> <span class="n">venues</span> <span class="p">(</span><span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'><span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;My Book Signing&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-15 17:30:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-15 19:30:00&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;April Fools Day&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-04-01 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-04-01 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">),</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;Christmas Day&#39;</span><span class="p">,</span>   <span class="s1">&#39;2012-12-25 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-12-25 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>On indexes</h3>

<p>I don&#8217;t have a PostgreSQL 9.0 instance to check, but with 9.1 at least, <code>UNIQUE</code> constraints are implemented through a <code>btree</code> index, not a <code>hash</code> one. The difference is that a <code>btree</code> index is sorted and so supports range searches.</p>

<p>This can be checked by querying the console about the table:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# \d events
</span><span class='line'>                                       Table "public.events"
</span><span class='line'>  Column  |            Type             |                         Modifiers                         
</span><span class='line'>----------+-----------------------------+-----------------------------------------------------------
</span><span class='line'> event_id | integer                     | not null default nextval('events_event_id_seq'::regclass)
</span><span class='line'> title    | text                        | 
</span><span class='line'> starts   | timestamp without time zone | 
</span><span class='line'> ends     | timestamp without time zone | 
</span><span class='line'> venue_id | integer                     | 
</span><span class='line'>Indexes:
</span><span class='line'>    "events_pkey" PRIMARY KEY, btree (event_id)
</span><span class='line'>    "events_starts" btree (starts)
</span><span class='line'>Foreign-key constraints:
</span><span class='line'>    "events_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES venues(venue_id)</span></code></pre></td></tr></table></div></figure>


<h2>Exercises</h2>

<h3>The PostgreSQL FAQ</h3>

<p>The FAQ is <a href="http://wiki.postgresql.org/wiki/FAQ">here</a>.</p>

<h3>The PostgreSQL Documentation</h3>

<p>The documentation for version 9.1 is <a href="http://www.postgresql.org/docs/9.1/static/index.html">here</a> (and <a href="http://www.postgresql.org/docs/manuals/">there</a> for all the versions).</p>

<h3>About <code>MATCH FULL</code></h3>

<p>This one was already explained in the book, and confirmed by the <a href="http://www.postgresql.org/docs/current/static/sql-createtable.html">documentation</a>: when a foreign key is composed of more than one column, they must all match a row in the referenced table, or be all null.</p>

<h3>Selecting user table from <code>pg_class</code></h3>

<p>Interestingly, the first time I tried to solve this exercise, I used <a href="http://www.postgresql.org/docs/current/static/view-pg-tables.html"><code>pg_tables</code></a> by mistake (<code>pg_tables</code> has a <code>tableowner</code> column which makes it easy to identify user tables).</p>

<p><a href="http://www.postgresql.org/docs/current/static/catalog-pg-class.html"><code>pg_class</code></a> stores the type of object in <code>relkind</code>: &#8216;r&#8217; for tables. Restricting for just tables, and working on the table name:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=#  select relname from pg_class where relkind = 'r';
</span><span class='line'>         relname         
</span><span class='line'>-------------------------
</span><span class='line'> pg_statistic
</span><span class='line'> pg_type
</span><span class='line'> pg_attribute
</span><span class='line'> pg_authid
</span><span class='line'> pg_proc
</span><span class='line'> pg_class
</span><span class='line'> pg_database
</span><span class='line'> pg_user_mapping
</span><span class='line'> pg_constraint
</span><span class='line'> pg_inherits
</span><span class='line'> pg_index
</span><span class='line'> pg_operator
</span><span class='line'> pg_opfamily
</span><span class='line'> pg_opclass
</span><span class='line'> pg_amop
</span><span class='line'> pg_amproc
</span><span class='line'> pg_language
</span><span class='line'> pg_largeobject_metadata
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Ok, that&#8217;s a bit long. Removing these <code>pg_</code> named tables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select relname from pg_class where relkind = 'r' and relname not like 'pg_%';
</span><span class='line'>         relname         
</span><span class='line'>-------------------------
</span><span class='line'> sql_implementation_info
</span><span class='line'> sql_languages
</span><span class='line'> sql_packages
</span><span class='line'> sql_parts
</span><span class='line'> sql_sizing
</span><span class='line'> sql_sizing_profiles
</span><span class='line'> sql_features
</span><span class='line'> countries
</span><span class='line'> events
</span><span class='line'> cities
</span><span class='line'> venues
</span><span class='line'>(11 rows)</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, only the tables that are visible in the current database are listed (I have other databases, with more user created tables).</p>

<p>Still I need to remove the <code>sql_</code> named tables. Using PostgreSQL <a href="http://www.postgresql.org/docs/current/static/functions-matching.html#FUNCTIONS-POSIX-REGEXP">regular expression operators</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select relname from pg_class where relkind = 'r' and relname !~ '^(pg_|sql_)';
</span><span class='line'>  relname  
</span><span class='line'>-----------
</span><span class='line'> countries
</span><span class='line'> events
</span><span class='line'> cities
</span><span class='line'> venues
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>This is one approach. Another would be to try to mimic the behaviour of the <code>\d</code> console command. The <a href="http://www.postgresql.org/docs/current/static/app-psql.html"><code>psql</code></a> option <code>-E</code> can be used to check what queries are used to implement specific console commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ psql -E book
</span><span class='line'>psql (9.1.1)
</span><span class='line'>Type "help" for help.
</span><span class='line'>
</span><span class='line'>book=# \d
</span><span class='line'>********* QUERY **********
</span><span class='line'>SELECT n.nspname as "Schema",
</span><span class='line'>  c.relname as "Name",
</span><span class='line'>  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' END as "Type",
</span><span class='line'>  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
</span><span class='line'>FROM pg_catalog.pg_class c
</span><span class='line'>     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
</span><span class='line'>WHERE c.relkind IN ('r','v','S','f','')
</span><span class='line'>      AND n.nspname &lt;&gt; 'pg_catalog'
</span><span class='line'>      AND n.nspname &lt;&gt; 'information_schema'
</span><span class='line'>      AND n.nspname !~ '^pg_toast'
</span><span class='line'>  AND pg_catalog.pg_table_is_visible(c.oid)
</span><span class='line'>ORDER BY 1,2;
</span><span class='line'>**************************
</span><span class='line'>
</span><span class='line'>                  List of relations
</span><span class='line'> Schema |        Name         |   Type   |   Owner   
</span><span class='line'>--------+---------------------+----------+-----------
</span><span class='line'> public | cities              | table    | fdumontmd
</span><span class='line'> public | countries           | table    | fdumontmd
</span><span class='line'> public | events              | table    | fdumontmd
</span><span class='line'> public | events_event_id_seq | sequence | fdumontmd
</span><span class='line'> public | venues              | table    | fdumontmd
</span><span class='line'> public | venues_venue_id_seq | sequence | fdumontmd
</span><span class='line'>(6 rows)</span></code></pre></td></tr></table></div></figure>


<p>The minimal query that lists the user created tables in the current database seems to be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select c.relname from pg_class c join pg_namespace n on n.oid = c.relnamespace where c.relkind = 'r' and pg_catalog.pg_table_is_visible(c.oid) and n.nspname &lt;&gt; 'pg_catalog';
</span><span class='line'>  relname  
</span><span class='line'>-----------
</span><span class='line'> countries
</span><span class='line'> events
</span><span class='line'> cities
</span><span class='line'> venues
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>But given that <code>pg_class</code> only lists the tables in the current database, and assuming you don&#8217;t use <code>pg_</code> or <code>sql_</code> prefixes, the first query is clearly easier.</p>

<h3>Country name for the event &#8216;My Book Signing&#8217;</h3>

<p>Based on the content of the book so far, a possible solution uses <code>INNER JOIN</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select c.country_name from events e inner join venues v on e.venue_id = v.venue_id inner join countries c on v.country_code = c.country_code where title = 'My Book Signing';
</span><span class='line'> country_name  
</span><span class='line'>---------------
</span><span class='line'> United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>But this is a bit verbose. The structure of the tables makes it possible to use <a href="http://www.postgresql.org/docs/current/static/queries-table-expressions.html"><code>NATURAL JOIN</code></a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select country_name from events natural join venues natural join countries where title = 'My Book Signing';
</span><span class='line'> country_name  
</span><span class='line'>---------------
</span><span class='line'> United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>When using <code>NATURAL JOIN</code>, PostgreSQL will join on all the columns that are found in both tables (based on their names). For instance, both <code>events</code> and <code>venues</code> have a <code>venue_id</code> column (and no other column with the same name), so the join is on this column.</p>

<p>And other interesting difference is that <code>NATURAL JOIN</code> removes the duplicate columns:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from events natural join venues natural join countries where title = 'My Book Signing';
</span><span class='line'> country_code | venue_id | event_id |      title      |       starts        |        ends         |     name      | street_address |  type   | postal_code | active | country_name  
</span><span class='line'>--------------+----------+----------+-----------------+---------------------+---------------------+---------------+----------------+---------+-------------+--------+---------------
</span><span class='line'> us           |        2 |        1 | My Book Signing | 2012-02-15 17:30:00 | 2012-02-15 19:30:00 | Powel's Books |                | public  | 97205       | t      | United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>whereas <code>INNER JOIN</code> does not:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from events e inner join venues v on e.venue_id = v.venue_id inner join countries c on v.country_code = c.country_code where title = 'My Book Signing';
</span><span class='line'> event_id |      title      |       starts        |        ends         | venue_id | venue_id |     name      | street_address |  type   | postal_code | country_code | active | country_code | country_name  
</span><span class='line'>----------+-----------------+---------------------+---------------------+----------+----------+---------------+----------------+---------+-------------+--------------+--------+--------------+---------------
</span><span class='line'>        1 | My Book Signing | 2012-02-15 17:30:00 | 2012-02-15 19:30:00 |        2 |        2 | Powel's Books |                | public  | 97205       | us           | t      | us           | United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<h3>Add a new column</h3>

<figure class='code'><figcaption><span>Add a new column to `venues`  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">venues</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">active</span> <span class="nb">boolean</span> <span class="k">DEFAULT</span> <span class="k">TRUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checking that is is now there:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# \d venues
</span><span class='line'>                                        Table "public.venues"
</span><span class='line'>     Column     |          Type          |                         Modifiers                         
</span><span class='line'>----------------+------------------------+-----------------------------------------------------------
</span><span class='line'> venue_id       | integer                | not null default nextval('venues_venue_id_seq'::regclass)
</span><span class='line'> name           | character varying(255) | 
</span><span class='line'> street_address | text                   | 
</span><span class='line'> type           | character(7)           | default 'public'::bpchar
</span><span class='line'> postal_code    | character varying(9)   | 
</span><span class='line'> country_code   | character(2)           | 
</span><span class='line'> active         | boolean                | default true
</span><span class='line'>Indexes:
</span><span class='line'>    "venues_pkey" PRIMARY KEY, btree (venue_id)
</span><span class='line'>Check constraints:
</span><span class='line'>    "venues_type_check" CHECK (type = ANY (ARRAY['public'::bpchar, 'private'::bpchar]))
</span><span class='line'>Foreign-key constraints:
</span><span class='line'>    "venues_country_code_fkey" FOREIGN KEY (country_code, postal_code) REFERENCES cities(country_code, postal_code) MATCH FULL
</span><span class='line'>Referenced by:
</span><span class='line'>    TABLE "events" CONSTRAINT "events_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES venues(venue_id)</span></code></pre></td></tr></table></div></figure>


<p>or directly by <code>select</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from venues;
</span><span class='line'> venue_id |       name       | street_address |  type   | postal_code | country_code | active 
</span><span class='line'>----------+------------------+----------------+---------+-------------+--------------+--------
</span><span class='line'>        1 | Crystal Ballroom |                | public  | 97205       | us           | t
</span><span class='line'>        2 | Powel's Books    |                | public  | 97205       | us           | t
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 1. Tomorrow, stored procedures, triggers, views, rules, and other goodies are on the menu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Book: Seven Databases in Seven Weeks]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/new-book-seven-databases-in-seven-weeks/"/>
    <updated>2011-12-03T12:21:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/new-book-seven-databases-in-seven-weeks</id>
    <content type="html"><![CDATA[<p>It is early December still, but the good people of the <a href="http://pragprog.com/">Pragmatic Bookshelf</a> have delivered an early Christmas present: <a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a>, by Eric Redmond and Jim Wilson.</p>

<!--more-->


<p>The book is in Beta, but there are chapters for 5 databases, so there plenty of material already.</p>

<p>The idea of covering 7 databases, even superficially, is a good one, perhaps even better than for <a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">languages</a>: while the choice of a language is often beyond the control of any single developer, the choice of a database (perhaps from the NoSQL family as a complement to a core, mandated SQL one) is possible. As with languages, trying to use a new database is if it was similar to one you&#8217;re already familiar with is likely to end badly. A good understanding of what each of them is good for, what problem they intend to solve, and what niche they fit better is mandatory.</p>

<p>I have been working with relational databases mostly so far (and, professionally, with one of the worst databases that people can charge money for), so I am eager to be introduced to the other kinds, without the usual cheerleading that is found in many tutorials.</p>

<p>In the coming weeks, assuming the book is timely updated, I&#8217;ll be blogging my way through it, just as I did through <a href="http://blog.wakatta.jp/blog/2011/10/11/seven-languages-in-seven-weeks/">Seven Languages in Seven Weeks</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Wrap Up]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/26/seven-languages-in-seven-weeks-wrap-up/"/>
    <updated>2011-11-26T12:24:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/26/seven-languages-in-seven-weeks-wrap-up</id>
    <content type="html"><![CDATA[<p>Wow, seven weeks already. And seven languages later, time to see where I can go from here.</p>

<!--more-->


<p>This was a rather pleasant journey. I felt that some exercises with Io and Scala were more frustrating than the rest, but overall it was not too taxing.</p>

<p>It brought interesting benefits: I got a better look at emerging trends in software, but now it is up to me to develop this first look into something useable.</p>

<h2>General comments</h2>

<p>The exercises level was rather uneven. I guess that is inevitable, given that some of the languages were introduced as stepping stones for others. Still, from a CSV parser (even one using meta-programming) to a backtracking maze solver, there&#8217;s a fairly large range.</p>

<p>The idea of just giving enough information to get started, but not so much that the book is the only source of information needed to solve the exercises, was very good. A language is not just a syntax, a semantic, and a library. It is most of all a community, a set of websites, forums, mailing lists, &#8230; It was smart to push the reader towards that.</p>

<p>And yes, clearly, each language was barely covered, but some of the third day exercises were hinting at the more advanced features.</p>

<p>All in all, this was a good book. It is useful to be exposed to different languages, if only to expand one&#8217;s approach to problem solving. The features of tomorrow&#8217;s mainstream languages are being explored today in smaller languages; being at least aware of this evolution is required to grow as a professional software engineer.</p>

<p>But the author spends way too much time complaining about syntax (or claiming that a particular syntax is a weakness). I find the accusation that Scala&#8217;s syntax is too academic particularly pointless. Rightfully, he adds that this is subjective, but what on earth is an academic syntax? A syntax is either easy on the fingers or not (the former being better), and either adapted to the semantic or not. It can support the features, or make them ugly. It should be concise in what it promotes, and verbose in what it discourages.</p>

<p>As far as I could tell, each language had a syntax that matches its needs and those of its users.</p>

<p>Conclusion: I recommend the book. Even knowing some of the languages I still learned a few things, and for those languages I knew, I had a chance for a second look and a new appreciation of what they offer.</p>

<h2>From here to a bit further</h2>

<p>It would be unfortunate if this book was the last step I took in these various languages. So here I recap what I think of each language, and where I&#8217;d like to go with them.</p>

<h3>Ruby</h3>

<p>I like Ruby. It&#8217;s fun, open, does not make judgment about what is proper software engineering (who cares if you like monkey patching&#8230;). The syntax binds all the features well, and the ecosystem is really interesting.</p>

<p>It might not have the performance, and no concurrency model worth mentioning, but as a new glue or script language, or perhaps for the Rails platform (although my current needs are not met by RoR), it shines.</p>

<p>I had read the <a href="http://pragprog.com/book/ruby/programming-ruby">Programming Ruby</a> (the pickaxe book), and a few books on Rails, and I liked what I saw.</p>

<p>I&#8217;ll probably follow up with <a href="http://pragprog.com/book/ppmetr/metaprogramming-ruby">Metaprogramming Ruby</a>.</p>

<p>And as I&#8217;m doing a lot of web development, I will try to look at Ruby driven <a href="http://seleniumhq.org/">Selenium</a>.</p>

<h3>Io</h3>

<p>Well, I won&#8217;t spend much more time with Io. I really don&#8217;t see any advantages. Yes, it&#8217;s compact, the interpreter is small, so it&#8217;s ideal for embedded languages. Which I don&#8217;t need.</p>

<p>As I said earlier, there is a prototype based, functional Lisp inspired language that is worth learning. It is supported by several major software companies or organisations, has users in the billions (or will soon): Javascript.</p>

<h3>Prolog</h3>

<p>I had learned Prolog at university. I had enjoyed it at the time, and doing the exercises reminded me of that fun.</p>

<p>Prolog is, by and large, about exploring search trees, so the techniques it teaches are usable in other languages. The maze solver in Haskell is essentially a tree search and would be implemented the same way in Prolog.</p>

<p>I&#8217;m glad that a recent trip back to Europe allowed me to retrieve my two Prolog books: <a href="http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;tid=8327">The Art of Prolog</a> and <a href="http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;tid=8336">The Craft of Prolog</a>. Both are large, so it might take a while.</p>

<h3>Scala</h3>

<p>I didn&#8217;t know Scala but had heard about it and was very curious. It is indeed fairly expressive, more concise than Java, and the concurrency model much better.</p>

<p>The type system is somewhat strange: much better than Java, but more verbose and less flexible than Haskell, and sometimes with bizarre results: the concatenation of a <code>List</code> of <code>Int</code> and a <code>List</code> of <code>String</code> is a <code>List</code> of <code>Any</code>&#8230;</p>

<p>In any case, Scala seems to be gaining momentum, so I&#8217;ll try and learn more about it in the near future. There are plenty of books, at least one free (<a href="http://programmingscala.com/">Programming Scala</a>, from O&#8217;Reilly), and one by the language creator (<a href="http://www.artima.com/shop/programming_in_scala">Programming in Scala</a>).</p>

<h3>Erlang</h3>

<p>Erlang was another language I had checked before, yet this book showed me something new. An important development of Erlang is OTP (Open Telecom Platform), but until very recently, there were few resources to learn about it.</p>

<p>The whole concept of supervisors is just the beginning; as far as I can tell, OTP offers a large range of tools to monitor and keep processes alive on a network. Where this really becomes interesting, is that Scala is adopting some ideas (<a href="http://akka.io/">Akka</a> is inspired by Erlang/OTP), so some knowledge of one can be reused.</p>

<p>There is an entry level book, <a href="http://pragprog.com/book/jaerlang/programming-erlang">Programming in Erlang</a>, by Joe Armstrong (Erlang&#8217;s father), and a couple of more advanced books, specifically on OTP: <a href="http://www.manning.com/logan/">Erlang and OTP in Action</a> and <a href="http://shop.oreilly.com/product/9780596518189.do">Erlang Programming</a>. I&#8217;m going through Programming in Erlang, then the in Action one.</p>

<h3>Clojure</h3>

<p>Clojure is a Lisp for the JVM. That in itself should make it interesting, but somehow it does not do it for me. Maybe it is that Clojure is not as good Lisp it could be because of the JVM limitations. Or maybe I&#8217;m just not into Lisp anymore (I used to like Perl too, but wonder why today).</p>

<p>But with my professional investment in the JVM, I will probably investigate Clojure a bit further. Just not urgently.</p>

<p>It might be interesting to see if <a href="http://norvig.com/paip.html">Paradigms of Artificial Intelligence Programming</a> can easily be ported to Clojure.</p>

<h3>Haskell</h3>

<p>Haskell is an interesting language. But it is extremely demanding, and there are few resources to come to grip with it. I knew enough about Haskell to go through this book easily, but whenever I try to go further, I find that difficulties accumulate quickly.</p>

<p>It appears that Haskell&#8217;s features are all somewhat complicated in their own way:</p>

<h4>Types</h4>

<p>Haskell type system is perhaps the most sophisticated of all widely used type systems. Basic Haskell type system is already very rich, but <a href="http://www.haskell.org/ghc/">GHC</a> adds extensions that brings the expressivity of the type system to new heights.</p>

<p>I would assume that Haskell strength must be in this type system; there are interesting libraries and applications that are built around clever use of types. But there are few resources on using types for design (or designing with types), except for very academic papers with no obvious practical uses (I probably lack imagination)</p>

<p>GHC&#8217;s extensions are similarly explored in other academic papers, but the sum of these extensions is hard to make sense of (and it sometimes feels like the authors of GHC are also trying to make sense of this patchwork and find a more consistent set of features).</p>

<p>This is in serious needs of a good book, but I can&#8217;t think of any that fits the bill.</p>

<h4>Laziness</h4>

<p>Haskell&#8217;s laziness goes much further than Clojure&#8217;s. I did not mention it in <a href="http://blog.wakatta.jp/blog/2011/11/19/seven-languages-in-seven-weeks-haskell-day-3/">Haskell Day 3</a>&#8217;s Maze solution, but laziness makes this implementation very effective: only the first solution is computed. While the implementation is strictly equivalent to nested list comprehensions, only the part required for the first output is actually run.</p>

<p>Laziness (combine with the List Monad) makes the algorithm very short: a mere 14 lines. But it makes it also very obscure. I know, intellectually, that laziness will run just a much as needed, but I don&#8217;t understand it as well as, say, I understand the time and space cost of an algorithm in C.</p>

<p>When digging a bit deeper in Haskell, newcomers learn to be wary of laziness: it introduces space leaks that can be hard to track. Solutions exist, but are spread in academic papers that require extensive understanding of the whole background theories (why do academic papers always refer to other, more obscure academic papers, and never to a single &#8220;Idiot Guide to&#8230;&#8221;?)</p>

<p>Of all the features of Haskell, I would think that laziness is the harder to master. There are few generally available resources. <a href="http://www.cambridge.org/gb/knowledge/isbn/item1161740/?site_locale=en_GB">Purely Functional Data Structures</a> explores laziness and provides a theoretical framework to compute the time cost of lazy algorithms, but does so assuming a partial laziness built on top of SML.</p>

<p><a href="http://www.iro.umontreal.ca/~lapalme/Algorithms-functional.html">Algorithms: A Functional Programming Approach</a> is about Haskell, but appears to be out of print (glad I got a copy when I first got interested in Haskell).</p>

<p>Both books are in my todo stack (which by now requires all my skills in rock climbing to handle).</p>

<h4>Syntax</h4>

<p>Haskell&#8217;s syntax is another of its strengths: it is very compact, and the type system abstracts away many details. So it&#8217;s no surprise that many people (or maybe just me) have a problem with it.</p>

<p>I learned OCaml at university (those were good days). My first few assignments, I had to implement my own list like data type, because I could not figure out how to use the default list in pattern matching. The language was so weird that it did not even occurred to me that a language whose standard list type was unusable would not leave the lab it grew in. Then eventually the syntax settled in my brain, and I started to wonder why it had been so hard before.</p>

<p>Haskell is similar (they are both somewhat descendant of ML), but far more abstract (OCaml does not support either type classes or user operators). So just looking at an expression, it is not easy to assign it a type (there might be many) or a single meaning (there might be many as well).</p>

<p>Another thing that I find hard to keep under control is the creation of anonymous functions. Between higher order functions that produce functions, and the do notation (which produces functions as well), it is hard to track what is going on, even it apparently simple expressions.</p>

<p>This is not to say that Haskell&#8217;s syntax does not &#8220;work&#8221;. It does, clearly, but the expressivity it grants is difficult to master.</p>

<h4>The compiler</h4>

<p>The compiler is another peace of the puzzle. All compilers are fantastically complex beasts; the underlying theories are just as fascinating as they are overwhelming. But in general, at least with regular imperative (or perhaps just with strict languages), my intuitions about what is costly, what is a possible leak, &#8230; just based on the code, are usually correct. With Haskell, there are many areas where I&#8217;m not sure what the compiler will do. Functional languages enthusiasts used to say that any inefficiency in their favourite language was just waiting for a sufficiently advanced compiler, but now I have a feeling that understanding what the compiler is doing is just as hard as figuring out program wide memory allocation in C&#8230;</p>

<p>And it matters. Strictness analysis, for instance, is used by GHC (and, I suppose, other Haskell compilers) to figure out which expressions could be strict (i.e. not lazy) without changing the overall semantic. This changes the time and space cost of some expressions, and makes performance difficult to predict.</p>

<h4>The meta-language</h4>

<p>Haskell is its own meta-language. What is a core feature in most languages is just a library in Haskell. This means that there is little uniformity even in fundamental part of the languages. There are <a href="http://www.randomhacks.net/articles/2007/03/10/haskell-8-ways-to-report-errors">8 ways to report errors</a> (perhaps more today). And at least that many monad transformer libraries.</p>

<p>Having to combine these various libraries (and more importantly, the libraries that use them) is difficult, and adds accidental complexity. What makes it more frustrating is that Haskell type system is otherwise very effective at making it easy to create code parts that can be combined in various ways (while checking that the combination always make some sense).</p>

<p>It would be good to standardise some of these, and maybe the <a href="http://hackage.haskell.org/platform/">Haskell Platform</a> will achieve this, although it would be nice if it was keeping up with at least GHC (at the time of writing, version 7.0.3 is in the Platform, but 7.2.2 is already out, with important changes).</p>

<h4>and so on&#8230;</h4>

<p>I would like to like Haskell. But if any language can be accused of being too academic, it is Haskell. Sometimes it feels like the main purpose of the language is to make it possible to prove, through the type system, that a specific, inefficient sort algorithm is indeed a sort algorithm.</p>

<p>I&#8217;m really curious about organisations that use Haskell for commercial purposes. What kind of features do they use the most? Is laziness really a good thing, or it is flushed away from the code and replaced by explicit on demand evaluation? Given a chance, I&#8217;d like to work in such an organisation, as I feel Haskell requires a different approach to large scale problem solving than the one I&#8217;m used to.</p>

<h3>Other topics</h3>

<p>From the same publisher (<a href="http://pragprog.com/">The Pragmatic Bookshelf</a>) as this book,
<a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a> is looking very interesting. I&#8217;m also professionally bound to SQL, so I haven&#8217;t really been paying attention to the whole NoSQL movement. Yet there are definitively interesting things going on, and the variety of alternative database models makes such a book a welcome introduction.</p>

<p>As I&#8217;ve been doing way too much sequential processing in the past, I am looking to expand my horizon and learn about large scale concurrency (Erlang, Scala, &#8230; help here), and asynchronous, event based processing. <a href="http://www.manning.com/etzion/">Event Processing in Action</a> appears to be a decent way to get started.</p>

<p>Finally, and while it is completely unrelated to whatever this book was about, I haven&#8217;t studied algorithms since I left university. I really feel I should get back to that topic, and <a href="http://www.algorist.com/">The Algorithm Design Manual</a> is just what I need.</p>
]]></content>
  </entry>
  
</feed>
