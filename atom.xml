<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2011-12-18T19:53:18+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak on EC2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2/"/>
    <updated>2011-12-17T14:36:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2</id>
    <content type="html"><![CDATA[<p>The third day with Riak had proposed to deploy Riak on a
<a href="http://aws.amazon.com/ec2/">EC2</a> cluster as an exercise. I could not
do it then due to poor network connectivity and lack of time (I was
traveling), but I did it since and here I explain how.</p>

<!--more-->


<p>EC2 is a service from Amazon to commission a number of virtual
computers with specific performance characteristics, and with use
charged by the hour (the rate depending of the performance).</p>

<p>The whole process is fairly simple and flexible. I got my computers up
and running in minutes. Setting up Riak was a bit more involved (I
should probably had tried on my local network first), but eventually I
was able to load the data and run the queries I wanted.</p>

<p>In outline, here&#8217;s the process</p>

<ul>
<li>figure out the security requirements</li>
<li>think about the cluster organisation</li>
<li>create a few instances of virtual computers</li>
<li>create the security configuration</li>
<li>connect to each machine and set it up</li>
<li>open an SSL tunnel</li>
<li>&#8230;</li>
<li>Profit!</li>
</ul>


<p>And now the details.</p>

<h3>Security requirements</h3>

<p>There will be a few machines, and I need each Riak instance to speak
to each other. This means I need to keep all the required ports open.</p>

<p>As each instance is on a different machine (presumably, I could have
several instances on each machine but I want to keep things simple), I
can use the same ports for each instance. I will just have to give
them different names.</p>

<p>Basho has a helpful
<a href="http://wiki.basho.com/Network-Security-and-Firewall-Configurations.html">page</a>
on this topic. It lists the defaults ports (all of them TCP):</p>

<ul>
<li>epmd&#8217;s listener: 4369</li>
<li>handoff_port listener: 8099</li>
<li>web_port: 8098</li>
<li>pb_port: 8087</li>
<li>plus a range than can be configured. As I have just a small
network, I restrict this range to 6000-6999.</li>
</ul>


<p>These are the ports I will open in my configuration settings.</p>

<h3>Cluster organisation</h3>

<p>I want a simple setup:</p>

<ul>
<li>3 machines</li>
<li>first one is the ring leader</li>
<li>first one is also my interface for client connections</li>
</ul>


<p>So I need to set 3 machines up, make the last two join the first, and
open an SSL tunnel from my local machine to the ring leader.</p>

<h3>EC2 instances</h3>

<p>First I had to sign up to <a href="http://aws.amazon.com/">AWS</a>.</p>

<p>Once this is done, I can use the console, select the EC2 tab, and
click on &#8220;Launch Instance&#8221;.</p>

<p>I chose &#8220;Launch Classic Wizard&#8221; to have as much flexibility as possible:</p>

<p><img src="https://lh6.googleusercontent.com/-MKXddn82uO8/Tu23KOzMhGI/AAAAAAAAB6Y/XpOren_ANVk/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.26.png"></p>

<p>Then I select a basic 64bit Amazon Linux:</p>

<p><img src="https://lh3.googleusercontent.com/--F8ajmA-58c/Tu23KHI9YNI/AAAAAAAAB6U/1fCrHF_tqg0/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.34.png"></p>

<p>I request 3 instances of type Micro (I&#8217;m just playing; I don&#8217;t really care about performance):</p>

<p><img src="https://lh4.googleusercontent.com/-w31FLsR0iC8/Tu2222Q_ZtI/AAAAAAAAB58/E-E86lTf7xg/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.44.png"></p>

<p>I just click through the next two screens (I do not have any specific need for such tuning):</p>

<p><img src="https://lh5.googleusercontent.com/-kRBmxXnSwRc/Tu222wmgj4I/AAAAAAAAB50/U1Rwuqv6R9o/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.05.png">
<img src="https://lh3.googleusercontent.com/-WiqCpx2PT70/Tu222Iz5nTI/AAAAAAAAB5s/k1ZuuVs1yrE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.08.png"></p>

<p>For the key pair, I just give a name, then download the file. I will use it later to connect to my new machines:</p>

<p><img src="https://lh4.googleusercontent.com/-JEnCFjVIM54/Tu222D8yOGI/AAAAAAAAB5o/qdAleXN-iDU/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.28.png"></p>

<p>For the security, I first name my group, then I can use this name as the source parameter for the rules. All the rules are Custom TCP ones; I just need to give the ports (as determined above):</p>

<p><img src="https://lh3.googleusercontent.com/-dSxG8pYQLEc/Tu222KSxpgI/AAAAAAAAB5w/AtiqjF-QTts/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.41.18.png"></p>

<p>And then I can finally start my new machines.</p>

<p>On my first attempts, two of the machines did not start; I just created a couple of new machines of the same kind (64bit Amazon Linux Micro), and put them in the same security group.</p>

<p>Here are the complete security rules (I had to add some after the initial setup):</p>

<p><img src="https://lh6.googleusercontent.com/-tSUcf1TbrLQ/Tu23KB_o3wI/AAAAAAAAB6Q/2OopRB6HFeE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252017.05.42.png"></p>

<p>With this, I have a small cluster of machines. Time to connect and put
them to good use.</p>

<h3>Configuring each machine</h3>

<p>From the EC2 Dashboard, I can access my instances, and get the address for each.</p>

<p>Using the private key downloaded earlier, I can open an SSH connection
to each machine. Note that the user is by default called <code>ec2-user</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i riak-private.pem ec2-user@&lt;MACHINE_NAME&gt;</span></code></pre></td></tr></table></div></figure>


<p>On each, I first need to install riak. I download it directly from
Basho <a href="http://downloads.basho.com/riak/CURRENT/">website</a>.</p>

<p>Each machine has some basic tools, but no Erlang compiler. To avoid
any complications, I chose and retrieved a binary distribution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://downloads.basho.com/riak/CURRENT/riak-1.0.2-1.el6.x86_64.rpm</span></code></pre></td></tr></table></div></figure>


<p>Then I  installed the  downloaded package  (<code>ec2-user</code> can  use <code>sudo</code>
without having to provide a password):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rpm -Uvh riak-1.0.2-1.el6.x86_64.rpm</span></code></pre></td></tr></table></div></figure>


<p>There are a few error messages (or perhaps warnings), but the package
is installed and running.</p>

<p>Riak is installed but not started yet. It is important to get the
configuration right before starting it.</p>

<h4>Common configuration</h4>

<p>For each server, I give it a name that includes the local network IP
address (not the loopback IP address <code>127.0.0.1</code>). It is important,
otherwise the machines cannot talk to each others.</p>

<p>I can get it by running <code>ifconfig</code>. I look for the ethernet setup and especially the <code>inet</code> value:
this is the IP address in Amazon private network. I need to remember
the IP address for what I will call the first machine, so I copy it
somewhere (and call it here <code>&lt;IP_ADDRESS_1&gt;</code>)</p>

<p>Using <code>sudo -e /etc/riak/vm.args</code>, I can edit the name of each node. I set it to <code>riak_ec2_1@&lt;IP_ADDRESS&gt;</code>, (or <code>riak_ec2_2</code>, <code>riak_ec2_3</code>, &#8230;).</p>

<p>Note: the editor will be <code>vi</code>.</p>

<p>I also need to change the <code>app.config</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo -e /etc/riak/app.config`</span></code></pre></td></tr></table></div></figure>


<p>I first need to insert a range restriction configuration. I insert the
following block near the top:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ kernel, [
</span><span class='line'>            {inet_dist_listen_min, 6000},
</span><span class='line'>            {inet_dist_listen_max, 6999}
</span><span class='line'>            ]},</span></code></pre></td></tr></table></div></figure>


<p>For the first machine (the one named <code>riak_ec2_1</code>), I also need to
extend the <code>http</code> interface list. By default it only listen to the
loopback interface (<code>127.0.0.1</code>), but I also need it to listen to the
ethernet interface (see above). Otherwise, I will not be able to set
the SSL tunnel up.</p>

<p>So I replace the lines that read</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{http, [ {"127.0.0.1", 8098 } ]},</span></code></pre></td></tr></table></div></figure>


<p>by something like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{http, [ {"127.0.0.1", 8098 }, {"&lt;IP_ADDRESS_1&gt;", 8098} ]},</span></code></pre></td></tr></table></div></figure>


<p>Once this is done, I started the instances:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo riak start</span></code></pre></td></tr></table></div></figure>


<p>I can test each instance with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8098/stats | python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>Finally, I can link all instances together by executing on the second
and third machine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo riak-admin join riak_ec2_1@&lt;IP_ADDRESS_1&gt;</span></code></pre></td></tr></table></div></figure>


<p>Testing again the status should show three instances in the same ring.</p>

<p>In case of error, uninstall riak, delete the <code>/var/lib/riak</code> directory,
and start again (as I did).</p>

<h3>Setting up the SSL tunnel</h3>

<p>Nothing simpler. Using the first machine name (the one I configured
for connection from the ethernet interface):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i riak-private.pem -f ec2-user@&lt;MACHINE_NAME&gt; \
</span><span class='line'>-L 8098:ec2-user@&lt;MACHINE_NAME&gt;:8098 -N</span></code></pre></td></tr></table></div></figure>


<p>And now I can run from my local machine</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8098/stats | python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>and get the status of the Riak server as if it was local.</p>

<h3>Loading data and running queries</h3>

<p>The book suggest to use the example data from Basho&#8217;s
<a href="http://wiki.basho.com/Loading-Data-and-Running-MapReduce-Queries.html">website</a>,
which is what I did. I downloaded the
<a href="http://wiki.basho.com/attachments/goog.csv"><code>goog.csv</code></a> data file and
the <a href="http://wiki.basho.com/attachments/load_data"><code>load_data</code></a>
script. I changed the port number in the latter to use 8098 instead of
8091, then I just ran it: the data is send through the SSL tunnel and
loaded in my EC2 cluster (but it is very slow).</p>

<p>Once this was done, I checked the various queries proposed on the page, and also implemented the MapReduce Challenge:</p>

<h3>MapReduce Challenge</h3>

<p>The MapReduce Challenge is to compute the days with the highest volume
of dollar traded. This first step is to compute this value, as it is
not part of the initial data.</p>

<p>I use a definition found
<a href="http://wiki.fool.com/Daily_dollar_volume">here</a>, which makes
intuitive sense: <code>Volume*(High - Low)/2</code></p>

<h4>Dollar Traded Volume by Month</h4>

<p>I need to keep both the date and the amount, so my map function will
keep both items in a data structured indexed by month:</p>

<figure class='code'><figcaption><span>Dollar Traded by Month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">month</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pair</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when reducing, I can compare the traded amount and keep the best:</p>

<figure class='code'><figcaption><span>Highest by month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">month</span> <span class="k">in</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">?</span>
</span><span class='line'>  <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To test the whole, I can use the following command, then copy and
paste the query, and execute with <code>Ctrl-D</code>. The command below is run on
my local machine, but thanks to the SSL tunnel, it will execute on the
cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST http://127.0.0.1:8098/mapred \
</span><span class='line'>-H "Content-Type: application/json" -d @-</span></code></pre></td></tr></table></div></figure>


<p>And the query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"inputs":"goog",
</span><span class='line'> "query":[{"map":{"language":"javascript",
</span><span class='line'>                  "source":"function(value, keyData, arg) {
</span><span class='line'>  var data = Riak.mapValuesJson(value)[0];
</span><span class='line'>  var month = value.key.split('-').slice(0,2).join('-');
</span><span class='line'>  var pair = {};
</span><span class='line'>  pair['date'] = value.key;
</span><span class='line'>  pair['traded'] = data.Volume * (data.High - data.Low) / 2;
</span><span class='line'>  var obj = {};
</span><span class='line'>  obj[month] = pair;
</span><span class='line'>  return [obj];
</span><span class='line'>}"}},
</span><span class='line'>         {"reduce":{"language":"javascript",
</span><span class='line'>                    "source":"function(values, arg) {
</span><span class='line'>  return [ values.reduce(function(acc, item) {
</span><span class='line'>    for(var month in item) {
</span><span class='line'>      if(acc[month]) {
</span><span class='line'>        acc[month] = acc[month]['traded'] &lt; item[month]['traded'] ?
</span><span class='line'>  item[month] : acc[month];
</span><span class='line'>      } else acc[month] = item[month];
</span><span class='line'>    }
</span><span class='line'>    return acc;
</span><span class='line'>  })
</span><span class='line'>  ];
</span><span class='line'>}",
</span><span class='line'>         "keep":true}}]}</span></code></pre></td></tr></table></div></figure>


<h4>Day by Highest Dollar Traded</h4>

<p>For this one I use a similar approach: I create pairs with the date
and the amount of dollar traded, but this pair is what I return
directly (instead of returning it indexed by month).</p>

<p>Indexing by date would not work as in the reduce step I would have to
keep the result in a simple (i.e. not indexed) variable, and therefore
would forget the date. By keeping both data items (the date and the
volume traded in dollar) in the same object, I can reduce a list of
such objects to a single item and still retain all the relevant information.</p>

<p>The mapping function creates just a pair object from the data:</p>

<figure class='code'><figcaption><span>Dollar Traded by Day  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reducing function retains the best date by volume traded in dollar
for each batch. It is simpler than the previous one as the values are
simple (i.e. not indexed):</p>

<figure class='code'><figcaption><span>Highest ever  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">){</span>
</span><span class='line'>             <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">)</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">item</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nx">item</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>             <span class="k">else</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>             <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>         <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"inputs":"goog",
</span><span class='line'> "query":[{"map":{"language":"javascript",
</span><span class='line'>                  "source":"function(value, keyData, arg) {
</span><span class='line'>  var data = Riak.mapValuesJson(value)[0];
</span><span class='line'>  var obj = {};
</span><span class='line'>  obj['date'] = value.key;
</span><span class='line'>  obj['traded'] = data.Volume * (data.High - data.Low) / 2;
</span><span class='line'>  return [obj];
</span><span class='line'>}"}},
</span><span class='line'>         {"reduce":{"language":"javascript",
</span><span class='line'>                    "source":"function(values, arg){
</span><span class='line'>  return [ values.reduce(function(acc, item){
</span><span class='line'>                 if(acc) { acc = (acc['traded'] &lt; item['traded']) ? item : acc; }
</span><span class='line'>                 else { acc = item[date]; }
</span><span class='line'>             return acc;
</span><span class='line'>            })
</span><span class='line'>         ];
</span><span class='line'>}",
</span><span class='line'>         "keep":true}}]}</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3/"/>
    <updated>2011-12-15T16:27:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3</id>
    <content type="html"><![CDATA[<p>The third day with HBase is a bit short, but opens to a world of
possibilities: the Cloud.</p>

<p>This is where HBase belongs. No personal (or even that many corporate)
networks are large enough to let it perform correctly.</p>

<p>HBase depends on a large number of servers running in parallel for
its performance, and there are few other places to find that many
machines.</p>

<!--more-->


<h3>Thrift</h3>

<p>The first topic for today is <a href="http://thrift.apache.org/">Thrift</a>, a
generic remote interface to program servers (and a gift from the new
Evil Empire, Facebook).</p>

<p>It is a tool to document a binary API, and generate client stubs to
use this API. HBase supports such an API, making it possible to write
clients in a variety of languages.</p>

<p>Using Thrift on your own project (on the server side, if you have any)
would make it possible to use different languages on the client side,
depending on whichever better fits the needs (scripting languages for
glue scripts, &#8230;)</p>

<p>When I tried the example from the book, I had to change the connection
address of the <code>thrift_example.rb</code> code from <code>localhost</code> to
<code>127.0.0.1</code>, otherwise Thrift would refuse the connection.</p>

<h3>Whirr</h3>

<p><a href="http://whirr.apache.org/">Whirr</a> is far more exciting. It is a tool
to deploy and configure some specific servers on (among others)
<a href="http://aws.amazon.com/ec2/">Amazon EC2</a>.</p>

<p>The first, and perhaps the most complex step is to open an account on
<a href="http://aws.amazon.com/">AWS</a>. It will require a phone, a credit card,
a computer, and some time. And perhaps a couple of emails if the
account opening remains stuck in &#8220;Pending verification&#8221; status.</p>

<p>Once this is done, Whirr can be used to create instances (be careful
with that: Amazon will charge at least one hour for each server even
if you take it down after a couple of minutes), download and install
specific servers (mostly from the <a href="http://hadoop.apache.org/">Hadoop</a>
family), configure them, all of this from the comfort of the command
line (which is my case is cosily close to a cup of warm coco, so it is
very comfortable indeed).</p>

<p>All you have to do is retrieve you security token from your AWS
account page, create a public/private key pair, then write a recipe
file (which describes what kind of machines and how many you need,
what to install on each, &#8230;), and Whirr takes care of the rest. The
first two steps only have to be done once; you can deploy as many
recipes as you need.</p>

<p>The setup process takes a few minutes, then you can connect with SSH
to one of your remote servers.</p>

<p>Whirr also creates a security configuration for each recipe, opening
only the ports that are required by the servers in the recipe,
limiting source of the connections to specific servers. You can also
edit the security rules directly in the recipe if you want.</p>

<p>The ease with which this can be done is really surprising. It reminds
me of how easy it was to deploy a Rails application on
<a href="http://www.heroku.com/">Heroku</a>.</p>

<p>Now, I do not have any foreseen uses for such computing capacity, but
I can see how it could be helpful for any organisation to be able to
run occasional large data processing jobs without having to maintain a
permanent data center.</p>

<h2>Exercises</h2>

<p>There is only one exercise today: to open a Thrift connection to an
AWS deployed HBase.</p>

<p>First is to get Thrift to run on the deployed machines. The book
suggest to connect by SSH and start the instance there, but there is a
better way if you know you will need Thrift: ask Whirr to deploy it
automatically.</p>

<p>In the file below, I&#8217;ve added the server <code>hbase-thriftserver</code> to the
master server:</p>

<figure class='code'><figcaption><span>hbase.properties (hbase.properties)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/hbase/hbase.properties'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Licensed to the Apache Software Foundation (ASF) under one or more</span>
</span><span class='line'><span class="c"># contributor license agreements.  See the NOTICE file distributed with</span>
</span><span class='line'><span class="c"># this work for additional information regarding copyright ownership.</span>
</span><span class='line'><span class="c"># The ASF licenses this file to You under the Apache License, Version 2.0</span>
</span><span class='line'><span class="c"># (the &quot;License&quot;); you may not use this file except in compliance with</span>
</span><span class='line'><span class="c"># the License.  You may obtain a copy of the License at</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#     http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="c"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="c"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="c"># See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="c"># limitations under the License.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># HBase 0.90.x on Cloudera Hadoop Cluster on AWS EC2</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'>
</span><span class='line'><span class="c"># Read the Configuration Guide for more info:</span>
</span><span class='line'><span class="c"># http://incubator.apache.org/whirr/configuration-guide.html</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the cluster name here</span>
</span><span class='line'><span class="na">whirr.cluster-name</span><span class="o">=</span><span class="s">hbase-0.90</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the number of machines in the cluster here</span>
</span><span class='line'><span class="na">whirr.instance-templates</span><span class="o">=</span><span class="s">1 zookeeper+hadoop-namenode+hadoop-jobtracker+hbase-master+hbase-thriftserver,1 hadoop-datanode+hadoop-tasktracker+hbase-regionserver</span>
</span><span class='line'>
</span><span class='line'><span class="c"># replication level should not be higher than number of data nodes</span>
</span><span class='line'><span class="na">hbase-site.dfs.replication</span><span class="o">=</span><span class="s">2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For EC2 set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables.</span>
</span><span class='line'><span class="na">whirr.provider</span><span class="o">=</span><span class="s">aws-ec2</span>
</span><span class='line'><span class="na">whirr.identity</span><span class="o">=</span><span class="s">${env:AWS_ACCESS_KEY_ID}</span>
</span><span class='line'><span class="na">whirr.credential</span><span class="o">=</span><span class="s">${env:AWS_SECRET_ACCESS_KEY}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The size of the instance to use. See http://aws.amazon.com/ec2/instance-types/</span>
</span><span class='line'><span class="na">whirr.hardware-id</span><span class="o">=</span><span class="s">c1.xlarge</span>
</span><span class='line'><span class="c"># Ubuntu 10.04 LTS Lucid. See http://alestic.com/</span>
</span><span class='line'><span class="na">whirr.image-id</span><span class="o">=</span><span class="s">us-east-1/ami-da0cf8b3</span>
</span><span class='line'><span class="c"># If you choose a different location, make sure whirr.image-id is updated too</span>
</span><span class='line'><span class="na">whirr.location-id</span><span class="o">=</span><span class="s">us-east-1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># By default use the user system SSH keys. Override them here.</span>
</span><span class='line'><span class="na">whirr.private-key-file</span><span class="o">=</span><span class="s">keys/id_rsa</span>
</span><span class='line'><span class="na">whirr.public-key-file</span><span class="o">=</span><span class="s">keys/id_rsa.pub</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The HBase version to use.</span>
</span><span class='line'><span class="na">whirr.hbase.tarball.url</span><span class="o">=</span><span class="s">http://apache.cu.be/hbase/hbase-0.90.4/hbase-0.90.4.tar.gz</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The Hadoop version to use. See http://hbase.apache.org/book/hadoop.html</span>
</span><span class='line'><span class="c"># The default Hadoop version used by Whirr does not fulfill the HBase 0.90.x requirements.</span>
</span><span class='line'><span class="c"># Whirr will replace the hadoop-core jar in HBase with the one from the actually installed Hadoop.</span>
</span><span class='line'><span class="c"># This example uses Cloudera&#39;s CDH3.</span>
</span><span class='line'><span class="na">whirr.hadoop.tarball.url</span><span class="o">=</span><span class="s">http://archive.cloudera.com/cdh/3/hadoop-0.20.2-cdh3u2.tar.gz</span>
</span></code></pre></td></tr></table></div></figure>


<p>As for the connection to the Thrift server, the method described in
the book is to open the port 9090 to the world, and to hope to be the
only one to know about this port: a likely possibility, but who would
want to take such a chance in production?</p>

<p>Fortunately, there is a better solution: SSH Tunneling. It is very
easy to set up and requires nothing but what we already have.</p>

<p>The general idea is to open a ssh tunnel between a local port and a
remote port: whatever you puts in the local port is taken by ssh,
transported over the SSH connection; once it reaches the remote
machine, the remote ssh instance will forward the data to the remote
port, as if it was a client running on the remote machine.</p>

<p>The transport between the two machines only requires the remote one to
have the SSH port open (which is both the case, and secure). You have
to use authentication and encryption for the transport.</p>

<p>And what is required to implement this SSH tunneling:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i keys/id_rsa -f ${USER}@&lt;SERVER_NAME&gt; -L 9090:&lt;SERVER_NAME&gt;:9090 -N</span></code></pre></td></tr></table></div></figure>


<p>(from the directory where you created the <code>keys</code> directory)</p>

<p>Here I map the local port 9090 to the remote machine&#8217;s port 9090. That
way I don&#8217;t even have to change my <code>thrift_example.rb</code> code. But of
course, if I had to connect to different machines, I would use
different ports.</p>

<p>The Thrift server was automatically started by the recipe.</p>

<p>With this in place, and after creating some tables in the remote
HBase:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby thrift_example.rb 
</span><span class='line'>links
</span><span class='line'>  from:
</span><span class='line'>    maxVersions: 1
</span><span class='line'>    compression: NONE
</span><span class='line'>    bloomFilterType: ROWCOL
</span><span class='line'>  to:
</span><span class='line'>    maxVersions: 1
</span><span class='line'>    compression: NONE
</span><span class='line'>    bloomFilterType: ROWCOL
</span><span class='line'>wiki
</span><span class='line'>  revision:
</span><span class='line'>    maxVersions: 2147483647
</span><span class='line'>    compression: NONE
</span><span class='line'>    bloomFilterType: NONE
</span><span class='line'>  text:
</span><span class='line'>    maxVersions: 2147483647
</span><span class='line'>    compression: GZ
</span><span class='line'>    bloomFilterType: ROW</span></code></pre></td></tr></table></div></figure>


<p>(be careful not to use LZO as a compression algorithm in the remote
HBase, as I did when I tried the first time: the default HBase has no
LZO support and will fail when you try to enable a table with LZO compression).</p>

<p>To take a tunnel down, you&#8217;ll have to find and kill it (as far as I
can tell). If you have no other ssh connections, <code>killall ssh</code> is a
simple solution. In any case, the connection will be cut when the
remote servers are destroyed.</p>

<h2>Wrapping up HBase</h2>

<p>I like what I see with HBase: the project has strong backers among its
users (Yahoo, Facebook, &#8230;); it belongs to a large family of tools
that help to design Big Data solutions, and integrates well with some
Cloud networks</p>

<p>The model is easy to understand (the book mentions the possibility of
eventual consistency due to regional replication, but this remains a
simpler model than Riak&#8217;s), and close to the original MapReduce
concept.</p>

<p>This is really one tool I will have a closer look to in the near
future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/12/seven-databases-in-seven-weeks-hbase-day-2/"/>
    <updated>2011-12-12T23:46:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/12/seven-databases-in-seven-weeks-hbase-day-2</id>
    <content type="html"><![CDATA[<p>And on the second day with HBase, we load it with <a href="http://www.wikipedia.org/">Wikipedia</a>. Actually I had to do it twice to get it to work: on my first attempt the process kind of froze at about 200,000 articles.</p>

<!--more-->


<p>After some digging (and finding this very helpful <a href="http://ofps.oreilly.com/titles/9781449396107/installation.html">page</a> from <a href="http://ofps.oreilly.com/titles/9781449396107/">HBase: The Definitive Guide</a>), I tried again with a different setting for the limit on open files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ulimit -n 10240</span></code></pre></td></tr></table></div></figure>


<p>With that, HBase was able to keep churning along (the limit is per session, so HBase had to be restarted). I started the import process in the morning, and when I finally stopped it it had passed 10,000,000 pages (not all of them actual articles). Parsing links was equally successful.</p>

<h3>Consistency</h3>

<p>Unlike Riak, which offers <a href="http://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>, HBase ensures row level consistency. This means that each row has only one value, and a write to the row is either entirely successful, or not performed at all (so an update will never be applied partially).</p>

<p>This idea that each row is atomic is a simple yet effective mental model; I feel I should be able to use this model to design reliable solutions on HBase. To make them fast as well is a different matter entirely: I&#8217;d first need more experience with the concept of column families and their various options.</p>

<h3>Logging</h3>

<p>HBase uses <a href="http://en.wikipedia.org/wiki/Write-ahead_logging">Write-Ahead Logging</a>, exactly like PostgreSQL and many other databases (Riak too) and file systems. This is a low level mechanism designed to help with consistency: first a description of the updates is written into a log file (and flushed); then the update is performed. If there&#8217;s a problem during the update, it is always possible to compare the write-ahead log and execute again whatever updates are missing or partial.</p>

<h3>Regions and servers</h3>

<p>I must say I am still a bit unclear on this topic: I have a standalone instance of HBase, so naturally there is no distribution involved.</p>

<p>HBase first keep the data sorted by key, and distributes contiguous chunks of data to each region (growing the number of regions if needed).</p>

<h3>HBase and names</h3>

<p>In a typical relational database, just as in a normal programming language, the name you give to things (tables, columns or variables) is a programmer oriented feature that has no impact on performance.</p>

<p>The idea that you should use short variable names for &#8216;performance reason&#8217; is either a joke or a beginner&#8217;s mistake.</p>

<p>Except in HBase, where the length of names can impact storage performance. See the <a href="http://hbase.apache.org/book.html#rowkey.design">HBase book, Try to minimize row and column sizes</a>.</p>

<h2>Exercises</h2>

<h3>Compression in HBase</h3>

<p>I could not really find any article on the pros and cons of compression in either HBase or Hadoop. I guess the pros and cons here are the same as any other use of compression: trading IO for CPU. Smaller (because compressed) data can be saved to and read from the disk faster, but at the cost of higher CPU usage.</p>

<h3>Bloom filters</h3>

<p>Bloom filters are describe on the always helpful <a href="http://en.wikipedia.org/wiki/Bloom_filter">Wikipedia</a>. Such a filter is a tool to determine quickly if a piece of information in not in a specific storage, with a configurable probability for false positive.</p>

<p>Say you have a key value distributed data store. For each store, you maintain a Bloom filter of the keys.</p>

<p>Assuming you are looking for a key, you can use the Bloom filters to quickly determine where to look further.</p>

<p>If a Bloom filter for a store states the key is not present, you know you can ignore the store. If it says the key is present, it could be wrong, so you have to look. How often it returns yes when it should say no is a trade-off between the size of the filter and the probability of error.</p>

<p>With HBase being distributed by default, knowing where to look for a key or a key, column pair can increase performance.</p>

<h3>Column family options for compression</h3>

<p>There use to be <code>RECORD</code> and <code>BLOCK</code> options, but they appear deprecated. What is left is to specify the compression algorithm for either regular compression, or compacting compression (which happens when HBase reorganize the store). The compacting compression setting can use the same values (i.e. algorithm names) as the compression setting. In the shell, the option is <code>COMPRESSION_COMPACT</code>.</p>

<p>The available algorithms are <code>NONE</code> (no encryption), <code>GZ</code>, <code>LZO</code> and <code>SNAPPY</code> (which is probably better still than LZO).</p>

<h3>Column family compression design consideration</h3>

<p>I could not find any definitive answer to this, but I would guess that:</p>

<ul>
<li>already compressed data (such as JPEG) should be in an uncompressed column family</li>
<li>rarely used by very large data could use a slower but more efficient algorithm such as GZ</li>
<li>small but very often used families should not be compressed</li>
</ul>


<h3>Installing LZO</h3>

<p>To install LZO compression is not exactly trivial, especially on Mac OS X.</p>

<p>The first step is to install the library; I did it with <a href="http://mxcl.github.com/homebrew/">Homebrew</a>. It installs 64 bits versions by default; the only thing to remember is that by default on Mac OS X 10.7, the default compiler is <a href="http://llvm.org">LLVM</a>, but often <a href="http://gcc.gnu.org/">GCC</a> is better.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo brew install lzo --use-gcc</span></code></pre></td></tr></table></div></figure>


<p>and LZO will end up under <code>/usr/local/Cellar/lzo/2.06/</code></p>

<p>Next step is to build the hadoop LZO plugin. The basic information is available on the Hadoop <a href="http://wiki.apache.org/hadoop/UsingLzoCompression">wiki</a>, but the main repository it refers to is obsolete. There is another, maintained <a href="https://github.com/toddlipcon/hadoop-lzo">repository</a> on Github.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/toddlipcon/hadoop-lzo</span></code></pre></td></tr></table></div></figure>


<h4>Mac OS X</h4>

<p>Building on Linux should work right away, but Mac OS X (especially 10.7) is slightly different in frustrating way. The <code>ld</code> command is not GNU, but BSD, so it does not understand the same options.</p>

<p>To get the library to compile, you need to edit the <code>build.xml</code> file and clear the <code>LDFLAGS</code> (by default the value is <code>-Wl,--no-as-needed</code>, it needs to be empty).</p>

<p>Liquid error: ClassNotFound: no lexer for alias &#8216;txt&#8217; found</p>

<p>From inside the repository, it can be applied with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>patch -p1 &lt; hadoop-lzo.patch</span></code></pre></td></tr></table></div></figure>


<p>Once this is done, the <code>ant</code> invocation documented in the Wiki should almost work. Two things need to be changed: first is the use of <code>GCC</code> instead of <code>LLVM</code> (by setting the <code>CC</code> variable); second is the strange name of the <code>include</code> directory for Java. The build script expects it under <code>$JAVA_HOME/include</code>, but of course in Mac OS X it had to be somewhere else (<code>/System/Library/Frameworks/JavaVM.framework/Headers</code>, if you need to know), so I added it directly to the include path <code>C_INCLUDE_PATH</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>env JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/ \
</span><span class='line'>C_INCLUDE_PATH=/System/Library/Frameworks/JavaVM.framework/Headers:/usr/local/Cellar/lzo/2.06/include/ \
</span><span class='line'>LIBRARY_PATH=/usr/local/Cellar/lzo/2.06/lib/ CFAGS='-arch x86_64' \
</span><span class='line'>CC=/usr/bin/gcc-4.2  ant clean compile-native test tar</span></code></pre></td></tr></table></div></figure>


<p>Normally, you should now have a <code>build</code> directory with the jar and native libraries.</p>

<p>The final step is to deploy this in HBase. HBase expect everything to be under the <code>$HBASE_HOME/lib</code>. The instructions from the wiki give the right commands (I just added the creation of the <code>$HBASE_HOME/lib/native</code> directory, which does not exist by default):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp build/hadoop-lzo-0.4.15/hadoop-lzo-0.4.15.jar $HBASE_HOME/lib/
</span><span class='line'>mkdir -p $HBASE_HOME/lib/native
</span><span class='line'>tar -cBf - -C build/hadoop-lzo-0.4.15/lib/native/ . | tar -xBvf - -C $HBASE_HOME/lib/native</span></code></pre></td></tr></table></div></figure>


<p>Now you can test whether the new library is enabled: run the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/hbase org.apache.hadoop.hbase.util.CompressionTest /tmp/data.lzo lzo</span></code></pre></td></tr></table></div></figure>


<p>and it should output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>11/12/14 09:13:21 INFO lzo.GPLNativeCodeLoader: Loaded native gpl library
</span><span class='line'>11/12/14 09:13:21 INFO lzo.LzoCodec: Successfully loaded & initialized native-lzo library [hadoop-lzo rev c7d54fffe5a853c437ee23413ba71fc6af23c91d]
</span><span class='line'>11/12/14 09:13:21 INFO compress.CodecPool: Got brand-new compressor
</span><span class='line'>SUCCESS</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. The most frustrating part is that HBase will appear to hang when you try to enable a table that uses LZO compression if anything went wrong (and forgot to test as above). The logs will reveal that <code>hadoop-native</code> cannot be found. This means that the native libraries cannot be loaded. So make sure that you have all the files below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.0.dylib
</span><span class='line'>$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.a
</span><span class='line'>$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.dylib
</span><span class='line'>$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.la</span></code></pre></td></tr></table></div></figure>


<p>After that, restart the server, and you can use LZO compression instead of GZ.</p>

<p>And this completes Day 2. Next and final day is about deploying HBase to the cloud. This might take more than just a day as I need some time to figure out how to use <a href="http://aws.amazon.com/ec2/">AWS EC2</a> and which options to choose, but hopefully I&#8217;ll be able to deploy Riak there as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/11/seven-databases-in-seven-weeks-hbase-day-1/"/>
    <updated>2011-12-11T12:57:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/11/seven-databases-in-seven-weeks-hbase-day-1</id>
    <content type="html"><![CDATA[<p>New week, new database. This week is about <a href="">HBase</a>, a product that
has a significant enterprisy feel about it. First it is written in
Java, the de facto enterprise language. Then it is already in
production in very large big data consumers (Facebook among others).</p>

<p>Perhaps more surprising is the fact that it even runs at all on a
single, personal computer (as the book states, 5 dedicated servers is
the recommended minimal configuration).</p>

<!--more-->


<p>Today is a fairly short day. Getting HBase to run, creating a single
table and a couple of rows, and that&#8217;s it.</p>

<p>As for Riak, I recommend downloading the
<a href="http://www.apache.org/dyn/closer.cgi?path=hbase/hbase-0.90.3/hbase-0.90.3.tar.gz">HBase package</a>
rather than trying your luck with the Homebrew version. HBase runs
directly from the extraction directory, and already includes all the
dependencies.</p>

<p>Just edit the hbase-site.xml configuratio file as the book recommends,
and you&#8217;re good to go.</p>

<h2>Exercises</h2>

<h3>put_many function</h3>

<p>This function is more an exercise in Ruby than in HBase. The code is
just a variant of what is already in the book.</p>

<figure class='code'><figcaption><span>put_many.rb  (put_many.rb)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/hbase/put_many.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># recap some definition to make this definition self-contained</span>
</span><span class='line'><span class="n">import</span> <span class="s1">&#39;org.apache.hadoop.hbase.client.HTable&#39;</span>
</span><span class='line'><span class="n">import</span> <span class="s1">&#39;org.apache.hadoop.hbase.client.Put&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">jbytes</span><span class="p">(</span> <span class="o">*</span><span class="n">args</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">arg</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_java_bytes</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># actual exercise</span>
</span><span class='line'><span class="k">def</span> <span class="nf">put_many</span><span class="p">(</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">column_values</span><span class="p">)</span>
</span><span class='line'>  <span class="n">table</span> <span class="o">=</span> <span class="no">HTable</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@hbase</span><span class="o">.</span><span class="n">configuration</span><span class="p">,</span> <span class="n">table_name</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">p</span> <span class="o">=</span> <span class="no">Put</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="o">*</span><span class="n">jbytes</span><span class="p">(</span> <span class="n">row</span> <span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">column_values</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="n">kf</span><span class="p">,</span> <span class="n">kn</span><span class="p">)</span> <span class="o">=</span> <span class="n">k</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kn</span> <span class="o">||=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="nb">p</span><span class="o">.</span><span class="n">add</span><span class="p">(</span> <span class="o">*</span><span class="n">jbytes</span><span class="p">(</span> <span class="n">kf</span><span class="p">,</span> <span class="n">kn</span><span class="p">,</span> <span class="n">v</span> <span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">table</span><span class="o">.</span><span class="n">put</span><span class="p">(</span> <span class="nb">p</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Use the put_many function</h3>

<p>Invoking the <code>put_many</code> function then checking the insert:</p>

<figure class='code'><figcaption><span>Testing put_many  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">put_many</span> <span class="s1">&#39;wiki&#39;</span><span class="p">,</span> <span class="s1">&#39;Some title&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;text:&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Some article text&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;revision:author&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;jschmoe&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;revision:comment&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;no comment&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;wiki&#39;</span><span class="p">,</span> <span class="s1">&#39;Some title&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>generates</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>COLUMN                CELL                                                      
</span><span class='line'> revision:author      timestamp=1323575657943, value=jschmoe                    
</span><span class='line'> revision:comment     timestamp=1323575657943, value=no comment                 
</span><span class='line'> text:                timestamp=1323575657943, value=Some article text          
</span><span class='line'>3 row(s) in 0.5340 seconds</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all for today. Tomorrow will be a bit more fun: first a
significant take on of Wikipedia files, then using HBase to play with
the loaded data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/09/seven-databases-in-seven-weeks-riak-day-3/"/>
    <updated>2011-12-09T22:32:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/09/seven-databases-in-seven-weeks-riak-day-3</id>
    <content type="html"><![CDATA[<p>Today we complete the tour of Riak features. First conflict resolution
with vector clocks; then pre and post-commit hooks, and finally
searching Riak data with a <a href="http://lucene.apache.org/">Solr</a>
compatible interface.</p>

<!--more-->


<h3>Setting up Riak</h3>

<p>Over the last few days, I have been trying different ways to get Riak up and running.</p>

<p>Following the book advice, I recommend installing Riak from the
sources. Actually, you can just build it, build the <code>devrel</code> target,
and run from the <code>dev</code> directory.</p>

<p>On Mac OS X, <a href="http://mxcl.github.com/homebrew/">Homebrew</a> usually
works for me, but I like my servers to run with their own user, so I
<code>sudo brew install</code> the packages. In the case of Riak, this does not
work at all (the files have incorrect ownership and useless permissions).</p>

<p>There is a small bug in Riak 1.0.2 that causes it to return a 500 HTTP
error when the precommit hook fails, instead of the expected 403. The
problem is a spurious variable binding in Erlang. The patch below
fixes this error; it also make it possible to build Riak with Erlang R14B04.</p>

<figure class='code'><figcaption><span>riak 1.0.2 patch  (riak-1.0.2.patch)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/riak/riak-1.0.2.patch'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>diff -rupN riak-1.0.2-orig/deps/riak_kv/src/riak_kv_wm_object.erl riak-1.0.2/deps/riak_kv/src/riak_kv_wm_object.erl
</span><span class='line'>--- riak-1.0.2-orig/deps/riak_kv/src/riak_kv_wm_object.erl    2011-11-18 04:50:52.000000000 +0900
</span><span class='line'>+++ riak-1.0.2/deps/riak_kv/src/riak_kv_wm_object.erl 2011-12-11 13:27:52.000000000 +0900
</span><span class='line'>@@ -966,8 +966,8 @@ handle_common_error(Reason, RD, Ctx) -&gt;
</span><span class='line'>     case {error, Reason} of
</span><span class='line'>         {error, precommit_fail} -&gt;
</span><span class='line'>             {{halt, 403}, send_precommit_error(RD, undefined), Ctx};
</span><span class='line'>-        {error, {precommit_fail, Reason}} -&gt;
</span><span class='line'>-            {{halt, 403}, send_precommit_error(RD, Reason), Ctx};
</span><span class='line'>+        {error, {precommit_fail, Message}} -&gt;
</span><span class='line'>+            {{halt, 403}, send_precommit_error(RD, Message), Ctx};
</span><span class='line'>         {error, too_many_fails} -&gt;
</span><span class='line'>             {{halt, 503}, wrq:append_to_response_body(&quot;Too Many write failures&quot;
</span><span class='line'>                     &quot; to satisfy W/DW\n&quot;, RD), Ctx};
</span><span class='line'>diff -rupN riak-1.0.2-orig/rebar.config riak-1.0.2/rebar.config
</span><span class='line'>--- riak-1.0.2-orig/rebar.config  2011-11-18 05:17:47.000000000 +0900
</span><span class='line'>+++ riak-1.0.2/rebar.config   2011-12-11 13:28:21.000000000 +0900
</span><span class='line'>@@ -1,6 +1,6 @@
</span><span class='line'> {sub_dirs, [&quot;rel&quot;]}.
</span><span class='line'>
</span><span class='line'>-{require_otp_vsn, &quot;R14B0[23]&quot;}.
</span><span class='line'>+{require_otp_vsn, &quot;R14B0[234]&quot;}.
</span><span class='line'>
</span><span class='line'> {cover_enabled, true}.
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Apply it in the Riak 1.0.2 directory: <code>patch -p1 &lt; ../riak-1.0.2.patch</code>.</p>

<p>It can also be applied on a repository pulled from <a href="https://github.com/basho/riak">github</a>, but the
latest version has already the patch for Erlang R14B04, so you can
ignore that patch.</p>

<p><em>Update (2012/12/13):</em> my fix has been merged into the main Riak github repository,
so you no longer need to apply the patch if you get the latest source
by Git.</p>

<h3>Vector Clocks</h3>

<p><a href="http://en.wikipedia.org/wiki/Vector_clock">Vector clocks</a> are a
common mechanism to attach a precise time to events occurring
concurrently. By having each event producer keep tracks of the vector
clock of events it is responding to, it becomes possible to identify
sequences and branches in the timing of events (when running
concurrently, time is no longer linear, but can be a graph, or even
worse, a tree, where various participants ignore each other&#8217;s
responses).</p>

<p>In particular, vector clocks allow a participant to detect conflicts
in the data, and take remedial actions.</p>

<p>Unfortunately, the notion of conflict resolution is not trivial; and
with Riak all or nothing updates, there is almost no information left
to do a merge (with concurrent file modifications, on the other hand,
if the updated areas are different, it might be possible to apply both
changes to the original version, which is what version control systems
typically do).</p>

<p>It does not help that, once again, the example chosen by the authors
to illustrate the concept is poor: the idea that a score given by a
number of judges can simply be averaged when a conflict occurs gives a
rather weird meaning to the score. It would make more sense for each
score to be stored in a different property, and averaged when they are
all present&#8230;</p>

<p>It could have been useful to show how more elaborate data (with
multiple properties) can be merge based on the identity of the client
(the book passes a client id but does not use it afterwards, so it
might not be possible to retrieve it).</p>

<h3>Pre and post-commit hooks</h3>

<p>Riak allows code to be executed before and after changes on the
database. This is similar to checks and triggers in PostgreSQL, but
the post-commit hooks are more powerful as they can perform pretty
much anything (although I have not explored triggers in other
languages, such as Perl, Python, &#8230; that PostgreSQL supports).</p>

<p>Note: when I tried the example, I had a 500 Internal Server Error
instead of the expected 403 Forbidden return code. I eventually
tracked it down to a bug in the Erlang base code; see my explanations
above to install and patch Riak.</p>

<h3>Indexing and Searching</h3>

<p>Unlike what is stated in the first beta of the book, search is a
standard feature in Riak (at least 1.0.2). Just edit the <code>app.config</code>
file, look for search, and change the <code>enable</code> property to <code>true</code>.</p>

<p>Once search is enabled, it is recommended to change the index schema
to declare how to index and search various fields. Otherwise, the
search will not work as the book describes it. In particular, search
for a specific breed will not be case insensitive.</p>

<p>So, after enabling search in each server, I use the command
<code>dev1/bin/search-cmd install animals</code> to enable auto-indexing on data
updates (indexes can also be built from files, to the extent that you
have them).</p>

<p>Then I exported the default index with <code>dev1/bin/search-cmd get-schema
animals</code> (the output must be piped into a file).</p>

<p>I modified the file to add a declaration for the <code>breed</code> field,
following examples from the original
<a href="http://wiki.basho.com/Riak-Search---Schema.html">documentation</a>.</p>

<figure class='code'><figcaption><span>animals schema  (animals.json)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/riak/animals.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">%%</span> <span class="nx">Schema</span> <span class="k">for</span> <span class="s1">&#39;animals&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">schema</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">version</span><span class="p">,</span> <span class="s2">&quot;1.1&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">n_val</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">default_field</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;breed&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">]},</span>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_num&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_num&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_int&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_int&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_dt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_dt&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_date&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_date&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_txt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">full</span> <span class="nx">text</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">        {dynamic_field, [</span>
</span><span class='line'><span class="s2">            {name, &quot;</span><span class="o">*</span><span class="nx">_txt</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">            {type, string},</span>
</span><span class='line'><span class="s2">            {analyzer_factory, {erlang, text_analyzers, standard_analyzer_factory}}</span>
</span><span class='line'><span class="s2">        ]},</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        %% Field names ending in &quot;</span><span class="nx">_text</span><span class="s2">&quot; are indexed as full text&quot;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_text&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Everything</span> <span class="k">else</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">string</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I loaded the schema back into Riak with <code>dev1/bin/search-cmd set-schema animals animals.json</code></p>

<p>Now I can load the data as the book proposes (note that as I&#8217;m using
the standard <code>dev1</code> Riak server instead of a dedicated one, the port
is 8091 and not 8098).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X PUT http://127.0.0.1:8091/riak/animals/dragon \
</span><span class='line'>-H "Content-Type: application/json" \
</span><span class='line'>-d '{"nickname" : "Dragon", "breed" : "Briard", "score" : 1 }'
</span><span class='line'>$ curl -X PUT http://127.0.0.1:8091/riak/animals/ace \
</span><span class='line'>-H "Content-Type: application/json" \
</span><span class='line'>-d '{"nickname" : "The Wonder Dog", "breed" : "German Shepherd", "score" : 3 }'
</span><span class='line'>$ curl -X PUT http://127.0.0.1:8091/riak/animals/rtt \
</span><span class='line'>-H "Content-Type: application/json" \
</span><span class='line'>-d '{"nickname" : "Rin Tin Tin", "breed" : "German Shepherd", "score" : 4 }'</span></code></pre></td></tr></table></div></figure>


<p>And now the output of a search is as expected:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:8091/solr/animals/select?q=breed:shepherd
</span><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;response&gt;
</span><span class='line'>  &lt;lst name="responseHeader"&gt;
</span><span class='line'>    &lt;int name="status"&gt;0&lt;/int&gt;
</span><span class='line'>    &lt;int name="QTime"&gt;1&lt;/int&gt;
</span><span class='line'>    &lt;lst name="params"&gt;
</span><span class='line'>      &lt;str name="indent"&gt;on&lt;/str&gt;
</span><span class='line'>      &lt;str name="start"&gt;0&lt;/str&gt;
</span><span class='line'>      &lt;str name="q"&gt;breed:shepherd&lt;/str&gt;
</span><span class='line'>      &lt;str name="q.op"&gt;or&lt;/str&gt;
</span><span class='line'>      &lt;str name="filter"&gt;&lt;/str&gt;
</span><span class='line'>      &lt;str name="df"&gt;value&lt;/str&gt;
</span><span class='line'>      &lt;str name="wt"&gt;standard&lt;/str&gt;
</span><span class='line'>      &lt;str name="version"&gt;1.1&lt;/str&gt;
</span><span class='line'>      &lt;str name="rows"&gt;2&lt;/str&gt;
</span><span class='line'>    &lt;/lst&gt;
</span><span class='line'>  &lt;/lst&gt;
</span><span class='line'>  &lt;result name="response" numFound="2" start="0" maxScore="0.353553"&gt;
</span><span class='line'>    &lt;doc&gt;
</span><span class='line'>      &lt;str name="id"&gt;ace
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="breed"&gt;German Shepherd
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="nickname"&gt;The Wonder Dog
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="score"&gt;3
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>    &lt;/doc&gt;
</span><span class='line'>    &lt;doc&gt;
</span><span class='line'>      &lt;str name="id"&gt;rtt
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="breed"&gt;German Shepherd
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="nickname"&gt;Rin Tin Tin
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="score"&gt;4
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>    &lt;/doc&gt;
</span><span class='line'>  &lt;/result&gt;
</span><span class='line'>&lt;/response&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Exercises</h2>

<h3>Indexing on score</h3>

<p>For this I first modified the index schema again:</p>

<figure class='code'><figcaption><span>animals schema improved  (animals-score.json)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/riak/animals-score.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">%%</span> <span class="nx">Schema</span> <span class="k">for</span> <span class="s1">&#39;animals&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">schema</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">version</span><span class="p">,</span> <span class="s2">&quot;1.1&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">n_val</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">default_field</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;breed&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">]},</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;score&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]},</span>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_num&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_num&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_int&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_int&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_dt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_dt&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_date&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_date&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_txt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">full</span> <span class="nx">text</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">        {dynamic_field, [</span>
</span><span class='line'><span class="s2">            {name, &quot;</span><span class="o">*</span><span class="nx">_txt</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">            {type, string},</span>
</span><span class='line'><span class="s2">            {analyzer_factory, {erlang, text_analyzers, standard_analyzer_factory}}</span>
</span><span class='line'><span class="s2">        ]},</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        %% Field names ending in &quot;</span><span class="nx">_text</span><span class="s2">&quot; are indexed as full text&quot;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_text&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Everything</span> <span class="k">else</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">string</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I reentered the data (see above) to get it indexed.</p>

<p>Finally, I input a query in Firefox, to let it figure out the HTTP
escape characters. The result is used below with curl (both outputs
were identical):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8091/solr/animals/select?q=score:%5B2%20TO%204%5D
</span><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;response&gt;
</span><span class='line'>  &lt;lst name="responseHeader"&gt;
</span><span class='line'>    &lt;int name="status"&gt;0&lt;/int&gt;
</span><span class='line'>    &lt;int name="QTime"&gt;3&lt;/int&gt;
</span><span class='line'>    &lt;lst name="params"&gt;
</span><span class='line'>      &lt;str name="indent"&gt;on&lt;/str&gt;
</span><span class='line'>      &lt;str name="start"&gt;0&lt;/str&gt;
</span><span class='line'>      &lt;str name="q"&gt;score:[2 TO 4]&lt;/str&gt;
</span><span class='line'>      &lt;str name="q.op"&gt;or&lt;/str&gt;
</span><span class='line'>      &lt;str name="filter"&gt;&lt;/str&gt;
</span><span class='line'>      &lt;str name="df"&gt;value&lt;/str&gt;
</span><span class='line'>      &lt;str name="wt"&gt;standard&lt;/str&gt;
</span><span class='line'>      &lt;str name="version"&gt;1.1&lt;/str&gt;
</span><span class='line'>      &lt;str name="rows"&gt;2&lt;/str&gt;
</span><span class='line'>    &lt;/lst&gt;
</span><span class='line'>  &lt;/lst&gt;
</span><span class='line'>  &lt;result name="response" numFound="2" start="0" maxScore="0.00000e+0"&gt;
</span><span class='line'>    &lt;doc&gt;
</span><span class='line'>      &lt;str name="id"&gt;ace
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="breed"&gt;German Shepherd
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="nickname"&gt;The Wonder Dog
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;int name="score"&gt;3
</span><span class='line'>      &lt;/int&gt;
</span><span class='line'>    &lt;/doc&gt;
</span><span class='line'>    &lt;doc&gt;
</span><span class='line'>      &lt;str name="id"&gt;rtt
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="breed"&gt;German Shepherd
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;str name="nickname"&gt;Rin Tin Tin
</span><span class='line'>      &lt;/str&gt;
</span><span class='line'>      &lt;int name="score"&gt;4
</span><span class='line'>      &lt;/int&gt;
</span><span class='line'>    &lt;/doc&gt;
</span><span class='line'>  &lt;/result&gt;
</span><span class='line'>&lt;/response&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Distributed Riak</h3>

<p>I don&#8217;t see much of a problem with this, I&#8217;ll give it a try when I get
home. There are already 4 different development servers easily
available in a standard Riak package, so using one on each machine
would do the trick. Of course, when adding the various servers to the
ring, the hostname must be changed, but this should really be a piece
of cake.</p>

<h2>Wrapping up Riak</h2>

<p>It seems Riak is a low level data store that trades easy of use and
packaged features for high availability and flexible for
performance cost.</p>

<p>I can see how this could be in theory appealing in some circumstances,
but I don&#8217;t really see how to put such a framework to use.</p>

<p>SQL databases don&#8217;t just come with a nice engine optimised for
relational queries; they also come with decades of experience, general
guidelines for schema design and domain specific schema organisations.</p>

<p>All these contribute to make the meaning of the data clear and
useful. With Riak the quorum option can be used as a decision
mechanism, but beside it is not obvious what meaning to give to a
piece of information that has two or more concurrent variations. And
of course consistency can no longer be implemented on more than one key
no matter what.</p>

<p>This means that a solution based on Riak will be significantly
different from one using an SQL database. Perhaps it would feel more
natural to an object oriented programmer who thinks in terms of
objects and object references. But even in this context, the vector
clock based resolution should still be difficult to design properly.</p>

<p>The book in this regard fails even to acknowledge the problem; it
concentrates on tools but does not give any framework to guide in the
design of a solution built on Riak.</p>

<p>I still has to check the
<a href="http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html">Amazon Dynamo Paper</a>
and the other relevant literature, so I have hope yet I will come up with a
reasonable understanding of all this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-2/"/>
    <updated>2011-12-08T22:59:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-2</id>
    <content type="html"><![CDATA[<p>Day 2 with Riak, to cover Mapreduce, distribution, rings and consistency.</p>

<p>Mapreduce will be familiar to anyone who has been paying attention to Google. The basic idea comes from functional programming, but Google showed how it could be used to distribute the load over many machines (this in turn spawned two distinct recent developments in software: one is the range of databases explicitly built around the concept of Mapreduce; the other is the idea that functional languages are better suited to do concurrent and parallel programming).</p>

<!--more-->


<h3>A followup to yesterday simple trick</h3>

<p>There is an alternative, maybe even simpler than yesterday&#8217;s use of <code>python -mjson.tool</code>. It is shown (maybe a bit late) in the book: using an <code>Accept: text/plain</code> header in the HTTP request, as in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -H "Accept: text/plain" http://localhost:8091/stats</span></code></pre></td></tr></table></div></figure>


<p>This asks Riak to return plain text instead of json data; Riak helpfully interprets that as meaning the same data, but formatted for people. The advantage of this approach is that is still works even when <code>curl</code> generates extra output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -v -H "Accept: text/plain" http//localhost:8091/stats</span></code></pre></td></tr></table></div></figure>


<p>will both generate verbose debugging output, and get the data in human format.</p>

<h3>Nothing wrong with Mapreduce per se, but&#8230;</h3>

<p>I understand that the examples have to remain simple enough to be implementable on a (possible shared) single personal computer, but I still think that the authors are being dishonest when they contrast Mapreduce to an &#8220;SQL&#8221; based solution.</p>

<p>The problem with this solution is that it is just what a self-taught coder with no understanding of SQL might produced (ok, I&#8217;m being unfair. Some college educated programmer I have known actually write code like that as well). But this idea of pushing the code to the data instead of pulling the data to the code is exactly what a database like PostgreSQL does.</p>

<p>An actual SQL solution would be much simpler, would run fully in the database (no need for a script to create the initial data), and would deliver the data long before you&#8217;d be done coding and debugging the Javascript Mapreduce code.</p>

<figure class='code'><figcaption><span>A real SQL solution  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- SQL supports composite primary key, which this problem maps well to</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">hotel</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">floor</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">room</span>  <span class="nb">int</span>  <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">capacity</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">style</span> <span class="nb">char</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="k">CHECK</span> <span class="p">(</span><span class="n">style</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;single&#39;</span><span class="p">,</span> <span class="s1">&#39;double&#39;</span><span class="p">,</span> <span class="s1">&#39;queen&#39;</span><span class="p">,</span> <span class="s1">&#39;king&#39;</span><span class="p">,</span> <span class="s1">&#39;suite&#39;</span><span class="p">)</span> <span class="p">),</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">floor</span><span class="p">,</span> <span class="n">room</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- a simple function to provide a easy to use random range</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">random</span><span class="p">(</span><span class="nb">numeric</span><span class="p">,</span> <span class="nb">numeric</span><span class="p">)</span>
</span><span class='line'><span class="k">RETURNS</span> <span class="nb">numeric</span> <span class="k">AS</span>
</span><span class='line'><span class="err">$$</span>
</span><span class='line'>   <span class="k">SELECT</span> <span class="p">(</span><span class="err">$</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="err">$</span><span class="mi">2</span> <span class="o">-</span> <span class="err">$</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">random</span><span class="p">())::</span><span class="nb">numeric</span><span class="p">;</span>
</span><span class='line'><span class="err">$$</span> <span class="k">LANGUAGE</span> <span class="s1">&#39;sql&#39;</span> <span class="k">VOLATILE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- using generate_series and the random function above</span>
</span><span class='line'><span class="c1">-- to fill all the rooms, in pure PostgreSQL </span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">hotel</span> <span class="p">(</span><span class="n">floor</span><span class="p">,</span> <span class="n">room</span><span class="p">,</span> <span class="n">style</span><span class="p">,</span> <span class="n">capacity</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">SELECT</span> <span class="n">f</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="p">(</span><span class="nb">ARRAY</span><span class="p">[</span><span class="s1">&#39;single&#39;</span><span class="p">,</span> <span class="s1">&#39;double&#39;</span><span class="p">,</span> <span class="s1">&#39;queen&#39;</span><span class="p">,</span> <span class="s1">&#39;king&#39;</span><span class="p">,</span> <span class="s1">&#39;suite&#39;</span><span class="p">])[</span><span class="n">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span> <span class="n">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span> <span class="k">FROM</span>
</span><span class='line'>    <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span> <span class="k">AS</span> <span class="n">f</span><span class="p">,</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">99</span><span class="p">)</span> <span class="k">AS</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- the basic query</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">style</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">hotel</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">style</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- same query with filter</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">style</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">hotel</span> <span class="k">WHERE</span> <span class="n">floor</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">style</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It does not help that actually testing the code on Riak, I had to wait about 10 seconds while PostgreSQL answer was immediate. Of course, I have 3 instances of Riak on a single machine, which is certainly not a typical setup.</p>

<p>Riak is on a specific point among the trade off line to which data stores are constrained by the <a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP theorem</a>. It would have been better to work on an example (maybe using more complex data, loaded from a file, like the movie database in PostgreSQL Day 3) that plays into Riak strengths rather showing how badly it performs compared to a much easier and more natural solution in SQL.</p>

<p>It might have been enough to ask the reader to imagine the dataset to be so large that it could not fit in a single server (for instance, a simulation of the <a href="http://en.wikipedia.org/wiki/Hilbert's_paradox_of_the_Grand_Hotel">Hilbert&#8217;s Hotel</a>), or to simulate a rocky network by shutting down some nodes at awkward moments, and show how Riak still delivers the goods. In such conditions most SQL databases would start to show their limits, and these would be legitimate.</p>

<h3>Another comment on the example</h3>

<p>If you run all the examples and the exercises, you will notice something interesting: there is a floor 101. That&#8217;s actually a bug in the initial seeding script: the room number should range over 0 to 99, not 1 to 100. Mapping composite keys to a single value is not always safe. Oh well&#8230;</p>

<p>I&#8217;ve changed my script after I went through everything, rebuild the data, and ran everything again.</p>

<figure class='code'><figcaption><span>Updated seeding script  (hotel.rb)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/riak/hotel.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># generate loads and loads of rooms with random styles and capacities</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ripple&#39;</span>
</span><span class='line'><span class="no">STYLES</span> <span class="o">=</span> <span class="sx">%w{single double queen king suite}</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:http_port</span> <span class="o">=&gt;</span> <span class="mi">8091</span><span class="p">)</span>
</span><span class='line'><span class="n">bucket</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="s1">&#39;rooms&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># Create 100 floors to the building</span>
</span><span class='line'><span class="k">for</span> <span class="n">floor</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span>
</span><span class='line'>  <span class="n">current_rooms_block</span> <span class="o">=</span> <span class="n">floor</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Making rooms </span><span class="si">#{</span><span class="n">current_rooms_block</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">current_rooms_block</span> <span class="o">+</span> <span class="mi">99</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="c1"># Put 100 rooms on each floor (huge hotel!)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">room</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">99</span>
</span><span class='line'>    <span class="c1"># Create a unique room number as the key</span>
</span><span class='line'>    <span class="n">ro</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">RObject</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="p">(</span><span class="n">current_rooms_block</span> <span class="o">+</span> <span class="n">room</span><span class="p">))</span>
</span><span class='line'>    <span class="c1"># Randomly grab a room style, and make up a capacity</span>
</span><span class='line'>    <span class="n">style</span> <span class="o">=</span> <span class="no">STYLES</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">STYLES</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="n">capacity</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="c1"># Store the room information as a JSON value </span>
</span><span class='line'>    <span class="n">ro</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s2">&quot;application/json&quot;</span>
</span><span class='line'>    <span class="n">ro</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;style&#39;</span> <span class="o">=&gt;</span> <span class="n">style</span><span class="p">,</span> <span class="s1">&#39;capacity&#39;</span> <span class="o">=&gt;</span> <span class="n">capacity</span><span class="p">}</span>
</span><span class='line'>    <span class="n">ro</span><span class="o">.</span><span class="n">store</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Partial updates are not supported, unless they are</h3>

<p>So I said yesterday that partial updates are not supported. And if they are, I really have not found a way to get them to work.</p>

<p>Except for buckets. You can update properties of a bucket without having to specify every one of them. Which is good. But still, it might have been good for the rest of the data to have this feature.</p>

<p>The fact that the properties of buckets are probably fixed, meaning you can&#8217;t remove any, makes a partial update non ambiguous. Supporting partial updates on generic data would require a way to specify whether the update was complete or partial, and a way to remove properties. I can see why Riak designers chose not to go that way, but it still feels a bit ad hoc overall.</p>

<h3>CAP choices</h3>

<p>The section called &#8220;On Consistency and Durability&#8221; is more interesting, and better shows which features Riak attempts to provide.</p>

<p>The ability to choose from various strategies to implement consistency and durability certainly introduces additional ways to make a mistake, but it also offers flexibility where the relational databases typically offer little.</p>

<h2>Exercises</h2>

<h3>Online Riak Mapreduce documentation</h3>

<p>The documentation is <a href="http://wiki.basho.com/MapReduce.html">http://wiki.basho.com/MapReduce.html</a>.</p>

<h3>Riak contrib functions</h3>

<p>Google is a good friend. The central <a href="http://contrib.basho.com/">site</a> and the <a href="https://github.com/basho/riak_function_contrib">repository</a>.</p>

<h3>Keys filter documentation</h3>

<p><a href="http://wiki.basho.com/Key-Filters.html">http://wiki.basho.com/Key-Filters.html</a></p>

<h3>Total capacity by floor</h3>

<p>The first step is to map the original data to an array of capacity indexed by floor. What has not been seen so far is how to get the <code>key</code> of an object, but it is just another property (directly in <code>v</code>, not in the <code>values</code> array):</p>

<figure class='code'><figcaption><span>Mapping data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">parsed_data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">floor</span> <span class="o">=</span> <span class="o">~~</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">data</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parsed_data</span><span class="p">.</span><span class="nx">capacity</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">data</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A quick test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
</span><span class='line'>{
</span><span class='line'>  "inputs":[
</span><span class='line'>    ["rooms","101"],["rooms","102"],["rooms","103"]],
</span><span class='line'>  "query":[
</span><span class='line'>    {"map":{
</span><span class='line'>      "language":"javascript",
</span><span class='line'>      "source":
</span><span class='line'>      "function(v) {
</span><span class='line'>        var parsed_data = JSON.parse(v.values[0].data); 
</span><span class='line'>        var data = {};
</span><span class='line'>        var floor = ~~(parseInt(v.key) / 100);
</span><span class='line'>        data[floor] = parsed_data.capacity; 
</span><span class='line'>        return [data];
</span><span class='line'>      }"}
</span><span class='line'>  } ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>[{"1":3},{"1":2},{"1":2}]</span></code></pre></td></tr></table></div></figure>


<p>Ok, looking good. Now the <code>reduce</code> part. It is strictly identical to the book&#8217;s <code>reduce</code> function, but I just renamed some variables to make it clear what is being iterated over:</p>

<figure class='code'><figcaption><span>Reducing data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">totals</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">floor</span> <span class="k">in</span> <span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="nx">totals</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>        <span class="nx">totals</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">floor</span><span class="p">];</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">totals</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">floor</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">totals</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
</span><span class='line'>{
</span><span class='line'>  "inputs":[
</span><span class='line'>    ["rooms","101"],["rooms","102"],["rooms","103"]],
</span><span class='line'>  "query":[
</span><span class='line'>    {"map":{
</span><span class='line'>      "language":"javascript",
</span><span class='line'>      "source":
</span><span class='line'>      "function(v) {
</span><span class='line'>        var parsed_data = JSON.parse(v.values[0].data); 
</span><span class='line'>        var data = {};
</span><span class='line'>        var floor = ~~(parseInt(v.key) / 100);
</span><span class='line'>        data[floor] = parsed_data.capacity; 
</span><span class='line'>        return [data];
</span><span class='line'>      }"}
</span><span class='line'>  },
</span><span class='line'>  {"reduce": {
</span><span class='line'>      "language": "javascript",
</span><span class='line'>      "source":
</span><span class='line'>        "function(v) {
</span><span class='line'>            var totals = {};
</span><span class='line'>            for (var i in v) {
</span><span class='line'>              for(var floor in v[i]) {
</span><span class='line'>                if( totals[floor] ) 
</span><span class='line'>                  totals[floor] += v[i][floor];
</span><span class='line'>                else
</span><span class='line'>                  totals[floor] = v[i][floor];
</span><span class='line'>              } 
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            return [totals];
</span><span class='line'>          }"}
</span><span class='line'>  } ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>[{"1":7}]</span></code></pre></td></tr></table></div></figure>


<p>Ok, still looking good. Let&#8217;s run it on the whole set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
</span><span class='line'>{
</span><span class='line'>  "inputs":"rooms",
</span><span class='line'>  "query":[
</span><span class='line'>    {"map":{
</span><span class='line'>      "language":"javascript",
</span><span class='line'>      "source":
</span><span class='line'>      "function(v) {
</span><span class='line'>        var parsed_data = JSON.parse(v.values[0].data); 
</span><span class='line'>        var data = {};
</span><span class='line'>        var floor = ~~(parseInt(v.key) / 100);
</span><span class='line'>        data[floor] = parsed_data.capacity; 
</span><span class='line'>        return [data];
</span><span class='line'>      }"}
</span><span class='line'>  },
</span><span class='line'>  {"reduce": {
</span><span class='line'>      "language": "javascript",
</span><span class='line'>      "source":
</span><span class='line'>        "function(v) {
</span><span class='line'>            var totals = {};
</span><span class='line'>            for (var i in v) {
</span><span class='line'>              for(var floor in v[i]) {
</span><span class='line'>                if( totals[floor] ) 
</span><span class='line'>                  totals[floor] += v[i][floor];
</span><span class='line'>                else
</span><span class='line'>                  totals[floor] = v[i][floor];
</span><span class='line'>              } 
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            return [totals];
</span><span class='line'>          }"}
</span><span class='line'>  } ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>[
</span><span class='line'>    {
</span><span class='line'>        "1": 456, 
</span><span class='line'>        "10": 445, 
</span><span class='line'>        "100": 452, 
</span><span class='line'>        "11": 448, 
</span><span class='line'>        "12": 482, 
</span><span class='line'>        "13": 452, 
</span><span class='line'>        "14": 489, 
</span><span class='line'>        "15": 467, 
</span><span class='line'>        "16": 461, 
</span><span class='line'>        "17": 471, 
</span><span class='line'>        "18": 426, 
</span><span class='line'>        "19": 426, 
</span><span class='line'>        "2": 394, 
</span><span class='line'>        "20": 413, 
</span><span class='line'>        "21": 428, 
</span><span class='line'>        "22": 460, 
</span><span class='line'>        "23": 447, 
</span><span class='line'>        "24": 443, 
</span><span class='line'>        "25": 430, 
</span><span class='line'>        "26": 430, 
</span><span class='line'>        "27": 447, 
</span><span class='line'>        "28": 486, 
</span><span class='line'>        "29": 429, 
</span><span class='line'>        "3": 437, 
</span><span class='line'>        "30": 434, 
</span><span class='line'>        "31": 415, 
</span><span class='line'>        "32": 483, 
</span><span class='line'>        "33": 460, 
</span><span class='line'>        "34": 440, 
</span><span class='line'>        "35": 519, 
</span><span class='line'>        "36": 492, 
</span><span class='line'>        "37": 422, 
</span><span class='line'>        "38": 413, 
</span><span class='line'>        "39": 439, 
</span><span class='line'>        "4": 451, 
</span><span class='line'>        "40": 440, 
</span><span class='line'>        "41": 458, 
</span><span class='line'>        "42": 386, 
</span><span class='line'>        "43": 488, 
</span><span class='line'>        "44": 428, 
</span><span class='line'>        "45": 423, 
</span><span class='line'>        "46": 487, 
</span><span class='line'>        "47": 463, 
</span><span class='line'>        "48": 408, 
</span><span class='line'>        "49": 422, 
</span><span class='line'>        "5": 417, 
</span><span class='line'>        "50": 464, 
</span><span class='line'>        "51": 434, 
</span><span class='line'>        "52": 429, 
</span><span class='line'>        "53": 468, 
</span><span class='line'>        "54": 412, 
</span><span class='line'>        "55": 440, 
</span><span class='line'>        "56": 427, 
</span><span class='line'>        "57": 458, 
</span><span class='line'>        "58": 420, 
</span><span class='line'>        "59": 438, 
</span><span class='line'>        "6": 426, 
</span><span class='line'>        "60": 464, 
</span><span class='line'>        "61": 446, 
</span><span class='line'>        "62": 412, 
</span><span class='line'>        "63": 431, 
</span><span class='line'>        "64": 445, 
</span><span class='line'>        "65": 435, 
</span><span class='line'>        "66": 444, 
</span><span class='line'>        "67": 449, 
</span><span class='line'>        "68": 460, 
</span><span class='line'>        "69": 474, 
</span><span class='line'>        "7": 436, 
</span><span class='line'>        "70": 473, 
</span><span class='line'>        "71": 431, 
</span><span class='line'>        "72": 457, 
</span><span class='line'>        "73": 426, 
</span><span class='line'>        "74": 454, 
</span><span class='line'>        "75": 463, 
</span><span class='line'>        "76": 406, 
</span><span class='line'>        "77": 464, 
</span><span class='line'>        "78": 441, 
</span><span class='line'>        "79": 502, 
</span><span class='line'>        "8": 421, 
</span><span class='line'>        "80": 477, 
</span><span class='line'>        "81": 422, 
</span><span class='line'>        "82": 441, 
</span><span class='line'>        "83": 466, 
</span><span class='line'>        "84": 447, 
</span><span class='line'>        "85": 488, 
</span><span class='line'>        "86": 486, 
</span><span class='line'>        "87": 414, 
</span><span class='line'>        "88": 463, 
</span><span class='line'>        "89": 494, 
</span><span class='line'>        "9": 446, 
</span><span class='line'>        "90": 441, 
</span><span class='line'>        "91": 459, 
</span><span class='line'>        "92": 433, 
</span><span class='line'>        "93": 488, 
</span><span class='line'>        "94": 450, 
</span><span class='line'>        "95": 442, 
</span><span class='line'>        "96": 479, 
</span><span class='line'>        "97": 460, 
</span><span class='line'>        "98": 429, 
</span><span class='line'>        "99": 445
</span><span class='line'>    }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h3>Restrict the capacity count to floors 42 and 43</h3>

<p>It should be enough that the key be between 4200 and 4390:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
</span><span class='line'>{
</span><span class='line'>  "inputs":{
</span><span class='line'>  "bucket": "rooms",
</span><span class='line'>  "key_filters": [["string_to_int"], ["between", 4200, 4399]]
</span><span class='line'>  },
</span><span class='line'>  "query":[
</span><span class='line'>    {"map":{
</span><span class='line'>      "language":"javascript",
</span><span class='line'>      "source":
</span><span class='line'>      "function(v) {
</span><span class='line'>        var parsed_data = JSON.parse(v.values[0].data); 
</span><span class='line'>        var data = {};
</span><span class='line'>        var floor = ~~(parseInt(v.key) / 100);
</span><span class='line'>        data[floor] = parsed_data.capacity; 
</span><span class='line'>        return [data];
</span><span class='line'>      }"}
</span><span class='line'>  },
</span><span class='line'>  {"reduce": {
</span><span class='line'>      "language": "javascript",
</span><span class='line'>      "source":
</span><span class='line'>        "function(v) {
</span><span class='line'>            var totals = {};
</span><span class='line'>            for (var i in v) {
</span><span class='line'>              for(var floor in v[i]) {
</span><span class='line'>                if( totals[floor] ) 
</span><span class='line'>                  totals[floor] += v[i][floor];
</span><span class='line'>                else
</span><span class='line'>                  totals[floor] = v[i][floor];
</span><span class='line'>              } 
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            return [totals];
</span><span class='line'>          }"}
</span><span class='line'>  } ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Ctrl-D
</span><span class='line'>
</span><span class='line'>[{"42":386,"43":488}]</span></code></pre></td></tr></table></div></figure>


<p>The output matches what was computed for the whole set of rooms, which is always a good thing.</p>

<p>And this completes Day 2. I must admit I have so far mixed feelings: I understand better what Riak tries to achieve, but the example is just not the kind of things Riak should be used for, and the Mapreduce syntax is a bit heavy (although, fortunately, very regular).</p>

<p>Tomorrow will cover Vector Clocks, the mechanism that Riak exposes both to move conflicts resolution to the client side, and to help the client to implement a decent resolution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-1/"/>
    <updated>2011-12-08T10:22:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-1</id>
    <content type="html"><![CDATA[<p>The second database is <a href="http://basho.com/products/riak-overview/">Riak</a>, a key-value distributed store. Key-value stores a not really new (many property or configuration files are really basic key-value stores, and <a href="http://en.wikipedia.org/wiki/Berkeley_DB">Berkeley DB</a> has long been a good choice for those who needed something a little bit more robust than simple files but not as complex as a relational database).</p>

<p>Still, going from this simple concept to a distributed store that can execute data processing on each of its nodes requires more than simply scaling things up, and I hope that this book will give me some idea of how such a store (and the other NoSQL) might fit in the solution landscape.</p>

<!--more-->


<p>
But that is probably getting a bit ahead of myself; right now I&#8217;d be happy just to know how to use Riak.</p>

<p>The client can be the simple <a href="http://curl.haxx.se/"><code>cURL</code></a> command, as Riak&#8217;s interface is based on HTTP. This simplifies the technical stack, but pushes some of the complexity on the client. It is clear that Riak will not provide anything as easy and convenient as PostgreSQL&#8217;s <code>psql</code>.</p>

<p>Riak&#8217;s basic API is a REST based CRUD (with Create being pretty much the same as Update). Additional attributes, such as meta-data or the more important links are passed as headers in the HTTP request.</p>

<p>It is simple, but somewhat inconvenient: there is no concept of partial update. When you want to update an object, you need to pass all the relevant data: meta-data, links, and content. Forget to mention one, and Riak will forget it too.</p>

<h3>When was this book written?</h3>

<p>I had <a href="">noticed</a> that the book refers to PostgreSQL 9.0 when <a href="http://www.postgresql.org/docs/9.1/static/release-9-1-2.html">9.1</a> has been out for a while. In this chapter on Riak, the author uses an apparently old format for the URLs, <code>/riak/bucket/key</code>, whereas the <a href="http://wiki.basho.com/HTTP-Store-Object.html">official documentation</a> recommends <code>/buckets/bucket/keys/key</code> (for instance, <code>/buckets/animals/keys/polly</code>). Both formats can be used and are interoperable, but there is no need to teach already deprecated formats.</p>

<p>Of course, I found out about this new format after I completed all the exercises for today. So I will still use the old format for today.</p>

<p>Presumably this will be fixed by the time the book gets published.</p>

<h3>Simple but useful trick</h3>

<p>Reading unformatted JSON data can be difficult. I found that Python provides a simple way to pretty print JSON output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>(there are certainly other tools. Python is just the first one I came upon). To turn this into a simple, easy to use command, I added this to my <code>.profile</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias ppjs='python -mjson.tool'
</span><span class='line'>alias ppjsless='python -mjson.tool | less'</span></code></pre></td></tr></table></div></figure>


<p>That way, I can just pipe the output of <code>curl</code> into <code>ppjsless</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8091/stats | ppjsless</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This unfortunately does not work with <code>curl</code> additional output (such as HTTP headers).</p>

<h2>Exercises</h2>

<h3>Online documentation</h3>

<p>The root of the wiki is <a href="http://wiki.basho.com/">here</a>, and the HTTP (not just REST) API is <a href="http://wiki.basho.com/HTTP-API.html">here</a>.</p>

<h3>Mime types</h3>

<p>As always, <a href="http://en.wikipedia.org/wiki/Internet_media_type">Wikipedia</a> is very useful.</p>

<h3>Differences between the dev1, dev2 and dev3 servers</h3>

<p>The only difference is the port number. But there is some intelligence in the startup script to map each server to its own directory for permanent storage.</p>

<h3>Link from Polly to her picture</h3>

<p>This creates the link. Note, as I mentioned above, that the content needs to be repeated. Putting no body would cause a <code>curl</code> error (as an HTTP <code>PUT</code> request must have a body):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X PUT http://localhost:8091/riak/animals/polly \
</span><span class='line'>-H "Content-type: application/json" \
</span><span class='line'>-H "Link: &lt;/riak/photo/polly.jpg&gt;; riaktag=\"photo\"" \
</span><span class='line'>-d '{"nickname" : "Sweet Polly Purebred", "breed" : "Purebred"}'</span></code></pre></td></tr></table></div></figure>


<p>The image can be retrived from Polly by following the link:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8091/riak/animals/polly/_,photo,_</span></code></pre></td></tr></table></div></figure>


<p>or, using the new format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8091/buckets/animals/keys/polly/_,photo,_</span></code></pre></td></tr></table></div></figure>


<h3><code>POST</code> a new type of document</h3>

<p>Here I upload the Seven Databases in Seven Weeks (legal) PDF:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X POST http://localhost:8091/riak/documents \
</span><span class='line'>-H "Content-type: application/pdf" \
</span><span class='line'>--data-binary @seven-databases-in-seven-weeks_b1_0.pdf </span></code></pre></td></tr></table></div></figure>


<p>I use the <code>-i</code> option to retrieve the HTTP headers of the response and get the generated key. The command above has this output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 100 Continue
</span><span class='line'>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Vary: Accept-Encoding
</span><span class='line'>Server: MochiWeb/1.1 WebMachine/1.9.0 (someone had painted it blue)
</span><span class='line'>Location: /riak/documents/6WCpgTjMpvHiojiHeH7vsGBXdHC
</span><span class='line'>Date: Thu, 08 Dec 2011 09:16:18 GMT
</span><span class='line'>Content-Type: application/pdf
</span><span class='line'>Content-Length: 0</span></code></pre></td></tr></table></div></figure>


<p>Otherwise, I could list the keys for this bucket:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost:8091/riak/documents?keys=true | ppjs
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>    "keys": [
</span><span class='line'>        "6WCpgTjMpvHiojiHeH7vsGBXdHC"
</span><span class='line'>    ], 
</span><span class='line'>    "props": {
</span><span class='line'>        "allow_mult": false, 
</span><span class='line'>        "basic_quorum": false, 
</span><span class='line'>        "big_vclock": 50, 
</span><span class='line'>        "chash_keyfun": {
</span><span class='line'>            "fun": "chash_std_keyfun", 
</span><span class='line'>            "mod": "riak_core_util"
</span><span class='line'>        }, 
</span><span class='line'>        "dw": "quorum", 
</span><span class='line'>        "last_write_wins": false, 
</span><span class='line'>        "linkfun": {
</span><span class='line'>            "fun": "mapreduce_linkfun", 
</span><span class='line'>            "mod": "riak_kv_wm_link_walker"
</span><span class='line'>        }, 
</span><span class='line'>        "n_val": 3, 
</span><span class='line'>        "name": "documents", 
</span><span class='line'>        "notfound_ok": true, 
</span><span class='line'>        "old_vclock": 86400, 
</span><span class='line'>        "postcommit": [], 
</span><span class='line'>        "pr": 0, 
</span><span class='line'>        "precommit": [], 
</span><span class='line'>        "pw": 0, 
</span><span class='line'>        "r": "quorum", 
</span><span class='line'>        "rw": "quorum", 
</span><span class='line'>        "small_vclock": 10, 
</span><span class='line'>        "w": "quorum", 
</span><span class='line'>        "young_vclock": 20
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>I can use the URL below to retrieve the document in a browser:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8091/riak/documents/6WCpgTjMpvHiojiHeH7vsGBXdHC</span></code></pre></td></tr></table></div></figure>


<h3><code>PUT</code> a medecine image and link to Ace</h3>

<p>Once again, nothing too complex, but everything has to be done at the same time, as partial updates are not possible:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X PUT http://localhost:8091/riak/medecine/antibiotics \
</span><span class='line'>-H "Content-type: image/jpeg" -H "Link: &lt;/riak/animals/ace&gt;; riaktag=\"for\"" \
</span><span class='line'>--data-binary @medecine.jpg </span></code></pre></td></tr></table></div></figure>


<p>Then the image itself can be retrieve at:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8091/riak/medecine/antibiotics</span></code></pre></td></tr></table></div></figure>


<p>Finally, I can get the poor patient by following links:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:8091/riak/medecine/antibiotics/animals,for,_
</span><span class='line'>
</span><span class='line'>--ZhESIca7K0r54xNT0w737ZZDbvl
</span><span class='line'>Content-Type: multipart/mixed; boundary=WZgHw2YUOMNtda2iM46bNdvXxt7
</span><span class='line'>
</span><span class='line'>--WZgHw2YUOMNtda2iM46bNdvXxt7
</span><span class='line'>X-Riak-Vclock: a85hYGBgzGDKBVIcR4M2cvvdjT+YwZTImsfKUDcx5ARfFgA=
</span><span class='line'>Location: /riak/animals/ace
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Link: &lt;/riak/animals&gt;; rel="up"
</span><span class='line'>Etag: 6egZ1heUAPW7DEy0HjO7K0
</span><span class='line'>Last-Modified: Thu, 08 Dec 2011 01:40:14 GMT
</span><span class='line'>
</span><span class='line'>{"nickname" : "The Wonder Dog", "breed" : "German Shepherd"}
</span><span class='line'>--WZgHw2YUOMNtda2iM46bNdvXxt7--
</span><span class='line'>
</span><span class='line'>--ZhESIca7K0r54xNT0w737ZZDbvl--</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 1. The basic REST API is not complex, but its simplicity cuts both ways. There is a lot of typing required; I expect client libraries to be much easier to use, at the cost of having to write an application or script to do anything.</p>

<p>Tomorrow will cover MapReduce in the context of Riak.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/04/seven-databases-in-seven-weeks-postgresql-day-3/"/>
    <updated>2011-12-04T20:19:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/04/seven-databases-in-seven-weeks-postgresql-day-3</id>
    <content type="html"><![CDATA[<p>Third and final day with PostgreSQL. Today all kind of text and other fancy searches are looked at. Here the SQL standard is resolutely left behind, as pretty much everything is PostgreSQL specific.</p>

<p>PostgreSQL manages advanced index data structures that allow it to efficiently query data using something better than basic comparisons. It especially shines in its handling of geospatial data (searching by distance is a non-trivial problem), but has many options for text searches as well.</p>

<!--more-->


<p>Now, it can be easy to get carried away and try to use PostgreSQL for everything, even when a superior alternative option exists. If I had any need for a full text search, I would also look at <a href="http://lucene.apache.org/java/docs/index.html">Lucene</a> and related options. But PostgreSQL can still provide an easy, integrated solution for many situations.</p>

<h3>On indexes</h3>

<p>Indexes are not like pixie dust: you cannot just add some and hope all your performance problems will go away (as I learned the hard way). Benchmarks and the <a href="http://www.postgresql.org/docs/current/static/sql-explain.html"><code>EXPLAIN</code></a> command must be used to confirm the improvements brought by any index.</p>

<p>This section is based on the first beta version of the book. I hope they fill clarify this part in the final version.</p>

<p>First, let&#8217;s look a bit more at the fist index introduced today:</p>

<figure class='code'><figcaption><span>Text Pattern index  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">movies_title_pattern</span> <span class="k">ON</span> <span class="n">movies</span> <span class="p">(</span><span class="n">title</span> <span class="n">text_pattern_ops</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The book states that is creates an index for pattern matching. Think about it for a few seconds, try to imagine what it would look like&#8230; Yes, the solution is not trivial, so being able to index for pattern matching sounds like magic. Or pixie dust. But does it work?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT title FROM movies WHERE title ILIKE 'stardust_%';
</span><span class='line'>                       QUERY PLAN                        
</span><span class='line'>---------------------------------------------------------
</span><span class='line'> Seq Scan on movies  (cost=0.00..160.76 rows=1 width=15)
</span><span class='line'>   Filter: (title ~~* 'stardust_%'::text)
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>It seems that no, it does not work. The optimizer proposes to use a sequential scan, not an index.</p>

<p>The problem here is that <code>ILIKE</code> is not really supported by the optimizer. It is a PostgreSQL extension which, while useful, is not that well integrated. The standard (and SQL compliant) way to do a case insensitive search is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT title FROM movies WHERE lower(title) LIKE 'stardust_%';
</span><span class='line'>                        QUERY PLAN                        
</span><span class='line'>----------------------------------------------------------
</span><span class='line'> Seq Scan on movies  (cost=0.00..167.91 rows=14 width=15)
</span><span class='line'>   Filter: (lower(title) ~~ 'stardust_%'::text)
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>Ok, not quite there yet. But that&#8217;s normal. We are not using the column directly, so an index on the original values is not going to work. However PostgreSQL has a very nice feature called functional index: it is possible to create an index on the result of a function. Let&#8217;s drop the original index and create one with <code>lower(title)</code> as the indexed value:</p>

<figure class='code'><figcaption><span>Case insensitive Pattern index  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DROP</span> <span class="k">INDEX</span> <span class="n">movies_title_pattern</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">movies_title_pattern</span> <span class="k">ON</span> <span class="n">movies</span> <span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="n">text_pattern_ops</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does it look better now?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT title FROM movies WHERE lower(title) LIKE 'stardust_%';
</span><span class='line'>                                             QUERY PLAN                                             
</span><span class='line'>----------------------------------------------------------------------------------------------------
</span><span class='line'> Bitmap Heap Scan on movies  (cost=4.40..46.55 rows=14 width=15)
</span><span class='line'>   Filter: (lower(title) ~~ 'stardust_%'::text)
</span><span class='line'>   -&gt;  Bitmap Index Scan on movies_title_pattern  (cost=0.00..4.40 rows=14 width=0)
</span><span class='line'>         Index Cond: ((lower(title) ~&gt;=~ 'stardust'::text) AND (lower(title) ~&lt;~ 'stardusu'::text))
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>Yes, that&#8217;s better. What about <code>ILIKE</code>?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT title FROM movies WHERE title ILIKE 'stardust_%';
</span><span class='line'>                       QUERY PLAN                        
</span><span class='line'>---------------------------------------------------------
</span><span class='line'> Seq Scan on movies  (cost=0.00..160.76 rows=1 width=15)
</span><span class='line'>   Filter: (title ~~* 'stardust_%'::text)
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>No, it still cannot use the index.</p>

<p>What about the regular expression query?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT COUNT(*) FROM movies WHERE title !~* '^the.*';
</span><span class='line'>                           QUERY PLAN                            
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'> Aggregate  (cost=166.32..166.33 rows=1 width=0)
</span><span class='line'>   -&gt;  Seq Scan on movies  (cost=0.00..160.76 rows=2225 width=0)
</span><span class='line'>         Filter: (title !~* '^the.*'::text)
</span><span class='line'>(3 rows)</span></code></pre></td></tr></table></div></figure>


<p>No, it does not like the case insensitive operator. Would a <code>lower(title)</code> conversion work?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT COUNT(*) FROM movies WHERE lower(title) !~ '^the.*';
</span><span class='line'>                           QUERY PLAN                            
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'> Aggregate  (cost=175.03..175.04 rows=1 width=0)
</span><span class='line'>   -&gt;  Seq Scan on movies  (cost=0.00..167.91 rows=2847 width=0)
</span><span class='line'>         Filter: (lower(title) !~ '^the.*'::text)
</span><span class='line'>(3 rows)</span></code></pre></td></tr></table></div></figure>


<p>Still not. Well, we&#8217;re not looking for a particular pattern, but for everything else. A negation is not easy to propagate through the optimizer logic, so it should not be surprising that it still cannot use the index. But this (almost) similar query does:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# EXPLAIN SELECT COUNT(*) FROM movies WHERE lower(title) ~ '^the.*';
</span><span class='line'>                                           QUERY PLAN                                           
</span><span class='line'>------------------------------------------------------------------------------------------------
</span><span class='line'> Aggregate  (cost=46.59..46.60 rows=1 width=0)
</span><span class='line'>   -&gt;  Bitmap Heap Scan on movies  (cost=4.40..46.55 rows=14 width=0)
</span><span class='line'>         Filter: (lower(title) ~ '^the.*'::text)
</span><span class='line'>         -&gt;  Bitmap Index Scan on movies_title_pattern  (cost=0.00..4.40 rows=14 width=0)
</span><span class='line'>               Index Cond: ((lower(title) ~&gt;=~ 'the'::text) AND (lower(title) ~&lt;~ 'thf'::text))
</span><span class='line'>(5 rows)</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, the trigram based index can help <code>ILIKE</code> queries as explained <a href="http://www.postgresonline.com/journal/archives/212-PostgreSQL-9.1-Trigrams-teaching-LIKE-and-ILIKE-new-tricks.html">here</a> (in general, the <a href="http://www.postgresonline.com/">Postgres OnLine Journal</a> is a very good resource on PostgreSQL more advanced features).</p>

<p>But the general conclusion and take-home lesson is that adding indexes without checking their impact on queries is more than useless: it adds cost on data creation and update, with no compensation at query time.</p>

<h2>Exercises</h2>

<h3>Contributed Packages</h3>

<p>The contributed packages shipped with PostgreSQL are documented <a href="http://www.postgresql.org/docs/current/static/contrib.html">here</a>.</p>

<h3>POSIX Regex</h3>

<p>The Wikipedia <a href="http://en.wikipedia.org/wiki/Regular_expression#Syntax">page</a> on the topic is already very good.</p>

<h3>Stored Procedure based movie recommendation</h3>

<p>I&#8217;m assuming the name of an actor or movie can have errors (after all, end users are known to make and cause errors). The first step will be to identify whether the name is closer to an actor&#8217;s name or a movie&#8217;s name. The second step will use existing queries to either propose 5 movies from the same actor if the name was closer to an actor&#8217;s name or 5 similar movies (using the cube bounding technique) if the name was closer to a movie&#8217;s.</p>

<p>The use of <code>UNION</code> over several strategies to identify either movies or actors gives a lot of freedom. I use the <code>levenshtein</code> function to select the best match identified by each strategy.</p>

<p>Also, because the full text search query must have a specific format (for instance, each search term must be separated by <code>&amp;</code>), I use a few text replacement functions to clean up the input search.</p>

<p>Finally, the return value is a <code>setof</code> <code>movies</code>. The meaning is that I will return rows that have the same type as rows from the <code>movies</code> table. If the query was simple, I could just use the <code>SELECT</code> statement as the body for the function, but as I have to chose between queries, I use the <a href=""><code>RETURN NEXT</code></a> command instead. Explanations can be found in the fine PostgreSQL <a href="http://www.postgresql.org/docs/current/static/plpgsql-control-structures.html">manual</a>.</p>

<figure class='code'><figcaption><span>suggestMovies function  (suggest_movies.sql)</span> <a href='http://blog.wakatta.jp/downloads/code/7d7w/postgresql/suggest_movies.sql'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">suggest_movies</span><span class="p">(</span><span class="k">search</span> <span class="nb">text</span><span class="p">)</span>
</span><span class='line'><span class="k">RETURNS</span> <span class="k">SETOF</span> <span class="n">movies</span> <span class="k">AS</span> <span class="err">$$</span>
</span><span class='line'><span class="k">DECLARE</span>
</span><span class='line'>  <span class="n">found_name</span> <span class="nb">text</span><span class="p">;</span>
</span><span class='line'>  <span class="n">found_type</span> <span class="nb">char</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">tempmovie</span> <span class="n">movies</span><span class="o">%</span><span class="n">rowtype</span><span class="p">;</span>
</span><span class='line'>  <span class="n">movie_query</span> <span class="n">tsquery</span><span class="p">;</span>
</span><span class='line'><span class="k">BEGIN</span>
</span><span class='line'>  <span class="n">movie_query</span> <span class="p">:</span><span class="o">=</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="k">replace</span><span class="p">(</span><span class="n">regexp_replace</span><span class="p">(</span><span class="k">trim</span><span class="p">(</span><span class="k">search</span><span class="p">),</span> <span class="s1">&#39; +&#39;</span> <span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">),</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;&amp;&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="k">INTO</span> <span class="n">found_name</span><span class="p">,</span> <span class="n">found_type</span>
</span><span class='line'>              <span class="n">name</span><span class="p">,</span> <span class="k">type</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span> <span class="k">AS</span> <span class="k">type</span><span class="p">,</span> <span class="n">levenshtein</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="k">search</span><span class="p">),</span> <span class="k">lower</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">))</span> <span class="k">AS</span> <span class="n">dist</span>
</span><span class='line'>      <span class="k">FROM</span> <span class="n">actors</span> <span class="n">a</span> <span class="k">WHERE</span> <span class="k">search</span> <span class="o">%</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">UNION</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span> <span class="k">AS</span> <span class="k">type</span><span class="p">,</span> <span class="n">levenshtein</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="k">search</span><span class="p">),</span> <span class="k">lower</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">))</span> <span class="k">AS</span> <span class="n">dist</span>
</span><span class='line'>        <span class="k">FROM</span> <span class="n">actors</span> <span class="n">a</span> <span class="k">WHERE</span> <span class="n">metaphone</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="o">=</span> <span class="n">metaphone</span><span class="p">(</span><span class="k">search</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="k">UNION</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="n">title</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span> <span class="s1">&#39;M&#39;</span> <span class="k">AS</span> <span class="k">type</span><span class="p">,</span> <span class="n">levenshtein</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="k">search</span><span class="p">),</span> <span class="k">lower</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">title</span><span class="p">))</span> <span class="k">AS</span> <span class="n">dist</span>
</span><span class='line'>      <span class="k">FROM</span> <span class="n">movies</span> <span class="n">m</span> <span class="k">WHERE</span> <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">title</span><span class="p">)</span> <span class="o">@@</span> <span class="n">movie_query</span>
</span><span class='line'>       <span class="p">)</span> <span class="n">t</span>
</span><span class='line'>  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">dist</span> <span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">IF</span> <span class="n">found_type</span> <span class="o">=</span> <span class="s1">&#39;A&#39;</span> <span class="k">THEN</span>
</span><span class='line'>    <span class="k">FOR</span> <span class="n">tempmovie</span> <span class="k">IN</span> <span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="n">movies</span> <span class="n">m</span> <span class="k">NATURAL</span> <span class="k">JOIN</span> <span class="n">movies_actors</span> <span class="k">NATURAL</span> <span class="k">JOIN</span> <span class="n">actors</span>
</span><span class='line'>                     <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="n">found_name</span> <span class="k">LIMIT</span> <span class="mi">5</span> <span class="n">LOOP</span>
</span><span class='line'>      <span class="k">RETURN</span> <span class="k">NEXT</span> <span class="n">tempmovie</span><span class="p">;</span>
</span><span class='line'>    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
</span><span class='line'>  <span class="k">ELSE</span>
</span><span class='line'>    <span class="k">FOR</span> <span class="n">tempmovie</span> <span class="k">IN</span> <span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="n">movies</span> <span class="n">m</span><span class="p">,</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">SELECT</span> <span class="n">genre</span><span class="p">,</span> <span class="n">title</span> <span class="k">FROM</span> <span class="n">movies</span> <span class="k">WHERE</span> <span class="n">title</span> <span class="o">=</span> <span class="n">found_name</span><span class="p">)</span> <span class="n">s</span>
</span><span class='line'>                       <span class="k">WHERE</span> <span class="n">cube_enlarge</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">genre</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span> <span class="o">@&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">genre</span> <span class="k">AND</span> <span class="n">s</span><span class="p">.</span><span class="n">title</span> <span class="o">&lt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>                       <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">cube_distance</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">genre</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">genre</span><span class="p">)</span> <span class="k">LIMIT</span> <span class="mi">5</span> <span class="n">LOOP</span>
</span><span class='line'>      <span class="k">RETURN</span> <span class="k">NEXT</span> <span class="n">tempmovie</span><span class="p">;</span>
</span><span class='line'>    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
</span><span class='line'>  <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
</span><span class='line'><span class="k">END</span><span class="p">;</span>
</span><span class='line'><span class="err">$$</span> <span class="k">LANGUAGE</span> <span class="n">plpgsql</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from suggest_movies('Ben Aflk');
</span><span class='line'> movie_id |       title       |                          genre                          
</span><span class='line'>----------+-------------------+---------------------------------------------------------
</span><span class='line'>       22 | Armageddon        | (5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      146 | Good Will Hunting | (0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      476 | Forces of Nature  | (0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      514 | Dogma             | (0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      609 | Chasing Amy       | (0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>(5 rows)
</span><span class='line'>
</span><span class='line'>book=# select * from suggest_movies('Broos Weells');
</span><span class='line'> movie_id |       title       |                          genre                           
</span><span class='line'>----------+-------------------+----------------------------------------------------------
</span><span class='line'>        6 | The Fifth Element | (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0)
</span><span class='line'>        9 | Twelve Monkeys    | (0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0)
</span><span class='line'>       22 | Armageddon        | (5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      171 | Die Hard          | (7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</span><span class='line'>      230 | Pulp Fiction      | (0, 0, 0, 12, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0)
</span><span class='line'>(5 rows)
</span><span class='line'>
</span><span class='line'>book=# select * from suggest_movies('war star');
</span><span class='line'> movie_id |                     title                      |                          genre                          
</span><span class='line'>----------+------------------------------------------------+---------------------------------------------------------
</span><span class='line'>      532 | Star Wars: Episode V - The Empire Strikes Back | (0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 10, 0, 0, 0)
</span><span class='line'>     2862 | Avatar                                         | (0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 10, 0, 0, 0)
</span><span class='line'>     1357 | Explorers                                      | (0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0)
</span><span class='line'>      325 | Krull                                          | (0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 7, 0, 0, 0)
</span><span class='line'>      193 | E.T. The Extra-Terrestrial                     | (0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0)
</span><span class='line'>(5 rows)</span></code></pre></td></tr></table></div></figure>


<p>Groovy.</p>

<h2>Wrapping Up PostgreSQL</h2>

<p>Well, not really wrapping it up. I&#8217;ll keep using it, if only for fun. This database is powerful, mature, well documented, and extremely flexible over the domain of relational modeling. It is possible to define user defined types with arbitrary content, and fancy indexing. If you find an obscure academic paper describing a exotic indexing for a new datatype, chances are that PostgreSQL will support it, given enough C programming.</p>

<p>The comments from the book on this database are very fair, and I would strongly recommend anyone to give it a good and honest evaluation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-2/"/>
    <updated>2011-12-03T14:54:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-2</id>
    <content type="html"><![CDATA[<p>Second day with PostgreSQL, this time to discuss advanced queries, stored procedures, and rewriting rules.</p>

<p>The relational model was designed to make it easy to extract meaningful information from the database (although here the operative word is meaningful rather than easy). Aggregations pretty much require a schema to return anything worth the effort (and if you don&#8217;t believe it, what exactly is the average value of 1, blue and 3?).</p>

<p>Stored procedures can help to move some business intelligence from the main application to the database. Whether it is a good idea is an open question (and I think the knee-jerk negative answer is too often guided by ignorance rather than experience), but the idea of having enough rules in the database that multiple applications can connect to it safely (or safely enough) is worth considering: it enables other applications, some of which might be incompatible with the main business application, to use the business data (many reporting and ETL solutions might fall into this category). The choice is between control and openness (and which one is correct depends on the situation).</p>

<p>Finally, rewriting rules is a less common feature of SQL databases, but essentially it allows the database designer to create updatable views, implement versioning on specific tables, and so on.</p>

<!--more-->


<p>I have a small peeve with the book so far: all too often the authors rely on implicit column ordering when manipulating data. I happen to have a different order for the columns of <code>events</code> (which was created as an exercise <a href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1/">yesterday</a>), so many <code>INSERT</code> examples no longer work.</p>

<p>But in general, it is good to specify the columns in an <code>INSERT</code>, as in:</p>

<figure class='code'><figcaption><span>INSERT with explicit columns  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Your Favorite Band&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-06 21:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-06 23:00&#39;</span><span class="p">,</span> <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Crystal Ballroom&#39;</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to create &#8216;My Place&#8217;:</p>

<figure class='code'><figcaption><span>INSERT My Place  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">countries</span> <span class="p">(</span><span class="n">country_code</span><span class="p">,</span> <span class="n">country_name</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;jp&#39;</span><span class="p">,</span> <span class="s1">&#39;Japan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">cities</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">postal_code</span><span class="p">,</span> <span class="n">country_code</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Shinjuku&#39;</span><span class="p">,</span> <span class="s1">&#39;160-0022&#39;</span><span class="p">,</span> <span class="s1">&#39;jp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">venues</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">type</span><span class="p">,</span> <span class="n">postal_code</span><span class="p">,</span> <span class="n">country_code</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;My Place&#39;</span><span class="p">,</span> <span class="s1">&#39;private&#39;</span><span class="p">,</span> <span class="s1">&#39;160-0022&#39;</span><span class="p">,</span> <span class="s1">&#39;jp&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, to add the new events:</p>

<figure class='code'><figcaption><span>INSERT new events  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Steven King&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 21:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 23:00:00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Powell&#39;&#39;s Books&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Dinner with Mom&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 18:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 20:30:00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;My Place&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Valentine&#39;&#39;s Day&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-14 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-14 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, there is never any ambiguity as to what is inserted.</p>

<h3>Window functions</h3>

<p>The book covers window functions, but in this first beta version of the book at least, the explanation is not very illuminating.</p>

<p>Basically, <a href="http://www.postgresql.org/docs/current/static/functions-window.html">window functions</a> are a generalization of aggregate functions. Aggregate functions operates on a range of rows selected by a <code>GROUP BY</code> clause. For each group, there will be only one row, where columns are either grouped by columns, or aggregates.</p>

<p>Window functions also operate on a range of rows, but there is one range for each row in the filtered table. The range can be created in a way similar to <code>GROUP BY</code> (using the <code>PARTITION OVER</code> clause), but can also be created by taking all the rows up to the current one, or 2 rows before, 2 rows after, and the current one, &#8230; Such a range is called a window. There are <a href="http://www.postgresql.org/docs/current/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS">many ways</a> to define them.</p>

<p>For instance, say we want to know, for each events, how many events have happened (including the current one), we can try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT title, starts, COUNT(*) OVER (ORDER BY starts) FROM events;
</span><span class='line'>       title        |       starts        | count 
</span><span class='line'>--------------------+---------------------+-------
</span><span class='line'> Your Favorite Band | 2012-02-06 21:00:00 |     1
</span><span class='line'> Valentine's Day    | 2012-02-14 00:00:00 |     2
</span><span class='line'> My Book Signing    | 2012-02-15 17:30:00 |     3
</span><span class='line'> Dinner with Mom    | 2012-02-26 18:00:00 |     4
</span><span class='line'> Steven King        | 2012-02-26 21:00:00 |     5
</span><span class='line'> April Fools Day    | 2012-04-01 00:00:00 |     6
</span><span class='line'> House Party        | 2012-05-03 23:00:00 |     7
</span><span class='line'> Christmas Day      | 2012-12-25 00:00:00 |     8
</span><span class='line'> Valentine's Day    | 2013-02-14 00:00:00 |     9
</span><span class='line'>(9 rows)</span></code></pre></td></tr></table></div></figure>


<p>The <code>OVER</code> does not specify a <code>PARTITION</code>, but an <code>ORDER</code>, which means that the <code>COUNT(*)</code> function operates on all the rows from first one to current one (ordered by the <code>starts</code> column). Actually, the <code>COUNT(*)</code> function is the same as the (proper) window function <code>RANK</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT title, starts, RANK() OVER (ORDER BY starts) FROM events;
</span><span class='line'>       title        |       starts        | rank 
</span><span class='line'>--------------------+---------------------+------
</span><span class='line'> Your Favorite Band | 2012-02-06 21:00:00 |    1
</span><span class='line'> Valentine's Day    | 2012-02-14 00:00:00 |    2
</span><span class='line'> My Book Signing    | 2012-02-15 17:30:00 |    3
</span><span class='line'> Dinner with Mom    | 2012-02-26 18:00:00 |    4
</span><span class='line'> Steven King        | 2012-02-26 21:00:00 |    5
</span><span class='line'> April Fools Day    | 2012-04-01 00:00:00 |    6
</span><span class='line'> House Party        | 2012-05-03 23:00:00 |    7
</span><span class='line'> Christmas Day      | 2012-12-25 00:00:00 |    8
</span><span class='line'> Valentine's Day    | 2013-02-14 00:00:00 |    9
</span><span class='line'>(9 rows)</span></code></pre></td></tr></table></div></figure>


<p>What about computing the order of each events, but by year? Nothing easier:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT title, starts, RANK() OVER (PARTITION BY extract(year from starts) ORDER BY starts) FROM events;
</span><span class='line'>       title        |       starts        | rank 
</span><span class='line'>--------------------+---------------------+------
</span><span class='line'> Your Favorite Band | 2012-02-06 21:00:00 |    1
</span><span class='line'> Valentine's Day    | 2012-02-14 00:00:00 |    2
</span><span class='line'> My Book Signing    | 2012-02-15 17:30:00 |    3
</span><span class='line'> Dinner with Mom    | 2012-02-26 18:00:00 |    4
</span><span class='line'> Steven King        | 2012-02-26 21:00:00 |    5
</span><span class='line'> April Fools Day    | 2012-04-01 00:00:00 |    6
</span><span class='line'> House Party        | 2012-05-03 23:00:00 |    7
</span><span class='line'> Christmas Day      | 2012-12-25 00:00:00 |    8
</span><span class='line'> Valentine's Day    | 2013-02-14 00:00:00 |    1
</span><span class='line'>(9 rows)</span></code></pre></td></tr></table></div></figure>


<p>Ok, this is not very fancy. But with numeric data, window functions are more powerful. Lets say we collect daily measures into a new table:</p>

<figure class='code'><figcaption><span>Window function example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">observation</span> <span class="p">(</span>
</span><span class='line'>   <span class="k">day</span> <span class="k">timestamp</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>   <span class="n">measure</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">observation</span> <span class="p">(</span><span class="k">day</span><span class="p">,</span> <span class="n">measure</span><span class="p">)</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="nb">date</span> <span class="s1">&#39;2011-12-01&#39;</span> <span class="k">AS</span> <span class="k">day</span><span class="p">,</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)::</span><span class="nb">int</span> <span class="k">as</span> <span class="n">measure</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could use the usual aggregate functions, for instance <code>AVG</code> and <code>SUM</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# SELECT AVG(measure), SUM(measure) FROM observation;
</span><span class='line'>         avg         | sum  
</span><span class='line'>---------------------+------
</span><span class='line'> 54.9600000000000000 | 5496
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>We have pretty much all the details. If there&#8217;s any trend, we would not see it. But with window functions, it is possible to compute running averages (and actually, two different ones):</p>

<figure class='code'><figcaption><span>Window function example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">day</span><span class="p">,</span> <span class="k">AVG</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">2</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="mi">2</span> <span class="n">FOLLOWING</span><span class="p">)</span> <span class="k">as</span> <span class="n">short_avg</span><span class="p">,</span>
</span><span class='line'>  <span class="k">AVG</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">5</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="mi">5</span> <span class="n">FOLLOWING</span><span class="p">)</span> <span class="k">as</span> <span class="n">long_avg</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">day</span><span class="p">)</span> <span class="k">as</span> <span class="n">running_sum</span> <span class="k">FROM</span> <span class="n">observation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(results omitted because they are too long). Here, the <code>AVG(measure)</code> is applied to a window of either 5 rows for <code>short_avg</code> or 11 rows for <code>long_avg</code>, and there&#8217;s a running sum in <code>running_sum</code>.</p>

<p>Pretty cool, I&#8217;d say.</p>

<h3>Rules</h3>

<p><a href="http://www.postgresql.org/docs/current/static/sql-createrule.html">Rules</a> are very useful as well. Here&#8217;s how I&#8217;d implement the <code>INSERT</code> on <code>holidays</code>:</p>

<figure class='code'><figcaption><span>INSERT on holidays  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">RULE</span> <span class="n">insert_holidays</span> <span class="k">AS</span> <span class="k">ON</span> <span class="k">INSERT</span> <span class="k">TO</span> <span class="n">holidays</span> <span class="k">DO</span> <span class="k">INSTEAD</span>
</span><span class='line'>  <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">colors</span><span class="p">)</span>
</span><span class='line'>  <span class="k">values</span> <span class="p">(</span><span class="k">NEW</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="nb">date</span><span class="o">+</span><span class="nb">interval</span> <span class="s1">&#39;23 hour 59 minutes&#39;</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">colors</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the syntax to manipulate dates and timestamp. It is fairly readable and compact enough.</p>

<h2>Exercises</h2>

<h3>Aggregate Functions</h3>

<p>The aggregate functions are documented <a href="http://www.postgresql.org/docs/current/static/functions-aggregate.html">here</a>, while the window functions are <a href="http://www.postgresql.org/docs/current/static/functions-window.html">here</a>.</p>

<h3>GUI</h3>

<p>Honestly, I don&#8217;t really use any. <code>psql</code> is really powerful. For those of the GUI persuasion, there are a few <a href="http://wiki.postgresql.org/wiki/Community_Guide_to_PostgreSQL_GUI_Tools">options</a>.</p>

<h3>DELETE Rule</h3>

<figure class='code'><figcaption><span>DELETE rule on venues  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">RULE</span> <span class="n">delete_venue</span> <span class="k">AS</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="k">TO</span> <span class="n">venues</span> <span class="k">DO</span> <span class="k">INSTEAD</span>
</span><span class='line'>  <span class="k">UPDATE</span> <span class="n">venues</span> <span class="k">SET</span> <span class="n">active</span> <span class="o">=</span> <span class="k">false</span> <span class="k">WHERE</span> <span class="n">venue_id</span> <span class="o">=</span> <span class="k">OLD</span><span class="p">.</span><span class="n">venue_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this rule in place, deleting from <code>venues</code> now set the <code>active</code> flag to false:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# DELETE FROM venues WHERE name = 'My Place';
</span><span class='line'>DELETE 0
</span><span class='line'>book=# SELECT * FROM venues;
</span><span class='line'> venue_id |       name       | street_address |  type   | postal_code | country_code | active 
</span><span class='line'>----------+------------------+----------------+---------+-------------+--------------+--------
</span><span class='line'>        1 | Crystal Ballroom |                | public  | 97205       | us           | t
</span><span class='line'>        2 | Powell's Books   |                | public  | 97205       | us           | t
</span><span class='line'>        5 | Run's House      |                | public  | 97205       | us           | t
</span><span class='line'>        4 | My Place         |                | private | 160-0022    | jp           | f
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<h3>generate_series in crosstab</h3>

<p>The documentation for <a href="http://www.postgresql.org/docs/current/static/tablefunc.html"><code>crosstab</code></a> has already an example for using <a href="http://www.postgresql.org/docs/current/static/functions-srf.html"><code>generate_series</code></a>:</p>

<figure class='code'><figcaption><span>generate_series in crosstab  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">crosstab</span><span class="p">(</span>
</span><span class='line'><span class="s1">&#39;SELECT extract(year from starts) as year,</span>
</span><span class='line'><span class="s1">extract(month from starts) as month, count(*) FROM events</span>
</span><span class='line'><span class="s1">GROUP BY year, month&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;SELECT m FROM generate_series(1, 12) m&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'><span class="k">year</span> <span class="nb">int</span><span class="p">,</span>
</span><span class='line'><span class="n">jan</span> <span class="nb">int</span><span class="p">,</span> <span class="n">feb</span> <span class="nb">int</span><span class="p">,</span> <span class="n">mar</span> <span class="nb">int</span><span class="p">,</span> <span class="n">apr</span> <span class="nb">int</span><span class="p">,</span> <span class="n">may</span> <span class="nb">int</span><span class="p">,</span> <span class="n">jun</span> <span class="nb">int</span><span class="p">,</span> <span class="n">jul</span> <span class="nb">int</span><span class="p">,</span> <span class="n">aug</span> <span class="nb">int</span><span class="p">,</span> <span class="n">sep</span> <span class="nb">int</span><span class="p">,</span> <span class="n">oct</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nov</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">dec</span> <span class="nb">int</span>
</span><span class='line'><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">YEAR</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output remains the same:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> year | jan | feb | mar | apr | may | jun | jul | aug | sep | oct | nov | dec 
</span><span class='line'>------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----
</span><span class='line'> 2012 |     |   5 |     |   1 |   1 |     |     |     |     |     |     |   1
</span><span class='line'> 2013 |     |   1 |     |     |     |     |     |     |     |     |     |    
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<h3>Weekly pivot</h3>

<p>The hardest, perhaps, is to find how to convince PostgreSQL to apply <a href="http://www.postgresql.org/docs/current/static/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE"><code>div</code></a> to the passed arguments, but a bit of type declaration using <code>::</code> does the trick. Also, <code>crosstab</code> is not overly smart, so the <code>month</code> and <code>week</code> columns must be in order, otherwise the counts for the two February (one in 2012 and one in 2013) are different:</p>

<figure class='code'><figcaption><span>Weekly pivot  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">crosstab</span><span class="p">(</span>
</span><span class='line'><span class="s1">&#39;SELECT extract(month from starts) as month, </span>
</span><span class='line'><span class="s1"> div(extract (day from starts)::int, 7) + 1 as week, count(*) FROM events</span>
</span><span class='line'><span class="s1">GROUP BY month, week ORDER BY month, week&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;SELECT m FROM generate_series(1, 5) m&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'><span class="k">month</span> <span class="nb">int</span><span class="p">,</span>
</span><span class='line'><span class="n">week_1</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_2</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_3</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_4</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_5</span> <span class="nb">int</span>
</span><span class='line'><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">MONTH</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The query produces:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> month | week_1 | week_2 | week_3 | week_4 | week_5 
</span><span class='line'>-------+--------+--------+--------+--------+--------
</span><span class='line'>     2 |      1 |        |      3 |      2 |       
</span><span class='line'>     4 |      1 |        |        |        |       
</span><span class='line'>     5 |      1 |        |        |        |       
</span><span class='line'>    12 |        |        |        |      1 |       
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1/"/>
    <updated>2011-12-03T12:22:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1</id>
    <content type="html"><![CDATA[<p>The first database in the series is a relational database, and what better choice than <a href="http://www.postgresql.org">PostgreSQL</a>?</p>

<!--more-->


<p>Of course, <a href="http://www.mysql.com/">MySQL</a> is more popular, but if we are going to talk about SQL and the relational model, it is better to pick a database that actually takes these concepts seriously.</p>

<p>The idea to start with a relational database is a good one. I feel that many who embrace NoSQL do so because they do not understand either SQL or the relational model. I was surprised to discover that some of my college educated colleagues did not know SQL at all. They were taught mostly about Java and object oriented design (I would ask for a refund). SQL databases have been developed, refined, and used in production for about 40 years. That&#8217;s more than half the history of computers, they&#8217;re likely to be part of the landscape for a few more decades, so ignoring them may be trendy but it is not wise.</p>

<p>About the PostgreSQL version: the book appears to have been long in the making, as it still refers the reader to the version 9.0, while <a href="http://www.postgresql.org/docs/9.1/static/release-9-1-1.html">9.1</a> has been out for a few months.</p>

<p>Installing then extensions that are needed for this book is easier with 9.1. Just using <a href="http://www.postgresql.org/docs/current/static/sql-createextension.html"><code>CREATE EXTENSION</code></a>:</p>

<figure class='code'><figcaption><span>Installing Extensions  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">tablefunc</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">dict_xsyn</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">fuzzystrmatch</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">pg_trgm</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="k">cube</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Removing them is done with the command <a href="http://www.postgresql.org/docs/current/static/sql-dropextension.html"><code>DROP EXTENSION</code></a>.</p>

<h3>The events table</h3>

<p>The code to create and fills the <code>events</code> table:</p>

<figure class='code'><figcaption><span>Creating and filling the events table  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">events</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">event_id</span> <span class="nb">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>  <span class="n">title</span> <span class="nb">text</span><span class="p">,</span>
</span><span class='line'>  <span class="n">starts</span> <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ends</span> <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>  <span class="n">venue_id</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">REFERENCES</span> <span class="n">venues</span> <span class="p">(</span><span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'><span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;My Book Signing&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-15 17:30:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-15 19:30:00&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;April Fools Day&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-04-01 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-04-01 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">),</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;Christmas Day&#39;</span><span class="p">,</span>   <span class="s1">&#39;2012-12-25 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-12-25 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>On indexes</h3>

<p>I don&#8217;t have a PostgreSQL 9.0 instance to check, but with 9.1 at least, <code>UNIQUE</code> constraints are implemented through a <code>btree</code> index, not a <code>hash</code> one. The difference is that a <code>btree</code> index is sorted and so supports range searches.</p>

<p>This can be checked by querying the console about the table:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# \d events
</span><span class='line'>                                       Table "public.events"
</span><span class='line'>  Column  |            Type             |                         Modifiers                         
</span><span class='line'>----------+-----------------------------+-----------------------------------------------------------
</span><span class='line'> event_id | integer                     | not null default nextval('events_event_id_seq'::regclass)
</span><span class='line'> title    | text                        | 
</span><span class='line'> starts   | timestamp without time zone | 
</span><span class='line'> ends     | timestamp without time zone | 
</span><span class='line'> venue_id | integer                     | 
</span><span class='line'>Indexes:
</span><span class='line'>    "events_pkey" PRIMARY KEY, btree (event_id)
</span><span class='line'>    "events_starts" btree (starts)
</span><span class='line'>Foreign-key constraints:
</span><span class='line'>    "events_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES venues(venue_id)</span></code></pre></td></tr></table></div></figure>


<h2>Exercises</h2>

<h3>The PostgreSQL FAQ</h3>

<p>The FAQ is <a href="http://wiki.postgresql.org/wiki/FAQ">here</a>.</p>

<h3>The PostgreSQL Documentation</h3>

<p>The documentation for version 9.1 is <a href="http://www.postgresql.org/docs/9.1/static/index.html">here</a> (and <a href="http://www.postgresql.org/docs/manuals/">there</a> for all the versions).</p>

<h3>About <code>MATCH FULL</code></h3>

<p>This one was already explained in the book, and confirmed by the <a href="http://www.postgresql.org/docs/current/static/sql-createtable.html">documentation</a>: when a foreign key is composed of more than one column, they must all match a row in the referenced table, or be all null.</p>

<h3>Selecting user table from <code>pg_class</code></h3>

<p>Interestingly, the first time I tried to solve this exercise, I used <a href="http://www.postgresql.org/docs/current/static/view-pg-tables.html"><code>pg_tables</code></a> by mistake (<code>pg_tables</code> has a <code>tableowner</code> column which makes it easy to identify user tables).</p>

<p><a href="http://www.postgresql.org/docs/current/static/catalog-pg-class.html"><code>pg_class</code></a> stores the type of object in <code>relkind</code>: &#8216;r&#8217; for tables. Restricting for just tables, and working on the table name:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=#  select relname from pg_class where relkind = 'r';
</span><span class='line'>         relname         
</span><span class='line'>-------------------------
</span><span class='line'> pg_statistic
</span><span class='line'> pg_type
</span><span class='line'> pg_attribute
</span><span class='line'> pg_authid
</span><span class='line'> pg_proc
</span><span class='line'> pg_class
</span><span class='line'> pg_database
</span><span class='line'> pg_user_mapping
</span><span class='line'> pg_constraint
</span><span class='line'> pg_inherits
</span><span class='line'> pg_index
</span><span class='line'> pg_operator
</span><span class='line'> pg_opfamily
</span><span class='line'> pg_opclass
</span><span class='line'> pg_amop
</span><span class='line'> pg_amproc
</span><span class='line'> pg_language
</span><span class='line'> pg_largeobject_metadata
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Ok, that&#8217;s a bit long. Removing these <code>pg_</code> named tables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select relname from pg_class where relkind = 'r' and relname not like 'pg_%';
</span><span class='line'>         relname         
</span><span class='line'>-------------------------
</span><span class='line'> sql_implementation_info
</span><span class='line'> sql_languages
</span><span class='line'> sql_packages
</span><span class='line'> sql_parts
</span><span class='line'> sql_sizing
</span><span class='line'> sql_sizing_profiles
</span><span class='line'> sql_features
</span><span class='line'> countries
</span><span class='line'> events
</span><span class='line'> cities
</span><span class='line'> venues
</span><span class='line'>(11 rows)</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, only the tables that are visible in the current database are listed (I have other databases, with more user created tables).</p>

<p>Still I need to remove the <code>sql_</code> named tables. Using PostgreSQL <a href="http://www.postgresql.org/docs/current/static/functions-matching.html#FUNCTIONS-POSIX-REGEXP">regular expression operators</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select relname from pg_class where relkind = 'r' and relname !~ '^(pg_|sql_)';
</span><span class='line'>  relname  
</span><span class='line'>-----------
</span><span class='line'> countries
</span><span class='line'> events
</span><span class='line'> cities
</span><span class='line'> venues
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>This is one approach. Another would be to try to mimic the behaviour of the <code>\d</code> console command. The <a href="http://www.postgresql.org/docs/current/static/app-psql.html"><code>psql</code></a> option <code>-E</code> can be used to check what queries are used to implement specific console commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ psql -E book
</span><span class='line'>psql (9.1.1)
</span><span class='line'>Type "help" for help.
</span><span class='line'>
</span><span class='line'>book=# \d
</span><span class='line'>********* QUERY **********
</span><span class='line'>SELECT n.nspname as "Schema",
</span><span class='line'>  c.relname as "Name",
</span><span class='line'>  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' END as "Type",
</span><span class='line'>  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
</span><span class='line'>FROM pg_catalog.pg_class c
</span><span class='line'>     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
</span><span class='line'>WHERE c.relkind IN ('r','v','S','f','')
</span><span class='line'>      AND n.nspname &lt;&gt; 'pg_catalog'
</span><span class='line'>      AND n.nspname &lt;&gt; 'information_schema'
</span><span class='line'>      AND n.nspname !~ '^pg_toast'
</span><span class='line'>  AND pg_catalog.pg_table_is_visible(c.oid)
</span><span class='line'>ORDER BY 1,2;
</span><span class='line'>**************************
</span><span class='line'>
</span><span class='line'>                  List of relations
</span><span class='line'> Schema |        Name         |   Type   |   Owner   
</span><span class='line'>--------+---------------------+----------+-----------
</span><span class='line'> public | cities              | table    | fdumontmd
</span><span class='line'> public | countries           | table    | fdumontmd
</span><span class='line'> public | events              | table    | fdumontmd
</span><span class='line'> public | events_event_id_seq | sequence | fdumontmd
</span><span class='line'> public | venues              | table    | fdumontmd
</span><span class='line'> public | venues_venue_id_seq | sequence | fdumontmd
</span><span class='line'>(6 rows)</span></code></pre></td></tr></table></div></figure>


<p>The minimal query that lists the user created tables in the current database seems to be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select c.relname from pg_class c join pg_namespace n on n.oid = c.relnamespace where c.relkind = 'r' and pg_catalog.pg_table_is_visible(c.oid) and n.nspname &lt;&gt; 'pg_catalog';
</span><span class='line'>  relname  
</span><span class='line'>-----------
</span><span class='line'> countries
</span><span class='line'> events
</span><span class='line'> cities
</span><span class='line'> venues
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>But given that <code>pg_class</code> only lists the tables in the current database, and assuming you don&#8217;t use <code>pg_</code> or <code>sql_</code> prefixes, the first query is clearly easier.</p>

<h3>Country name for the event &#8216;My Book Signing&#8217;</h3>

<p>Based on the content of the book so far, a possible solution uses <code>INNER JOIN</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select c.country_name from events e inner join venues v on e.venue_id = v.venue_id inner join countries c on v.country_code = c.country_code where title = 'My Book Signing';
</span><span class='line'> country_name  
</span><span class='line'>---------------
</span><span class='line'> United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>But this is a bit verbose. The structure of the tables makes it possible to use <a href="http://www.postgresql.org/docs/current/static/queries-table-expressions.html"><code>NATURAL JOIN</code></a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select country_name from events natural join venues natural join countries where title = 'My Book Signing';
</span><span class='line'> country_name  
</span><span class='line'>---------------
</span><span class='line'> United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>When using <code>NATURAL JOIN</code>, PostgreSQL will join on all the columns that are found in both tables (based on their names). For instance, both <code>events</code> and <code>venues</code> have a <code>venue_id</code> column (and no other column with the same name), so the join is on this column.</p>

<p>And other interesting difference is that <code>NATURAL JOIN</code> removes the duplicate columns:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from events natural join venues natural join countries where title = 'My Book Signing';
</span><span class='line'> country_code | venue_id | event_id |      title      |       starts        |        ends         |     name      | street_address |  type   | postal_code | active | country_name  
</span><span class='line'>--------------+----------+----------+-----------------+---------------------+---------------------+---------------+----------------+---------+-------------+--------+---------------
</span><span class='line'> us           |        2 |        1 | My Book Signing | 2012-02-15 17:30:00 | 2012-02-15 19:30:00 | Powel's Books |                | public  | 97205       | t      | United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>whereas <code>INNER JOIN</code> does not:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from events e inner join venues v on e.venue_id = v.venue_id inner join countries c on v.country_code = c.country_code where title = 'My Book Signing';
</span><span class='line'> event_id |      title      |       starts        |        ends         | venue_id | venue_id |     name      | street_address |  type   | postal_code | country_code | active | country_code | country_name  
</span><span class='line'>----------+-----------------+---------------------+---------------------+----------+----------+---------------+----------------+---------+-------------+--------------+--------+--------------+---------------
</span><span class='line'>        1 | My Book Signing | 2012-02-15 17:30:00 | 2012-02-15 19:30:00 |        2 |        2 | Powel's Books |                | public  | 97205       | us           | t      | us           | United States
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<h3>Add a new column</h3>

<figure class='code'><figcaption><span>Add a new column to `venues`  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">venues</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">active</span> <span class="nb">boolean</span> <span class="k">DEFAULT</span> <span class="k">TRUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checking that is is now there:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# \d venues
</span><span class='line'>                                        Table "public.venues"
</span><span class='line'>     Column     |          Type          |                         Modifiers                         
</span><span class='line'>----------------+------------------------+-----------------------------------------------------------
</span><span class='line'> venue_id       | integer                | not null default nextval('venues_venue_id_seq'::regclass)
</span><span class='line'> name           | character varying(255) | 
</span><span class='line'> street_address | text                   | 
</span><span class='line'> type           | character(7)           | default 'public'::bpchar
</span><span class='line'> postal_code    | character varying(9)   | 
</span><span class='line'> country_code   | character(2)           | 
</span><span class='line'> active         | boolean                | default true
</span><span class='line'>Indexes:
</span><span class='line'>    "venues_pkey" PRIMARY KEY, btree (venue_id)
</span><span class='line'>Check constraints:
</span><span class='line'>    "venues_type_check" CHECK (type = ANY (ARRAY['public'::bpchar, 'private'::bpchar]))
</span><span class='line'>Foreign-key constraints:
</span><span class='line'>    "venues_country_code_fkey" FOREIGN KEY (country_code, postal_code) REFERENCES cities(country_code, postal_code) MATCH FULL
</span><span class='line'>Referenced by:
</span><span class='line'>    TABLE "events" CONSTRAINT "events_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES venues(venue_id)</span></code></pre></td></tr></table></div></figure>


<p>or directly by <code>select</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>book=# select * from venues;
</span><span class='line'> venue_id |       name       | street_address |  type   | postal_code | country_code | active 
</span><span class='line'>----------+------------------+----------------+---------+-------------+--------------+--------
</span><span class='line'>        1 | Crystal Ballroom |                | public  | 97205       | us           | t
</span><span class='line'>        2 | Powel's Books    |                | public  | 97205       | us           | t
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>And this completes Day 1. Tomorrow, stored procedures, triggers, views, rules, and other goodies are on the menu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Book: Seven Databases in Seven Weeks]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/new-book-seven-databases-in-seven-weeks/"/>
    <updated>2011-12-03T12:21:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/new-book-seven-databases-in-seven-weeks</id>
    <content type="html"><![CDATA[<p>It is early December still, but the good people of the <a href="http://pragprog.com/">Pragmatic Bookshelf</a> have delivered an early Christmas present: <a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a>, by Eric Redmond and Jim Wilson.</p>

<!--more-->


<p>The book is in Beta, but there are chapters for 5 databases, so there plenty of material already.</p>

<p>The idea of covering 7 databases, even superficially, is a good one, perhaps even better than for <a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">languages</a>: while the choice of a language is often beyond the control of any single developer, the choice of a database (perhaps from the NoSQL family as a complement to a core, mandated SQL one) is possible. As with languages, trying to use a new database is if it was similar to one you&#8217;re already familiar with is likely to end badly. A good understanding of what each of them is good for, what problem they intend to solve, and what niche they fit better is mandatory.</p>

<p>I have been working with relational databases mostly so far (and, professionally, with one of the worst databases that people can charge money for), so I am eager to be introduced to the other kinds, without the usual cheerleading that is found in many tutorials.</p>

<p>In the coming weeks, assuming the book is timely updated, I&#8217;ll be blogging my way through it, just as I did through <a href="http://blog.wakatta.jp/blog/2011/10/11/seven-languages-in-seven-weeks/">Seven Languages in Seven Weeks</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Wrap Up]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/26/seven-languages-in-seven-weeks-wrap-up/"/>
    <updated>2011-11-26T12:24:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/26/seven-languages-in-seven-weeks-wrap-up</id>
    <content type="html"><![CDATA[<p>Wow, seven weeks already. And seven languages later, time to see where I can go from here.</p>

<!--more-->


<p>This was a rather pleasant journey. I felt that some exercises with Io and Scala were more frustrating than the rest, but overall it was not too taxing.</p>

<p>It brought interesting benefits: I got a better look at emerging trends in software, but now it is up to me to develop this first look into something useable.</p>

<h2>General comments</h2>

<p>The exercises level was rather uneven. I guess that is inevitable, given that some of the languages were introduced as stepping stones for others. Still, from a CSV parser (even one using meta-programming) to a backtracking maze solver, there&#8217;s a fairly large range.</p>

<p>The idea of just giving enough information to get started, but not so much that the book is the only source of information needed to solve the exercises, was very good. A language is not just a syntax, a semantic, and a library. It is most of all a community, a set of websites, forums, mailing lists, &#8230; It was smart to push the reader towards that.</p>

<p>And yes, clearly, each language was barely covered, but some of the third day exercises were hinting at the more advanced features.</p>

<p>All in all, this was a good book. It is useful to be exposed to different languages, if only to expand one&#8217;s approach to problem solving. The features of tomorrow&#8217;s mainstream languages are being explored today in smaller languages; being at least aware of this evolution is required to grow as a professional software engineer.</p>

<p>But the author spends way too much time complaining about syntax (or claiming that a particular syntax is a weakness). I find the accusation that Scala&#8217;s syntax is too academic particularly pointless. Rightfully, he adds that this is subjective, but what on earth is an academic syntax? A syntax is either easy on the fingers or not (the former being better), and either adapted to the semantic or not. It can support the features, or make them ugly. It should be concise in what it promotes, and verbose in what it discourages.</p>

<p>As far as I could tell, each language had a syntax that matches its needs and those of its users.</p>

<p>Conclusion: I recommend the book. Even knowing some of the languages I still learned a few things, and for those languages I knew, I had a chance for a second look and a new appreciation of what they offer.</p>

<h2>From here to a bit further</h2>

<p>It would be unfortunate if this book was the last step I took in these various languages. So here I recap what I think of each language, and where I&#8217;d like to go with them.</p>

<h3>Ruby</h3>

<p>I like Ruby. It&#8217;s fun, open, does not make judgment about what is proper software engineering (who cares if you like monkey patching&#8230;). The syntax binds all the features well, and the ecosystem is really interesting.</p>

<p>It might not have the performance, and no concurrency model worth mentioning, but as a new glue or script language, or perhaps for the Rails platform (although my current needs are not met by RoR), it shines.</p>

<p>I had read the <a href="http://pragprog.com/book/ruby/programming-ruby">Programming Ruby</a> (the pickaxe book), and a few books on Rails, and I liked what I saw.</p>

<p>I&#8217;ll probably follow up with <a href="http://pragprog.com/book/ppmetr/metaprogramming-ruby">Metaprogramming Ruby</a>.</p>

<p>And as I&#8217;m doing a lot of web development, I will try to look at Ruby driven <a href="http://seleniumhq.org/">Selenium</a>.</p>

<h3>Io</h3>

<p>Well, I won&#8217;t spend much more time with Io. I really don&#8217;t see any advantages. Yes, it&#8217;s compact, the interpreter is small, so it&#8217;s ideal for embedded languages. Which I don&#8217;t need.</p>

<p>As I said earlier, there is a prototype based, functional Lisp inspired language that is worth learning. It is supported by several major software companies or organisations, has users in the billions (or will soon): Javascript.</p>

<h3>Prolog</h3>

<p>I had learned Prolog at university. I had enjoyed it at the time, and doing the exercises reminded me of that fun.</p>

<p>Prolog is, by and large, about exploring search trees, so the techniques it teaches are usable in other languages. The maze solver in Haskell is essentially a tree search and would be implemented the same way in Prolog.</p>

<p>I&#8217;m glad that a recent trip back to Europe allowed me to retrieve my two Prolog books: <a href="http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;tid=8327">The Art of Prolog</a> and <a href="http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;tid=8336">The Craft of Prolog</a>. Both are large, so it might take a while.</p>

<h3>Scala</h3>

<p>I didn&#8217;t know Scala but had heard about it and was very curious. It is indeed fairly expressive, more concise than Java, and the concurrency model much better.</p>

<p>The type system is somewhat strange: much better than Java, but more verbose and less flexible than Haskell, and sometimes with bizarre results: the concatenation of a <code>List</code> of <code>Int</code> and a <code>List</code> of <code>String</code> is a <code>List</code> of <code>Any</code>&#8230;</p>

<p>In any case, Scala seems to be gaining momentum, so I&#8217;ll try and learn more about it in the near future. There are plenty of books, at least one free (<a href="http://programmingscala.com/">Programming Scala</a>, from O&#8217;Reilly), and one by the language creator (<a href="http://www.artima.com/shop/programming_in_scala">Programming in Scala</a>).</p>

<h3>Erlang</h3>

<p>Erlang was another language I had checked before, yet this book showed me something new. An important development of Erlang is OTP (Open Telecom Platform), but until very recently, there were few resources to learn about it.</p>

<p>The whole concept of supervisors is just the beginning; as far as I can tell, OTP offers a large range of tools to monitor and keep processes alive on a network. Where this really becomes interesting, is that Scala is adopting some ideas (<a href="http://akka.io/">Akka</a> is inspired by Erlang/OTP), so some knowledge of one can be reused.</p>

<p>There is an entry level book, <a href="http://pragprog.com/book/jaerlang/programming-erlang">Programming in Erlang</a>, by Joe Armstrong (Erlang&#8217;s father), and a couple of more advanced books, specifically on OTP: <a href="http://www.manning.com/logan/">Erlang and OTP in Action</a> and <a href="http://shop.oreilly.com/product/9780596518189.do">Erlang Programming</a>. I&#8217;m going through Programming in Erlang, then the in Action one.</p>

<h3>Clojure</h3>

<p>Clojure is a Lisp for the JVM. That in itself should make it interesting, but somehow it does not do it for me. Maybe it is that Clojure is not as good Lisp it could be because of the JVM limitations. Or maybe I&#8217;m just not into Lisp anymore (I used to like Perl too, but wonder why today).</p>

<p>But with my professional investment in the JVM, I will probably investigate Clojure a bit further. Just not urgently.</p>

<p>It might be interesting to see if <a href="http://norvig.com/paip.html">Paradigms of Artificial Intelligence Programming</a> can easily be ported to Clojure.</p>

<h3>Haskell</h3>

<p>Haskell is an interesting language. But it is extremely demanding, and there are few resources to come to grip with it. I knew enough about Haskell to go through this book easily, but whenever I try to go further, I find that difficulties accumulate quickly.</p>

<p>It appears that Haskell&#8217;s features are all somewhat complicated in their own way:</p>

<h4>Types</h4>

<p>Haskell type system is perhaps the most sophisticated of all widely used type systems. Basic Haskell type system is already very rich, but <a href="http://www.haskell.org/ghc/">GHC</a> adds extensions that brings the expressivity of the type system to new heights.</p>

<p>I would assume that Haskell strength must be in this type system; there are interesting libraries and applications that are built around clever use of types. But there are few resources on using types for design (or designing with types), except for very academic papers with no obvious practical uses (I probably lack imagination)</p>

<p>GHC&#8217;s extensions are similarly explored in other academic papers, but the sum of these extensions is hard to make sense of (and it sometimes feels like the authors of GHC are also trying to make sense of this patchwork and find a more consistent set of features).</p>

<p>This is in serious needs of a good book, but I can&#8217;t think of any that fits the bill.</p>

<h4>Laziness</h4>

<p>Haskell&#8217;s laziness goes much further than Clojure&#8217;s. I did not mention it in <a href="http://blog.wakatta.jp/blog/2011/11/19/seven-languages-in-seven-weeks-haskell-day-3/">Haskell Day 3</a>&#8217;s Maze solution, but laziness makes this implementation very effective: only the first solution is computed. While the implementation is strictly equivalent to nested list comprehensions, only the part required for the first output is actually run.</p>

<p>Laziness (combine with the List Monad) makes the algorithm very short: a mere 14 lines. But it makes it also very obscure. I know, intellectually, that laziness will run just a much as needed, but I don&#8217;t understand it as well as, say, I understand the time and space cost of an algorithm in C.</p>

<p>When digging a bit deeper in Haskell, newcomers learn to be wary of laziness: it introduces space leaks that can be hard to track. Solutions exist, but are spread in academic papers that require extensive understanding of the whole background theories (why do academic papers always refer to other, more obscure academic papers, and never to a single &#8220;Idiot Guide to&#8230;&#8221;?)</p>

<p>Of all the features of Haskell, I would think that laziness is the harder to master. There are few generally available resources. <a href="http://www.cambridge.org/gb/knowledge/isbn/item1161740/?site_locale=en_GB">Purely Functional Data Structures</a> explores laziness and provides a theoretical framework to compute the time cost of lazy algorithms, but does so assuming a partial laziness built on top of SML.</p>

<p><a href="http://www.iro.umontreal.ca/~lapalme/Algorithms-functional.html">Algorithms: A Functional Programming Approach</a> is about Haskell, but appears to be out of print (glad I got a copy when I first got interested in Haskell).</p>

<p>Both books are in my todo stack (which by now requires all my skills in rock climbing to handle).</p>

<h4>Syntax</h4>

<p>Haskell&#8217;s syntax is another of its strengths: it is very compact, and the type system abstracts away many details. So it&#8217;s no surprise that many people (or maybe just me) have a problem with it.</p>

<p>I learned OCaml at university (those were good days). My first few assignments, I had to implement my own list like data type, because I could not figure out how to use the default list in pattern matching. The language was so weird that it did not even occurred to me that a language whose standard list type was unusable would not leave the lab it grew in. Then eventually the syntax settled in my brain, and I started to wonder why it had been so hard before.</p>

<p>Haskell is similar (they are both somewhat descendant of ML), but far more abstract (OCaml does not support either type classes or user operators). So just looking at an expression, it is not easy to assign it a type (there might be many) or a single meaning (there might be many as well).</p>

<p>Another thing that I find hard to keep under control is the creation of anonymous functions. Between higher order functions that produce functions, and the do notation (which produces functions as well), it is hard to track what is going on, even it apparently simple expressions.</p>

<p>This is not to say that Haskell&#8217;s syntax does not &#8220;work&#8221;. It does, clearly, but the expressivity it grants is difficult to master.</p>

<h4>The compiler</h4>

<p>The compiler is another peace of the puzzle. All compilers are fantastically complex beasts; the underlying theories are just as fascinating as they are overwhelming. But in general, at least with regular imperative (or perhaps just with strict languages), my intuitions about what is costly, what is a possible leak, &#8230; just based on the code, are usually correct. With Haskell, there are many areas where I&#8217;m not sure what the compiler will do. Functional languages enthusiasts used to say that any inefficiency in their favourite language was just waiting for a sufficiently advanced compiler, but now I have a feeling that understanding what the compiler is doing is just as hard as figuring out program wide memory allocation in C&#8230;</p>

<p>And it matters. Strictness analysis, for instance, is used by GHC (and, I suppose, other Haskell compilers) to figure out which expressions could be strict (i.e. not lazy) without changing the overall semantic. This changes the time and space cost of some expressions, and makes performance difficult to predict.</p>

<h4>The meta-language</h4>

<p>Haskell is its own meta-language. What is a core feature in most languages is just a library in Haskell. This means that there is little uniformity even in fundamental part of the languages. There are <a href="http://www.randomhacks.net/articles/2007/03/10/haskell-8-ways-to-report-errors">8 ways to report errors</a> (perhaps more today). And at least that many monad transformer libraries.</p>

<p>Having to combine these various libraries (and more importantly, the libraries that use them) is difficult, and adds accidental complexity. What makes it more frustrating is that Haskell type system is otherwise very effective at making it easy to create code parts that can be combined in various ways (while checking that the combination always make some sense).</p>

<p>It would be good to standardise some of these, and maybe the <a href="http://hackage.haskell.org/platform/">Haskell Platform</a> will achieve this, although it would be nice if it was keeping up with at least GHC (at the time of writing, version 7.0.3 is in the Platform, but 7.2.2 is already out, with important changes).</p>

<h4>and so on&#8230;</h4>

<p>I would like to like Haskell. But if any language can be accused of being too academic, it is Haskell. Sometimes it feels like the main purpose of the language is to make it possible to prove, through the type system, that a specific, inefficient sort algorithm is indeed a sort algorithm.</p>

<p>I&#8217;m really curious about organisations that use Haskell for commercial purposes. What kind of features do they use the most? Is laziness really a good thing, or it is flushed away from the code and replaced by explicit on demand evaluation? Given a chance, I&#8217;d like to work in such an organisation, as I feel Haskell requires a different approach to large scale problem solving than the one I&#8217;m used to.</p>

<h3>Other topics</h3>

<p>From the same publisher (<a href="http://pragprog.com/">The Pragmatic Bookshelf</a>) as this book,
<a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a> is looking very interesting. I&#8217;m also professionally bound to SQL, so I haven&#8217;t really been paying attention to the whole NoSQL movement. Yet there are definitively interesting things going on, and the variety of alternative database models makes such a book a welcome introduction.</p>

<p>As I&#8217;ve been doing way too much sequential processing in the past, I am looking to expand my horizon and learn about large scale concurrency (Erlang, Scala, &#8230; help here), and asynchronous, event based processing. <a href="http://www.manning.com/etzion/">Event Processing in Action</a> appears to be a decent way to get started.</p>

<p>Finally, and while it is completely unrelated to whatever this book was about, I haven&#8217;t studied algorithms since I left university. I really feel I should get back to that topic, and <a href="http://www.algorist.com/">The Algorithm Design Manual</a> is just what I need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nice tool: Quick Sequence Diagram Editor]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/26/nice-tool-quick-sequence-diagram-editor/"/>
    <updated>2011-11-26T12:23:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/26/nice-tool-quick-sequence-diagram-editor</id>
    <content type="html"><![CDATA[<p>There are tools that provide a simple, elegant solution to some of my recurrent problems. Today I&#8217;d like to introduce you to the <a href="http://sdedit.sourceforge.net/index.html">Quick Sequence Diagram Editor</a> (sdedit for short).</p>

<!--more-->


<p>First, to get that out of the way: if a mouse makes you generally more productive than a keyboard, if you need to look to find the next letter to press on, then you probably won&#8217;t want to use sdedit. But then again you probably don&#8217;t have any business producing UML Sequence diagrams anyway.</p>

<p>This is because sdedit&#8217;s main interface is not a mouse, but the keyboard: instead of dragging visual elements into place, like most diagram editors, sdedit let you type a description of the diagram, and automatically generates the diagram as you type.</p>

<h2>Purpose</h2>

<p>As the name says, sdedit allows you to generate Sequence Diagrams. It is not meant as full UML designer toolkit. And perhaps even in this focused area, it probably lacks features, but for my needs I found it perfectly adequate.</p>

<p>In general, when I need such a diagram, it is to represent the flow of information between systems in an integration scenario (and usually these systems will be various web applications). The intended audience is the technical staff of my clients, which are not programmers (they are IT managers, system or database administrators, operations, &#8230;).</p>

<p>I need to communicate the sequence of calls, the parameters and return values, as well as the occasional asynchronous messages. If I ever had to add some subtle qualifications to such a diagram, I would rather do it in English, rather than use a graphical notation that few people know and most will misunderstand anyway.</p>

<h2>Usage</h2>

<p>sdedit is written in Java, and packages are available for all main platforms (and a generic binary is available for the other platforms). It is very small (2 MB) which, in these days of multi-dvds IDEs, is so refreshing (and to think that some people used to joke that Emacs was so resource hungry it needed 8 MB of memory&#8230;).</p>

<p>When it is first launched, it greets the user with an uncluttered screen:
<img src="https://lh3.googleusercontent.com/-wm3qYBXjKZ0/TtHZDVgYi3I/AAAAAAAAB4o/ji2R6edXCj0/s800/Screen%252520Shot%2525202011-11-27%252520at%25252015.30.04.png" title="'sdedit initial screen'" ></p>

<p>To start creating the diagram, you first need to declare a few participants, using a <a href="http://sdedit.sourceforge.net/enter_text/index.html">simple language</a>. sdedit uses recognizes specific keywords that can be used to customize the appearance of the diagram:</p>

<p><img src="https://lh5.googleusercontent.com/-7gCWxCHdNl0/TtHaqn_FzMI/AAAAAAAAB5A/GUS3tPAwPIo/s800/Screen%252520Shot%2525202011-11-27%252520at%25252015.35.36.png" title="'sedit participants'" ></p>

<p>Messages are created by stating who initiates them, and who receives them, with a familiar object oriented syntax:</p>

<p><img src="https://lh4.googleusercontent.com/-Xfn_SgHyQXw/TtHctQyR_DI/AAAAAAAAB5M/jt3dKtzMeoc/s800/Screen%252520Shot%2525202011-11-27%252520at%25252015.45.58.png" title="'sdedit message calls'" ></p>

<p>Asynchronous messages are also possible; grouping calls into a named sequence (and nesting such sequences) is also supported.</p>

<h2>Getting help</h2>

<p>The <a href="http://sdedit.sourceforge.net/index.html">website</a> has a complete documentation, but I found that the integrated help page, especially its set of examples is far more useful:</p>

<p><img src="https://lh5.googleusercontent.com/-ms8UYivtoOM/TtHdweYCUlI/AAAAAAAAB5Y/IJpHfomujU8/s800/Screen%252520Shot%2525202011-11-27%252520at%25252015.50.28.png" title="'sdedit examples'" ></p>

<p>That, and the fact that diagrams are redrawn as you type, makes it easy to experiment and figure out what works.</p>

<h2>Try it&#8230;</h2>

<p>I found that sdedit is useful to clarify my ideas. All too often, a UML designer is just a designer for a diagram that is already fully formed in your mind. But with sdedit simple input syntax and instant feedback, I can experiment and see immediately which design works (or appears to work).</p>

<p>I&#8217;m not sure other parts of UML are suitable for such an exploratory design tool, but thanks to sdedit, at least a Sequence Diagram becomes a bicycle for the mind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Haskell Day 3.5]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/21/seven-languages-in-seven-weeks-haskell-day-3-dot-5/"/>
    <updated>2011-11-21T13:21:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/21/seven-languages-in-seven-weeks-haskell-day-3-dot-5</id>
    <content type="html"><![CDATA[<p>Haskell Day 3 had one exercise I forgot about: to implement monads in a different language. In this post I correct this oversight.</p>

<!--more-->


<p>There are various implementations of monads for other languages. Some are well suited for the exercise (because they have a flexible syntax like Clojure, for instance). With others the whole thing sticks out like a sore thumb. I think the latter is useful to highlight Haskell&#8217;s features.</p>

<p>I choose Java, which shows how helpful Haskell&#8217;s syntax and type system really is, compared to a mainstream language. Regarding types, maybe generics would have helped, but I&#8217;m not familiar enough with them to figure it out (for professional reasons, I got stuck with Java 1.4 for quite a long time).</p>

<p>I implements a List Monad, and creates a list of pairs where the first element is smaller than the second. In Haskell, this is what it would look like:</p>

<figure class='code'><figcaption><span>List Monad example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">do</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>   <span class="n">y</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>   <span class="kr">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span>
</span><span class='line'>     <span class="kr">then</span> <span class="n">return</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>     <span class="kr">else</span> <span class="n">fail</span> <span class="s">&quot;Not a valid pair&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Haskell&#8217;s notation for functions is especially useful here. Note how the Java codes forces me to tie <code>MakePair1</code> and <code>MakePair2</code>, while the Haskell equivalent seems to have no special construct whatsoever (the do notation hides the underlying anonymous functions).</p>

<figure class='code'><figcaption><span> (ListMonad.java)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/ListMonad.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">test</span><span class="o">.</span><span class="na">monad</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Java type system is not rich enough to be used here.</span>
</span><span class='line'><span class="cm"> * Even with generics, some expression do not typecheck,</span>
</span><span class='line'><span class="cm"> * so I use Object everywhere</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">({</span> <span class="s">&quot;rawtypes&quot;</span><span class="o">,</span> <span class="s">&quot;unchecked&quot;</span> <span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListMonad</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">ListMonad</span> <span class="nf">bind</span><span class="o">(</span><span class="n">Func</span> <span class="n">func</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayList</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="nl">obj:</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">res</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">func</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">obj</span><span class="o">).</span><span class="na">getContent</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">ListMonad</span> <span class="nf">wrap</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayList</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>      <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// error param is not used in ListMonad</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">ListMonad</span> <span class="nf">fail</span><span class="o">(</span><span class="n">String</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">List</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">interface</span> <span class="nc">Func</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ListMonad</span> <span class="nf">run</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>    
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">ListMonad</span> <span class="nf">monadDo</span><span class="o">(</span><span class="n">List</span> <span class="n">lst</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="n">lst</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span> <span class="n">output</span> <span class="o">=</span> <span class="n">monadDo</span><span class="o">(</span><span class="n">Sequence</span><span class="o">.</span><span class="na">makeRange</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)).</span><span class="na">bind</span><span class="o">(</span><span class="k">new</span> <span class="n">MakePair1</span><span class="o">()).</span><span class="na">getContent</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="nl">obj:</span> <span class="n">output</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MakePair1</span> <span class="kd">implements</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">Func</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">ListMonad</span> <span class="nf">run</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ListMonad</span><span class="o">.</span><span class="na">Func</span> <span class="n">func</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MakePair2</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">monadDo</span><span class="o">(</span><span class="n">Sequence</span><span class="o">.</span><span class="na">makeRange</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)).</span><span class="na">bind</span><span class="o">(</span><span class="n">func</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MakePair2</span> <span class="kd">implements</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">Func</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Object</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MakePair2</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">ListMonad</span> <span class="nf">run</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Integer</span> <span class="n">cont</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Integer</span> <span class="n">val</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">cont</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">val</span><span class="o">.</span><span class="na">intValue</span><span class="o">())</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="n">content</span><span class="o">,</span> <span class="n">obj</span><span class="o">));</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">fail</span><span class="o">(</span><span class="s">&quot;Not a valid pair&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">({</span> <span class="s">&quot;rawtypes&quot;</span><span class="o">,</span> <span class="s">&quot;unchecked&quot;</span> <span class="o">})</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Sequence</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">List</span> <span class="nf">makeRange</span><span class="o">(</span><span class="kt">int</span> <span class="n">from</span><span class="o">,</span> <span class="kt">int</span> <span class="n">to</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayList</span> <span class="n">lst</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">from</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">to</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">lst</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">lst</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Pair</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Object</span> <span class="n">fst</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Object</span> <span class="n">snd</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Pair</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">fst</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">snd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">fst</span> <span class="o">=</span> <span class="n">fst</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">snd</span> <span class="o">=</span> <span class="n">snd</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="n">getFst</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">getSnd</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getFst</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">fst</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getSnd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">snd</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation is otherwise fairly straightforward given the definition of monads:</p>

<ul>
<li><code>monadDo</code> and <code>wrap</code> (Haskell&#8217;s <code>return</code>) both create a new <code>ListMonad</code>;</li>
<li><code>fail</code> is also a way to create a <code>ListMonad</code> which represents failure. I pass a <code>String</code> argument to have the same signature as Haskell&#8217;s <code>fail</code>, but in List Monads such argument is ignored, so I ignore it here as well;</li>
<li><code>bind</code> is the <code>&gt;&gt;=</code> version, which collects the results of the <code>func</code> argument run over each element of the current List content; a new <code>ListMonad</code> with the results as content is returned</li>
<li>finally, <code>getContent</code> gives back the current content of the <code>ListMonad</code>.</li>
</ul>


<p>The test code is nothing fancy (I certainly wouldn&#8217;t want to try and write my maze solving algorithm in Java using the ListMonad), but it tests all the features.</p>

<p>Running it produces the expected output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(1, 2)
</span><span class='line'>(1, 3)
</span><span class='line'>(1, 4)
</span><span class='line'>(1, 5)
</span><span class='line'>(2, 3)
</span><span class='line'>(2, 4)
</span><span class='line'>(2, 5)
</span><span class='line'>(3, 4)
</span><span class='line'>(3, 5)
</span><span class='line'>(4, 5)</span></code></pre></td></tr></table></div></figure>


<p>Aren&#8217;t you glad you can write this in Haskell instead?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Haskell Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/19/seven-languages-in-seven-weeks-haskell-day-3/"/>
    <updated>2011-11-19T14:16:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/19/seven-languages-in-seven-weeks-haskell-day-3</id>
    <content type="html"><![CDATA[<p>Last day with Haskell, and this time we grapple with classes and monads. That&#8217;s pretty much where most beginners give up in disgust&#8230;</p>

<!--more-->


<p>And that&#8217;s too bad, because both (and the rest of advanced Haskell features) are very expressive (see below the Maze problem) and powerful. But classes are unusual (and the name tends to confuse Object Oriented people), while monads appear to solve a problem that is trivial in other languages (which is not true, or mostly not true).</p>

<h2>Classes</h2>

<p>Classes are more properly understood as interfaces, but the comparison can be misleading. Class elements are types that are guaranteed to provide implementation for specific functions. Combined with polymorphism, it allows writing functions that are more intimate with their arguments, while keeping purity and referential transparency (in some sense, it plays a role similar to functors in ML languages).</p>

<p>Classes nicely support monads (and other composition mechanisms) by providing interfaces these abstractions can build upon.</p>

<h2>Monads</h2>

<p>Monads are mechanisms to compose calculations. They also happen to solve the IO problem in Haskell, which is a nice (and significant) bonus. But the calculation composition is core. With it, one can have backtracking, continuation, probabilistic computing, anything you could think off. Thinking of anything actually is quite hard, as most programmers are not used to such freedom. For IO, it just happens to guarantee sequential evaluation.</p>

<p>There are a number of resources to learn about Monads (indeed, it seems the path to Haskell mastery must include writing at least one Monad tutorial). I found  <a href="http://monads.haskell.cz/html/">All About Monads</a> very useful. The introduction is really good, but links to this tutorial tend to disappear, unfortunately. There is also the <a href="http://book.realworldhaskell.org/read/monads.html">Monads</a> chapter of <a href="http://book.realworldhaskell.org/">Real World Haskell</a> (which you should read, but wait for the second edition to buy). This introduction is more complex, as it builds a State Monad rather than the Maybe Monad.</p>

<p>Finally, <a href="http://learnyouahaskell.com/a-fistful-of-monads">A Fistful of Monads</a> from <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good</a> also covers the Maybe Monad as an introduction. I have the book but did not read it yet, so I cannot comment on it, but I have seen great reviews.</p>

<h2>Exercises</h2>

<h3>Lookup function returning Maybe</h3>

<p>The function <code>my_lookup</code> is easy; it iterates over a list of pairs key, value, and returns <code>Just value</code> when the key matches. On empty list, it returns <code>Nothing</code>. There is no need to think about monads at this point. A key,value map is really some data structure that <code>Maybe</code> contains a specific key.</p>

<p>Slightly more difficult was the <code>testData</code>. The nesting was somewhat tricky to get right.</p>

<figure class='code'><figcaption><span> (lookup.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/lookup.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Lookup</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">my_lookup</span> <span class="n">key</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class='line'><span class="nf">my_lookup</span> <span class="n">key</span> <span class="p">((</span><span class="n">k</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span><span class="kt">:</span><span class="n">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">key</span> <span class="o">==</span> <span class="n">k</span>  <span class="ow">=</span> <span class="kt">Just</span> <span class="n">value</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">lookup</span> <span class="n">key</span> <span class="n">rest</span>
</span><span class='line'>
</span><span class='line'><span class="nf">testData</span> <span class="ow">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="kt">[]</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="s">&quot;tada!&quot;</span><span class="p">)]),</span> <span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;j&quot;</span><span class="p">,</span> <span class="s">&quot;nope&quot;</span><span class="p">)])]),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&quot;k&quot;</span><span class="p">,</span> <span class="s">&quot;tada!&quot;</span><span class="p">)])])]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once this is defined, using it with the <code>&gt;&gt;=</code> operator is really simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Lookup&gt; my_lookup 2 testData &gt;&gt;= my_lookup "a" &gt;&gt;= my_lookup "i"
</span><span class='line'>Just "tada!"
</span><span class='line'>*Lookup&gt; my_lookup 2 testData &gt;&gt;= my_lookup "b" &gt;&gt;= my_lookup "i"
</span><span class='line'>Nothing</span></code></pre></td></tr></table></div></figure>


<h3>Solving Maze</h3>

<p>Using the List Monad to solve problems is very similar to using Prolog: elements in a list are alternative paths; failure (which must be explicit by calling <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:fail"><code>fail</code></a> or <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Control-Monad.html#v:guard"><code>guard</code></a>) backtracks to the next alternative; [<code>return</code>] adds a solution to the list of solutions (even if there&#8217;s only one possible solution, the List Monad produces a list).</p>

<p>To solve the maze, the algorithm do the following:</p>

<ul>
<li>the <code>loop</code> subfunction is used to explore a given solution; the List Monad hides the iteration and backtracking over alternatives</li>
<li>the <code>loop</code> function is always called with the reverse path so far: the first element is actually the current position</li>
<li>if the current position is the exit position, the path is reversed then returned as solution</li>
<li>otherwise, the current node is checked, and its exits retrieved</li>
<li>the positions in the path are first removed from the exits, to avoid looping (so we never go over the same position twice)</li>
<li>the List Monad main logic starts there:

<ul>
<li>first <code>guard</code> that the list of possible exits is not empty</li>
<li>then select and alternative new position</li>
<li>call <code>loop</code> on the new path to explore it</li>
</ul>
</li>
</ul>


<p>The code is fairly short, and perhaps could be shorter. The backtracking is provided for free by the List Monad, but very effective to implement a search (I used it to solve Sudoku problems).</p>

<p>To be fair, I took some time to track a bug: instead of adding the whole current path to the recursive <code>loop</code> call, I only passed the tail. That caused <code>loop</code> to actually ignore the current path, and run in circle forever. Once fixed, the search was instantaneous.</p>

<figure class='code'><figcaption><span> (maze.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/maze.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Maze</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- a Maze is an array of Node</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">Maze</span> <span class="ow">=</span> <span class="p">[[</span><span class="kt">Node</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- each node can have a number of exits (indicated by locations in the Maze)</span>
</span><span class='line'><span class="kr">data</span> <span class="kt">Node</span> <span class="ow">=</span> <span class="kt">Exits</span> <span class="p">[(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)]</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- solve a maze using List monad:</span>
</span><span class='line'><span class="c1">-- </span>
</span><span class='line'><span class="nf">solveMaze</span> <span class="ow">::</span> <span class="kt">Maze</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span><span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">[(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)]</span>
</span><span class='line'><span class="nf">solveMaze</span> <span class="n">m</span> <span class="n">pos</span> <span class="p">(</span><span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">case</span> <span class="n">loop</span> <span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="kr">of</span>
</span><span class='line'>    <span class="kt">[]</span> <span class="ow">-&gt;</span> <span class="kt">Nothing</span>
</span><span class='line'>    <span class="p">(</span><span class="n">p</span><span class="kt">:</span><span class="kr">_</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Just</span> <span class="o">$</span> <span class="n">p</span>
</span><span class='line'>  <span class="kr">where</span>
</span><span class='line'>    <span class="n">loop</span> <span class="n">path</span><span class="o">@</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span><span class="kt">:</span><span class="kr">_</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>      <span class="kr">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">e1</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">==</span> <span class="n">e2</span>
</span><span class='line'>      <span class="kr">then</span> <span class="n">return</span> <span class="o">$</span> <span class="n">reverse</span> <span class="n">path</span>
</span><span class='line'>      <span class="kr">else</span>
</span><span class='line'>        <span class="kr">let</span> <span class="p">(</span><span class="kt">Exits</span> <span class="n">exits</span><span class="p">)</span> <span class="ow">=</span> <span class="p">((</span><span class="n">m</span> <span class="o">!!</span> <span class="n">i</span><span class="p">)</span> <span class="o">!!</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>            <span class="n">poss</span> <span class="ow">=</span> <span class="n">exits</span> <span class="o">\\</span> <span class="n">path</span>
</span><span class='line'>        <span class="kr">in</span> <span class="kr">do</span> <span class="n">guard</span> <span class="p">(</span><span class="n">not</span> <span class="o">$</span> <span class="n">null</span> <span class="n">poss</span><span class="p">)</span>
</span><span class='line'>              <span class="n">pos</span> <span class="ow">&lt;-</span> <span class="n">poss</span>
</span><span class='line'>              <span class="n">loop</span> <span class="p">(</span><span class="n">pos</span><span class="kt">:</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- the problem is parsed by looking at characters around</span>
</span><span class='line'><span class="c1">-- every even position (position with even x and y)</span>
</span><span class='line'><span class="c1">-- if the character in a direction is a space, there&#39;s an exit</span>
</span><span class='line'><span class="nf">parseMaze</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Maze</span>
</span><span class='line'><span class="nf">parseMaze</span> <span class="n">raw</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">rows</span> <span class="ow">=</span> <span class="n">floor</span> <span class="o">$</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">length</span> <span class="n">raw</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">cols</span> <span class="ow">=</span> <span class="n">floor</span> <span class="o">$</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">length</span> <span class="o">$</span> <span class="n">head</span> <span class="n">raw</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>  <span class="kr">in</span> <span class="p">[[</span><span class="n">makeNode</span> <span class="n">i</span> <span class="n">j</span> <span class="o">|</span> <span class="n">j</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">cols</span><span class="p">]]</span> <span class="o">|</span> <span class="n">i</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">rows</span><span class="p">]]</span>
</span><span class='line'> <span class="kr">where</span>
</span><span class='line'>  <span class="n">makeNode</span> <span class="n">i</span> <span class="n">j</span> <span class="ow">=</span> <span class="kt">Exits</span> <span class="o">$</span> <span class="n">concatMap</span> <span class="p">(</span><span class="n">makeExit</span> <span class="n">i</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">[(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'>  <span class="n">makeExit</span> <span class="n">i</span> <span class="n">j</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">if</span> <span class="p">(</span><span class="n">raw</span> <span class="o">!!</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!!</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">j</span> <span class="o">+</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span>
</span><span class='line'>                        <span class="kr">then</span> <span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>                        <span class="kr">else</span> <span class="kt">[]</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Problem</span> <span class="ow">=</span> <span class="kt">Prob</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- updateAt runs an update function on the nth element in a list</span>
</span><span class='line'><span class="c1">-- keeps the rest</span>
</span><span class='line'><span class="nf">updateAt</span> <span class="n">n</span> <span class="n">f</span> <span class="n">ls</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">case</span> <span class="n">splitAt</span> <span class="n">n</span> <span class="n">ls</span> <span class="kr">of</span>
</span><span class='line'>    <span class="p">(</span><span class="n">pre</span><span class="p">,</span> <span class="p">(</span><span class="n">u</span><span class="kt">:</span><span class="n">rest</span><span class="p">))</span> <span class="ow">-&gt;</span> <span class="n">pre</span> <span class="o">++</span> <span class="p">((</span><span class="n">f</span> <span class="n">u</span><span class="p">)</span><span class="kt">:</span><span class="n">rest</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- update the prob description with path iteratively</span>
</span><span class='line'><span class="nf">displaySol</span> <span class="n">prob</span> <span class="n">sol</span> <span class="ow">=</span>
</span><span class='line'>  <span class="n">foldl&#39;</span> <span class="n">update</span> <span class="n">prob</span> <span class="n">sol</span>
</span><span class='line'> <span class="kr">where</span>
</span><span class='line'>  <span class="n">update</span> <span class="n">prob</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="ow">=</span> <span class="n">updateAt</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">updateAt</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">const</span> <span class="sc">&#39;*&#39;</span><span class="p">))</span> <span class="n">prob</span>
</span><span class='line'>
</span><span class='line'><span class="nf">solveProblem</span> <span class="ow">::</span> <span class="kt">FilePath</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">solveProblem</span> <span class="n">f</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">do</span> <span class="p">(</span><span class="kt">Prob</span> <span class="n">start</span> <span class="n">end</span> <span class="n">prob</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="n">readProblem</span> <span class="n">f</span>
</span><span class='line'>     <span class="kr">let</span> <span class="n">maze</span>   <span class="ow">=</span> <span class="n">parseMaze</span> <span class="n">prob</span>
</span><span class='line'>     <span class="kr">case</span> <span class="n">solveMaze</span> <span class="n">maze</span> <span class="n">start</span> <span class="n">end</span> <span class="kr">of</span>
</span><span class='line'>       <span class="kt">Just</span> <span class="n">sol</span> <span class="ow">-&gt;</span> <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">unlines</span> <span class="o">$</span> <span class="n">displaySol</span> <span class="n">prob</span> <span class="n">sol</span>
</span><span class='line'>       <span class="kt">Nothing</span>  <span class="ow">-&gt;</span> <span class="n">putStrLn</span> <span class="s">&quot;no solution found&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- special code for sample mazes from</span>
</span><span class='line'><span class="c1">-- http://benjamin-meyer.blogspot.com/2005/01/ascii-maze-ment-puzzle.html</span>
</span><span class='line'><span class="nf">readProblem</span> <span class="ow">::</span> <span class="kt">FilePath</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="kt">Problem</span>
</span><span class='line'><span class="nf">readProblem</span> <span class="n">f</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">do</span> <span class="n">raw</span> <span class="ow">&lt;-</span> <span class="n">readFile</span> <span class="n">f</span>
</span><span class='line'>     <span class="kr">let</span> <span class="n">filtered</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">filterMaze</span> <span class="n">raw</span> <span class="kr">of</span>
</span><span class='line'>                      <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">((</span><span class="n">init</span> <span class="o">$</span> <span class="n">init</span> <span class="n">l</span><span class="p">)</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">length</span> <span class="n">filtered</span><span class="p">,</span> <span class="n">length</span> <span class="p">(</span><span class="n">head</span> <span class="n">filtered</span><span class="p">))</span>
</span><span class='line'>     <span class="n">return</span> <span class="o">$</span> <span class="kt">Prob</span> <span class="p">((</span><span class="n">i</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">j</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">filtered</span>
</span><span class='line'>
</span><span class='line'><span class="nf">splitAtEvery</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="n">a</span><span class="p">]]</span>
</span><span class='line'><span class="nf">splitAtEvery</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">splitAtEvery</span> <span class="n">n</span> <span class="n">ls</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">case</span> <span class="n">splitAt</span> <span class="n">n</span> <span class="n">ls</span> <span class="kr">of</span>
</span><span class='line'>    <span class="p">(</span><span class="n">pre</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">pre</span><span class="kt">:</span><span class="n">splitAtEvery</span> <span class="n">n</span> <span class="n">rest</span>
</span><span class='line'>
</span><span class='line'><span class="nf">removeExtraSpaces</span> <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">=</span> <span class="n">l</span><span class="kt">:</span><span class="p">(</span><span class="n">concatMap</span> <span class="n">tail</span> <span class="o">$</span> <span class="n">splitAtEvery</span> <span class="mi">3</span> <span class="n">ls</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">filterMaze</span> <span class="ow">=</span> <span class="n">map</span> <span class="n">removeExtraSpaces</span> <span class="o">.</span> <span class="n">map</span> <span class="p">(</span><span class="n">drop</span> <span class="mi">5</span><span class="p">)</span> <span class="o">.</span> <span class="n">lines</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of the code includes a parser for a specific maze description (I found sample mazes <a href="http://benjamin-meyer.blogspot.com/2005/01/ascii-maze-ment-puzzle.html">here</a>), and code to process a problem into a <code>Maze</code> instance, and code to display a solution.</p>

<p>Testing (test data <a href="https://github.com/icefox/asciimaze/blob/master/sample-mazes/input1.txt">here</a>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Maze&gt; solveProblem "input1.txt"
</span><span class='line'> ___________________
</span><span class='line'>|   | |   |        *|
</span><span class='line'>| __| | __|___  __  |
</span><span class='line'>|   | |       |   |*|
</span><span class='line'>| __| |_____  |_  | |
</span><span class='line'>|   | | | |       |*|
</span><span class='line'>| __| | | |_______| |
</span><span class='line'>|            * * * *|
</span><span class='line'>| __________  __    |
</span><span class='line'>| |   |    * *| | | |
</span><span class='line'>|_|   |___  __| | |_|
</span><span class='line'>|   |     |*| | | | |
</span><span class='line'>|_  |_    | | | |_| |
</span><span class='line'>|   |   |  *|       |
</span><span class='line'>| __|_  |_  | __    |
</span><span class='line'>| |     |  * *| | | |
</span><span class='line'>|_| __  | __  | |_|_|
</span><span class='line'>| |   | | |  *  |   |
</span><span class='line'>| |   | |_|_  __|_  |
</span><span class='line'>|   | | |   |* *  | |
</span><span class='line'>| __|_| | __|_    | |
</span><span class='line'>| | |   |  * * *|   |
</span><span class='line'>|_| | __|_  __  |___|
</span><span class='line'>| | |     |*| | |   |
</span><span class='line'>| | | ____| | |_|_  |
</span><span class='line'>|   | |* * *        |
</span><span class='line'>|_  |_|   __  ______|
</span><span class='line'>|    * *| |     |   |
</span><span class='line'>|     __| |_  __| __|
</span><span class='line'>| | |*  |   |   |   |
</span><span class='line'>| |_| __|___|___|_  |
</span><span class='line'>|   |* *|     |     |
</span><span class='line'>|___|   |   __| ____|
</span><span class='line'>|   | |* *|     |   |
</span><span class='line'>| __|_|_  |     | __|
</span><span class='line'>|       |*| | |     |
</span><span class='line'>|_____  | |_| |_  __|
</span><span class='line'>|* * *|  *|     |   |
</span><span class='line'>|     |_  | __  |   |
</span><span class='line'>|*| |* * *|   | | | |
</span><span class='line'>|_|_|_____|___|_|_|_|</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping up Day 3 and Haskell</h2>

<p>The exercises (ok, just the maze one) were challenging and show or at least hint at Haskell strength: the ability to compose calculations from basic elements and add advanced control mechanisms almost transparently.</p>

<p>I enjoy Haskell; it allows to think at a higher level, to see computations from different angles, in a way that expands the mind (sometimes painfully). And while it is certainly not mainstream, there are high quality niches (banking and financial companies) that justify investing (stupid pun intended) in Haskell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Haskell Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/18/seven-languages-in-seven-weeks-haskell-day-2/"/>
    <updated>2011-11-18T09:39:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/18/seven-languages-in-seven-weeks-haskell-day-2</id>
    <content type="html"><![CDATA[<p>Today introduces the functional aspects of Haskell: higher order functions, partial application of functions and lazy evaluation.</p>

<!--more-->


<p>Higher order functions should no longer be surprising: many languages have that, even if Haskell other features make them very easy to use.</p>

<p>Partial application is such a feature. A function can be passed some, but not all its arguments, meaning that it is still a function, not a value. It reduces the number of anonymous functions one needs to write when using higher order functions.</p>

<p>Lazy evaluation is something very unique (among the lazy languages, only Haskell is somewhat mainstream). Clojure has lazy lists, which is cool, but lazy evaluation applies to everything. A piece of data can refer to itself in its definition, as long as the part that is needed can be evaluated before the part it depends on.</p>

<p>For instance, a canonical definition of the Fibonacci sequence is</p>

<figure class='code'><figcaption><span>Fibonacci sequence  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fibs</span> <span class="ow">=</span> <span class="mi">1</span><span class="kt">:</span><span class="mi">1</span><span class="kt">:</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">fibs</span> <span class="p">(</span><span class="n">tail</span> <span class="n">fibs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>fibs</code> list is the list of Fibonacci numbers. It starts with 1, 1, then the list of itself summed with its own tail&#8230; but the 3rd number depends on the first and the second, so its ok. By the time we need to compute the 4th, the 3rd is already known, and so on.</p>

<p>It takes but an instant to compute the 100000th number in the sequence:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Parse&gt; fibs !! 100000
</span><span class='line'>42026927029951543863190051012939151317739157026322345033047..... -- number truncated to save space</span></code></pre></td></tr></table></div></figure>


<p>Which brings me to a remark on the book: why on earth is <code>fibNth</code> defined the way it is? That function exists, and is called <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:-33--33-"><code>!!</code></a>. The code in the book is convoluted, does not need that many parenthesis, and even if you have a problem with <code>!!</code>, there is no need to use both <code>take</code> and <code>drop</code> if you&#8217;re going to take the <code>head</code> of the result (<code>take</code> will make a copy of the list for no good reason).</p>

<h2>Exercises</h2>

<p>In general I tried to avoid standard functions that implement a significant portion of the intended behaviour. So I didn&#8217;t use <code>sort</code> in my sort function, or <code>read</code> in parsing, &#8230;</p>

<h3>Simple sort</h3>

<p>A good sort algorithm is always tricky, but insertion sort is simple enough and easy to express with pattern matching. My implementation has the same signature as the standard <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-List.html#v:sort"><code>sort</code></a> function. It expects is arguments to have the class <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-Ord.html#t:Ord"><code>Ord</code></a>s, which guarantees they can be compared.</p>

<figure class='code'><figcaption><span> (mysort.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/mysort.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">MySort</span> <span class="kr">where</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Ord</span>
</span><span class='line'>
</span><span class='line'><span class="nf">my_sort</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">my_sort</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">my_insert</span> <span class="n">x</span> <span class="o">$</span> <span class="n">my_sort</span> <span class="n">xs</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">my_insert</span> <span class="n">x</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'>        <span class="n">my_insert</span> <span class="n">x</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span>        <span class="ow">=</span> <span class="n">y</span><span class="kt">:</span><span class="n">my_insert</span> <span class="n">x</span> <span class="n">ys</span>
</span><span class='line'>                           <span class="o">|</span> <span class="n">otherwise</span>    <span class="ow">=</span> <span class="n">x</span><span class="kt">:</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*MySort&gt; my_sort ([1..10] ++ [10, 9.. 1])
</span><span class='line'>[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]</span></code></pre></td></tr></table></div></figure>


<h3>Sort using comparison function</h3>

<p>Sort using a specific comparison function is not harder. The standard implementation uses <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-Ord.html#t:Ordering"><code>Data.Ord.Ordering</code></a> to replace <code>&gt;</code> by the comparison result <code>GT</code>. My implementation has the same signature as the standard <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-List.html#v:sortBy"><code>sortBy</code></a>, but still uses the insertion sort as in <code>my_sort</code>.</p>

<figure class='code'><figcaption><span> (mysortby.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/mysortby.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">MySort</span> <span class="kr">where</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Ord</span>
</span><span class='line'>
</span><span class='line'><span class="nf">my_sort_by</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Ordering</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">my_sort_by</span> <span class="kr">_</span> <span class="kt">[]</span>     <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">my_sort_by</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">my_insert_by</span> <span class="n">f</span> <span class="n">x</span> <span class="o">$</span> <span class="n">my_sort_by</span> <span class="n">f</span> <span class="n">xs</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">my_insert_by</span> <span class="kr">_</span> <span class="n">x</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'>        <span class="n">my_insert_by</span> <span class="n">f</span> <span class="n">x</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span> <span class="o">|</span> <span class="n">f</span> <span class="n">x</span> <span class="n">y</span> <span class="o">==</span> <span class="kt">GT</span> <span class="ow">=</span> <span class="n">y</span><span class="kt">:</span><span class="n">my_insert_by</span> <span class="n">f</span> <span class="n">x</span> <span class="n">ys</span>
</span><span class='line'>                                <span class="o">|</span> <span class="n">otherwise</span>   <span class="ow">=</span> <span class="n">x</span><span class="kt">:</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it (using <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-Ord.html#v:compare"><code>compare</code></a> on the absolute value):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*MySort&gt; my_sort_by (\a b -&gt; compare (abs a) (abs b)) ([10, 9..1] ++ [-10..(-1)])
</span><span class='line'>[1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8,-8,9,-9,10,-10]</span></code></pre></td></tr></table></div></figure>


<h3>Parse string into number</h3>

<p>Parsing is not hard; to do it I break the string into a integral part, and the fractional part. Both are then cleaned to remove non digits.</p>

<p>The integral part is parsed left to right (with <code>foldl</code>), each time multiplying the already parsed number by 10 before adding the current number.</p>

<p>The fractional part is parsed right to left (with <code>foldr</code>), dividing the already parsed number by 10 before adding the current number.</p>

<p>Note the use of <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:fromIntegral"><code>fromIntegral</code></a> function. This is used to convert and integral number (<code>Int</code>, <code>Integer</code>, &#8230;) into any type of number. This is necessary to be allowed to divide the results and add the fractional part.</p>

<p>The use of fractional arithmetic makes this function less effective than <code>read</code>.</p>

<figure class='code'><figcaption><span> (parse.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/parse.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Parse</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Char</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'>
</span><span class='line'><span class="nf">parse</span> <span class="n">str</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span> <span class="p">(</span><span class="n">dig</span><span class="p">,</span> <span class="n">frac</span><span class="p">)</span> <span class="ow">=</span> <span class="n">break</span> <span class="p">(</span><span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="p">)</span> <span class="n">str</span>
</span><span class='line'>    <span class="kr">in</span> <span class="n">foldl&#39;</span> <span class="n">pDig</span> <span class="mi">0</span> <span class="p">(</span><span class="n">clean</span> <span class="n">dig</span><span class="p">)</span> <span class="o">+</span> <span class="n">foldr</span> <span class="n">pFrac</span> <span class="mi">0</span> <span class="p">(</span><span class="n">clean</span> <span class="n">frac</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nf">clean</span> <span class="n">s</span>   <span class="ow">=</span> <span class="n">filter</span> <span class="n">isDigit</span> <span class="n">s</span>
</span><span class='line'><span class="nf">pDig</span>  <span class="n">a</span> <span class="n">b</span> <span class="ow">=</span> <span class="mi">10</span><span class="o">*</span><span class="n">a</span> <span class="o">+</span> <span class="n">toNum</span> <span class="n">b</span>
</span><span class='line'><span class="nf">pFrac</span> <span class="n">a</span> <span class="n">b</span> <span class="ow">=</span> <span class="n">toNum</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">/</span><span class="mi">10</span>
</span><span class='line'><span class="nf">toNum</span> <span class="n">c</span>   <span class="ow">=</span> <span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">ord</span> <span class="n">c</span> <span class="o">-</span> <span class="n">ord</span> <span class="sc">&#39;0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Parse&gt; parse "$2,345,678.99"
</span><span class='line'>2345678.99
</span><span class='line'>*Parse&gt; parse "2,345"
</span><span class='line'>2345.0
</span><span class='line'>*Parse&gt; parse ".99"
</span><span class='line'>0.99
</span><span class='line'>*Parse&gt; parse ".234"
</span><span class='line'>0.23399999999999999</span></code></pre></td></tr></table></div></figure>


<h3>Lazy sequences</h3>

<p>Once again, nothing difficult. Haskell notation pretty much reads as a specification of the problem:</p>

<figure class='code'><figcaption><span> (lazy.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/lazy.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Lazy</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">thirds</span> <span class="n">x</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">3</span><span class="o">..</span><span class="p">]</span>
</span><span class='line'><span class="nf">fifths</span> <span class="n">x</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">5</span><span class="o">..</span><span class="p">]</span>
</span><span class='line'><span class="nf">eighths</span> <span class="n">x</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="p">(</span><span class="n">thirds</span> <span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="n">fifths</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Lazy&gt; take 10 $ thirds 10
</span><span class='line'>[10,13,16,19,22,25,28,31,34,37]
</span><span class='line'>*Lazy&gt; take 10 $ fifths 20
</span><span class='line'>[20,25,30,35,40,45,50,55,60,65]
</span><span class='line'>*Lazy&gt; take 10 $ eighths 10 20
</span><span class='line'>[30,38,46,54,62,70,78,86,94,102]</span></code></pre></td></tr></table></div></figure>


<h3>Partial application</h3>

<p>Notice the use of partial application of operators: if you wrap the operator and its argument in parenthesis (they are needed here), you have a function that takes the missing argument. The missing argument can be the left one as see here.</p>

<figure class='code'><figcaption><span> (partial.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/partial.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Partial</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">half</span> <span class="ow">=</span> <span class="p">(</span><span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">terminate</span> <span class="ow">=</span> <span class="p">(</span><span class="o">++</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Partial&gt; half 10
</span><span class='line'>5.0
</span><span class='line'>*Partial&gt; terminate "Hello"
</span><span class='line'>"Hello\n"</span></code></pre></td></tr></table></div></figure>


<h2>Challenges</h2>

<h3>Greatest Common Denominator</h3>

<p>I must have missed something, because that was hardly a challenge. I just implemented the <a href="http://en.wikipedia.org/wiki/Euclidean_algorithm">Euclidean algorithm</a>:</p>

<figure class='code'><figcaption><span> (gcd.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/gcd.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">GCD</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Euclidean algorithm</span>
</span><span class='line'><span class="nf">my_gcd</span> <span class="n">m</span> <span class="n">n</span> <span class="o">|</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">n</span>     <span class="ow">=</span> <span class="n">my_gcd</span> <span class="n">n</span> <span class="n">m</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>    <span class="ow">=</span> <span class="n">m</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">my_gcd</span> <span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">n</span><span class="p">)</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*GCD&gt; my_gcd 1961 901
</span><span class='line'>53
</span><span class='line'>*GCD&gt; my_gcd 901 1961 
</span><span class='line'>53
</span><span class='line'>*GCD&gt; gcd 1961 901
</span><span class='line'>53</span></code></pre></td></tr></table></div></figure>


<p><code>my_gcd</code> agrees with the standard <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:gcd"><code>gcd</code></a> function.</p>

<h3>Lazy prime number sequences</h3>

<p>This one was a bit trickier, yet an implementation that closely follows the <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> algorithm is fairly short.</p>

<p>I first need a difference function that works on infinite lists: I manage this by taking into account the fact that the lists are always sorted. The <code>minus</code> just compares the first item of its arguments, so it can work linearly on both of them. Note that this function is not able to work on finite lists, but in this context there is no need to.</p>

<p>The implementation follows the proposed optimizations: it puts 2 in the prime number list right from the start, and skips other even numbers. It also start filtering at <code>p*p</code>, as smaller multiples have been filtered already (being a multiple of smaller prime numbers).</p>

<figure class='code'><figcaption><span> (sieve.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/sieve.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Sieve</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">minus</span> <span class="n">xl</span><span class="o">@</span><span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">yl</span><span class="o">@</span><span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>    <span class="ow">=</span> <span class="n">minus</span> <span class="n">xs</span> <span class="n">ys</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span>     <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">minus</span> <span class="n">xs</span> <span class="n">yl</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">minus</span> <span class="n">xl</span> <span class="n">ys</span>
</span><span class='line'>
</span><span class='line'><span class="nf">primes</span> <span class="ow">=</span> <span class="mi">2</span><span class="kt">:</span><span class="n">sieve</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span> <span class="o">..</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sieve</span> <span class="p">(</span><span class="n">p</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">p</span><span class="kt">:</span><span class="n">sieve</span> <span class="p">(</span><span class="n">xs</span> <span class="p">`</span><span class="n">minus</span><span class="p">`</span> <span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="n">p</span> <span class="o">..</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation is very slow, but can compute the first 1000 prime numbers.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Sieve&gt; primes !! 1000
</span><span class='line'>7927</span></code></pre></td></tr></table></div></figure>


<p>This turns out to be the first implementation on the Prime Number generator <a href="http://www.haskell.org/haskellwiki/Prime_numbers">page</a> on the Haskell wiki. Other implementations are much smarter and faster.</p>

<h3>Breaking string into lines</h3>

<p>The exercise description seems to be missing something: a line length. So I have added that to the functions.</p>

<p>Breaking into words is best done with <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:words"><code>words</code></a>, but I implemented my version. I actually started with a first abstraction, not really necessary here, that splits a sequence based on a predicate (items that return true for the predicate are all removed). Then <code>my_words</code> is just calling that function with <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Data-Char.html#v:isSpace"><code>isSpace</code></a> as the predicate.</p>

<p>To combine words back into lines, I used two small functions: one (<code>accumUntil</code>) builds a line one word at a time, and stops when the line is too long. It starts with a word as the first tentative line, to make sure that a line is not empty even if a word is too long to fit.</p>

<p>The other function (<code>loop</code>) uses the previous one to build a list of lines until the list of words is empty.</p>

<figure class='code'><figcaption><span> (split.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/split.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Split</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Char</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- generalize words and lines: remove extra break characters at the start,</span>
</span><span class='line'><span class="c1">-- then split at the next break characters; recurse on the rest</span>
</span><span class='line'>
</span><span class='line'><span class="nf">breakAtEvery</span> <span class="n">f</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">dropWhile</span> <span class="n">f</span> <span class="n">xs</span> <span class="kr">of</span>
</span><span class='line'>                      <span class="kt">[]</span>  <span class="ow">-&gt;</span> <span class="kt">[]</span>
</span><span class='line'>                      <span class="n">xs&#39;</span> <span class="ow">-&gt;</span> <span class="n">p</span><span class="kt">:</span><span class="n">breakAtEvery</span> <span class="n">f</span> <span class="n">r</span>
</span><span class='line'>                        <span class="kr">where</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span> <span class="ow">=</span> <span class="n">break</span> <span class="n">f</span> <span class="n">xs&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">my_words</span> <span class="ow">=</span> <span class="n">breakAtEvery</span> <span class="n">isSpace</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- loop iterate over lines built by accumUntil</span>
</span><span class='line'><span class="c1">-- accumUntil builds a line (at least one word) and adds words</span>
</span><span class='line'><span class="c1">-- until the length is too long</span>
</span><span class='line'>
</span><span class='line'><span class="nf">split</span> <span class="n">m</span> <span class="n">str</span> <span class="ow">=</span> <span class="n">loop</span> <span class="o">$</span> <span class="n">my_words</span> <span class="n">str</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">loop</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'>        <span class="n">loop</span> <span class="p">(</span><span class="n">w</span><span class="kt">:</span><span class="n">words</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">accumUntil</span> <span class="n">m</span> <span class="n">w</span> <span class="n">words</span> <span class="kr">of</span>
</span><span class='line'>                           <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="kt">[]</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">line</span><span class="p">]</span>
</span><span class='line'>                           <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">line</span><span class="kt">:</span><span class="n">loop</span> <span class="n">rest</span>
</span><span class='line'>        <span class="n">accumUntil</span> <span class="kr">_</span> <span class="n">line</span> <span class="kt">[]</span>        <span class="ow">=</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="kt">[]</span><span class="p">)</span>
</span><span class='line'>        <span class="n">accumUntil</span> <span class="n">m</span> <span class="n">line</span> <span class="p">(</span><span class="n">w</span><span class="kt">:</span><span class="n">words</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">line&#39;</span> <span class="ow">=</span> <span class="n">line</span> <span class="o">++</span> <span class="s">&quot; &quot;</span> <span class="o">++</span> <span class="n">w</span>
</span><span class='line'>                                      <span class="kr">in</span> <span class="kr">if</span> <span class="p">(</span><span class="n">length</span> <span class="n">line&#39;</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>                                         <span class="kr">then</span> <span class="n">accumUntil</span> <span class="n">m</span> <span class="n">line&#39;</span> <span class="n">words</span>
</span><span class='line'>                                         <span class="kr">else</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">w</span><span class="kt">:</span><span class="n">words</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing (splitting a long paragraph into lines of at most 72 characters):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Split&gt; putStrLn $ unlines $ split 72 "Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio. Pellentesque cursus augue quis libero malesuada ornare. Phasellus interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit interdum at a purus."
</span><span class='line'>Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam
</span><span class='line'>nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio.
</span><span class='line'>Pellentesque cursus augue quis libero malesuada ornare. Phasellus
</span><span class='line'>interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper
</span><span class='line'>posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit
</span><span class='line'>ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla
</span><span class='line'>facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit
</span><span class='line'>interdum at a purus.</span></code></pre></td></tr></table></div></figure>


<p>I used <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:unlines"><code>unlines</code></a> to group the split lines back into a single string separated by newlines and <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:putStrLn"><code>putStrLn</code></a> to print the result.</p>

<h3>Justify text</h3>

<p>The general structure of the <code>justify</code> functions is the same:</p>

<ul>
<li>compute the maximum length of all the lines</li>
<li>for each line, compute the difference between the line length and the maximum line length</li>
<li>insert spaces in the right location (depending on the kind of justification)</li>
</ul>


<p>Each justification is a specific function. First <code>pad</code> is a small utility that creates a string of spaces of the required length.</p>

<p><code>right</code> and <code>left</code> uses the above strategy to add spaces left and right, respectively. <code>center</code> adds half left, and half right. Of course <code>left</code> does not do anything visible, it just adds spaces to make each line the same length.</p>

<p><code>both</code> is more complex, as it inserts spaces between words. The strategy is naive (actual algorithms include dynamic programming to balance the amount of space), but effective.</p>

<p>The general idea is to spread the missing space between words. For this I follow these steps:</p>

<ul>
<li>split the line into words using the code from the <code>Split</code> module;</li>
<li>compute the number of interval (the count of the words minus 1). As I&#8217;m going to put the spaces between words, this interval also count as missing spaces (see next step). I refer to this amount as <code>iter</code>;</li>
<li>divide the number of missing spaces (difference between maximum line length and effective line length plus the interval): this is the amount of space I should add between each word to add up to the right amount, if I could add fractional space</li>
<li>multiply each item in <code>[1..inter]</code> by the fractional space amount as computed above.</li>
<li>iterate over the list from previous step:

<ul>
<li>compute the nearest integer of the current item (note that by construction, the nearest integer of the last item is exactly the amount of missing space);</li>
<li>the difference between this integer and the amount of space allocated so far (this amount is zero at the start, of course)</li>
<li>add a padding (using the <code>pad</code> function) to a list of spaces, and update the amount of space allocated before the next iteration</li>
</ul>
</li>
<li>then <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:zipWith"><code>zipWith</code></a> the list of spaces with the list of words, and recreate the line with <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.4.1.0/Prelude.html#v:concat"><code>concat</code></a>.</li>
</ul>


<p>The algorithm above is for a single line, but when justifying a whole paragraph, the last line should be left justified. So the <code>justify_both</code> applies the <code>both</code> justification to all but the last line, and <code>left</code> to the last line.</p>

<figure class='code'><figcaption><span> (justify.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/justify.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Justify</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Split</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- takes a justify function, a max length line (will be adjusted to max of strs lengths)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">justify</span> <span class="n">f</span> <span class="n">m</span> <span class="n">strs</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">m&#39;</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">max</span> <span class="n">m</span> <span class="p">(</span><span class="n">map</span> <span class="n">length</span> <span class="n">strs</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">map</span> <span class="p">(</span><span class="n">f</span> <span class="n">m&#39;</span><span class="p">)</span> <span class="n">strs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- when justifying both sides, the last line should be left justified</span>
</span><span class='line'><span class="nf">justify_both</span> <span class="n">m</span> <span class="n">strs</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">m&#39;</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">max</span> <span class="n">m</span> <span class="p">(</span><span class="n">map</span> <span class="n">length</span> <span class="n">strs</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">map</span> <span class="p">(</span><span class="n">both</span> <span class="n">m&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">init</span> <span class="n">strs</span> <span class="p">)</span> <span class="o">++</span> <span class="p">[</span><span class="n">left</span> <span class="n">m&#39;</span> <span class="p">(</span><span class="n">last</span> <span class="n">strs</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">justify_left</span> <span class="ow">=</span> <span class="n">justify</span> <span class="n">left</span>
</span><span class='line'><span class="nf">justify_right</span> <span class="ow">=</span> <span class="n">justify</span> <span class="n">right</span>
</span><span class='line'><span class="nf">justify_center</span> <span class="ow">=</span> <span class="n">justify</span> <span class="n">center</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- helper functions  </span>
</span><span class='line'><span class="c1">-- create n spaces</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pad</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">n</span> <span class="p">(</span><span class="n">repeat</span> <span class="sc">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Justify function helpers: add spaces at the right </span>
</span><span class='line'><span class="c1">-- location to make the length of line equal to m. </span>
</span><span class='line'><span class="c1">-- Incorrect if m is smaller than length line </span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- pad spaces on the right </span>
</span><span class='line'><span class="nf">left</span> <span class="n">m</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">line</span> <span class="o">++</span> <span class="n">pad</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="n">length</span> <span class="n">line</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- pad spaces on the left</span>
</span><span class='line'>
</span><span class='line'><span class="nf">right</span> <span class="n">m</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">pad</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="n">length</span> <span class="n">line</span><span class="p">)</span> <span class="o">++</span> <span class="n">line</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- pad both sides by half the difference</span>
</span><span class='line'>
</span><span class='line'><span class="nf">center</span> <span class="n">m</span> <span class="n">line</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">lp</span> <span class="ow">=</span> <span class="n">floor</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="n">length</span> <span class="n">line</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rp</span> <span class="ow">=</span> <span class="n">m</span> <span class="o">-</span> <span class="n">lp</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">pad</span> <span class="n">lp</span> <span class="o">++</span> <span class="n">line</span> <span class="o">++</span> <span class="n">pad</span> <span class="n">rp</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- justify both sides: compute the size of each interval in FRACtional value</span>
</span><span class='line'><span class="c1">-- then build a list of interval paddings with the length as close as possible</span>
</span><span class='line'><span class="c1">-- from the running sum of fractional intervals</span>
</span><span class='line'><span class="nf">both</span> <span class="n">m</span> <span class="kt">[]</span>   <span class="ow">=</span> <span class="n">pad</span> <span class="n">m</span>
</span><span class='line'><span class="nf">both</span> <span class="n">m</span> <span class="n">line</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="p">(</span><span class="n">w</span><span class="kt">:</span><span class="n">words</span><span class="p">)</span> <span class="ow">=</span> <span class="n">my_words</span> <span class="n">line</span>
</span><span class='line'>      <span class="n">inter</span> <span class="ow">=</span> <span class="n">length</span> <span class="n">words</span>
</span><span class='line'>      <span class="n">addInterFrac</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="n">makeInter</span> <span class="n">inter</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">inter</span><span class="p">]</span>
</span><span class='line'>      <span class="n">addSpaces</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">foldl</span> <span class="n">adjust</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="kt">[]</span><span class="p">)</span> <span class="n">addInterFrac</span> <span class="kr">of</span>
</span><span class='line'>                    <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="n">spaces</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">spaces</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">concat</span> <span class="p">(</span><span class="n">w</span><span class="kt">:</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">++</span><span class="p">)</span> <span class="n">addSpaces</span> <span class="n">words</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">adjust</span> <span class="p">(</span><span class="n">curr</span><span class="p">,</span> <span class="n">spaces</span><span class="p">)</span> <span class="n">newFrac</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">diff</span> <span class="ow">=</span> <span class="n">round</span> <span class="p">(</span><span class="n">newFrac</span> <span class="o">-</span> <span class="n">fromIntegral</span> <span class="n">curr</span><span class="p">)</span>
</span><span class='line'>                                        <span class="kr">in</span> <span class="p">(</span><span class="n">curr</span> <span class="o">+</span> <span class="n">diff</span><span class="p">,</span> <span class="p">(</span><span class="n">pad</span> <span class="n">diff</span><span class="p">)</span><span class="kt">:</span><span class="n">spaces</span><span class="p">)</span>
</span><span class='line'>        <span class="n">makeInter</span> <span class="n">inter</span> <span class="n">i</span> <span class="ow">=</span> <span class="n">fromIntegral</span> <span class="n">i</span>
</span><span class='line'>             <span class="o">*</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="n">length</span> <span class="n">line</span> <span class="o">+</span> <span class="n">inter</span><span class="p">))</span>
</span><span class='line'>             <span class="o">/</span> <span class="n">fromIntegral</span> <span class="n">inter</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing (the full test text is not reproduce here to save space):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*Justify&gt; putStrLn $ unlines $ justify_left 72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'>Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam    
</span><span class='line'>nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio.    
</span><span class='line'>Pellentesque cursus augue quis libero malesuada ornare. Phasellus       
</span><span class='line'>interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper     
</span><span class='line'>posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit    
</span><span class='line'>ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla    
</span><span class='line'>facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit   
</span><span class='line'>interdum at a purus.
</span><span class='line'>*Justify&gt; putStrLn $ unlines $ justify_right 72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'> Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam
</span><span class='line'> nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio.
</span><span class='line'>    Pellentesque cursus augue quis libero malesuada ornare. Phasellus
</span><span class='line'>  interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper
</span><span class='line'> posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit
</span><span class='line'> ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla
</span><span class='line'>facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit
</span><span class='line'>                                                 interdum at a purus.
</span><span class='line'>*Justify&gt; putStrLn $ unlines $ justify_center 72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vel diam                                                                      
</span><span class='line'>  nunc. Proin in justo quis nisl aliquam mollis. Sed vitae dolor odio.                                                                              
</span><span class='line'>   Pellentesque cursus augue quis libero malesuada ornare. Phasellus                                                                     
</span><span class='line'>  interdum ultrices tincidunt. Etiam ullamcorper, massa a ullamcorper                                                                      
</span><span class='line'>  posuere, dolor quam consequat est, ut ullamcorper elit eros suscipit                                                                      
</span><span class='line'>  ante. Etiam non quam sit amet risus posuere mollis non in est. Nulla                                                                      
</span><span class='line'> facilisi. Sed ut commodo risus. Suspendisse ut nisi ac erat hendrerit                                                                       
</span><span class='line'>                          interdum at a purus.
</span><span class='line'>*Justify&gt; putStrLn $ unlines $ justify_both 72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'>Lorem ipsum  dolor sit  amet, consectetur adipiscing  elit. In  vel diamnunc. Proin  in justo quis  nisl aliquam  mollis. Sed vitae  dolor odio.Pellentesque  cursus  augue  quis  libero  malesuada  ornare.  Phasellus
</span><span class='line'>interdum  ultrices tincidunt.  Etiam  ullamcorper,  massa a  ullamcorper
</span><span class='line'>posuere, dolor  quam consequat  est, ut  ullamcorper elit  eros suscipit
</span><span class='line'>ante. Etiam  non quam sit  amet risus posuere  mollis non in  est. Nulla
</span><span class='line'>facilisi. Sed  ut commodo risus. Suspendisse  ut nisi ac  erat hendrerit
</span><span class='line'>interdum at a purus.</span></code></pre></td></tr></table></div></figure>


<h3>Number lines</h3>

<p>I finished with this one, as I reused some functions defined in the module <code>Justify</code> above.</p>

<p>This is much simpler than justifying. I need to know the number of digits I would need (which depends on the number of lines). Then I can right justify the line number and add it left of each line.</p>

<figure class='code'><figcaption><span> (number.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/number.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Number</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Justify</span>
</span><span class='line'>
</span><span class='line'><span class="nf">addLineNum</span> <span class="n">lines</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">md</span> <span class="ow">=</span> <span class="n">floor</span> <span class="o">$</span> <span class="n">logBase</span> <span class="mi">10</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="p">(</span><span class="n">length</span> <span class="n">lines</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="kr">in</span> <span class="n">zipWith</span> <span class="p">(</span><span class="n">lineNum</span> <span class="n">md</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span> <span class="n">lines</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">lineNum</span> <span class="n">md</span> <span class="n">num</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">toStr</span> <span class="n">md</span> <span class="n">num</span> <span class="o">++</span> <span class="s">&quot; &quot;</span> <span class="o">++</span> <span class="n">line</span>
</span><span class='line'>        <span class="n">toStr</span> <span class="n">maxDigits</span> <span class="n">num</span> <span class="ow">=</span> <span class="n">right</span> <span class="n">maxDigits</span> <span class="p">(</span><span class="n">show</span> <span class="n">num</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; :l number.hs 
</span><span class='line'>[1 of 3] Compiling Split            ( Split.hs, interpreted )
</span><span class='line'>[2 of 3] Compiling Justify          ( Justify.hs, interpreted )
</span><span class='line'>[3 of 3] Compiling Number           ( number.hs, interpreted )
</span><span class='line'>Ok, modules loaded: Number, Justify, Split.
</span><span class='line'>*Number&gt; :m +Split Justify
</span><span class='line'>*Number Split Justify&gt; putStrLn $ unlines $ addLineNum $ justify_both  72 $ split 72 "Lorem ipsum ... a purus."
</span><span class='line'>1 Lorem ipsum  dolor sit  amet, consectetur adipiscing  elit. In  vel diam
</span><span class='line'>2 nunc. Proin  in justo quis  nisl aliquam  mollis. Sed vitae  dolor odio.
</span><span class='line'>3 Pellentesque  cursus  augue  quis  libero  malesuada  ornare.  Phasellus
</span><span class='line'>4 interdum  ultrices tincidunt.  Etiam  ullamcorper,  massa a  ullamcorper
</span><span class='line'>5 posuere, dolor  quam consequat  est, ut  ullamcorper elit  eros suscipit
</span><span class='line'>6 ante. Etiam  non quam sit  amet risus posuere  mollis non in  est. Nulla
</span><span class='line'>7 facilisi. Sed  ut commodo risus. Suspendisse  ut nisi ac  erat hendrerit
</span><span class='line'>8 interdum at a purus.                                                    </span></code></pre></td></tr></table></div></figure>


<h2>Wrapping up Day 2</h2>

<p>As I knew Haskell already, this was not too taxing. I had fun with the justify challenge, trying to come up with a reasonable way to insert the right amount of space at the right place.</p>

<p>Dealing with types was also mostly painless. I had a couple of errors when trying to compile, but every time the location was well reported and the fix easy to figure out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Haskell Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/17/seven-languages-in-seven-weeks-haskell-day-1/"/>
    <updated>2011-11-17T07:58:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/17/seven-languages-in-seven-weeks-haskell-day-1</id>
    <content type="html"><![CDATA[<p>The final language of the book is Haskell. Haskell is challenging and satisfying in many ways. It can be elegant and slow, or, in the hands of experts, elegant and fast (ugly but fast is usually for intermediate users).</p>

<!--more-->


<p>I had learned Haskell already, so I did not really benefit from this chapter. Still, some of the exercises were fun (and I tried to improve those that were not).</p>

<h3>On 4 + 1.0</h3>

<p>The book does not explain what happens in this expression, but I believe there is something deep and cool about Haskell here. When typing <code>4 + 1.0</code> in ghci, the output comes back as <code>5.0</code>, as expected. But the actual behaviour is not exactly usual.</p>

<p>Most languages would do that kind of processing:</p>

<ul>
<li>when parsing, 4 is tagged as integer, while 1.0 is tagged as float;</li>
<li>at runtime, the operator <code>+</code> checks its arguments:

<ul>
<li>if the types are different, it promotes the argument with the least general type to the other type. In this case, 4 is promoted to float;</li>
<li>then it call the addition routine for the correct type.</li>
</ul>
</li>
</ul>


<p>Haskell does nothing like that. The type of <code>+</code> is <code>(+) :: Num a =&gt; a -&gt; a -&gt; a</code>. In other words, its arguments must have the same type (it is similar to Ocaml in this regard). Yet the operation succeeds.</p>

<p>This is because what the parser does is similar to replacing the numeric literal by a call to the <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read"><code>read</code></a> function, with just enough constraints on the type to be compatible with the syntax of the literal.</p>

<p>Let&#8217;s look at that <code>read</code> function. First of all, it cannot be called with no type constraint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; read "4.0" :: Int
</span><span class='line'>*** Exception: Prelude.read: no parse
</span><span class='line'>Prelude&gt; read "a"
</span><span class='line'>
</span><span class='line'>&lt;interactive&gt;:1:1:
</span><span class='line'>    Ambiguous type variable `a0' in the constraint:
</span><span class='line'>      (Read a0) arising from a use of `read'
</span><span class='line'>    Probable fix: add a type signature that fixes these type variable(s)
</span><span class='line'>    In the expression: read "a"
</span><span class='line'>    In an equation for `it': it = read "a"</span></code></pre></td></tr></table></div></figure>


<p>What Haskell says here (quite forcefully) is that it does not know how to interpret the string &#8220;4&#8221; without a specific type to guide it. Lets give it one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; read "4" :: Int
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure>


<p>If we propose to read &#8220;4&#8221; as an <code>Int</code>, <code>read "4"</code> returns an <code>Int</code> of value 4. We can try with other types:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; read "4" :: Float
</span><span class='line'>4.0</span></code></pre></td></tr></table></div></figure>


<p>Same thing here: we constraint the value of <code>read "4"</code> to be a <code>Float</code>, so it is one. Notice how the type system can feed constraints back into a function through the return value.</p>

<p>So what happened in <code>4 + 1.0</code>? The parser replaced the literals by calls to <code>read</code>, with constraints on literals whose syntax cannot be an Integral value (such as 1.0, which indicates a <code>Float</code>). So what is really executed is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; read "4" + (read "1.0" :: Float)
</span><span class='line'>5.0</span></code></pre></td></tr></table></div></figure>


<p>The <code>+</code> operator constraints both operands to the same type, so <code>read "4"</code> receives the constraint <code>:: Float</code> as well; both operands have the same type, always. There is no implicit conversion happening at run time.</p>

<h3>On ranges</h3>

<p>The book mentions that ranges can be built with fractional numbers, but this is really a bad idea. Haskell does support it, but will use float arithmetic, which has notorious problems for such usage. Consider this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prelude&gt; [1, 0.9 .. 0]
</span><span class='line'>[1.0,0.9,0.8,0.7000000000000001,0.6000000000000001,0.5000000000000001,0.40000000000000013,0.30000000000000016,0.20000000000000018,0.1000000000000002,2.220446049250313e-16]
</span><span class='line'>Prelude&gt; 
</span><span class='line'>Prelude&gt; map (/ 10) [10, 9 .. 0]
</span><span class='line'>[1.0,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.0]
</span><span class='line'>Prelude&gt; </span></code></pre></td></tr></table></div></figure>


<p>The first version (fractional ranges) accumulates small errors, but the second version (integral ranges mapped into fractional ranges) is correct.</p>

<h2>Exercises</h2>

<h3>The Haskell wiki</h3>

<p>The wiki is <a href="http://haskell.org/haskellwiki/Haskell">here</a>.</p>

<h3>allEven</h3>

<p>I have 6 (or 7) variants of <code>allEven</code>. The most natural one is <code>allEven_2'</code>, based on <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter"><code>filter</code></a>. <code>allEven_5</code> is the same as the book version, but abstract the recursion away in <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr"><code>foldr</code></a>. <code>allEven_6</code> is strict, which means it does not work on infinite list. I tried to explain how it works <a href="http://blog.wakatta.jp/blog/2011/11/11/haskell-foldr-as-foldl/">here</a>. Of course there would never be any good reason to use anything like it, it is merely the kind of jokes Haskell programmers (some of them at least) enjoy (some of the time).</p>

<figure class='code'><figcaption><span> (alleven.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/alleven.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">AllEven</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- basic definition</span>
</span><span class='line'><span class="nf">allEven</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Integer</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Integer</span><span class="p">]</span>
</span><span class='line'><span class="nf">allEven</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">allEven</span> <span class="p">(</span><span class="n">h</span><span class="kt">:</span><span class="n">t</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">h</span> <span class="kr">then</span> <span class="n">h</span><span class="kt">:</span><span class="n">allEven</span> <span class="n">t</span> <span class="kr">else</span> <span class="n">allEven</span> <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- essentially we are filtering, so maybe a filter function would help</span>
</span><span class='line'><span class="nf">my_filter</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">my_filter</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">my_filter</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">f</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">x</span><span class="kt">:</span><span class="n">my_filter</span> <span class="n">f</span> <span class="n">xs</span> <span class="kr">else</span> <span class="n">my_filter</span> <span class="n">f</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- so now we can use the my_filter function to write a new allEven:</span>
</span><span class='line'><span class="nf">allEven_2</span> <span class="n">ls</span> <span class="ow">=</span> <span class="n">my_filter</span> <span class="n">even</span> <span class="n">ls</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- in point free notation,</span>
</span><span class='line'><span class="nf">allEven_2&#39;</span> <span class="ow">=</span> <span class="n">my_filter</span> <span class="n">even</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- actually, filter already exists:</span>
</span><span class='line'><span class="nf">allEven_filter</span> <span class="ow">=</span> <span class="n">filter</span> <span class="n">even</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- if even numbers are replaced by a singleton, and odd numbers </span>
</span><span class='line'><span class="c1">-- by an empty list, when we concatenate, we get the result we want</span>
</span><span class='line'><span class="nf">allEven_3</span> <span class="ow">=</span> <span class="n">concat</span> <span class="o">.</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">x</span> <span class="kr">then</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="kr">else</span> <span class="kt">[]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- concat . map == concatMap</span>
</span><span class='line'><span class="nf">allEven_4</span> <span class="ow">=</span> <span class="n">concatMap</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">x</span> <span class="kr">then</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="kr">else</span> <span class="kt">[]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- processing lists left to right is a job for foldr. </span>
</span><span class='line'><span class="c1">-- Actually this is closer to the original definition</span>
</span><span class='line'><span class="nf">allEven_5</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="n">xs</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">x</span><span class="kt">:</span><span class="n">xs</span> <span class="kr">else</span> <span class="n">xs</span><span class="p">)</span> <span class="kt">[]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- accumulator and tail recursive version of allEven_5</span>
</span><span class='line'><span class="nf">allEven_6</span> <span class="n">ls</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="p">(</span><span class="nf">\</span><span class="n">g</span> <span class="n">b</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">g</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span> <span class="n">x</span><span class="p">))</span> <span class="n">id</span> <span class="n">ls</span> <span class="kt">[]</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">f</span> <span class="n">x</span> <span class="n">xs</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">x</span><span class="kt">:</span><span class="n">xs</span> <span class="kr">else</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- list comprehension</span>
</span><span class='line'><span class="nf">allEven_7</span> <span class="n">ls</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">ls</span><span class="p">,</span> <span class="n">even</span> <span class="n">x</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>reverse</h3>

<p>The natural way would of course to use <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse"><code>reverse</code></a>. <code>reverse_1</code> is the one most beginners would think of. <code>reverse_2</code> uses an accumulator, which is abstracted in the <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl"><code>foldl</code></a> function, as seen in <code>reverse_3</code> or <code>reverse_4</code>. Finally, <code>reverse_5</code> is the same kind of joke as <code>allEven_6</code> above, based on expressing <code>foldl</code> in terms <code>foldr</code>, as I explained <a href="http://blog.wakatta.jp/blog/2011/11/09/haskell-foldl-as-foldr/">here</a>.</p>

<figure class='code'><figcaption><span> (myreverse.hs)</span> <a href='http://blog.wakatta.jp/downloads/code/7l7w/haskell/myreverse.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">MyReverse</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- the naive way</span>
</span><span class='line'><span class="nf">reverse_1</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">reverse_1</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">reverse_1</span> <span class="n">xs</span>  <span class="o">++</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- accumulator and tail recursion</span>
</span><span class='line'><span class="nf">reverse_2</span> <span class="n">xs</span> <span class="ow">=</span> <span class="n">go</span> <span class="kt">[]</span> <span class="n">xs</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">go</span> <span class="n">acc</span> <span class="kt">[]</span>     <span class="ow">=</span> <span class="n">acc</span>
</span><span class='line'>        <span class="n">go</span> <span class="n">acc</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">go</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">acc</span><span class="p">)</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- accumulator and tail recursion means foldl</span>
</span><span class='line'><span class="nf">reverse_3</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="p">(</span><span class="nf">\</span><span class="n">xs</span> <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="kt">[]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- the anonymous function in reverse_3 is actually flip (:)</span>
</span><span class='line'><span class="nf">reverse_4</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="p">(</span><span class="n">flip</span> <span class="p">(</span><span class="kt">:</span><span class="p">))</span> <span class="kt">[]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- foldl leaning so much to the left it comes back from the right:</span>
</span><span class='line'><span class="nf">reverse_5</span> <span class="n">ls</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="nf">\</span><span class="n">b</span> <span class="n">g</span> <span class="n">xs</span> <span class="ow">-&gt;</span> <span class="n">g</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">xs</span><span class="p">))</span> <span class="n">id</span> <span class="n">ls</span> <span class="kt">[]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Colour pairs</h3>

<p>This is simple with list comprehensions. A way to ensure that only one of (black, blue) and (blue, black) is available is to filter the pairs so that the first element is smaller or equal than the second one.</p>

<figure class='code'><figcaption><span>Colour pairs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">colours</span> <span class="ow">=</span><span class="p">[</span><span class="s">&quot;black&quot;</span><span class="p">,</span> <span class="s">&quot;white&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">,</span> <span class="s">&quot;yellow&quot;</span><span class="p">,</span> <span class="s">&quot;red&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">y</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>produces (reindented for readability):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[("black","black"),("black","white"),("black","blue"),
</span><span class='line'>("black","yellow"),("black","red"),("white","white"),
</span><span class='line'>("white","yellow"),("blue","white"),("blue","blue"),
</span><span class='line'>("blue","yellow"),("blue","red"),("yellow","yellow"),
</span><span class='line'>("red","white"),("red","yellow"),("red","red")]</span></code></pre></td></tr></table></div></figure>


<p>There are exactly 15 pairs, as expected.</p>

<h3>Multiplication table</h3>

<p>Nothing simpler:</p>

<figure class='code'><figcaption><span>Multiplication table  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">11</span><span class="p">],</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">11</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>produces (reindented for readability):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[(1,1,1),(1,2,2),(1,3,3),(1,4,4),(1,5,5),(1,6,6),(1,7,7),(1,8,8),(1,9,9),(1,10,10),(1,11,11),
</span><span class='line'>(2,1,2),(2,2,4),(2,3,6),(2,4,8),(2,5,10),(2,6,12),(2,7,14),(2,8,16),(2,9,18),(2,10,20),(2,11,22),
</span><span class='line'>(3,1,3),(3,2,6),(3,3,9),(3,4,12),(3,5,15),(3,6,18),(3,7,21),(3,8,24),(3,9,27),(3,10,30),(3,11,33),
</span><span class='line'>(4,1,4),(4,2,8),(4,3,12),(4,4,16),(4,5,20),(4,6,24),(4,7,28),(4,8,32),(4,9,36),(4,10,40),(4,11,44),
</span><span class='line'>(5,1,5),(5,2,10),(5,3,15),(5,4,20),(5,5,25),(5,6,30),(5,7,35),(5,8,40),(5,9,45),(5,10,50),(5,11,55),
</span><span class='line'>(6,1,6),(6,2,12),(6,3,18),(6,4,24),(6,5,30),(6,6,36),(6,7,42),(6,8,48),(6,9,54),(6,10,60),(6,11,66),
</span><span class='line'>(7,1,7),(7,2,14),(7,3,21),(7,4,28),(7,5,35),(7,6,42),(7,7,49),(7,8,56),(7,9,63),(7,10,70),(7,11,77),
</span><span class='line'>(8,1,8),(8,2,16),(8,3,24),(8,4,32),(8,5,40),(8,6,48),(8,7,56),(8,8,64),(8,9,72),(8,10,80),(8,11,88),
</span><span class='line'>(9,1,9),(9,2,18),(9,3,27),(9,4,36),(9,5,45),(9,6,54),(9,7,63),(9,8,72),(9,9,81),(9,10,90),(9,11,99),
</span><span class='line'>(10,1,10),(10,2,20),(10,3,30),(10,4,40),(10,5,50),(10,6,60),(10,7,70),(10,8,80),(10,9,90),(10,10,100),(10,11,110),
</span><span class='line'>(11,1,11),(11,2,22),(11,3,33),(11,4,44),(11,5,55),(11,6,66),(11,7,77),(11,8,88),(11,9,99),(11,10,110),(11,11,121)]</span></code></pre></td></tr></table></div></figure>


<h3>Map-colouring problem</h3>

<p>For this one, the code can be a bit simpler than Prolog&#8217;s. The reason is that Prolog does not really have a different or not-equal operator: it has to use positive facts and cannot infer the relation is commutative. In Haskell, the list comprehension can have guards that are arbitrary boolean expressions, so we need to state only once that two states have different colours.</p>

<figure class='code'><figcaption><span>Map-colouring problem  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">colours</span> <span class="ow">=</span> <span class="p">[</span><span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[(</span><span class="n">alabama</span><span class="p">,</span> <span class="n">mississippi</span><span class="p">,</span> <span class="n">georgia</span><span class="p">,</span> <span class="n">tennessee</span><span class="p">,</span> <span class="n">florida</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">alabama</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mississippi</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">georgia</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">tennessee</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">florida</span> <span class="ow">&lt;-</span> <span class="n">colours</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mississippi</span> <span class="o">/=</span> <span class="n">tennessee</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mississippi</span> <span class="o">/=</span> <span class="n">alabama</span><span class="p">,</span>
</span><span class='line'>  <span class="n">alabama</span> <span class="o">/=</span> <span class="n">tennessee</span><span class="p">,</span>
</span><span class='line'>  <span class="n">alabama</span> <span class="o">/=</span> <span class="n">georgia</span><span class="p">,</span>
</span><span class='line'>  <span class="n">alabama</span> <span class="o">/=</span> <span class="n">florida</span><span class="p">,</span>
</span><span class='line'>  <span class="n">georgia</span> <span class="o">/=</span> <span class="n">florida</span><span class="p">,</span>
</span><span class='line'>  <span class="n">georgia</span> <span class="o">/=</span> <span class="n">tennessee</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>produces (reindented for readability):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[("red","green","green","blue","blue"),
</span><span class='line'>("red","blue","blue","green","green"),
</span><span class='line'>("green","red","red","blue","blue"),
</span><span class='line'>("green","blue","blue","red","red"),
</span><span class='line'>("blue","red","red","green","green"),
</span><span class='line'>("blue","green","green","red","red")]</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all for Day 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Clojure Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/13/seven-languages-in-seven-weeks-clojure-day-3/"/>
    <updated>2011-11-13T20:30:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/13/seven-languages-in-seven-weeks-clojure-day-3</id>
    <content type="html"><![CDATA[<p>The final day with Clojure covers its support for concurrent programming. It has a bestiary of concepts that are somewhat similar yet distinct from other modern languages.</p>

<!--more-->


<p>First of all Clojure adopts the <a href="http://en.wikipedia.org/wiki/Software_transactional_memory">Software Transactional Memory</a>, an approach mutable state and concurrency that is similar to databases. The idea is not really new, but it became more popular with Hashell&#8217;s implementation.</p>

<p>There are also atoms, which are variables which guarantee atomic updates. The atomicity is a property of the atom, rather than of the functions that are used to update it, which is really nice.</p>

<p>Futures are also present. They represent values whose value is being computed in a dedicated thread. Trying to read from a <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/future"><code>future</code></a> could block if the value has not been computed yet (yes, Java has the same concept).</p>

<p>Finally, agents are &#8230; somewhat perplexing. They look like agents in other languages (Io, Scala, Erlang, &#8230;), except that they do not have any special behaviour attached. Instead, any function sent to them is queued and executed sequentially in a dedicated thread. At least, that&#8217;s how I understand currently, but when I tried to use them for the Barber shop simulation, I ran into some problems, so there is more to this story.</p>

<h2>Exercises</h2>

<h3>Find the implemenation of a blocking queue</h3>

<p>The description of <a href="http://richhickey.github.com/clojure-contrib/seq-utils-api.html#clojure.contrib.seq-utils/fill-queue"><code>fill-queue</code></a> is a bit confusing, but it looks like a blocking lazy queue.</p>

<h3>Accounts simulation</h3>

<p>The code is very straightforward. An account is a <code>ref</code>, whose value is the balance. I add a validator function to each to ensure that the balance is not negative (<code>check-balance</code> is passed to <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/set-validator!"><code>set-validator!</code></a> in <code>make-account</code>).</p>

<p>The <code>credit</code> and <code>debit</code> functions just update the balance with the <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/alter"><code>alter</code></a> function. The transaction is not provided at this level just yet.</p>

<p>The <code>balance</code> function is just there for clarity.</p>

<p>The various <code>bank-</code> functions just operate on a vector of accounts, so they take the <code>bank</code> (a <code>vector</code>), and an <code>acc_num</code> (account number).</p>

<p>The <code>bank-transfer</code> is the only function using a transaction: it moves an amount between two accounts. To test the transaction failure mode, I credit the recipient account before I debit the other.</p>

<p>Finally, <code>bank-balances</code> prints the balance of all accounts.</p>

<figure class='code'><figcaption><span>Accounts simulation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">check-balance</span> <span class="p">[</span><span class="nv">b</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Check that the balance of account is not negative&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">&lt;= </span><span class="mi">0</span> <span class="nv">b</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">make-account</span> <span class="p">[]</span>
</span><span class='line'>  <span class="s">&quot;Create a new account&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">r</span> <span class="p">(</span><span class="nb">ref </span><span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">set-validator!</span> <span class="nv">r</span> <span class="nv">check-balance</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">r</span><span class="p">))</span>  
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">credit</span> <span class="p">[</span><span class="nv">account,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Add amount to account&#39;s balance&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">alter </span><span class="nv">account</span> <span class="nv">+</span> <span class="nv">amount</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">debit</span> <span class="p">[</span><span class="nv">account,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Debit amount from account&#39;s balance&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">alter </span><span class="nv">account</span> <span class="nv">-</span> <span class="nv">amount</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">balance</span> <span class="p">[</span><span class="nv">account</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Return balance of account&quot;</span>
</span><span class='line'>  <span class="nv">@account</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">make-bank</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Create a bank of n accounts&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nf">repeatedly</span> <span class="nv">n</span> <span class="nv">make-account</span><span class="p">)))</span>
</span><span class='line'>  
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-credit</span> <span class="p">[</span><span class="nv">bank,</span> <span class="nv">acc_num,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Add amount to acc_num&#39;s balance&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">credit</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">bank</span> <span class="nv">acc_num</span><span class="p">)</span> <span class="nv">amount</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-debit</span> <span class="p">[</span><span class="nv">bank,</span> <span class="nv">acc_num,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Debit amount from acc_num&#39;s balance&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">debit</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">bank</span> <span class="nv">acc_num</span><span class="p">)</span> <span class="nv">amount</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-balance</span> <span class="p">[</span><span class="nv">bank,</span> <span class="nv">acc_num</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Return the balance of acc_num&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">balance</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">bank</span> <span class="nv">acc_num</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-transfer</span> <span class="p">[</span><span class="nv">bank,</span> <span class="nv">acc_num1,</span> <span class="nv">acc_num2,</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Transfer amount from acc_num1 to acc_num2 in bank&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dosync </span>
</span><span class='line'>      <span class="p">(</span><span class="nf">bank-credit</span> <span class="nv">bank</span> <span class="nv">acc_num2</span> <span class="nv">amount</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">bank-debit</span> <span class="nv">bank</span> <span class="nv">acc_num1</span> <span class="nv">amount</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">bank-balances</span> <span class="p">[</span><span class="nv">bank</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Show the balance of all accounts&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">count </span><span class="nv">bank</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Account &quot;</span> <span class="nv">i</span> <span class="s">&quot;: &quot;</span> <span class="p">(</span><span class="nf">bank-balance</span> <span class="nv">bank</span> <span class="nv">i</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test code:</p>

<figure class='code'><figcaption><span>Test code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; create the bank</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">bank</span> <span class="p">(</span><span class="nf">make-bank</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; put some money in</span>
</span><span class='line'><span class="p">(</span><span class="nb">dosync </span><span class="p">(</span><span class="nf">bank-credit</span> <span class="nv">bank</span> <span class="mi">0</span> <span class="mi">100</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; show the balances</span>
</span><span class='line'><span class="p">(</span><span class="nf">bank-balances</span> <span class="nv">bank</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; a first transfer</span>
</span><span class='line'><span class="p">(</span><span class="nb">dosync </span><span class="p">(</span><span class="nf">bank-transfer</span> <span class="nv">bank</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">75</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; show the balances</span>
</span><span class='line'><span class="p">(</span><span class="nf">bank-balances</span> <span class="nv">bank</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; not enough fund, so it will fail</span>
</span><span class='line'><span class="p">(</span><span class="nb">dosync </span><span class="p">(</span><span class="nf">bank-transfer</span> <span class="nv">bank</span> <span class="mi">0</span> <span class="mi">2</span> <span class="mi">75</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; and indeed, the balances have not changed</span>
</span><span class='line'><span class="p">(</span><span class="nf">bank-balances</span> <span class="nv">bank</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When input into the repl, the test code gives the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def bank (make-bank 3))
</span><span class='line'>#'user/bank
</span><span class='line'>user=&gt; (dosync (bank-credit bank 0 100))
</span><span class='line'>100
</span><span class='line'>user=&gt; (bank-balances bank)
</span><span class='line'>Account 0: 100
</span><span class='line'>Account 1: 0
</span><span class='line'>Account 2: 0
</span><span class='line'>nil
</span><span class='line'>user=&gt; (dosync (bank-transfer bank 0 1 75))
</span><span class='line'>25
</span><span class='line'>user=&gt; (bank-balances bank)
</span><span class='line'>Account 0: 25
</span><span class='line'>Account 1: 75
</span><span class='line'>Account 2: 0
</span><span class='line'>nil
</span><span class='line'>user=&gt; (dosync (bank-transfer bank 0 2 75))
</span><span class='line'>java.lang.IllegalStateException: Invalid reference state (NO_SOURCE_FILE:0)
</span><span class='line'>user=&gt; (bank-balances bank)
</span><span class='line'>Account 0: 25
</span><span class='line'>Account 1: 75
</span><span class='line'>Account 2: 0
</span><span class='line'>nil</span></code></pre></td></tr></table></div></figure>


<p>So the balance is protected from being negative, and the transaction is rolled back. Despite the fact that the amount was supposed to be credited to account number 2 first, the balance of that account has not changed as the transaction failed.</p>

<h3>Barber shop simulation</h3>

<p>This problem was mostly a matter of figuring out the right model. The concept of agent seems to have some hidden complexity (or lock) which prevented my initial solution from working.</p>

<p>The idea is that the <code>barber</code> is an agent; it is updated by a function representing getting an haircut (<code>get-haircut</code>). The value of the agent is the number of client served.</p>

<p>The <code>waiting-room</code> is an atom. It&#8217;s value is the number of free chairs.</p>

<p>The <code>get-haircut</code> function is sent to the <code>barber</code>. When it starts, it frees (increase) the <code>waiting-room</code> count of free chairs. Then it waits for 20 milliseconds, and finally updates the <code>barber</code> count of clients.</p>

<p>Finally, the <code>try-to-sit</code> function checks the number of free chairs: if none, the customer just leaves. Otherwise, the customer sits in a chair (signaling it&#8217;s intent to get a haircut by sending <code>get-haircut</code> to the <code>barber</code>), and the count of free chairs is decreased. I tried to print a statement when a customer leaves because there is no chair, but there were too many such messages so I commented it out.</p>

<figure class='code'><figcaption><span>Barber problem, part 1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">barber</span> <span class="p">(</span><span class="nb">agent </span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">waiting-room</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">get-haircut</span> <span class="p">[</span><span class="nv">count</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">waiting-room</span> <span class="nv">inc</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Start haircut&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">inc </span><span class="nv">count</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">try-to-sit</span> <span class="p">[</span><span class="nv">count</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">== </span><span class="nv">count</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>          <span class="c1">;;(println &quot;No free chairs. The customer leaves&quot;)</span>
</span><span class='line'>          <span class="nv">count</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Sit in waiting room&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">send </span><span class="nv">barber</span> <span class="nv">get-haircut</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">dec </span><span class="nv">count</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a new customer walks in, it will try to sit in a free chair. This is done in the <code>new-customer</code> function.</p>

<p>The <code>shop-loop</code> is a tail recursive loop that initiates a <code>new-customer</code> at random intervals. It runs until after at least <code>max</code> milliseconds.</p>

<figure class='code'><figcaption><span>Barber problem, part 2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">new-customer</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">waiting-room</span> <span class="nv">try-to-sit</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">shop-loop</span> <span class="p">[</span><span class="nv">max</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">orig</span> <span class="p">(</span><span class="nf">System/currentTimeMillis</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">loop </span><span class="p">[]</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">System/currentTimeMillis</span><span class="p">)</span> <span class="nv">orig</span><span class="p">)</span> <span class="nv">max</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">next</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">10</span> <span class="p">(</span><span class="nb">rand </span><span class="mi">20</span><span class="p">))]</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="nv">next</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">new-customer</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">recur</span><span class="p">))</span>
</span><span class='line'>              <span class="nv">max</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we get to the main function. First <code>init</code> is defined to help reset the values of atoms and agents. Then <code>start</code> will indeed reset all values, then run <code>shop-loop</code> in a <code>future</code>, wait the required amount of time, and finally get the current value of <code>barber</code> (which might not have fully finished). My first version tried to run <code>shop-loop</code> on a dedicated agent, but that was for some reason blocking on the <code>barber</code> agent, so I used a <code>future</code> instead.</p>

<figure class='code'><figcaption><span>Barber problem, part 3  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">init</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">v</span><span class="p">]</span> <span class="nv">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">start</span> <span class="p">[</span><span class="nv">max</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;starting&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="nv">barber</span> <span class="nv">init</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">waiting-room</span> <span class="nv">init</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">future</span> <span class="p">(</span><span class="nf">shop-loop</span> <span class="nv">max</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="nv">max</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">@barber</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this implementation, the barber performed 458 hair cuts (500 was the theoretical maximum).</p>

<h2>Wrapping up Clojure</h2>

<p>There is much more to Clojure that what has been covered so far. The object model is far more flexible than Java&#8217;s. Metadata can be added to various entities, which I understand could be used to improve interactive usage (documentation strings are already a kinf of metadata).</p>

<p>I always found Lisp languages to be very elegant and expressive; Clojure definitively is a Lisp, and I really wanted to like the language. Yet for some reason I found it somewhat disappointing. Perhaps it is the limitations the designers put (for good reason) in the language. Perhaps it is the fact that the language runs on the JVM, an environment that I instinctively link to all things corporate, safe and boring, so I don&#8217;t really believe it could be exciting.</p>

<p>I&#8217;m not really sure, perhaps it is just that I&#8217;m feeling tired and I have a cold, and Clojure really is awesome. So I&#8217;ll have another look at that language, and I hope I can give it the attention it seems to deserve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Clojure Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/12/seven-languages-in-seven-weeks-clojure-day-2/"/>
    <updated>2011-11-12T19:25:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/12/seven-languages-in-seven-weeks-clojure-day-2</id>
    <content type="html"><![CDATA[<p>Today Clojure&#8217;s coverage is getting beefier with tail recursion (soso), lazy sequences and &#8230; macros!</p>

<!--more-->


<p>The support for tail recursion is disappointing. But given that the JVM implementers never actually understood the value of tail recursion (or perhaps they overestimated its cost), it would have been surprising if a language running on top of the JVM had a solution. Scala is similarly limited.</p>

<p>Lazy sequences are cool, but not spectacularly so. It is a more restricted concept than laziness in Haskell. Still, lazy lists form a large part of my use of Haskell&#8217;s laziness (perhaps the only part I can use), so I do not expect to feel limited in any way with Clojure.</p>

<p>Finally, macros. Writing macros separates men from boys. Writing macros that write macros separates gods from men. Macros are good. Abuse of macros can cause headaches, but the good kind (it&#8217;s just your brain swelling).</p>

<h2>Exercises</h2>

<h3>Implementation of common macros in Clojure</h3>

<p>That one is very easy. The web site has a dedicated <a href="http://clojure.org/macros">page</a> with the common macros. The source code is available for each. <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/defmacro"><code>defmacro</code></a> is actually a macro, and its source code is, well, let&#8217;s just say I&#8217;m happy someone else wrote it. And yes, it is a macro that writes macros.</p>

<p>To expand the code of macros, I wrote this small function to recursively expand macro definitions:</p>

<figure class='code'><figcaption><span>rec-expand function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">rec-expand</span> <span class="p">[</span><span class="nv">lst</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">seq? </span><span class="nv">lst</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">rec-expand</span> <span class="p">(</span><span class="nb">macroexpand </span><span class="nv">lst</span><span class="p">))</span> <span class="nv">lst</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without it, it is difficult to see deeply into the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (macroexpand '(defn collection-type                                                                                   
</span><span class='line'>             "Return either :list, :vector or :map, depending of the type of col."                      
</span><span class='line'>             [col]                                                                                      
</span><span class='line'>             (cond (list? col) :list
</span><span class='line'>                   (map? col) :map
</span><span class='line'>                   (vector? col) :vector)))
</span><span class='line'>(def collection-type (.withMeta (clojure.core/fn collection-type ([col] (cond (list? col) :list (map? col) :map (vector? col) :vector))) (.meta (var collection-type))))</span></code></pre></td></tr></table></div></figure>


<p><a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/macroexpand"><code>macroexpand</code></a> did not expand the <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/cond"><code>cond</code></a> macros.</p>

<p>With <code>rec-expand</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (rec-expand '(defn collection-type                                                                                   
</span><span class='line'>             "Return either :list, :vector or :map, depending of the type of col."                      
</span><span class='line'>             [col]                                                                                      
</span><span class='line'>             (cond (list? col) :list
</span><span class='line'>                   (map? col) :map
</span><span class='line'>                   (vector? col) :vector))) 
</span><span class='line'>(def collection-type (. (fn* collection-type ([col] (if (list? col) :list (if (map? col) :map (if (vector? col) :vector ()))))) withMeta (. (var collection-type) meta)))</span></code></pre></td></tr></table></div></figure>


<h3>Implementation of a lazy sequence</h3>

<p>For this exercise, I use <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/lazy-seq"><code>lazy-seq</code></a>, which evaluates its body on demand (and remembers the value).</p>

<p>One first example is a simple reimplementation of <code>(iterate inc n)</code>:</p>

<figure class='code'><figcaption><span>upfrom  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">upfrom</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>    <span class="s">&quot;[n, n+1, n+2, ....&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">n</span> <span class="p">(</span><span class="nf">upfrom</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (take 10 (upfrom 0))
</span><span class='line'>(0 1 2 3 4 5 6 7 8 9)</span></code></pre></td></tr></table></div></figure>


<p>A bit more interesting, perhaps, is a Fibonacci sequence not using <code>map</code>:</p>

<figure class='code'><figcaption><span>Fibonacci sequence  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">fibs</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Fibonacci sequence starting with a, b, ...&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">a</span> <span class="p">(</span><span class="nf">fibs</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">fib</span> <span class="p">(</span><span class="nf">fibs</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Computing the 20 first Fibonacci numbers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (take 20 fib)
</span><span class='line'>(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765)</span></code></pre></td></tr></table></div></figure>


<h3>Unless with else condition</h3>

<p>For this exercise, I use two features that were not covered in the book</p>

<ul>
<li>variable lists of arguments support</li>
<li>backquote notation</li>
</ul>


<p>Clojure support for variable lists of arguments is nice: there can be a different body for each list, and the last one can a placeholder variable for &#8220;all the remaining arguments&#8221;. The concept of arguments (and variable lists) applies to everything that takes arguments: functions, macros, &#8230; Here I use it to differentiate between basic <code>(unless test body)</code> and <code>(unless test body else)</code>.</p>

<p>Backquote notation is what makes macro useable. Rather than using <code>list</code> to build the form, I use the backquote. Then expressions prefixed with tilde are replaced by their value. Lisps had an identical concept (but comma was used instead of tilde).</p>

<p>This makes macros shorter and easier to read.</p>

<figure class='code'><figcaption><span>extended unless  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defmacro </span><span class="nv">unless</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">test</span> <span class="nv">body</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="nv">~test</span><span class="p">)</span> <span class="nv">~body</span><span class="p">))</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">test</span> <span class="nv">body</span> <span class="nv">alt</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="nv">~test</span><span class="p">)</span> <span class="nv">~body</span> <span class="nv">~alt</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (unless false (println "Danger!"))
</span><span class='line'>Danger!
</span><span class='line'>nil
</span><span class='line'>user=&gt; (unless true (println "Danger!") (println "No danger...")) 
</span><span class='line'>No danger...
</span><span class='line'>nil</span></code></pre></td></tr></table></div></figure>


<h3>Using defrecord and defprotocol</h3>

<p>Ok, I&#8217;m not very inspired by this exercise. I was thinking of doing the classic shape class hierarchy, but finally settled for an employee protocol:</p>

<figure class='code'><figcaption><span>Employee protocol  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defprotocol</span> <span class="nv">Employee</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">work</span> <span class="p">[</span><span class="nv">e</span> <span class="nv">h</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">get-raise</span> <span class="p">[</span><span class="nv">e</span> <span class="nv">a</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first implementation is a manager, which is modeled according to things I&#8217;ve heard about other companies, not mine, where managers are hard-working and have to be pulled from their desk to be fed:</p>

<figure class='code'><figcaption><span>Manager implementation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defrecord</span> <span class="nv">Manager</span> <span class="p">[</span><span class="nv">hobby</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">Employee</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">work</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">h</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Working &quot;</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">h</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot; hours then &quot;</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">h</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot; hours of &quot;</span> <span class="nv">hobby</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">get-raise</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">a</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;You are too modest. You deserve &quot;</span> <span class="p">(</span><span class="nb">* </span><span class="mf">1.1</span> <span class="nv">a</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing the manager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def m (Manager. "golf"))
</span><span class='line'>#'user/m
</span><span class='line'>user=&gt; (work m 8)
</span><span class='line'>Working 4 hours then 4 hours of golf
</span><span class='line'>nil
</span><span class='line'>user=&gt; (get-raise m 1000)
</span><span class='line'>You are too modest. You deserve 1100.0
</span><span class='line'>nil</span></code></pre></td></tr></table></div></figure>


<p>Of course we need people to actually do something:</p>

<figure class='code'><figcaption><span>Worker implemenation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defrecord</span> <span class="nv">Worker</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nv">Employee</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">work</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">h</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Working &quot;</span> <span class="nv">h</span> <span class="s">&quot; hours then &quot;</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">h</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot; hours overtime&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">get-raise</span> <span class="p">[</span><span class="nv">_</span> <span class="nv">a</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;There is an economic crisis. Be happy with &quot;</span> <span class="p">(</span><span class="nb">* </span><span class="mf">0.1</span> <span class="nv">a</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing the worker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def w (Worker.))
</span><span class='line'>#'user/w
</span><span class='line'>user=&gt; (work w 8)
</span><span class='line'>Working 8 hours then 4 hours overtime
</span><span class='line'>nil
</span><span class='line'>user=&gt; (get-raise w 100)
</span><span class='line'>There is an economic crisis. Be happy with 10.0
</span><span class='line'>nil</span></code></pre></td></tr></table></div></figure>


<p>Ok, nothing fancy. But looking at the doc I see it is possible to extend basic Java classes, so I think there&#8217;s far more depth to this construct. Otherwise, there&#8217;s always <code>defmacro</code> to play with.</p>

<p>And this completes Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell: foldr as foldl]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/11/haskell-foldr-as-foldl/"/>
    <updated>2011-11-11T08:03:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/11/haskell-foldr-as-foldl</id>
    <content type="html"><![CDATA[<p>In a previous <a href="http://blog.wakatta.jp/blog/2011/11/09/haskell-foldl-as-foldr/">post</a>, I tried to show how to derive the formula expression <code>foldl</code> in terms of <code>foldr</code>. Unsurprisingly, there is a way to express <code>foldr</code> in terms <code>foldl</code>: <code>foldr f a bs = foldl (\g b x -&gt; g (f b x)) id bs a</code>. Today I&#8217;ll try to derive this definition.</p>

<!--more-->


<p>Of course, <code>foldl</code> is strict, so it cannot work on infinite lists. Therefore, the new <code>foldr</code> would be similarly limited.</p>

<p>I&#8217;ll start again from a standard definition for both functions. First <code>foldr</code>:</p>

<figure class='code'><figcaption><span>foldr  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr</span> <span class="ow">::</span> <span class="p">(</span><span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">b</span> <span class="p">(</span><span class="n">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="n">bs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then <code>foldl</code>:</p>

<figure class='code'><figcaption><span>foldl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldl</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">f</span> <span class="p">(</span><span class="n">f</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="n">bs</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Derivation</h2>

<p>Once again, I will use the function building fold rather than value building one. This time, the <code>f</code> argument to <code>foldr</code> has already the right type, so I will not need <code>flip</code>.</p>

<p>I first reorganize the arguments order a bit, putting <code>a</code> at the end:</p>

<figure class='code'><figcaption><span>foldr_alt basic equation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="n">bs</span> <span class="ow">=</span> <span class="n">foldr_alt</span> <span class="n">f</span> <span class="n">bs</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>The base case is once again <code>id</code>:</p>

<figure class='code'><figcaption><span>foldr_alt on empty list  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_alt</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>and is trivially true:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldr f a [] == a                  -- by definition of foldr
</span><span class='line'>             == id a               -- by definition of id
</span><span class='line'>             == (foldr_alt f []) a -- by definition of foldr_alt</span></code></pre></td></tr></table></div></figure>


<p>The recursive case is not surprising either:</p>

<figure class='code'><figcaption><span>foldr_alt on non empty list  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_alt</span> <span class="n">f</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="n">foldr_alt</span> <span class="n">f</span> <span class="n">bs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It follows from the induction hypothesis: given <code>foldr f a bs == foldr_alt f bs a</code>, then <code>foldr f a (b:bs) == foldr_alt f (b:bs) a</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldr f a (b:bs) == f b (foldr f a bs)           -- by definition of foldr
</span><span class='line'>                 == f b (foldr_alt f bs a)       -- by induction hypothesis
</span><span class='line'>                 == (f b) . (foldr_alt f bs) $ a -- currying and definition of . and $
</span><span class='line'>                 == (foldr_alt f (b:bs)) $ a     -- by definition of foldr_alt
</span><span class='line'>                 == foldr_alt f (b:bs) a         -- uncurrying and definition of $</span></code></pre></td></tr></table></div></figure>


<p>But <code>foldl</code> is nowhere to be seen&#8230; which is not surprising considering that <code>foldl</code> is tail recursive while <code>foldr</code> and <code>foldr_alt</code> are both body recursive&#8230; maybe using an accumulator, we could turn <code>foldr_alt</code> to a tail recursive function.</p>

<p>The initial value for the accumulator must be the identity of the composition function, that is, <code>id</code>.</p>

<figure class='code'><figcaption><span>accumulator version of foldr_alt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_alt</span> <span class="n">f</span> <span class="n">bs</span> <span class="ow">=</span> <span class="n">foldr_acc</span> <span class="n">f</span> <span class="n">id</span> <span class="n">bs</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>foldr_acc</code> is once again easy to define. The base case:</p>

<figure class='code'><figcaption><span>foldr_acc base case  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_acc</span> <span class="n">f</span> <span class="n">acc</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">acc</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the recursive case, notice that <code>f b</code> is composed with the <em>rest</em> of the function to the right. As the accumulator represents the previous part of the function, <code>f b</code> will be composed with this accumulator to the left:</p>

<figure class='code'><figcaption><span>foldr_acc recursive case  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_acc</span> <span class="n">f</span> <span class="n">acc</span> <span class="p">(</span><span class="n">b</span><span class="kt">:</span><span class="n">bs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldr_acc</span> <span class="p">(</span><span class="n">acc</span> <span class="o">.</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span><span class="p">))</span> <span class="n">bs</span>
</span></code></pre></td></tr></table></div></figure>


<p>The proof is less straightforward; I am not very familiar with equational reasoning, so maybe something simpler is possible. Note that in this proof, I need the list argument to be finite.</p>

<p>First, the base case:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foldr_alt f [] == id                 -- by definition of foldr_alt
</span><span class='line'>               == foldr_acc f id []  -- by definition of foldr_acc</span></code></pre></td></tr></table></div></figure>


<p>For the recursive case, I will not actually use an induction hypothesis. Instead, I will use the fact that the list is finite, and the fact that the composition function is, well, a function. <code>f == g</code> implies <code>acc . f == acc . g</code> for any terminating <code>acc</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>acc . foldr_alt f (b1:b2:bs) == acc . (f b1) . (foldr_alt f (b2:bs))  
</span><span class='line'>  -- by definition of foldr_alt
</span><span class='line'>                         == acc . (f b1) . (f b2) . (foldr_alt f bs)  
</span><span class='line'>  -- by definition of foldr_alt again
</span><span class='line'>                         == acc . (f b1) . (f b2) . .. (f bn)         
</span><span class='line'>  -- by induction over the list bs, which must be finite
</span><span class='line'>                         == foldr_acc f (acc .(f b1) . (f b2) . ... ) []
</span><span class='line'>  -- by definition of foldr_acc f _ []
</span><span class='line'>                         == foldr_acc f (acc . (f b1) . (f b2) . ..) [bn]  
</span><span class='line'>  -- by definition of foldr_acc, recursive case
</span><span class='line'>                         == foldr_acc f acc (b1:b2:bs)
</span><span class='line'>  -- by induction over the lenght of (b1:b2:bs), and definition of foldr_acc, recursive case</span></code></pre></td></tr></table></div></figure>


<p>The fact that the equation only holds for list of finite lengths should not be surprising, but might still be a limitation of my proof.</p>

<p>With <code>foldr_acc</code> defined as above, converting to <code>foldl</code> is immediate:</p>

<figure class='code'><figcaption><span>foldr as foldl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr_acc</span> <span class="n">f</span> <span class="n">id</span> <span class="n">bs</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">go</span> <span class="n">id</span> <span class="n">bs</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">go</span> <span class="n">acc</span> <span class="n">b</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">acc</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span> <span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I rename <code>acc</code> to <code>g</code>, and move <code>x</code> to the parameter list (uncurrying the <code>go</code> function), I get the original definition.</p>

<p>QED.</p>
]]></content>
  </entry>
  
</feed>
