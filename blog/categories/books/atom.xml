<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2011-12-04T20:19:16+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-2/"/>
    <updated>2011-12-03T14:54:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-2</id>
    <content type="html"><![CDATA[<p>Second day with PostgreSQL, this time to discuss advanced queries, stored procedures, and rewriting rules.</p>

<p>The relational model was designed to make it easy to extract meaningful information from the database (although here the operative word is meaningful rather than easy). Aggregations pretty much require a schema to return anything worth the effort (and if you don't believe it, what exactly is the average value of 1, blue and 3?).</p>

<p>Stored procedures can help to move some business intelligence from the main application to the database. Whether it is a good idea is an open question (and I think the knee-jerk negative answer is too often guided by ignorance rather than experience), but the idea of having enough rules in the database that multiple applications can connect to it safely (or safely enough) is worth considering: it enables other applications, some of which might be incompatible with the main business application, to use the business data (many reporting and ETL solutions might fall into this category). The choice is between control and openness (and which one is correct depends on the situation).</p>

<p>Finally, rewriting rules is a less common feature of SQL databases, but essentially it allows the database designer to create updatable views, implement versioning on specific tables, and so on.</p>

<!--more-->


<p>I have a small peeve with the book so far: all too often the authors rely on implicit column ordering when manipulating data. I happen to have a different order for the columns of <code>events</code> (which was created as an exercise <a href="/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1/">yesterday</a>), so many <code>INSERT</code> examples no longer work.</p>

<p>But in general, it is good to specify the columns in an <code>INSERT</code>, as in:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>INSERT with explicit columns  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Your Favorite Band&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-06 21:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-06 23:00&#39;</span><span class="p">,</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Crystal Ballroom&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And to create 'My Place':</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>INSERT My Place  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">countries</span> <span class="p">(</span><span class="n">country_code</span><span class="p">,</span> <span class="n">country_name</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;jp&#39;</span><span class="p">,</span> <span class="s1">&#39;Japan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">cities</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">postal_code</span><span class="p">,</span> <span class="n">country_code</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Shinjuku&#39;</span><span class="p">,</span> <span class="s1">&#39;160-0022&#39;</span><span class="p">,</span> <span class="s1">&#39;jp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">venues</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">type</span><span class="p">,</span> <span class="n">postal_code</span><span class="p">,</span> <span class="n">country_code</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;My Place&#39;</span><span class="p">,</span> <span class="s1">&#39;private&#39;</span><span class="p">,</span> <span class="s1">&#39;160-0022&#39;</span><span class="p">,</span> <span class="s1">&#39;jp&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, to add the new events:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>INSERT new events  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;Steven King&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 21:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 23:00:00&#39;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Powell&#39;&#39;s Books&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">(</span><span class="s1">&#39;Dinner with Mom&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 18:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-26 20:30:00&#39;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="k">SELECT</span> <span class="n">venue_id</span> <span class="k">FROM</span> <span class="n">venues</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;My Place&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">(</span><span class="s1">&#39;Valentine&#39;&#39;s Day&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-14 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-14 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This way, there is never any ambiguity as to what is inserted.</p>

<h3>Window functions</h3>

<p>The book covers window functions, but in this first beta version of the book at least, the explanation is not very illuminating.</p>

<p>Basically, <a href="http://www.postgresql.org/docs/current/static/functions-window.html">window functions</a> are a generalization of aggregate functions. Aggregate functions operates on a range of rows selected by a <code>GROUP BY</code> clause. For each group, there will be only one row, where columns are either grouped by columns, or aggregates.</p>

<p>Window functions also operate on a range of rows, but there is one range for each row in the filtered table. The range can be created in a way similar to <code>GROUP BY</code> (using the <code>PARTITION OVER</code> clause), but can also be created by taking all the rows up to the current one, or 2 rows before, 2 rows after, and the current one, ... Such a range is called a window. There are <a href="http://www.postgresql.org/docs/current/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS">many ways</a> to define them.</p>

<p>For instance, say we want to know, for each events, how many events have happened (including the current one), we can try:
```
book=# SELECT title, starts, COUNT(*) OVER (ORDER BY starts) FROM events;</p>

<pre><code>   title        |       starts        | count 
</code></pre>

<p>--------------------+---------------------+-------
 Your Favorite Band | 2012-02-06 21:00:00 |     1
 Valentine's Day    | 2012-02-14 00:00:00 |     2
 My Book Signing    | 2012-02-15 17:30:00 |     3
 Dinner with Mom    | 2012-02-26 18:00:00 |     4
 Steven King        | 2012-02-26 21:00:00 |     5
 April Fools Day    | 2012-04-01 00:00:00 |     6
 House Party        | 2012-05-03 23:00:00 |     7
 Christmas Day      | 2012-12-25 00:00:00 |     8
 Valentine's Day    | 2013-02-14 00:00:00 |     9
(9 rows)
```</p>

<p>The <code>OVER</code> does not specify a <code>PARTITION</code>, but an <code>ORDER</code>, which means that the <code>COUNT(*)</code> function operates on all the rows from first one to current one (ordered by the <code>starts</code> column). Actually, the <code>COUNT(*)</code> function is the same as the (proper) window function <code>RANK</code>:
```
book=# SELECT title, starts, RANK() OVER (ORDER BY starts) FROM events;</p>

<pre><code>   title        |       starts        | rank 
</code></pre>

<p>--------------------+---------------------+------
 Your Favorite Band | 2012-02-06 21:00:00 |    1
 Valentine's Day    | 2012-02-14 00:00:00 |    2
 My Book Signing    | 2012-02-15 17:30:00 |    3
 Dinner with Mom    | 2012-02-26 18:00:00 |    4
 Steven King        | 2012-02-26 21:00:00 |    5
 April Fools Day    | 2012-04-01 00:00:00 |    6
 House Party        | 2012-05-03 23:00:00 |    7
 Christmas Day      | 2012-12-25 00:00:00 |    8
 Valentine's Day    | 2013-02-14 00:00:00 |    9
(9 rows)
```</p>

<p>What about computing the order of each events, but by year? Nothing easier:
```
book=# SELECT title, starts, RANK() OVER (PARTITION BY extract(year from starts) ORDER BY starts) FROM events;</p>

<pre><code>   title        |       starts        | rank 
</code></pre>

<p>--------------------+---------------------+------
 Your Favorite Band | 2012-02-06 21:00:00 |    1
 Valentine's Day    | 2012-02-14 00:00:00 |    2
 My Book Signing    | 2012-02-15 17:30:00 |    3
 Dinner with Mom    | 2012-02-26 18:00:00 |    4
 Steven King        | 2012-02-26 21:00:00 |    5
 April Fools Day    | 2012-04-01 00:00:00 |    6
 House Party        | 2012-05-03 23:00:00 |    7
 Christmas Day      | 2012-12-25 00:00:00 |    8
 Valentine's Day    | 2013-02-14 00:00:00 |    1
(9 rows)
```</p>

<p>Ok, this is not very fancy. But with numeric data, window functions are more powerful. Lets say we collect daily measures into a new table:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Window function example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">observation</span> <span class="p">(</span>
</span><span class='line'>   <span class="k">day</span> <span class="k">timestamp</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>   <span class="n">measure</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">observation</span> <span class="p">(</span><span class="k">day</span><span class="p">,</span> <span class="n">measure</span><span class="p">)</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="nb">date</span> <span class="s1">&#39;2011-12-01&#39;</span> <span class="k">AS</span> <span class="k">day</span><span class="p">,</span> <span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)::</span><span class="nb">int</span> <span class="k">as</span> <span class="n">measure</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We could use the usual aggregate functions, for instance <code>AVG</code> and <code>SUM</code>:</p>

<p>```
book=# SELECT AVG(measure), SUM(measure) FROM observation;</p>

<pre><code>     avg         | sum  
</code></pre>

<p>---------------------+------
 54.9600000000000000 | 5496
(1 row)
```</p>

<p>We have pretty much all the details. If there's any trend, we would not see it. But with window functions, it is possible to compute running averages (and actually, two different ones):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Window function example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">day</span><span class="p">,</span> <span class="k">AVG</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">2</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="mi">2</span> <span class="n">FOLLOWING</span><span class="p">)</span> <span class="k">as</span> <span class="n">short_avg</span><span class="p">,</span>
</span><span class='line'>  <span class="k">AVG</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">5</span> <span class="n">PRECEDING</span> <span class="k">AND</span> <span class="mi">5</span> <span class="n">FOLLOWING</span><span class="p">)</span> <span class="k">as</span> <span class="n">long_avg</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="n">measure</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">day</span><span class="p">)</span> <span class="k">as</span> <span class="n">running_sum</span> <span class="k">FROM</span> <span class="n">observation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(results omitted because they are too long). Here, the <code>AVG(measure)</code> is applied to a window of either 5 rows for <code>short_avg</code> or 11 rows for <code>long_avg</code>, and there's a running sum in <code>running_sum</code>.</p>

<p>Pretty cool, I'd say.</p>

<h3>Rules</h3>

<p><a href="http://www.postgresql.org/docs/current/static/sql-createrule.html">Rules</a> are very useful as well. Here's how I'd implement the <code>INSERT</code> on <code>holidays</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>INSERT on holidays  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">RULE</span> <span class="n">insert_holidays</span> <span class="k">AS</span> <span class="k">ON</span> <span class="k">INSERT</span> <span class="k">TO</span> <span class="n">holidays</span> <span class="k">DO</span> <span class="k">INSTEAD</span>
</span><span class='line'>  <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">colors</span><span class="p">)</span>
</span><span class='line'>  <span class="k">values</span> <span class="p">(</span><span class="k">NEW</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="nb">date</span><span class="o">+</span><span class="nb">interval</span> <span class="s1">&#39;23 hour 59 minutes&#39;</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">colors</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note the syntax to manipulate dates and timestamp. It is fairly readable and compact enough.</p>

<h2>Exercises</h2>

<h3>Aggregate Functions</h3>

<p>The aggregate functions are documented <a href="http://www.postgresql.org/docs/current/static/functions-aggregate.html">here</a>, while the window functions are <a href="http://www.postgresql.org/docs/current/static/functions-window.html">here</a>.</p>

<h3>GUI</h3>

<p>Honestly, I don't really use any. <code>psql</code> is really powerful. For those of the GUI persuasion, there are a few <a href="http://wiki.postgresql.org/wiki/Community_Guide_to_PostgreSQL_GUI_Tools">options</a>.</p>

<h3>DELETE Rule</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>DELETE rule on venues  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">RULE</span> <span class="n">delete_venue</span> <span class="k">AS</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="k">TO</span> <span class="n">venues</span> <span class="k">DO</span> <span class="k">INSTEAD</span>
</span><span class='line'>  <span class="k">UPDATE</span> <span class="n">venues</span> <span class="k">SET</span> <span class="n">active</span> <span class="o">=</span> <span class="k">false</span> <span class="k">WHERE</span> <span class="n">venue_id</span> <span class="o">=</span> <span class="k">OLD</span><span class="p">.</span><span class="n">venue_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With this rule in place, deleting from <code>venues</code> now set the <code>active</code> flag to false:</p>

<p>```
book=# DELETE FROM venues WHERE name = 'My Place';
DELETE 0
book=# SELECT * FROM venues;
 venue_id |       name       | street_address |  type   | postal_code | country_code | active
----------+------------------+----------------+---------+-------------+--------------+--------</p>

<pre><code>    1 | Crystal Ballroom |                | public  | 97205       | us           | t
    2 | Powell's Books   |                | public  | 97205       | us           | t
    5 | Run's House      |                | public  | 97205       | us           | t
    4 | My Place         |                | private | 160-0022    | jp           | f
</code></pre>

<p>(4 rows)
```</p>

<h3>generate_series in crosstab</h3>

<p>The documentation for <a href="http://www.postgresql.org/docs/current/static/tablefunc.html"><code>crosstab</code></a> has already an example for using <a href="http://www.postgresql.org/docs/current/static/functions-srf.html"><code>generate_series</code></a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>generate_series in crosstab  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">crosstab</span><span class="p">(</span>
</span><span class='line'><span class="s1">&#39;SELECT extract(year from starts) as year,</span>
</span><span class='line'><span class="s1">extract(month from starts) as month, count(*) FROM events</span>
</span><span class='line'><span class="s1">GROUP BY year, month&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;SELECT m FROM generate_series(1, 12) m&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'><span class="k">year</span> <span class="nb">int</span><span class="p">,</span>
</span><span class='line'><span class="n">jan</span> <span class="nb">int</span><span class="p">,</span> <span class="n">feb</span> <span class="nb">int</span><span class="p">,</span> <span class="n">mar</span> <span class="nb">int</span><span class="p">,</span> <span class="n">apr</span> <span class="nb">int</span><span class="p">,</span> <span class="n">may</span> <span class="nb">int</span><span class="p">,</span> <span class="n">jun</span> <span class="nb">int</span><span class="p">,</span> <span class="n">jul</span> <span class="nb">int</span><span class="p">,</span> <span class="n">aug</span> <span class="nb">int</span><span class="p">,</span> <span class="n">sep</span> <span class="nb">int</span><span class="p">,</span> <span class="n">oct</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nov</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">dec</span> <span class="nb">int</span>
</span><span class='line'><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">YEAR</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The output remains the same:</p>

<p><code>
 year | jan | feb | mar | apr | may | jun | jul | aug | sep | oct | nov | dec
------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----
 2012 |     |   5 |     |   1 |   1 |     |     |     |     |     |     |   1
 2013 |     |   1 |     |     |     |     |     |     |     |     |     |    
(2 rows)
</code></p>

<h3>Weekly pivot</h3>

<p>The hardest, perhaps, is to find how to convince PostgreSQL to apply <a href="http://www.postgresql.org/docs/current/static/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE"><code>div</code></a> to the passed arguments, but a bit of type declaration using <code>::</code> does the trick. Also, <code>crosstab</code> is not overly smart, so the <code>month</code> and <code>week</code> columns must be in order, otherwise the counts for the two February (one in 2012 and one in 2013) are different:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Weekly pivot  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">crosstab</span><span class="p">(</span>
</span><span class='line'><span class="s1">&#39;SELECT extract(month from starts) as month,</span>
</span><span class='line'><span class="s1"> div(extract (day from starts)::int, 7) + 1 as week, count(*) FROM events</span>
</span><span class='line'><span class="s1">GROUP BY month, week ORDER BY month, week&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;SELECT m FROM generate_series(1, 5) m&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'><span class="k">month</span> <span class="nb">int</span><span class="p">,</span>
</span><span class='line'><span class="n">week_1</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_2</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_3</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_4</span> <span class="nb">int</span><span class="p">,</span> <span class="n">week_5</span> <span class="nb">int</span>
</span><span class='line'><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">MONTH</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The query produces:</p>

<p>```
 month | week_1 | week_2 | week_3 | week_4 | week_5
-------+--------+--------+--------+--------+--------</p>

<pre><code> 2 |      1 |        |      3 |      2 |       
 4 |      1 |        |        |        |       
 5 |      1 |        |        |        |       
12 |        |        |        |      1 |       
</code></pre>

<p>(4 rows)
```</p>

<p>And this completes Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks PostgreSQL Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1/"/>
    <updated>2011-12-03T12:22:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/seven-databases-in-seven-weeks-postgresql-day-1</id>
    <content type="html"><![CDATA[<p>The first database in the series is a relational database, and what better choice than <a href="http://www.postgresql.org">PostgreSQL</a>?</p>

<!--more-->


<p>Of course, <a href="http://www.mysql.com/">MySQL</a> is more popular, but if we are going to talk about SQL and the relational model, it is better to pick a database that actually takes these concepts seriously.</p>

<p>The idea to start with a relational database is a good one. I feel that many who embrace NoSQL do so because they do not understand either SQL or the relational model. I was surprised to discover that some of my college educated colleagues did not know SQL at all. They were taught mostly about Java and object oriented design (I would ask for a refund). SQL databases have been developed, refined, and used in production for about 40 years. That's more than half the history of computers, they're likely to be part of the landscape for a few more decades, so ignoring them may be trendy but it is not wise.</p>

<p>About the PostgreSQL version: the book appears to have been long in the making, as it still refers the reader to the version 9.0, while <a href="http://www.postgresql.org/docs/9.1/static/release-9-1-1.html">9.1</a> has been out for a few months.</p>

<p>Installing then extensions that are needed for this book is easier with 9.1. Just using <a href="http://www.postgresql.org/docs/current/static/sql-createextension.html"><code>CREATE EXTENSION</code></a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Installing Extensions  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">tablefunc</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">dict_xsyn</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">fuzzystrmatch</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">pg_trgm</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="k">cube</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Removing them is done with the command <a href="http://www.postgresql.org/docs/current/static/sql-dropextension.html"><code>DROP EXTENSION</code></a>.</p>

<h3>The events table</h3>

<p>The code to create and fills the <code>events</code> table:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Creating and filling the events table  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">events</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">event_id</span> <span class="nb">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>  <span class="n">title</span> <span class="nb">text</span><span class="p">,</span>
</span><span class='line'>  <span class="n">starts</span> <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ends</span> <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>  <span class="n">venue_id</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">venue_id</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">REFERENCES</span> <span class="n">venues</span> <span class="p">(</span><span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">events</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">starts</span><span class="p">,</span> <span class="n">ends</span><span class="p">,</span> <span class="n">venue_id</span><span class="p">)</span>
</span><span class='line'><span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;My Book Signing&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-15 17:30:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-02-15 19:30:00&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="p">(</span><span class="s1">&#39;April Fools Day&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-04-01 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-04-01 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">),</span>
</span><span class='line'>   <span class="p">(</span><span class="s1">&#39;Christmas Day&#39;</span><span class="p">,</span>   <span class="s1">&#39;2012-12-25 00:00:00&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-12-25 23:59:00&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>On indexes</h3>

<p>I don't have a PostgreSQL 9.0 instance to check, but with 9.1 at least, <code>UNIQUE</code> constraints are implemented through a <code>btree</code> index, not a <code>hash</code> one. The difference is that a <code>btree</code> index is sorted and so supports range searches.</p>

<p>This can be checked by querying the console about the table:</p>

<p>```
book=# \d events</p>

<pre><code>                                   Table "public.events"
</code></pre>

<p>  Column  |            Type             |                         Modifiers                       <br/>
----------+-----------------------------+-----------------------------------------------------------
 event_id | integer                     | not null default nextval('events_event_id_seq'::regclass)
 title    | text                        |
 starts   | timestamp without time zone |
 ends     | timestamp without time zone |
 venue_id | integer                     |
Indexes:</p>

<pre><code>"events_pkey" PRIMARY KEY, btree (event_id)
"events_starts" btree (starts)
</code></pre>

<p>Foreign-key constraints:</p>

<pre><code>"events_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES venues(venue_id)
</code></pre>

<p>```</p>

<h2>Exercises</h2>

<h3>The PostgreSQL FAQ</h3>

<p>The FAQ is <a href="http://wiki.postgresql.org/wiki/FAQ">here</a>.</p>

<h3>The PostgreSQL Documentation</h3>

<p>The documentation for version 9.1 is <a href="http://www.postgresql.org/docs/9.1/static/index.html">here</a> (and <a href="http://www.postgresql.org/docs/manuals/">there</a> for all the versions).</p>

<h3>About <code>MATCH FULL</code></h3>

<p>This one was already explained in the book, and confirmed by the <a href="http://www.postgresql.org/docs/current/static/sql-createtable.html">documentation</a>: when a foreign key is composed of more than one column, they must all match a row in the referenced table, or be all null.</p>

<h3>Selecting user table from <code>pg_class</code></h3>

<p>Interestingly, the first time I tried to solve this exercise, I used <a href="http://www.postgresql.org/docs/current/static/view-pg-tables.html"><code>pg_tables</code></a> by mistake (<code>pg_tables</code> has a <code>tableowner</code> column which makes it easy to identify user tables).</p>

<p><a href="http://www.postgresql.org/docs/current/static/catalog-pg-class.html"><code>pg_class</code></a> stores the type of object in <code>relkind</code>: 'r' for tables. Restricting for just tables, and working on the table name:</p>

<p>```
book=#  select relname from pg_class where relkind = 'r';</p>

<pre><code>     relname         
</code></pre>

<hr />

<p> pg_statistic
 pg_type
 pg_attribute
 pg_authid
 pg_proc
 pg_class
 pg_database
 pg_user_mapping
 pg_constraint
 pg_inherits
 pg_index
 pg_operator
 pg_opfamily
 pg_opclass
 pg_amop
 pg_amproc
 pg_language
 pg_largeobject_metadata
...
```</p>

<p>Ok, that's a bit long. Removing these <code>pg_</code> named tables:</p>

<p>```
book=# select relname from pg_class where relkind = 'r' and relname not like 'pg_%';</p>

<pre><code>     relname         
</code></pre>

<hr />

<p> sql_implementation_info
 sql_languages
 sql_packages
 sql_parts
 sql_sizing
 sql_sizing_profiles
 sql_features
 countries
 events
 cities
 venues
(11 rows)
```</p>

<p>Interestingly, only the tables that are visible in the current database are listed (I have other databases, with more user created tables).</p>

<p>Still I need to remove the <code>sql_</code> named tables. Using PostgreSQL <a href="http://www.postgresql.org/docs/current/static/functions-matching.html#FUNCTIONS-POSIX-REGEXP">regular expression operators</a>:
```
book=# select relname from pg_class where relkind = 'r' and relname !~ '<sup>(pg<em>|sql</em>)';</sup></p>

<h2>  relname  </h2>

<p> countries
 events
 cities
 venues
(4 rows)
```</p>

<p>This is one approach. Another would be to try to mimic the behaviour of the <code>\d</code> console command. The <a href="http://www.postgresql.org/docs/current/static/app-psql.html"><code>psql</code></a> option <code>-E</code> can be used to check what queries are used to implement specific console commands:</p>

<p>```
$ psql -E book
psql (9.1.1)
Type "help" for help.</p>

<p>book=# \d
<strong><strong><strong><strong>* QUERY </strong></strong></strong></strong>**
SELECT n.nspname as "Schema",
  c.relname as "Name",
  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' END as "Type",
  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
FROM pg_catalog.pg_class c</p>

<pre><code> LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
</code></pre>

<p>WHERE c.relkind IN ('r','v','S','f','')</p>

<pre><code>  AND n.nspname &lt;&gt; 'pg_catalog'
  AND n.nspname &lt;&gt; 'information_schema'
  AND n.nspname !~ '^pg_toast'
</code></pre>

<p>  AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 1,2;</p>

<hr />

<pre><code>              List of relations
</code></pre>

<p> Schema |        Name         |   Type   |   Owner <br/>
--------+---------------------+----------+-----------
 public | cities              | table    | fdumontmd
 public | countries           | table    | fdumontmd
 public | events              | table    | fdumontmd
 public | events_event_id_seq | sequence | fdumontmd
 public | venues              | table    | fdumontmd
 public | venues_venue_id_seq | sequence | fdumontmd
(6 rows)
```</p>

<p>The minimal query that lists the user created tables in the current database seems to be:</p>

<p>```
book=# select c.relname from pg_class c join pg_namespace n on n.oid = c.relnamespace where c.relkind = 'r' and pg_catalog.pg_table_is_visible(c.oid) and n.nspname &lt;> 'pg_catalog';</p>

<h2>  relname  </h2>

<p> countries
 events
 cities
 venues
(4 rows)
```</p>

<p>But given that <code>pg_class</code> only lists the tables in the current database, and assuming you don't use <code>pg_</code> or <code>sql_</code> prefixes, the first query is clearly easier.</p>

<h3>Country name for the event 'My Book Signing'</h3>

<p>Based on the content of the book so far, a possible solution uses <code>INNER JOIN</code>:</p>

<p>```
book=# select c.country_name from events e inner join venues v on e.venue_id = v.venue_id inner join countries c on v.country_code = c.country_code where title = 'My Book Signing';</p>

<h2> country_name  </h2>

<p> United States
(1 row)
```</p>

<p>But this is a bit verbose. The structure of the tables makes it possible to use <a href="http://www.postgresql.org/docs/current/static/queries-table-expressions.html"><code>NATURAL JOIN</code></a>:</p>

<p>```
book=# select country_name from events natural join venues natural join countries where title = 'My Book Signing';</p>

<h2> country_name  </h2>

<p> United States
(1 row)
```</p>

<p>When using <code>NATURAL JOIN</code>, PostgreSQL will join on all the columns that are found in both tables (based on their names). For instance, both <code>events</code> and <code>venues</code> have a <code>venue_id</code> column (and no other column with the same name), so the join is on this column.</p>

<p>And other interesting difference is that <code>NATURAL JOIN</code> removes the duplicate columns:</p>

<p><code>
book=# select * from events natural join venues natural join countries where title = 'My Book Signing';
 country_code | venue_id | event_id |      title      |       starts        |        ends         |     name      | street_address |  type   | postal_code | active | country_name  
--------------+----------+----------+-----------------+---------------------+---------------------+---------------+----------------+---------+-------------+--------+---------------
 us           |        2 |        1 | My Book Signing | 2012-02-15 17:30:00 | 2012-02-15 19:30:00 | Powel's Books |                | public  | 97205       | t      | United States
(1 row)
</code></p>

<p>whereas <code>INNER JOIN</code> does not:
```
book=# select * from events e inner join venues v on e.venue_id = v.venue_id inner join countries c on v.country_code = c.country_code where title = 'My Book Signing';
 event_id |      title      |       starts        |        ends         | venue_id | venue_id |     name      | street_address |  type   | postal_code | country_code | active | country_code | country_name<br/>
----------+-----------------+---------------------+---------------------+----------+----------+---------------+----------------+---------+-------------+--------------+--------+--------------+---------------</p>

<pre><code>    1 | My Book Signing | 2012-02-15 17:30:00 | 2012-02-15 19:30:00 |        2 |        2 | Powel's Books |                | public  | 97205       | us           | t      | us           | United States
</code></pre>

<p>(1 row)
```</p>

<h3>Add a new column</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add a new column to <code>venues</code>  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">venues</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">active</span> <span class="nb">boolean</span> <span class="k">DEFAULT</span> <span class="k">TRUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Checking that is is now there:
```
book=# \d venues</p>

<pre><code>                                    Table "public.venues"
 Column     |          Type          |                         Modifiers                         
</code></pre>

<p>----------------+------------------------+-----------------------------------------------------------
 venue_id       | integer                | not null default nextval('venues_venue_id_seq'::regclass)
 name           | character varying(255) |
 street_address | text                   |
 type           | character(7)           | default 'public'::bpchar
 postal_code    | character varying(9)   |
 country_code   | character(2)           |
 active         | boolean                | default true
Indexes:</p>

<pre><code>"venues_pkey" PRIMARY KEY, btree (venue_id)
</code></pre>

<p>Check constraints:</p>

<pre><code>"venues_type_check" CHECK (type = ANY (ARRAY['public'::bpchar, 'private'::bpchar]))
</code></pre>

<p>Foreign-key constraints:</p>

<pre><code>"venues_country_code_fkey" FOREIGN KEY (country_code, postal_code) REFERENCES cities(country_code, postal_code) MATCH FULL
</code></pre>

<p>Referenced by:</p>

<pre><code>TABLE "events" CONSTRAINT "events_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES venues(venue_id)
</code></pre>

<p>```</p>

<p>or directly by <code>select</code>:
```
book=# select * from venues;
 venue_id |       name       | street_address |  type   | postal_code | country_code | active
----------+------------------+----------------+---------+-------------+--------------+--------</p>

<pre><code>    1 | Crystal Ballroom |                | public  | 97205       | us           | t
    2 | Powel's Books    |                | public  | 97205       | us           | t
</code></pre>

<p>(2 rows)
```</p>

<p>And this completes Day 1. Tomorrow, stored procedures, triggers, views, rules, and other goodies are on the menu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Book: Seven Databases in Seven Weeks]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/03/new-book-seven-databases-in-seven-weeks/"/>
    <updated>2011-12-03T12:21:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/03/new-book-seven-databases-in-seven-weeks</id>
    <content type="html"><![CDATA[<p>It is early December still, but the good people of the <a href="http://pragprog.com/">Pragmatic Bookshelf</a> have delivered an early Christmas present: <a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a>, by Eric Redmond and Jim Wilson.</p>

<!--more-->


<p>The book is in Beta, but there are chapters for 5 databases, so there plenty of material already.</p>

<p>The idea of covering 7 databases, even superficially, is a good one, perhaps even better than for <a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">languages</a>: while the choice of a language is often beyond the control of any single developer, the choice of a database (perhaps from the NoSQL family as a complement to a core, mandated SQL one) is possible. As with languages, trying to use a new database is if it was similar to one you're already familiar with is likely to end badly. A good understanding of what each of them is good for, what problem they intend to solve, and what niche they fit better is mandatory.</p>

<p>I have been working with relational databases mostly so far (and, professionally, with one of the worst databases that people can charge money for), so I am eager to be introduced to the other kinds, without the usual cheerleading that is found in many tutorials.</p>

<p>In the coming weeks, assuming the book is timely updated, I'll be blogging my way through it, just as I did through <a href="/blog/2011/10/11/seven-languages-in-seven-weeks/">Seven Languages in Seven Weeks</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Wrap Up]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/26/seven-languages-in-seven-weeks-wrap-up/"/>
    <updated>2011-11-26T12:24:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/26/seven-languages-in-seven-weeks-wrap-up</id>
    <content type="html"><![CDATA[<p>Wow, seven weeks already. And seven languages later, time to see where I can go from here.</p>

<!--more-->


<p>This was a rather pleasant journey. I felt that some exercises with Io and Scala were more frustrating than the rest, but overall it was not too taxing.</p>

<p>It brought interesting benefits: I got a better look at emerging trends in software, but now it is up to me to develop this first look into something useable.</p>

<h2>General comments</h2>

<p>The exercises level was rather uneven. I guess that is inevitable, given that some of the languages were introduced as stepping stones for others. Still, from a CSV parser (even one using meta-programming) to a backtracking maze solver, there's a fairly large range.</p>

<p>The idea of just giving enough information to get started, but not so much that the book is the only source of information needed to solve the exercises, was very good. A language is not just a syntax, a semantic, and a library. It is most of all a community, a set of websites, forums, mailing lists, ... It was smart to push the reader towards that.</p>

<p>And yes, clearly, each language was barely covered, but some of the third day exercises were hinting at the more advanced features.</p>

<p>All in all, this was a good book. It is useful to be exposed to different languages, if only to expand one's approach to problem solving. The features of tomorrow's mainstream languages are being explored today in smaller languages; being at least aware of this evolution is required to grow as a professional software engineer.</p>

<p>But the author spends way too much time complaining about syntax (or claiming that a particular syntax is a weakness). I find the accusation that Scala's syntax is too academic particularly pointless. Rightfully, he adds that this is subjective, but what on earth is an academic syntax? A syntax is either easy on the fingers or not (the former being better), and either adapted to the semantic or not. It can support the features, or make them ugly. It should be concise in what it promotes, and verbose in what it discourages.</p>

<p>As far as I could tell, each language had a syntax that matches its needs and those of its users.</p>

<p>Conclusion: I recommend the book. Even knowing some of the languages I still learned a few things, and for those languages I knew, I had a chance for a second look and a new appreciation of what they offer.</p>

<h2>From here to a bit further</h2>

<p>It would be unfortunate if this book was the last step I took in these various languages. So here I recap what I think of each language, and where I'd like to go with them.</p>

<h3>Ruby</h3>

<p>I like Ruby. It's fun, open, does not make judgment about what is proper software engineering (who cares if you like monkey patching...). The syntax binds all the features well, and the ecosystem is really interesting.</p>

<p>It might not have the performance, and no concurrency model worth mentioning, but as a new glue or script language, or perhaps for the Rails platform (although my current needs are not met by RoR), it shines.</p>

<p>I had read the <a href="http://pragprog.com/book/ruby/programming-ruby">Programming Ruby</a> (the pickaxe book), and a few books on Rails, and I liked what I saw.</p>

<p>I'll probably follow up with <a href="http://pragprog.com/book/ppmetr/metaprogramming-ruby">Metaprogramming Ruby</a>.</p>

<p>And as I'm doing a lot of web development, I will try to look at Ruby driven <a href="http://seleniumhq.org/">Selenium</a>.</p>

<h3>Io</h3>

<p>Well, I won't spend much more time with Io. I really don't see any advantages. Yes, it's compact, the interpreter is small, so it's ideal for embedded languages. Which I don't need.</p>

<p>As I said earlier, there is a prototype based, functional Lisp inspired language that is worth learning. It is supported by several major software companies or organisations, has users in the billions (or will soon): Javascript.</p>

<h3>Prolog</h3>

<p>I had learned Prolog at university. I had enjoyed it at the time, and doing the exercises reminded me of that fun.</p>

<p>Prolog is, by and large, about exploring search trees, so the techniques it teaches are usable in other languages. The maze solver in Haskell is essentially a tree search and would be implemented the same way in Prolog.</p>

<p>I'm glad that a recent trip back to Europe allowed me to retrieve my two Prolog books: <a href="http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;tid=8327">The Art of Prolog</a> and <a href="http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;tid=8336">The Craft of Prolog</a>. Both are large, so it might take a while.</p>

<h3>Scala</h3>

<p>I didn't know Scala but had heard about it and was very curious. It is indeed fairly expressive, more concise than Java, and the concurrency model much better.</p>

<p>The type system is somewhat strange: much better than Java, but more verbose and less flexible than Haskell, and sometimes with bizarre results: the concatenation of a <code>List</code> of <code>Int</code> and a <code>List</code> of <code>String</code> is a <code>List</code> of <code>Any</code>...</p>

<p>In any case, Scala seems to be gaining momentum, so I'll try and learn more about it in the near future. There are plenty of books, at least one free (<a href="http://programmingscala.com/">Programming Scala</a>, from O'Reilly), and one by the language creator (<a href="http://www.artima.com/shop/programming_in_scala">Programming in Scala</a>).</p>

<h3>Erlang</h3>

<p>Erlang was another language I had checked before, yet this book showed me something new. An important development of Erlang is OTP (Open Telecom Platform), but until very recently, there were few resources to learn about it.</p>

<p>The whole concept of supervisors is just the beginning; as far as I can tell, OTP offers a large range of tools to monitor and keep processes alive on a network. Where this really becomes interesting, is that Scala is adopting some ideas (<a href="http://akka.io/">Akka</a> is inspired by Erlang/OTP), so some knowledge of one can be reused.</p>

<p>There is an entry level book, <a href="http://pragprog.com/book/jaerlang/programming-erlang">Programming in Erlang</a>, by Joe Armstrong (Erlang's father), and a couple of more advanced books, specifically on OTP: <a href="http://www.manning.com/logan/">Erlang and OTP in Action</a> and <a href="http://shop.oreilly.com/product/9780596518189.do">Erlang Programming</a>. I'm going through Programming in Erlang, then the in Action one.</p>

<h3>Clojure</h3>

<p>Clojure is a Lisp for the JVM. That in itself should make it interesting, but somehow it does not do it for me. Maybe it is that Clojure is not as good Lisp it could be because of the JVM limitations. Or maybe I'm just not into Lisp anymore (I used to like Perl too, but wonder why today).</p>

<p>But with my professional investment in the JVM, I will probably investigate Clojure a bit further. Just not urgently.</p>

<p>It might be interesting to see if <a href="http://norvig.com/paip.html">Paradigms of Artificial Intelligence Programming</a> can easily be ported to Clojure.</p>

<h3>Haskell</h3>

<p>Haskell is an interesting language. But it is extremely demanding, and there are few resources to come to grip with it. I knew enough about Haskell to go through this book easily, but whenever I try to go further, I find that difficulties accumulate quickly.</p>

<p>It appears that Haskell's features are all somewhat complicated in their own way:</p>

<h4>Types</h4>

<p>Haskell type system is perhaps the most sophisticated of all widely used type systems. Basic Haskell type system is already very rich, but <a href="http://www.haskell.org/ghc/">GHC</a> adds extensions that brings the expressivity of the type system to new heights.</p>

<p>I would assume that Haskell strength must be in this type system; there are interesting libraries and applications that are built around clever use of types. But there are few resources on using types for design (or designing with types), except for very academic papers with no obvious practical uses (I probably lack imagination)</p>

<p>GHC's extensions are similarly explored in other academic papers, but the sum of these extensions is hard to make sense of (and it sometimes feels like the authors of GHC are also trying to make sense of this patchwork and find a more consistent set of features).</p>

<p>This is in serious needs of a good book, but I can't think of any that fits the bill.</p>

<h4>Laziness</h4>

<p>Haskell's laziness goes much further than Clojure's. I did not mention it in <a href="/blog/2011/11/19/seven-languages-in-seven-weeks-haskell-day-3/">Haskell Day 3</a>'s Maze solution, but laziness makes this implementation very effective: only the first solution is computed. While the implementation is strictly equivalent to nested list comprehensions, only the part required for the first output is actually run.</p>

<p>Laziness (combine with the List Monad) makes the algorithm very short: a mere 14 lines. But it makes it also very obscure. I know, intellectually, that laziness will run just a much as needed, but I don't understand it as well as, say, I understand the time and space cost of an algorithm in C.</p>

<p>When digging a bit deeper in Haskell, newcomers learn to be wary of laziness: it introduces space leaks that can be hard to track. Solutions exist, but are spread in academic papers that require extensive understanding of the whole background theories (why do academic papers always refer to other, more obscure academic papers, and never to a single "Idiot Guide to..."?)</p>

<p>Of all the features of Haskell, I would think that laziness is the harder to master. There are few generally available resources. <a href="http://www.cambridge.org/gb/knowledge/isbn/item1161740/?site_locale=en_GB">Purely Functional Data Structures</a> explores laziness and provides a theoretical framework to compute the time cost of lazy algorithms, but does so assuming a partial laziness built on top of SML.</p>

<p><a href="http://www.iro.umontreal.ca/~lapalme/Algorithms-functional.html">Algorithms: A Functional Programming Approach</a> is about Haskell, but appears to be out of print (glad I got a copy when I first got interested in Haskell).</p>

<p>Both books are in my todo stack (which by now requires all my skills in rock climbing to handle).</p>

<h4>Syntax</h4>

<p>Haskell's syntax is another of its strengths: it is very compact, and the type system abstracts away many details. So it's no surprise that many people (or maybe just me) have a problem with it.</p>

<p>I learned OCaml at university (those were good days). My first few assignments, I had to implement my own list like data type, because I could not figure out how to use the default list in pattern matching. The language was so weird that it did not even occurred to me that a language whose standard list type was unusable would not leave the lab it grew in. Then eventually the syntax settled in my brain, and I started to wonder why it had been so hard before.</p>

<p>Haskell is similar (they are both somewhat descendant of ML), but far more abstract (OCaml does not support either type classes or user operators). So just looking at an expression, it is not easy to assign it a type (there might be many) or a single meaning (there might be many as well).</p>

<p>Another thing that I find hard to keep under control is the creation of anonymous functions. Between higher order functions that produce functions, and the do notation (which produces functions as well), it is hard to track what is going on, even it apparently simple expressions.</p>

<p>This is not to say that Haskell's syntax does not "work". It does, clearly, but the expressivity it grants is difficult to master.</p>

<h4>The compiler</h4>

<p>The compiler is another peace of the puzzle. All compilers are fantastically complex beasts; the underlying theories are just as fascinating as they are overwhelming. But in general, at least with regular imperative (or perhaps just with strict languages), my intuitions about what is costly, what is a possible leak, ... just based on the code, are usually correct. With Haskell, there are many areas where I'm not sure what the compiler will do. Functional languages enthusiasts used to say that any inefficiency in their favourite language was just waiting for a sufficiently advanced compiler, but now I have a feeling that understanding what the compiler is doing is just as hard as figuring out program wide memory allocation in C...</p>

<p>And it matters. Strictness analysis, for instance, is used by GHC (and, I suppose, other Haskell compilers) to figure out which expressions could be strict (i.e. not lazy) without changing the overall semantic. This changes the time and space cost of some expressions, and makes performance difficult to predict.</p>

<h4>The meta-language</h4>

<p>Haskell is its own meta-language. What is a core feature in most languages is just a library in Haskell. This means that there is little uniformity even in fundamental part of the languages. There are <a href="http://www.randomhacks.net/articles/2007/03/10/haskell-8-ways-to-report-errors">8 ways to report errors</a> (perhaps more today). And at least that many monad transformer libraries.</p>

<p>Having to combine these various libraries (and more importantly, the libraries that use them) is difficult, and adds accidental complexity. What makes it more frustrating is that Haskell type system is otherwise very effective at making it easy to create code parts that can be combined in various ways (while checking that the combination always make some sense).</p>

<p>It would be good to standardise some of these, and maybe the <a href="http://hackage.haskell.org/platform/">Haskell Platform</a> will achieve this, although it would be nice if it was keeping up with at least GHC (at the time of writing, version 7.0.3 is in the Platform, but 7.2.2 is already out, with important changes).</p>

<h4>and so on...</h4>

<p>I would like to like Haskell. But if any language can be accused of being too academic, it is Haskell. Sometimes it feels like the main purpose of the language is to make it possible to prove, through the type system, that a specific, inefficient sort algorithm is indeed a sort algorithm.</p>

<p>I'm really curious about organisations that use Haskell for commercial purposes. What kind of features do they use the most? Is laziness really a good thing, or it is flushed away from the code and replaced by explicit on demand evaluation? Given a chance, I'd like to work in such an organisation, as I feel Haskell requires a different approach to large scale problem solving than the one I'm used to.</p>

<h3>Other topics</h3>

<p>From the same publisher (<a href="http://pragprog.com/">The Pragmatic Bookshelf</a>) as this book,
<a href="http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks">Seven Databases in Seven Weeks</a> is looking very interesting. I'm also professionally bound to SQL, so I haven't really been paying attention to the whole NoSQL movement. Yet there are definitively interesting things going on, and the variety of alternative database models makes such a book a welcome introduction.</p>

<p>As I've been doing way too much sequential processing in the past, I am looking to expand my horizon and learn about large scale concurrency (Erlang, Scala, ... help here), and asynchronous, event based processing. <a href="http://www.manning.com/etzion/">Event Processing in Action</a> appears to be a decent way to get started.</p>

<p>Finally, and while it is completely unrelated to whatever this book was about, I haven't studied algorithms since I left university. I really feel I should get back to that topic, and <a href="http://www.algorist.com/">The Algorithm Design Manual</a> is just what I need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Haskell Day 3.5]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/11/21/seven-languages-in-seven-weeks-haskell-day-3-dot-5/"/>
    <updated>2011-11-21T13:21:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/11/21/seven-languages-in-seven-weeks-haskell-day-3-dot-5</id>
    <content type="html"><![CDATA[<p>Haskell Day 3 had one exercise I forgot about: to implement monads in a different language. In this post I correct this oversight.</p>

<!--more-->


<p>There are various implementations of monads for other languages. Some are well suited for the exercise (because they have a flexible syntax like Clojure, for instance). With others the whole thing sticks out like a sore thumb. I think the latter is useful to highlight Haskell's features.</p>

<p>I choose Java, which shows how helpful Haskell's syntax and type system really is, compared to a mainstream language. Regarding types, maybe generics would have helped, but I'm not familiar enough with them to figure it out (for professional reasons, I got stuck with Java 1.4 for quite a long time).</p>

<p>I implements a List Monad, and creates a list of pairs where the first element is smaller than the second. In Haskell, this is what it would look like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>List Monad example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">do</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>   <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>   <span class="kr">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">y</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="kr">then</span> <span class="n">return</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'> <span class="kr">else</span> <span class="n">fail</span> <span class="s">&quot;Not a valid pair&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Haskell's notation for functions is especially useful here. Note how the Java codes forces me to tie <code>MakePair1</code> and <code>MakePair2</code>, while the Haskell equivalent seems to have no special construct whatsoever (the do notation hides the underlying anonymous functions).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ListMonad.java)</span> <a href='/downloads/code/7l7w/haskell/ListMonad.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">test</span><span class="o">.</span><span class="na">monad</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Java type system is not rich enough to be used here.</span>
</span><span class='line'><span class="cm"> * Even with generics, some expression do not typecheck,</span>
</span><span class='line'><span class="cm"> * so I use Object everywhere</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">({</span> <span class="s">&quot;rawtypes&quot;</span><span class="o">,</span> <span class="s">&quot;unchecked&quot;</span> <span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListMonad</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">private</span> <span class="n">List</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>	<span class="kd">private</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="n">ListMonad</span> <span class="nf">bind</span><span class="o">(</span><span class="n">Func</span> <span class="n">func</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">ArrayList</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="nl">obj:</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">res</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">func</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">obj</span><span class="o">).</span><span class="na">getContent</span><span class="o">());</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">static</span> <span class="n">ListMonad</span> <span class="nf">wrap</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">ArrayList</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>		<span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="c1">// error param is not used in ListMonad</span>
</span><span class='line'>	<span class="kd">static</span> <span class="n">ListMonad</span> <span class="nf">fail</span><span class="o">(</span><span class="n">String</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">());</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="n">List</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">interface</span> <span class="nc">Func</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">ListMonad</span> <span class="nf">run</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>	
</span><span class='line'>	
</span><span class='line'>	<span class="kd">static</span> <span class="n">ListMonad</span> <span class="nf">monadDo</span><span class="o">(</span><span class="n">List</span> <span class="n">lst</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="k">new</span> <span class="nf">ListMonad</span><span class="o">(</span><span class="n">lst</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">List</span> <span class="n">output</span> <span class="o">=</span> <span class="n">monadDo</span><span class="o">(</span><span class="n">Sequence</span><span class="o">.</span><span class="na">makeRange</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)).</span><span class="na">bind</span><span class="o">(</span><span class="k">new</span> <span class="n">MakePair1</span><span class="o">()).</span><span class="na">getContent</span><span class="o">();</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="nl">obj:</span> <span class="n">output</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MakePair1</span> <span class="kd">implements</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">Func</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="n">ListMonad</span> <span class="nf">run</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">ListMonad</span><span class="o">.</span><span class="na">Func</span> <span class="n">func</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MakePair2</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">monadDo</span><span class="o">(</span><span class="n">Sequence</span><span class="o">.</span><span class="na">makeRange</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)).</span><span class="na">bind</span><span class="o">(</span><span class="n">func</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MakePair2</span> <span class="kd">implements</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">Func</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">private</span> <span class="n">Object</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>	<span class="kd">public</span> <span class="nf">MakePair2</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="n">ListMonad</span> <span class="nf">run</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">Integer</span> <span class="n">cont</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>		<span class="n">Integer</span> <span class="n">val</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>		<span class="k">if</span> <span class="o">(</span><span class="n">cont</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">val</span><span class="o">.</span><span class="na">intValue</span><span class="o">())</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="n">content</span><span class="o">,</span> <span class="n">obj</span><span class="o">));</span>
</span><span class='line'>		<span class="k">else</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">ListMonad</span><span class="o">.</span><span class="na">fail</span><span class="o">(</span><span class="s">&quot;Not a valid pair&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">({</span> <span class="s">&quot;rawtypes&quot;</span><span class="o">,</span> <span class="s">&quot;unchecked&quot;</span> <span class="o">})</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Sequence</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">static</span> <span class="n">List</span> <span class="nf">makeRange</span><span class="o">(</span><span class="kt">int</span> <span class="n">from</span><span class="o">,</span> <span class="kt">int</span> <span class="n">to</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">ArrayList</span> <span class="n">lst</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">from</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">to</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">lst</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">return</span> <span class="n">lst</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Pair</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">private</span> <span class="n">Object</span> <span class="n">fst</span><span class="o">;</span>
</span><span class='line'>	<span class="kd">private</span> <span class="n">Object</span> <span class="n">snd</span><span class="o">;</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="nf">Pair</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">fst</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">snd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">this</span><span class="o">.</span><span class="na">fst</span> <span class="o">=</span> <span class="n">fst</span><span class="o">;</span>
</span><span class='line'>		<span class="k">this</span><span class="o">.</span><span class="na">snd</span> <span class="o">=</span> <span class="n">snd</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="n">getFst</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">getSnd</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">public</span> <span class="n">Object</span> <span class="nf">getFst</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">fst</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">public</span> <span class="n">Object</span> <span class="nf">getSnd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">snd</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The implementation is otherwise fairly straightforward given the definition of monads:</p>

<ul>
<li><code>monadDo</code> and <code>wrap</code> (Haskell's <code>return</code>) both create a new <code>ListMonad</code>;</li>
<li><code>fail</code> is also a way to create a <code>ListMonad</code> which represents failure. I pass a <code>String</code> argument to have the same signature as Haskell's <code>fail</code>, but in List Monads such argument is ignored, so I ignore it here as well;</li>
<li><code>bind</code> is the <code>&gt;&gt;=</code> version, which collects the results of the <code>func</code> argument run over each element of the current List content; a new <code>ListMonad</code> with the results as content is returned</li>
<li>finally, <code>getContent</code> gives back the current content of the <code>ListMonad</code>.</li>
</ul>


<p>The test code is nothing fancy (I certainly wouldn't want to try and write my maze solving algorithm in Java using the ListMonad), but it tests all the features.</p>

<p>Running it produces the expected output:
<code>
(1, 2)
(1, 3)
(1, 4)
(1, 5)
(2, 3)
(2, 4)
(2, 5)
(3, 4)
(3, 5)
(4, 5)
</code></p>

<p>Aren't you glad you can write this in Haskell instead?</p>
]]></content>
  </entry>
  
</feed>
