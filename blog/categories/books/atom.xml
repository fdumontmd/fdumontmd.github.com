<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2012-01-07T14:40:22+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Notes]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics-chapter-1-notes/"/>
    <updated>2012-01-06T13:52:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics-chapter-1-notes</id>
    <content type="html"><![CDATA[<p>For the first post of this hopefully long series, I have a few notes I
wrote down as I was reading Chapter 1. Nothing revolutionary, but it
gives me a chance to play with math notation.</p>

<!--more-->


<h1>Lines in the Plane</h1>

<p>I must admit that my memories of Geometry are far, far away (the
subject was not addressed at all when I studied Mathematics at
university, and I had no need for Geometry in my work since), so I
spent perhaps an unreasonable amount of time to check the validity of
the most elementary steps.</p>

<p>It goes without saying that the exercises of a Geometric nature are
particularly challenging (as if I needed the extra difficulty).</p>

<h2>Intersecting lines</h2>

<p>The notion that one line will add $k$ new regions if it intersects
other lines at $k-1$ points is due to the fact that $k-1$ distinct
lines define at least $k$ regions (more if they are not all parallel),
and one more line that intersects them all will divide these $k$
regions in two.</p>

<h1>Josephus Problem</h1>

<h2>$J(5 \cdot 2^m) = 2^{m+1} + 1$</h2>

<p>This is based on the fact that $J(10) = 5$ and $J(2n) = 2J(n) -1$.</p>

<p>By induction:</p>

<p><em>Base case</em>: it is true for $m = 1$: $J(5\cdot 2) = J(10) = 5 =
2^{1+1} + 1$</p>

<p><em>Recurrence</em>: assuming it is true for $m$,</p>

<div markdown="0">
$$
\begin{align}
J(5\cdot 2^{m+1}) &amp;= J(2(5\cdot 2^m))\\\\
&amp;= 2J(5\cdot 2^m) - 1&amp;&amp;\text{as $J(2n) = 2J(n) -1$}\\\\
&amp;= 2(2^{m+1}+1) - 1&amp;&amp;\text{induction hypothesis}\\\\
&amp;= 2\cdot 2^{m+1} + 2 - 1\\\\
&amp;= 2^{m+2} + 1
\end{align}
$$
</div>


<h2>$A(2^{m}+l) = 2^{m}$</h2>

<p>It took me a while to convince myself that the $l$ was not a problem
here. This can be seen by considering $l$ in binary notation, and
using $A(2n) = 2A(n)$ and $A(2n+1) = 2A(n)$ to remove the rightmost
bit.</p>

<p>That is, with $2^m > l = (b_{m-1}b_{m-2}\cdots b_{1}b_{0})_2$,we have:</p>

<div markdown="0">
$$
\begin{align}
A(2^{m}+l) &amp;= A(2^{m}+(b_{m-1}b_{m-2}\cdots b_{1}b_{0})_2)\\\\
&amp;= 2A(2^{m-1}+(b_{m-1}b_{m-2}\cdots b_{1})_2)\\\\
&amp;= 2^{2}A(2^{m-2}+(b_{m-1}b_{m-2}\cdots b_{2})_2)\\\\
&amp;= 2^{3}A(2^{m-3}+(b_{m-1}b_{m-2}\cdots b_{3})_2)\\\\
&amp;= \cdots
\end{align}
$$
</div>


<p>At each iteration, whether $b_i$ is $0$ or $1$, we can ignore it when
dividing by $2$. And as $2^m &lt; l$, it takes no more than $m$ steps
(removing the $m$ bits $b_0$ to $b_{m-1}$) to reduce $A(2^m+l)$ to
$2^mA(1) = 2^m$</p>

<h2>Radix-based Generalised Josephus Solution</h2>

<p>The equation 1.18:</p>

<p>$$f \left( ( b_m b_{m-1} \cdots b_1 b_0)_d \right) = \left( \alpha_{b_m} \beta_{b_{m-1}} \beta_{b_{m-2}} \cdots \beta_{b_1} \beta_{b_0} \right)_c$$</p>

<p>is so unnaturally smart and simple that I thought the proof must be
missing. But in fact it is indeed trivial, and just as the book
states, follows from the rewriting of the argument in base $d$, then
recurrence over $m$ (with $m$ the number of digits or the argument in
base $d$).</p>

<p>In the next post in this series, I will start the exercises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics/"/>
    <updated>2012-01-06T13:16:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/06/concrete-mathematics</id>
    <content type="html"><![CDATA[<p>Stephen Hawking once said that his editor had warned him that each
equation in his book would halve the readership.</p>

<p>With that in mind, and taking into account the number of readers of
this blog (or lack thereof), would I dare put any equations?</p>

<p>You better believe it!</p>

<!--more-->


<p>I just picked up my old copy of
<a href="http://en.wikipedia.org/wiki/Concrete_Mathematics">Concrete Mathematics</a>,
a book I have too long neglected. The ultimate goal, of course, is
slaying the
<a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming">Beast</a>,
which I should try to complete before Donald E. Knuth passes away.
While I wish him a very long life, long enough at least to complete
<a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming#Volumes">Volume 5</a>,
and better yet 6 and 7, I should not take his remarkable health as an
excuse to dither.</p>

<p>For the math notation, I use <a href="http://www.mathjax.org/">MathJax</a>, a
JavaScript library that can parse either
<a href="http://www.w3.org/Math/">MathMl</a>, or much better
<a href="http://www.latex-project.org/">LaTeX</a> (which is based on
<a href="http://www.math.upenn.edu/TeX.html">TeX</a>, another gift of Donald
E. Knuth to the world).</p>

<p>The setup for this blog is based on this
<a href="http://greglus.com/blog/2011/11/29/integrate-MathJax-LaTeX-and-MathML-Markup-in-Octopress/">post</a>.</p>

<p>The quality of rendering is variable: pretty good in Firefox, OK in
Safari or Chrome, and no idea in IE or Opera. Of course, it is not as
good as the output of LaTeX, but for the Web it is acceptable.</p>

<p>For instance, given the recurrence</p>

<div markdown="0">
$$
\begin{align}
f(j) &amp; = \alpha_j, &amp;&amp;\text{for $1 \\leq j \\lt  d$}\\\\
f(dn + j) &amp; = cf(n) + \beta_j, &amp;&amp;\text{for $0 \\leq j \\lt d$ and $n \\geq 1$}
\end{align}
$$
</div>


<p>then the solution is</p>

<p>$$f \left( ( b_m b_{m-1} \cdots b_1 b_0)_d \right) = \left( \alpha_{b_m} \beta_{b_{m-1}} \beta_{b_{m-2}} \cdots \beta_{b_1} \beta_{b_0} \right)_c$$</p>

<p>(refer to the book for explanations).</p>

<p>Isn't this lovely?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Neo4j Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/30/seven-databases-in-seven-weeks-neo4j-day-3/"/>
    <updated>2011-12-30T21:15:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/30/seven-databases-in-seven-weeks-neo4j-day-3</id>
    <content type="html"><![CDATA[<p>Third, last and quite short day with Neo4j. Today on the menu:
transactions, replication, and backups.</p>

<p>Transactions are a standard feature of relational databases, but NOSQL
databases seem to consider them too costly (of the other databases in
the book, only HBase and Redis also support transactions, as far as I
can tell). Neo4j does support them, along with rollbacks.</p>

<p>Replication is Neo4j's answer for High Availability and, to some
extent, Scaling. The latter is limited as Neo4j does not partition the
data, so everything has to fit in each computer in the cluster.</p>

<p>Finally, backups are exactly what you would expect them to be. Neo4J
offers both full and incremental backups, which update a previous
backup.</p>

<!--more-->


<h3>Transactions</h3>

<p>I cannot comment much on transactions, as I could not use them: the
Gremlin shell from the Web Admin console could not find the required
enumeration (which I imported, though), while the Gremlin standalone
shell was giving me strange errors when I tried to import the relevant
classes.</p>

<p>I suppose pure Java would be more reliable, either as standalone code
or plugin, but I did not explore that possibility.</p>

<h3>High-Availability</h3>

<p>High-availability is achieved by deploying and linking together
several instances of Neo4j. The setup is somewhat tedious, as there
are additional processes to configure and run (the coordinators), and
four different configuration files to edit. Really, this is the kind
of things you'd wish <a href="http://whirr.apache.org/">Apache Whirr</a> would do
for you.</p>

<p>But if you want to do it manually, you should follow the
<a href="http://docs.neo4j.org/chunked/stable/ha-setup-tutorial.HTML">online documentation</a>
rather than the book version (at least in beta version 2.0): the book
use the property <code>ha.zoo_keeper_servers</code> in the <code>neo4j.properties</code>
configuration file, when the correct property is
<code>ha.coordinators</code>. What is worse is that it will look like it works,
until you try to write to a slave over the ReST API, which will fail
with an exception. Writes to the master would also not be pulled by
the slaves. Using the right property name fixes these problems.</p>

<p>Once set up, the cluster will have one master and several slaves. The
master contains the authoritative version of the data. The book
recommends to always write to slaves, as they have to push any update
to the master before completing the update, meaning you have a
guaranteed replication of your data. However, what the book does not
explain is how to figure out which server is slave, or even whether
the list of servers in the cluster can be discovered....</p>

<p>Actually, it is possible to have some idea of which server is the
master by querying any server with</p>

<p><code>
curl -H "Content-Type:application/json" -d '["org.neo4j:*"]' http://localhost:7471/db/managerver/jmx/query
</code></p>

<p>(assuming one of the server is listening to port <code>7471</code>). A sample
reply is shown (only partially, as it is very long) one the
<a href="http://docs.neo4j.org/chunked/snapshot/ha-setup-tutorial.html">HA setup tutorial</a>. But
the actual address of each server is not shown, and I could not find
any way to get the address property to be properly filled.</p>

<p>So the proper way to use such a cluster is probably to use the
<a href="http://haproxy.1wt.eu/">HAProxy</a>, as explained in
<a href="http://docs.neo4j.org/chunked/snapshot/ha-haproxy.html">Neo4j HA documentation</a>. It
can be configured to differentiate between master and slaves, and to
restrict connections to slaves (keeping the list updated with a
check). It can also split the requests by some specific parameter (for
instance, the user id), and direct the requests the same server for a
given value of the parameter. While Neo4j does not shard the data
itself, this mechanism can be used to shard the data cache (what must
be loaded in memory).</p>

<h3>Backups</h3>

<p>Neo4j support remote, full or incremental backups. Incremental backups
are properly understood as update to the previous backup (either full
or incremental), and are therefore much faster.</p>

<p>This is a good feature, and should be used often. But as I'm just
playing, and the notion of backup does not lend itself to exploration,
I just looked at them briefly.</p>

<h2>Exercises</h2>

<h3>Neo4j licensing guide</h3>

<p>The <a href="http://neo4j.org/licensing-guide/">guide</a> is fortunately quite
short.</p>

<h3>Read-only slaves</h3>

<p>This seems to be a description of the original HA feature in Neo4j,
but as far as I can tell it does not exist anymore. In fact, there is
an
<a href="https://github.com/neo4j/enterprise/commit/480256bfff036784dc82897d2348a16e3fbf6c03#ha/src/docs/dev/operation.txt">update</a>
to the official documentation to remove the mention of read-only
slave.</p>

<p>There used to be a Java class to create a server as read-only slave,
as documented
<a href="http://wiki.neo4j.org/index.php?title=Online_Backup_HA&amp;redirect=no#Starting_a_read-only_slave">here</a>,
but it no longer exists either.</p>

<h3>Maximum number of nodes supported</h3>

<p><a href="http://docs.neo4j.org/chunked/stable/questions.html#id474370">34.4 billion nodes</a>.</p>

<h3>Replication across three physical servers</h3>

<p>As I already <a href="/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2/">explained</a> how to setup a cluster of EC2 virtual machines
for Riak, I will go skip all the details.</p>

<p>I launched four instances: one will be the HAProxy server, the
remaining three the Neo4j servers.</p>

<h4>Security Setup</h4>

<p>All the rules but the first one are internal (i.e. the source is the
name of the security group, which should be specific to the cluster).</p>

<ul>
<li>22 (SSH) - source <code>0.0.0.0/0</code></li>
<li>2181: coordinator client port</li>
<li>2888: quorum election port</li>
<li>3888: leader election port</li>
<li>6001: inter cluster communication port</li>
<li>7474: web interface for the Neo4j servers</li>
<li>8080: admin interface for HAProxy</li>
<li>80: web interface for the proxy</li>
</ul>


<p>Neo4j does not need ranges, unlike Riak.</p>

<h4>Instance setups</h4>

<p>I connect to each of the Neo4j server, and download the Enterprise
edition:</p>

<p><code>
wget http://dist.neo4j.org/neo4j-enterprise-1.5-unix.tar.gz
</code></p>

<p>First step is to configure the coordinators. I edit the
<code>conf/coord.cfg</code> file and replace the server.1 property with the block</p>

<p><code>
server.1=10.202.90.131:2888:3888    
server.2=10.202.81.171:2888:3888    
server.3=10.195.78.222:2888:3888
</code></p>

<p>(I got the IP addresses by using the <code>ifconfig</code> command on each
instance). I also update the <code>data/coordinator/myid</code> of each instance
with own number (1 to 3).</p>

<p>I then modified each <code>conf/neo4j.properties</code>, setting each to its own
<code>ha.server_id</code>, and setting the <code>ha.coordinators</code> to
<code>10.202.90.131:2181,10.202.81.171:2181,10.195.78.222:2181</code>. I also
changed the <code>ha.server</code> to use the <code>eth0</code> IP address rather than <code>localhost</code>.</p>

<p>Finally, I modified each <code>conf/neo4j-server.properties</code>:</p>

<ul>
<li>the web server needs to listen to the <code>eth0</code> IP address rather than
<code>localhost</code> (for instance, <code>org.neo4j.server.webserver.address=10.202.90.131</code>);</li>
<li>the server needs to be set to HA mode:
<code>org.neo4j.server.database.mode=HA</code></li>
</ul>


<p>Surprisingly enough, the three servers did start and were configured properly...</p>

<p>I checked the setup with</p>

<p><code>
curl -H "Content-Type:application/json" -d '["org.neo4j:*"]'
http://10.202.90.131:7474/db/manage/server/jmx/query
</code></p>

<p>I looked for the string <code>InstancesInCluster</code>, and made sure there were
three known servers.</p>

<p>Finally I pushed something into the second (slave) server using</p>

<p><code>
curl -i -X POST http://10.202.81.171:7474/db/data/node \
-H "Content-Type: appliction/json" \
-d '{"name": "P.G. Wodehouse", "genre": "British Humour"}'
</code></p>

<p>then tried to retrieve it from the third (slave) server with</p>

<p>```
$ curl http://10.195.78.222:7474/db/data/node/1
{
  "outgoing_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/out",
  "data" : {</p>

<pre><code>"genre" : "British Humour",
"name" : "P.G. Wodehouse"
</code></pre>

<p>  },
  "traverse" : "http://10.195.78.222:7474/db/data/node/1/traverse/{returnType}",
  "all_typed_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/all/{-list|&amp;|types}",
  "property" : "http://10.195.78.222:7474/db/data/node/1/properties/{key}",
  "self" : "http://10.195.78.222:7474/db/data/node/1",
  "properties" : "http://10.195.78.222:7474/db/data/node/1/properties",
  "outgoing_typed_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/out/{-list|&amp;|types}",
  "incoming_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/in",
  "extensions" : {
  },
  "create_relationship" : "http://10.195.78.222:7474/db/data/node/1/relationships",
  "paged_traverse" : "http://10.195.78.222:7474/db/data/node/1/paged/traverse/{returnType}{?pageSize,leaseTime}",
  "all_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/all",
  "incoming_typed_relationships" : "http://10.195.78.222:7474/db/data/node/1/relationships/in/{-list|&amp;|types}"
```</p>

<p>So far so good...</p>

<h3>Load-balancer</h3>

<p>Well, <a href="http://haproxy.1wt.eu">HAproxy</a> seems a good choice, so I'll go with that.</p>

<p>The
<a href="http://docs.neo4j.org/chunked/snapshot/ha-haproxy.html">documentation</a>
proposes to restrict access to slaves using a "small extension". This
is in fact a piece of Java code that can be downloaded from
<a href="https://github.com/dmontag/neo4j-hastatus-extension">Github</a>.</p>

<p>The compiled jar should be copied to the <code>lib</code> directory of each
instance, and the <code>conf/neo4j-server.properties</code> configuration file
updated to contain the line</p>

<p><code>
org.neo4j.server.thirdparty_jaxrs_classes=org.neo4j.server.hastatus=/hastatus
</code></p>

<p>as documented on the page above.</p>

<h4>Testing Locally</h4>

<p>As a first test, I deployed HAProxy on my own machine, using this
configuration file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (haproxy_local.cfg)</span> <a href='/downloads/code/7d7w/neo4j/haproxy_local.cfg'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">global</span>
</span><span class='line'><span class="err">    daemon</span>
</span><span class='line'><span class="err">    maxconn 256</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">defaults</span>
</span><span class='line'><span class="err">    mode http</span>
</span><span class='line'><span class="err">    timeout connect 5000ms</span>
</span><span class='line'><span class="err">    timeout client 50000ms</span>
</span><span class='line'><span class="err">    timeout server 50000ms</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">frontend http-in</span>
</span><span class='line'><span class="err">    bind *:7000</span>
</span><span class='line'><span class="err">    default_backend neo4j-slaves</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">backend neo4j-slaves</span>
</span><span class='line'><span class="err">    option httpchk GET /hastatus/slave</span>
</span><span class='line'><span class="err">    server s1 localhost:7471 maxconn 32 check</span>
</span><span class='line'><span class="err">    server s2 localhost:7472 maxconn 32 check</span>
</span><span class='line'><span class="err">    server s3 localhost:7473 maxconn 32 check</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">listen admin</span>
</span><span class='line'><span class="err">    bind *:8080</span>
</span><span class='line'><span class="err">    stats enable</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I had installed HAProxy with
<a href="http://mxcl.github.com/homebrew/">Homebrew</a>. The config above does
not bind to port <code>*:80</code>, so I can run it without root privileges:</p>

<p><code>
/usr/local/sbin/haproxy -f haproxy_local.cfg
</code></p>

<p>Once up, I opened a browser on
<a href="http://localhost:8080/haproxy?stats">HAProxy stat page</a> (it is not
JSON, you really need a browser), to check that two instances of Neo4j
were configured as slaves and available.</p>

<p>Finally, I checked a Gremlin script with:</p>

<p><code>
$ curl -X POST
http://localhost:7000/db/data/ext/GremlinPlugin/graphdb/execute_script
-H "content-type:application/json" -d '{"script":"g.V.name"}'
[ "null", "null", "null", "null", "P.G. Wodehouse", "null", "P.G. Wodehouse", "P.G. Wodehouse" ]
</code></p>

<p>(the <code>7000</code> is the HAProxy port, not any of the Neo4j ports). I had a
few P.G. Wodehouse nodes I inserted when I was testing writes to slaves.</p>

<p>Ok, this is ready to be tested on the AWS cluster.</p>

<h4>Deploying on the cloud</h4>

<p>I used the small cluster deployed in the previous exercise. I just
copied the Neo4j HAStatus extension jar to each machine (in the <code>lib</code>
directory), and changed the <code>conf/neo4j-server.properties</code> exactly as
above.</p>

<p>I quickly checked that the extension was installed with:</p>

<p><code>
curl http://10.202.90.131:7474/hastatus/master
curl http://10.202.81.171:7474/hastatus/slave
curl http://10.195.78.222:7474/hastatus/slave
</code></p>

<p>(each is supposed to return nothing. If there's a problem, these
commands will return an error page).</p>

<p>Everything looks fine. Time to set up the HAProxy machine.</p>

<p>Once again, I followed the instructions from the
<a href="http://docs.neo4j.org/chunked/stable/ha-haproxy.html">Neo4j documentation</a>:
first I installed the "Development Tools":</p>

<p><code>
yum -y groupinstall 'Development Tools'
</code></p>

<p>This step is very fast because they all are stored in the Amazon
Cloud.</p>

<p>I retrieved the HAProxy code:</p>

<p><code>
wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.18.tar.gz
</code></p>

<p>To build it, I used the command <code>make TARGET=26</code> (which means build
for a recent version of Linux).</p>

<p>I did not copy the executable, as I will run it without root
privileges anyway.</p>

<p>I created a file <code>haproxy.cfg</code> that contains:</p>

<p>```
global</p>

<pre><code>daemon
maxconn 256
</code></pre>

<p>defaults</p>

<pre><code>mode http
timeout connect 5000ms
timeout client 50000ms
timeout server 50000ms
</code></pre>

<p>frontend http-in</p>

<pre><code>bind *:7000
default_backend neo4j-slaves
</code></pre>

<p>backend neo4j-slaves</p>

<pre><code>option httpchk GET /hastatus/slave
server s1 10.202.90.131:7474 maxconn 32 check
server s2 10.202.81.171:7474 maxconn 32 check
server s3 10.195.78.222:7474 maxconn 32 check
</code></pre>

<p>listen admin</p>

<pre><code>bind *:8080
stats enable
</code></pre>

<p>```</p>

<p>which is essentially the same file as the file <code>haproxy_local.cfg</code>
above.</p>

<p>I established SSH tunnels to ports <code>7000</code> and <code>8080</code>, checked the
status of the proxy on <code>http://localhost:8080/haproxy?stats</code> (I had
made a mistake to one of the IP address, so I fixed it and restarted
the proxy).</p>

<p>Finally, I was able to run</p>

<p><code>
$ curl -X POST http://localhost:7000/db/data/ext/GremlinPlugin/graphdb/execute_script \
-H "content-type:application/json" -d '{"script":"g.V.name"}'
[ "null", "P.G. Wodehouse" ]
</code></p>

<p>And all was good.</p>

<h2>Wrapping up Neo4j</h2>

<p>This is another database I had to fight all along the way. The
book, the available documentation, and the actual behaviour of the
database overlap only partially. Figuring out what is actually
possible and how to achieve it was harder than for any other databases
in the book.</p>

<p>One thing that was especially irritating is the error handling of the
Gremlin shell: a syntax error such as a missing closing quote renders
the shell unusable: it keeps complaining about the syntax error, but
offers no way to actually correct it. And I could find no way to
reset the shell, except by restarting the whole server...</p>

<p>This, and the fact that both the embedded interpreter or the
standalone shell are unstable in their own different ways (not to
mention slightly incompatible) makes Gremlin useless. But the
alternatives, Cipher or Java, are not really usable either: Cipher is
too limited, Java too verbose and its syntax ill suited.</p>

<p>This said, Neo4j occupies a fairly specific niche which does not have
many alternatives. Let's hope the ecosystem stabilises into
something more coherent and stable.</p>

<h2>The other databases</h2>

<p>It seems the Redis might be available soon, but CouchDB is not there
yet. So I will probably switch to a different book for the time being.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Neo4j Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/29/seven-databases-in-seven-weeks-neo4j-day-2/"/>
    <updated>2011-12-29T09:17:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/29/seven-databases-in-seven-weeks-neo4j-day-2</id>
    <content type="html"><![CDATA[<p>Today we play further with Neo4j, exploring the ReST API, indexes, and
algorithms in various languages.</p>

<p>The ReST API is always available, although not the easiest thing to
work with. Besides what the book covers, I also learned how to extend
it, and how to bypass it for large loads.</p>

<p>Indexing can be manual, as the book shows, or automatic (although
the
<a href="http://docs.neo4j.org/chunked/snapshot/auto-indexing.html">documentation</a>
warns this is still an experimental feature).</p>

<p>Finally, the algorithms are mostly provided by an external library,
<a href="http://jung.sourceforge.net/">JUNG</a>, so its use require direct access
to the data, bypassing the server.</p>

<!--more-->


<h3>Creating an index on relationship</h3>

<p>As the index is of type <code>exact</code>, there is no need to create it first
(although it is
<a href="http://docs.neo4j.org/chunked/snapshot/rest-api-indexes.html#rest-api-create-node-index">possible</a>). Just
inserting data in the index will do:</p>

<p><code>
curl -X POST http://localhost:7474/db/data/index/relationship/published \
-H "Content-Type: application/json" \
-d '{ "uri" : "http://localhost:7474/db/data/relationship/0", \
"key" : "date", "value" : "1916-11-28" }'
</code></p>

<h3>About the ReST API</h3>

<p>Clearly this is not how one would want to program. I copied the
<a href="http://media.pragprog.com/titles/rwdata/code/neo4j/importer.rb"><code>importer.rb</code></a>
code from the book (instead of just using a downloaded version), and
ran it for hours before finding a bug in the data to create
indexes... Running it again with this bug fixed made it much faster
(as actors were reused instead of being duplicated).</p>

<p>There is a higher level API, <a href="http://neo4j.rubyforge.org/">Neo4j.rb</a>,
which runs on JRuby (so it does not use the ReST API). It should be
noted that this is not really a driver, but a library to manage a
Neo4j database directly in Ruby. Still, with it, it is possible to
create the database that will be used by a server. There are other
alternatives (the Gremlin console, for instance), but for Ruby it
seems to be one of the most advanced, and is still being improved.</p>

<p>There is also a ReST API wrapper called
<a href="https://github.com/maxdemarzi/neography">neography</a>, but as I'm
trying to save time I'll go with Neo4j.rb.</p>

<p>To use this API you first need to clone the Git repository:</p>

<p><code>
git clone git://github.com/andreasronge/neo4j.git
</code></p>

<p>In the <code>neo4j</code> directory, build then install the gem (making sure
the default Ruby is JRuby):</p>

<p><code>
$ gem build neo4j.gemspec
  Successfully built RubyGem
  Name: neo4j
  Version: 1.3.1
  File: neo4j-1.3.1-java.gem
$ gem install neo4j-1.3.1-java.gem
... (lot's of output elided)
</code></p>

<p>As I said above, it is possible to use it to feed data into a
database, but it should not be used while the server is running. I
used it to create the movie network, as it was significantly faster
than the book Ruby script.</p>

<p>To do so, I first rewrite the import script to use the <code>neo4j</code> gem. I
am also using the
<a href="http://neo4j.rubyforge.org/guides/batch_insert.html"><code>Neo4j::Batch::Inserter</code></a>
for extra performance; the resulting code is less readable, but not
significantly so. The script is mostly the same size as the original
one, but much easier to understand (if you know the <code>neo4j</code> gem).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (importer_driver.rb)</span> <a href='/downloads/code/7d7w/neo4j/importer_driver.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{rubygems neo4j}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="nb">require</span> <span class="n">r</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Movie</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">NodeMixin</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">index</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Actor</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">NodeMixin</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">index</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">has_n</span><span class="p">(</span><span class="ss">:acted_in</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="no">Movie</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">create_node</span><span class="p">({</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">},</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>    <span class="n">inserter</span><span class="o">.</span><span class="n">index_flush</span><span class="p">(</span><span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;begin processing...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Neo4j</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:storage_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;NEO4J_HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/data/graph.db&quot;</span>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">inserter</span> <span class="o">=</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">Batch</span><span class="o">::</span><span class="no">Inserter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">actor</span><span class="p">,</span> <span class="n">movie</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">next</span> <span class="k">if</span> <span class="n">actor</span><span class="o">.</span><span class="n">empty?</span> <span class="o">||</span> <span class="n">movie</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">actor_node</span> <span class="o">=</span> <span class="n">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="n">actor</span><span class="p">,</span> <span class="no">Actor</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movie_node</span> <span class="o">=</span> <span class="n">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="n">movie</span><span class="p">,</span> <span class="no">Movie</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">inserter</span><span class="o">.</span><span class="n">create_rel</span><span class="p">(</span><span class="no">Actor</span><span class="o">.</span><span class="n">acted_in</span><span class="p">,</span> <span class="n">actor_node</span><span class="p">,</span> <span class="n">movie_node</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;  </span><span class="si">#{</span><span class="n">count</span><span class="si">}</span><span class="s2"> relationships loaded&quot;</span> <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;done!&quot;</span>
</span><span class='line'><span class="n">inserter</span><span class="o">.</span><span class="n">shutdown</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I first shut down the Neo4j server. I defined a
<code>NEO4J_HOME</code> environment variable as the root of the Neo4j instance,
and cleared the content of <code>$NEO4J_HOME/data/graph.db</code> with</p>

<p><code>
rm -rf $NEO4J_HOME/data/graph.db/*
</code></p>

<p>While not strictly necessary, this step helps ensure that the database
is always in a known (i.e. empty) state each time.</p>

<p>Finally I ran the script with</p>

<p><code>
jruby importer_driver.rb performance.tsv
</code></p>

<p>The whole import took a little above 1 hour on my not really powerful
macBook Air. The original script never finished, even after running a
few hours.</p>

<p>I also found that index creation is the main cost: my first attempt at
loading data did not use indexes at all: the whole file was loaded in
less than 3 minutes (but of course the resulting graph was
unusable).</p>

<p>The script is not complete; it should certainly handle exceptions and
close the database properly. But for an initial load it does the job.</p>

<p>After it finished, I just restarted the server.</p>

<p>Note: I strongly suggest backing up the <code>data/graph.db</code> directory just
after the initial load (and before starting the server). I had a crash
while running the Kevin Bacon queries, and Neo4j unhelpfully lost the
property data file, forcing me to import again...</p>

<p>A data corruption during a read only operation does not inspire
confidence...</p>

<h3>Indexes</h3>

<p>Once thing I had not properly understood, and which caused me some
problems as I was trying to learn how to use the driver, is that
all indexes use Lucene. They are either <code>exact</code> or <code>fulltext</code>, and can
be queried as shown here:</p>

<p>```
$ curl http://localhost:7474/db/data/index/node/
{
  "movies" : {</p>

<pre><code>"template" : "http://localhost:7474/db/data/index/node/movies/{key}/{value}",
"provider" : "lucene",
"type" : "exact"
</code></pre>

<p>  },
  "actors" : {</p>

<pre><code>"template" : "http://localhost:7474/db/data/index/node/actors/{key}/{value}",
"provider" : "lucene",
"type" : "exact"
</code></pre>

<p>  }
}
```</p>

<p>So the fact that the driver only supports Lucene indexes is not a
limitation. There is nothing else (although presumably there could be).</p>

<h3>Extending Neo4j</h3>

<p>As I found on this
<a href="http://blog.neo4j.org/2010/12/neo4j-12-m06-is-out-better-rest.html">post</a>,
it is fairly easy to extend the ReST API with arbitrary
code. Deploying the code is a simple as copying the jar at the right
location.</p>

<p>The
<a href="http://docs.neo4j.org/chunked/snapshot/server-plugins.html">official documentation</a>
is mostly an updated version of the post above.</p>

<p>I claimed
<a href="/blog/2011/12/28/seven-databases-in-seven-weeks-neo4j-day-1/">yesterday</a>
that it was impossible to the ReST API directly to list just the names
of all the nodes.</p>

<p>Of course, today I know I could pass a Gremlin expression through
ReST, and get the same result as in the console. But that could be
considered cheating.</p>

<p>The alternative is to use extend the ReST with a plugin, as I show
here.</p>

<p>As always, the use of Maven is recommended. My <code>pom.xml</code> loads the
<code>server-api</code> for Neo4j:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (pom.xml)</span> <a href='/downloads/code/7d7w/neo4j/list_names/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>	<span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>	<span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>	<span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>	<span class="nt">&lt;artifactId&gt;</span>listNames<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>	<span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>	<span class="nt">&lt;properties&gt;</span>
</span><span class='line'>		<span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>		<span class="nt">&lt;neo4j.version&gt;</span>1.5<span class="nt">&lt;/neo4j.version&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>	<span class="nt">&lt;build&gt;</span>
</span><span class='line'>		<span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>			<span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>				<span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>				<span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>				<span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>				<span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>					<span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>					<span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>				<span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>			<span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/build&gt;</span>
</span><span class='line'>	<span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>		<span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>			<span class="nt">&lt;groupId&gt;</span>org.neo4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;artifactId&gt;</span>server-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;version&gt;</span>${neo4j.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The Java code is simplified by the use of annotations. The code
returns an iterator that extract the names of the underlying node
iterator:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ListNames.java)</span> <a href='/downloads/code/7d7w/neo4j/list_names/ListNames.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.GraphDatabaseService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.Node</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.Description</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.Name</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.PluginTarget</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.ServerPlugin</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.server.plugins.Source</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Description</span><span class="o">(</span><span class="s">&quot;An extension to list all node names&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListNames</span> <span class="kd">extends</span> <span class="n">ServerPlugin</span> <span class="o">{</span>
</span><span class='line'>	<span class="nd">@Name</span><span class="o">(</span><span class="s">&quot;list_all_names&quot;</span><span class="o">)</span>
</span><span class='line'>	<span class="nd">@Description</span><span class="o">(</span><span class="s">&quot;List all the node names&quot;</span><span class="o">)</span>
</span><span class='line'>	<span class="nd">@PluginTarget</span><span class="o">(</span><span class="n">GraphDatabaseService</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>	<span class="kd">public</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">getAllNames</span><span class="o">(</span><span class="nd">@Source</span> <span class="n">GraphDatabaseService</span> <span class="n">graphDb</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="kd">final</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">nodeIterator</span> <span class="o">=</span> <span class="n">graphDb</span><span class="o">.</span><span class="na">getAllNodes</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>		<span class="k">return</span> <span class="k">new</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>			<span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>				<span class="k">return</span> <span class="k">new</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>					<span class="nd">@Override</span>
</span><span class='line'>					<span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// do nothing </span>
</span><span class='line'>					<span class="o">}</span>
</span><span class='line'>					<span class="nd">@Override</span>
</span><span class='line'>					<span class="kd">public</span> <span class="n">String</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>						<span class="k">try</span> <span class="o">{</span>
</span><span class='line'>							<span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">nodeIterator</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>						<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>							<span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>						<span class="o">}</span>
</span><span class='line'>					<span class="o">}</span>
</span><span class='line'>					<span class="nd">@Override</span>
</span><span class='line'>					<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>						<span class="k">return</span> <span class="n">nodeIterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span>
</span><span class='line'>					<span class="o">}</span>
</span><span class='line'>				<span class="o">};</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>		<span class="o">};</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, it is important to have add a file
<code>META-INF/services/org.neo4j.server.plugins.ServerPlugin</code> with the
complete name of the new plugins (in this case, just one):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (org.neo4j.server.plugins.ServerPlugin)</span> <a href='/downloads/code/7d7w/neo4j/list_names/org.neo4j.server.plugins.ServerPlugin'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">jp.wakatta.ListNames</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The jar should be copied to the <code>plugins</code> directory of the Neo4j
instance, and Neo4j restarted.</p>

<p>It is possible to test the correct deployment of the plugin using the
ReST API:</p>

<p>```
$ curl  http://localhost:7474/db/data/
{
  "relationship_index" : "http://localhost:7474/db/data/index/relationship",
  "node" : "http://localhost:7474/db/data/node",
  "relationship_types" : "http://localhost:7474/db/data/relationship/types",
  "neo4j_version" : "1.5",
  "batch" : "http://localhost:7474/db/data/batch",
  "extensions_info" : "http://localhost:7474/db/data/ext",
  "node_index" : "http://localhost:7474/db/data/index/node",
  "reference_node" : "http://localhost:7474/db/data/node/0",
  "extensions" : {</p>

<pre><code>"CypherPlugin" : {
  "execute_query" : "http://localhost:7474/db/data/ext/CypherPlugin/graphdb/execute_query"
},
"GremlinPlugin" : {
  "execute_script" : "http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script"
},
"ListNames" : {
  "list_all_names" : "http://localhost:7474/db/data/ext/ListNames/graphdb/list_all_names"
}
</code></pre>

<p>  }
}
```</p>

<p>The query returns the list of each extension, as well as the URL to
call it. Using the <code>GET</code> method, the extension is self documenting:</p>

<p><code>
$ curl http://localhost:7474/db/data/ext/ListNames/grphdb/list_all_names
{
  "extends" : "graphdb",
  "description" : "List all the node names",
  "name" : "list_all_names",
  "parameters" : [ ]
}
</code></p>

<p>Finally, it can be invoked with the <code>POST</code> method:</p>

<p><code>
$ curl -X POST http://localhost:7474/db/data/ext/ListNames/grphdb/list_all_names
[ "", "actor", "film", "Leif Andrée", "7X - This is Our Kids ", ...
</code></p>

<h2>Of course Kevin Bacon</h2>

<p>This section is about the code of the book version beta 2.0.</p>

<p>I had trouble to get the code to work in Neo4j 1.5. Here I document
the alternative code I came up with and used.</p>

<h3>Defining steps in Gremlin</h3>

<p>I could not get the book code to define the <code>costars</code> step to work: it
seems <code>outV</code> does not accept a filter expression as argument.</p>

<p>Even with the addition of a dedicated <code>filter</code> step, I could not
filter properly. Instead, I started from scratch, using the
<a href="https://github.com/tinkerpop/gremlin/wiki/User-Defined-Steps">Gremlin wiki</a>
code as a basis:</p>

<p>```
Gremlin.defineStep('costars',</p>

<pre><code>               [Vertex, Pipe],
               {_().sideEffect{start = it}.
                   outE('Movie#acted_in').inV.inE('Movie#acted_in').
                   outV.filter{!start.equals(it)}.uniqueObject()})
</code></pre>

<p>```</p>

<p>Note the use of <code>sideEffect</code> to introduce the variable <code>start</code> into
the expression. Not doing this (and instead following the book code),
the filter was not working at all (i.e. the start node was
still part of the result). Also I have a different type for the
relationship (<code>Movie#acted_in</code>) as it was generated by Neo4j.rb.</p>

<h3>From Elvis to Kevin Bacon</h3>

<p>The <code>loop</code> step does not emit intermediate node by default, so while
the query in the book is accepted, it does not return any result
because the actual degree of separation between Elvis and Kevin Bacon
is just 3.</p>

<p>The latest version of Gremlin extends the basic <code>loop</code> pattern to emit
intermediate nodes if requested, but this is not possible with the
version embedded in Neo4j 1.5 admin console.</p>

<p>The standalone Gremlin shell version 1.3 is a bit too old (it links
against Neo4j version 1.5.M01, whose database format is not compatible
with version 1.5's format). So I tried the current head of the Git
<a href="https://github.com/tinkerpop/gremlin">repository</a>.</p>

<p>To build it you will need to download half the Internet, so be
patient.</p>

<p>The build command is <code>mvn install</code> (the install step will make the
scripts to launch the console).</p>

<p>Once started, you can load the database with:</p>

<p><code>
g = new Neo4jGraph('/users/x/neo4j-enterprise-1.5/data/graph.db')
</code></p>

<p>The code <code>costars</code> step that was working in the console no longer does
in the shell. I had to replace the <code>uniqueObject()</code> step with
<code>dedup()</code>, and make sure
everything is on a single line:</p>

<p><code>
Gremlin.defineStep('costars', [Vertex, Pipe], {_().sideEffect{start = it}.outE('Movie#acted_in').inV.inE('Movie#acted_in').outV.filter{!start.equals(it)}.dedup()})
</code></p>

<p>Finally, the command to find nodes by index has to explicitly use the
index:</p>

<p><code>
bacon = g.idx('Actor_exact')[['name':'Kevin Bacon']].next()
elvis = g.idx('Actor_exact')[['name':'Elvis Presley']].next()
</code></p>

<p>(if you created the data using the original import command, the index
name is <code>actors</code>).</p>

<p>As frustrating as it all is, the end result is that the <code>loop</code> step
can now be used as needed:</p>

<p><code>
elvis.costars.loop(1){ it.loops &lt; 4}{true}.filter{it.equals(bacon)}.paths.next().name.grep{it}
</code></p>

<p>I also had to change the query once more to use <code>next</code> instead of <code>&gt;&gt; 1</code> as
in the book, as that does not work in the latest version of Gremlin
either.</p>

<h3>Random walk</h3>

<p>Once again, I had to change the code from the book to get it to work:
adding a dedicated <code>filter</code> step did the trick:</p>

<p><code>
bacon.outE.filter{ rand.nextDouble() &lt;= 0.01 }.inV.inE.outV.loop(5){ it.loops &lt; 3 }.count()
</code></p>

<p>The <code>loop</code> argument does not change, as the filter expression already
counted as a step in the book version.</p>

<h3>Centrality</h3>

<p>I had a small problem with the book code: the query is not run if the
command is followed by <code>; ''</code> (which the book uses to prevent the
display of the results). Just running this:</p>

<p><code>
role_count = [:]; count = 0
g.V.in.groupCount(role_count).loop(2){ count++ &lt; 1000 }
role_count.sort{a,b -&gt; a.value &lt;=&gt; b.value}
</code></p>

<p>works. Why on earth would such a small change have such an impact is
beyond me. Now I'm scared of Groovy.</p>

<h3>JUNG Algorithms</h3>

<p>This time the book code was working as intended, but I found that
there is an even more central actor than Donald Sutherland: Bobby
Vitale...</p>

<h2>Exercises</h2>

<h3>Neo4j ReST API</h3>

<p>The documentation is <a href="http://docs.neo4j.org/chunked/stable/rest-api.html">here</a>.</p>

<h3>Binding or ReST API</h3>

<p>See above my useo Neo4j.rb.</p>

<h3>API for the JUNG project</h3>

<p>The API is <a href="http://jung.sourceforge.net/doc/api/index.html">here</a>.</p>

<h3>Path-finding as a step</h3>

<p>I am using the Gremlin shell, rather than the Neo4j console.</p>

<p><code>
Gremlin.defineStep('path_to', [Vertex, Pipe], {Vertex to, Integer max -&gt; _().costars.loop(1){ it.loops &lt; max }{true}.filter{it.equals(to)}})     
</code></p>

<p>I used the possibility to pass arguments to the closure to introduce
both the target node and the loop limit as parameters. Otherwise the
code is identical to the one I was using above. With this, the
path from Elvis to Kevin Bacon becomes</p>

<p><code>
gremlin&gt; elvis.path_to3(bacon, 4).paths.next().name.grep{it}
==&gt;Elvis Presley    
==&gt;Frankie and Johnny
==&gt;Nathan Lane
==&gt;He Said, She Said
==&gt;Kevin Bacon
</code></p>

<h3>A family graph</h3>

<p>I used Ruby (with the Neo4j.rb library). The code first defines a
<code>family</code> data structure that maps each family member to other members
keyed by their relationships.</p>

<p>The code first iterate over the family members and inserts them; it
then goes over the <code>family</code> structure a second time to insert the
relationships.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (family.rb)</span> <a href='/downloads/code/7d7w/neo4j/family.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{rubygems neo4j}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="nb">require</span> <span class="n">r</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">NodeMixin</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">index</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_or_create_node</span><span class="p">(</span><span class="n">inserter</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">inserter</span><span class="o">.</span><span class="n">create_node</span><span class="p">({</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">},</span> <span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>    <span class="n">inserter</span><span class="o">.</span><span class="n">index_flush</span><span class="p">(</span><span class="n">clazz</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">family</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;Alice&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibbling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Walter&#39;</span><span class="o">]</span><span class="p">,</span><span class="ss">:child_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="p">,</span> <span class="s1">&#39;Peggy&#39;</span><span class="o">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Bob&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibbling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Eve&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:child_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="p">,</span> <span class="s1">&#39;Peggy&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Carol&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibbling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Alice&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:child_od</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="p">,</span> <span class="s1">&#39;Peggy&#39;</span><span class="o">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Trent&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Peggy&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:parent_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Peggy&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Trent&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:parent_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Carol&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Eve&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Bob&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Walter&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:married_to</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Alice&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:sibling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Dave&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;Dave&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:sibling_of</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Walter&#39;</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;begin processing...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Neo4j</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:storage_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;NEO4J_HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/data/graph.db&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">inserter</span> <span class="o">=</span> <span class="no">Neo4j</span><span class="o">::</span><span class="no">Batch</span><span class="o">::</span><span class="no">Inserter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">family</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span>
</span><span class='line'>  <span class="n">inserter</span><span class="o">.</span><span class="n">create_node</span><span class="p">({</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="n">k</span><span class="p">},</span> <span class="no">Person</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">inserter</span><span class="o">.</span><span class="n">index_flush</span><span class="p">(</span><span class="no">Person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">family</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="p">,</span> <span class="n">os</span><span class="o">|</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span>
</span><span class='line'>      <span class="n">inserter</span><span class="o">.</span><span class="n">create_rel</span><span class="p">(</span><span class="n">r</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="no">Person</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">inserter</span><span class="o">.</span><span class="n">index_get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">o</span><span class="p">,</span> <span class="ss">:exact</span><span class="p">,</span> <span class="no">Person</span><span class="p">)</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>                          <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;done!&quot;</span>
</span><span class='line'><span class="n">inserter</span><span class="o">.</span><span class="n">shutdown</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Run a JUNG algorithm</h3>

<p>I tried to run a simple Dijkstra shortest path algorithm in Gremlin, but
eventually had to give up as the shell kept giving me weird exceptions
when I tried to load the required class. Furthermore, the graph being
directed from the actor nodes to the movie nodes, there is not path
between anything but an actor and one of its movies (and the JUNG
class to transform a directed graph to an undirected one seems to
convert the whole graph eagerly).</p>

<p>Eventually I gave up, dumped the movie database, and used the family
graph instead.</p>

<p>The code is in Java, the language I used after Groovy scared me with
these weird exceptions (Java is boring but predictable).</p>

<p>The hardest perhaps was to figure out the dependencies for the
<code>pom.xml</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (pom.xml)</span> <a href='/downloads/code/7d7w/neo4j/graph_algo/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>	<span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>	<span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>	<span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>	<span class="nt">&lt;artifactId&gt;</span>graph-algo<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>	<span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>	<span class="nt">&lt;properties&gt;</span>
</span><span class='line'>		<span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>		<span class="nt">&lt;neo4j.version&gt;</span>1.5<span class="nt">&lt;/neo4j.version&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>	<span class="nt">&lt;build&gt;</span>
</span><span class='line'>		<span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>			<span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>				<span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>				<span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>				<span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>				<span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>					<span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>					<span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>				<span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>			<span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/build&gt;</span>
</span><span class='line'>	<span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>		<span class="nt">&lt;repository&gt;</span>
</span><span class='line'>			<span class="nt">&lt;id&gt;</span>tinkerpop-repository<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>			<span class="nt">&lt;name&gt;</span>TinkerPop Maven2 Repository<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>			<span class="nt">&lt;url&gt;</span>http://tinkerpop.com/maven2<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>	<span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>		<span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>			<span class="nt">&lt;groupId&gt;</span>org.neo4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;artifactId&gt;</span>neo4j<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;version&gt;</span>${neo4j.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>		<span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>			<span class="nt">&lt;groupId&gt;</span>net.sf.jung<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;artifactId&gt;</span>jung-graph-impl<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;version&gt;</span>2.0.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>		<span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>			<span class="nt">&lt;groupId&gt;</span>com.tinkerpop.gremlin<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;artifactId&gt;</span>gremlin-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;version&gt;</span>1.4<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>		<span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>			<span class="nt">&lt;groupId&gt;</span>com.tinkerpop.blueprints<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;artifactId&gt;</span>blueprints-neo4j-graph<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>		<span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>			<span class="nt">&lt;groupId&gt;</span>com.tinkerpop.blueprints<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;artifactId&gt;</span>blueprints-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>		<span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>			<span class="nt">&lt;groupId&gt;</span>com.tinkerpop.blueprints<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;artifactId&gt;</span>blueprints-graph-jung<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code in Java is verbose; especially I could not find a simple way
to look up nodes in the BluePrints graph, nor could I use the
properties of the Neo4j nodes from the BluePrints vertices...</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (GraphAlgorithm.java)</span> <a href='/downloads/code/7d7w/neo4j/graph_algo/GraphAlgorithm.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.GraphDatabaseService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.graphdb.Node</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.neo4j.kernel.EmbeddedGraphDatabase</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.Edge</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.Vertex</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.impls.neo4j.Neo4jGraph</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.tinkerpop.blueprints.pgm.oupls.jung.GraphJung</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">edu.uci.ics.jung.algorithms.shortestpath.DijkstraShortestPath</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">edu.uci.ics.jung.graph.Graph</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GraphAlgorithm</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">String</span> <span class="n">neo4jHome</span> <span class="o">=</span> <span class="s">&quot;/users/x/neo4j-test&quot;</span><span class="o">;</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>			<span class="n">neo4jHome</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">GraphDatabaseService</span> <span class="n">graphDb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EmbeddedGraphDatabase</span><span class="o">(</span><span class="n">neo4jHome</span> <span class="o">+</span> <span class="s">&quot;/data/graph.db/&quot;</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">com</span><span class="o">.</span><span class="na">tinkerpop</span><span class="o">.</span><span class="na">blueprints</span><span class="o">.</span><span class="na">pgm</span><span class="o">.</span><span class="na">Graph</span> <span class="n">g</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Neo4jGraph</span><span class="o">(</span><span class="n">graphDb</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">Graph</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Edge</span><span class="o">&gt;</span> <span class="n">j</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GraphJung</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">DijkstraShortestPath</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Edge</span><span class="o">&gt;</span> <span class="n">dijkstra</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DijkstraShortestPath</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Edge</span><span class="o">&gt;(</span><span class="n">j</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">Node</span> <span class="n">trent</span> <span class="o">=</span> <span class="n">graphDb</span><span class="o">.</span><span class="na">index</span><span class="o">().</span><span class="na">forNodes</span><span class="o">(</span><span class="s">&quot;Person_exact&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Trent&quot;</span><span class="o">).</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>		<span class="n">Node</span> <span class="n">dave</span> <span class="o">=</span> <span class="n">graphDb</span><span class="o">.</span><span class="na">index</span><span class="o">().</span><span class="na">forNodes</span><span class="o">(</span><span class="s">&quot;Person_exact&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Dave&quot;</span><span class="o">).</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Distance between Trent and Dave:&quot;</span> <span class="o">+</span> <span class="n">dijkstra</span><span class="o">.</span><span class="na">getDistance</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">getVertex</span><span class="o">(</span><span class="n">trent</span><span class="o">.</span><span class="na">getId</span><span class="o">()),</span> <span class="n">g</span><span class="o">.</span><span class="na">getVertex</span><span class="o">(</span><span class="n">dave</span><span class="o">.</span><span class="na">getId</span><span class="o">())));</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Distance between Trent and everybody:&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">,</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="nl">kv:</span> <span class="n">dijkstra</span><span class="o">.</span><span class="na">getDistanceMap</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">getVertex</span><span class="o">(</span><span class="n">trent</span><span class="o">.</span><span class="na">getId</span><span class="o">())).</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">graphDb</span><span class="o">.</span><span class="na">getNodeById</span><span class="o">((</span><span class="n">Long</span><span class="o">)</span> <span class="n">kv</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">getId</span><span class="o">()).</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; =&gt; &quot;</span> <span class="o">+</span> <span class="n">kv</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		<span class="n">g</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>		<span class="n">graphDb</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>	<span class="o">}</span>	
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Running it produces</p>

<p><code>
Distance between Trent and Dave:3.0
Distance between Trent and everybody:
Trent =&gt; 0.0
Carol =&gt; 1.0
Peggy =&gt; 1.0
Alice =&gt; 1.0
Bob =&gt; 1.0
Walter =&gt; 2.0
Eve =&gt; 2.0
Dave =&gt; 3.0
</code></p>

<h2>Wrapping Up Day 2</h2>

<p>I must say that today was a rather frustrating experience. Neo4j
ecosystem is still evolving, but this means that most of the
documentation I came upon was already obsolete. The navigation on the
data was at time very hard to figure out, and the error messages
(really, the underlying Java exception) not helpful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Neo4j Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/28/seven-databases-in-seven-weeks-neo4j-day-1/"/>
    <updated>2011-12-28T17:05:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/28/seven-databases-in-seven-weeks-neo4j-day-1</id>
    <content type="html"><![CDATA[<p>As the book is still in beta and incomplete, I skip CouchDB (the
chapter is not there yet in beta 2.0), and will spend this week with
<a href="http://neo4j.org/">Neo4j</a>.</p>

<p>Neo4j is a graph database, meaning it focuses on navigation between
vertices (called nodes in Neo4j), through edges (called
relationships). While other databases made it possible to join various
pieces of data, Neo4j treats this as the main semantic mechanism</p>

<!--more-->


<p>Neo4j can be distributed for high-availability, and is partition
tolerant, but sharding is not supported (at the time of writing).</p>

<p>The first day focuses on basic creation and navigation of data. <a href="http://docs.neo4j.org/chunked/stable/graphdb-neo4j-nodes.html">Nodes</a>
and
<a href="http://docs.neo4j.org/chunked/stable/graphdb-neo4j-relationships.html">relationships</a>
are the basic entities; by default nodes have just an id, while
relationships are identified by the out and in nodes, and a type.</p>

<p>To spice this up a bit, it is possible to attach
<a href="http://docs.neo4j.org/chunked/stable/graphdb-neo4j-properties.html">properties</a>
to both nodes and relationships. Values can be scalar or arrays of
basic types (boolean, number, or string).</p>

<p>To navigate the data, the easiest seems to be the use of
<a href="https://github.com/tinkerpop/gremlin/wiki">Gremlin</a>, a language and
database independent graph traversal language (the language has to be
a JVM one).</p>

<h2>Exercises</h2>

<h3>Neo4j Wiki</h3>

<p>The Wiki is <a href="http://wiki.neo4j.org/content/Main_Page">here</a>.</p>

<h3>Gremlin Documentation</h3>

<p>There is a <a href="https://github.com/tinkerpop/gremlin/wiki">wiki</a>.</p>

<h3>List of Gremlin Steps</h3>

<p>They are listed on the
<a href="https://github.com/tinkerpop/gremlin/wiki/Gremlin-Steps">wiki</a>.</p>

<h3>Neo4j Shells</h3>

<p>It is hard not to find them, as they're already in the Web Admin
Console. Both
<a href="http://docs.neo4j.org/chunked/snapshot/cypher-query-lang.html">Cipher</a>
and the
<a href="http://docs.neo4j.org/chunked/snapshot/rest-api.html">ReST API</a> can
be used directly from the console, although the ReST API is limited
there (for instance the <code>traverse</code> operation is not supported). Full
access requires an external client such as <code>curl</code>.</p>

<h3>Find all node names with another shell</h3>

<p>In Cipher, there is no direct way to use all nodes as a starting
point, so instead I try to find all nodes linked to the first one
through a path that can be empty (i.e. the starting node is also
included). To remove duplicates, I use the
<a href="http://docs.neo4j.org/chunked/snapshot/query-aggregation.html#aggregation-distinct"><code>DISTINCT</code></a>
function, but it must be applied in the context of an aggregation, so
I have to apply
<a href="http://docs.neo4j.org/chunked/snapshot/query-aggregation.html#aggregation-collect"><code>COLLECT</code></a>
as well:</p>

<p><code>
START n=node(0)
MATCH n-[*0..]-x
RETURN COLLECT(DISTINCT x.name)
</code></p>

<p>which produces</p>

<p><code>
==&gt; +----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
==&gt; | collect(distinct x.name)                                                                                                                                             |
==&gt; +----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
==&gt; | List(Prancing Wolf Ice Wine 2007, riesling, Prancing Wolf Spatleses 2007, Prancing Wolf Winery, Prancing Wolf Kabinett 2002, Tom, Wine Expert Monthly, Patty, Alice) |
==&gt;
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</code></p>

<p>Not exactly as easy as the Gremlin equivalent <code>g.V.name</code>.</p>

<p>There is no way to achieve anything similar using the
ReST API, as
its traversal operation only returns full objects (either nodes,
relationships or paths), and not properties.</p>

<h3>Delete all the nodes and edges in your database</h3>

<p>Well, the book already showed the powerful <code>g.clear</code> Gremlin
command. It should be followed by <code>g.addVertex()</code> to get back to the
original state (with just one node).</p>

<p>And that's all for today.</p>
]]></content>
  </entry>
  
</feed>
