<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2011-10-31T17:54:48+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Scala Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/10/30/seven-languages-in-seven-weeks-scala-day-3/"/>
    <updated>2011-10-30T22:18:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/10/30/seven-languages-in-seven-weeks-scala-day-3</id>
    <content type="html"><![CDATA[<p>On the last day with Scala, the book introduces the XML support and concurrency.</p>

<!--more-->


<h2>Scala and XML</h2>

<p>XML is a rather unfortunate part of modern computing, one that is tedious with most languages.</p>

<p>Scala chose to solve this by making XML part of the language. This means that the following fragment (from Burak's draft <a href="http://burak.emir.googlepages.com/scalaxbook.docbk.html">scala xml book</a>, linked to from <a href="http://www.scala-lang.org/node/131">A Tour of Scala: XML Processing</a>):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Scala and XML  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">labPhoneBook</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">phonebook</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">descr</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="nc">This</span> <span class="n">is</span> <span class="n">the</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">phonebook</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">b</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">of</span> <span class="n">the</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://acme.org&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="nc">ACME</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">corporation</span><span class="o">.</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">descr</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">entry</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">name</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="nc">Burak</span> <span class="nc">Emir</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">name</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">phone</span> <span class="n">where</span><span class="o">=</span><span class="s">&quot;work&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;+</span><span class="mi">41</span> <span class="mi">21</span> <span class="mi">693</span> <span class="mi">68</span> <span class="mi">67</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">phone</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">entry</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">phonebook</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="n">labPhoneBook</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>stores an XML fragment, not a string, in <code>labPhoneBook</code>.</p>

<p>Braces can be used to insert Scala code directly into the XML:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Scala: dynamic XML  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;Fred&quot;</span>
</span><span class='line'><span class="n">name</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="nc">Fred</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">fragment</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">blog</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">post</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'> <span class="o">|</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">author</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;{</span><span class="n">name</span><span class="o">}&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">author</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'> <span class="o">|</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">post</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'> <span class="o">|</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">blog</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fragment</span><span class="k">:</span> <span class="kt">scala.xml.Elem</span> <span class="o">=</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">blog</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">post</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">author</span><span class="o">&gt;</span><span class="nc">Fred</span><span class="o">&lt;/</span><span class="n">author</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">post</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blog</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The interactive Scala shell recognizes XML fragments, so it knew the expression was not complete until <code>&lt;/blog&gt;</code>. Very, very nice.</p>

<p>Braces can also be used to extract information from the XML, as seen in the book. This, combined with the <code>\</code> XPath projection operator (which, of course, returns a data structure that can be iterated over with the usual methods), provides a very pleasant way to parse XML.</p>

<p>There is far more to Scala's XML support (see the link above). I don't usually do much XML processing (most of my handling of XML is performed through dedicated libraries that abstract XML away entirely), but if I had to, I'd certainly would give a Scala a try.</p>

<h2>Scala Concurrency</h2>

<h2>Exercises</h2>

<h3>Displaying links</h3>

<p>To collect the links, I thought about using HTML or XML parsing, but could not find a parser robust enough to handle the pages. In the end, I just used a regular expression.</p>

<p>The code is fairly short:</p>

<ul>
<li>first import the relevant package and class</li>
<li>define the regular expression</li>
<li>slightly reorganize <code>PageLoader</code> to list all the links found through the regular expression; the links are added to a <code>Set</code> to ensure unicity, then iterated over</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Displaying links  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">linkPattern</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;&quot;&quot;&lt;a +href=\&quot;([^\&quot;]+)\&quot;[^&gt;]*&gt;&quot;&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;link&quot;</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">PageLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span> <span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">text</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromURL</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">mkString</span>
</span><span class='line'><span class="o">((</span><span class="nc">Set</span><span class="o">()</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">/:</span> <span class="n">linkPattern</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="n">matchData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">md</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">s</span> <span class="o">+</span> <span class="n">md</span><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">)</span> <span class="o">}</span> <span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">link</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">println</span><span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="s">&quot; =&amp;gt; &quot;</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">text</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code to add the links to a Set is not the simplest I could think of, but it is the simplest that worked. The problem I have is that the collections methods other return iterators, but I cannot simply build a new collection from an interator. I guess there must be a simpler way, but right now it is eluding me.</p>

<p>Full code:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sizer.scala, full code  (sizer.scala)</span> <a href='/downloads/code/7l7w/scala/sizer.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.io._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.actors._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">linkPattern</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;&quot;&quot;&lt;a +href=\&quot;([^\&quot;]+)\&quot;[^&gt;]*&gt;&quot;&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">PageLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span> <span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">text</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromURL</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">mkString</span>
</span><span class='line'>    <span class="o">((</span><span class="nc">Set</span><span class="o">()</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">/:</span> <span class="n">linkPattern</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="n">matchData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">md</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">s</span> <span class="o">+</span> <span class="n">md</span><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">)</span> <span class="o">}</span> <span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">link</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="s">&quot; =&gt; &quot;</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="n">text</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">urls</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;http://www.amazon.com/&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.twitter.com/&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.google.com/&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.cnn.com/&quot;</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">timeMethod</span><span class="o">(</span><span class="n">method</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>  <span class="n">method</span><span class="o">()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">end</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Method took &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">)/</span><span class="mf">1000000000.0</span> <span class="o">+</span> <span class="s">&quot; seconds.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">getPageSizeSequentially</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">url</span> <span class="k">&lt;-</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Size for &quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">getPageSizeConcurrently</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">caller</span> <span class="k">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">url</span> <span class="k">&lt;-</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">actor</span> <span class="o">{</span> <span class="n">caller</span> <span class="o">!</span> <span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">urls</span><span class="o">.</span><span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">receive</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">size</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="s">&quot;Size for &quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">size</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Sequential run:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">timeMethod</span> <span class="o">{</span> <span class="n">getPageSizeSequentially</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Concurrent run&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">timeMethod</span> <span class="o">{</span> <span class="n">getPageSizeConcurrently</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Following links</h3>

<p>This exercise build on the previous one. Now that we have the links, we should try to follow them and add their size.</p>

<p>First, the links should be somewhat normalized. A basic idea would be to make sure each contains a host; those that do not would be prefixed with the main url (the logic is not fool proof: checking the errors, I found a few javascript fragments that were interpreted as a link.)</p>

<p>Then there is a second, more serious issue: some links take forever to load. So I rewrote the fetching logic to add a timeout. Because <code>try</code> blocks are actually expression in Scala, I just return an empty string as the content of pages that cannot be read.</p>

<p>Finally, at this stage I found it hard to propagate the concurrency method (sequential or parallel) down to the <code>PageLoader.getPageSize</code> method, I just implemented the two methods in separate versions:</p>

<h5>Sequential version</h5>

<p>This version takes over 10 minutes to run on my machine.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sizer_links.scala  (sizer_links_seq.scala)</span> <a href='/downloads/code/7l7w/scala/sizer_links_seq.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.io._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.actors._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">linkPattern</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;&quot;&quot;&lt;a +href=\&quot;([^\&quot;]+)\&quot;[^&gt;]*&gt;&quot;&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">PageLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span> <span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">withLinks</span> <span class="k">:</span> <span class="kt">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//println(&quot;Reading &quot; + url)</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">java.net._</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">urlCon</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">URL</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">openConnection</span>
</span><span class='line'>    <span class="n">urlCon</span><span class="o">.</span><span class="n">setConnectTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</span><span class='line'>    <span class="n">urlCon</span><span class="o">.</span><span class="n">setReadTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">text</span> <span class="k">=</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="nc">Source</span><span class="o">.</span><span class="n">fromInputStream</span><span class="o">(</span><span class="n">urlCon</span><span class="o">.</span><span class="n">getInputStream</span><span class="o">).</span><span class="n">mkString</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Exception</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span><span class='line'>          <span class="nc">Console</span><span class="o">.</span><span class="n">err</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="s">&quot;Could not read [&quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">size</span> <span class="k">=</span> <span class="n">text</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">withLinks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">links</span> <span class="k">=</span> <span class="o">((</span><span class="nc">Set</span><span class="o">()</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">/:</span> <span class="n">linkPattern</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="n">matchData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">md</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">link</span> <span class="k">=</span> <span class="n">md</span><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">+</span> <span class="o">(</span><span class="k">if</span> <span class="o">(</span><span class="n">link</span><span class="o">.</span><span class="n">indexOf</span><span class="o">(</span><span class="s">&quot;http&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">link</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                <span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="sc">&#39;/&#39;</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>              <span class="n">link</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">(</span><span class="n">size</span> <span class="o">/:</span> <span class="n">links</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">link</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">s</span> <span class="o">+</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">link</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>      <span class="n">size</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">urls</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;http://www.amazon.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.twitter.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.google.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.cnn.com&quot;</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">timeMethod</span><span class="o">(</span><span class="n">method</span> <span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>  <span class="n">method</span><span class="o">()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">end</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Method took &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">/</span> <span class="mf">1000000000.0</span> <span class="o">+</span> <span class="s">&quot; seconds.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">getPageSizeSequentially</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">url</span> <span class="k">&lt;-</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Size for &quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Sequential run:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">timeMethod</span> <span class="o">{</span> <span class="n">getPageSizeSequentially</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Output:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (seq_output.txt)</span> <a href='/downloads/code/7l7w/scala/seq_output.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Sequential run:
</span><span class='line'>Size for http://www.amazon.com: 12869997
</span><span class='line'>Size for http://www.twitter.com: 291445
</span><span class='line'>Size for http://www.google.com: 280876
</span><span class='line'>Size for http://www.cnn.com: 11343152
</span><span class='line'>Method took 667.821383 seconds.
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Parallel version</h4>

<p>This version takes about 100 seconds (less than a sixth of the sequential version). Obviously, the code is more complex, but clearly much faster as well.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sizer_links.scala  (sizer_links_par.scala)</span> <a href='/downloads/code/7l7w/scala/sizer_links_par.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.io._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.actors._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">linkPattern</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;&quot;&quot;&lt;a +href=\&quot;([^\&quot;]+)\&quot;[^&gt;]*&gt;&quot;&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">PageLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span> <span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">withLinks</span> <span class="k">:</span> <span class="kt">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//println(&quot;Reading &quot; + url)</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">java.net._</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">urlCon</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">URL</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">openConnection</span>
</span><span class='line'>    <span class="n">urlCon</span><span class="o">.</span><span class="n">setConnectTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</span><span class='line'>    <span class="n">urlCon</span><span class="o">.</span><span class="n">setReadTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">text</span> <span class="k">=</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="nc">Source</span><span class="o">.</span><span class="n">fromInputStream</span><span class="o">(</span><span class="n">urlCon</span><span class="o">.</span><span class="n">getInputStream</span><span class="o">).</span><span class="n">mkString</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Exception</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span><span class='line'>          <span class="nc">Console</span><span class="o">.</span><span class="n">err</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="s">&quot;Could not read [&quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">size</span> <span class="k">=</span> <span class="n">text</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">withLinks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">links</span> <span class="k">=</span> <span class="o">((</span><span class="nc">Set</span><span class="o">()</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">/:</span> <span class="n">linkPattern</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="n">matchData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">md</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">link</span> <span class="k">=</span> <span class="n">md</span><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;link&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">+</span> <span class="o">(</span><span class="k">if</span> <span class="o">(</span><span class="n">link</span><span class="o">.</span><span class="n">indexOf</span><span class="o">(</span><span class="s">&quot;http&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">link</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                <span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="sc">&#39;/&#39;</span> <span class="o">+</span> <span class="n">link</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>              <span class="n">link</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">val</span> <span class="n">caller</span> <span class="k">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">link</span> <span class="k">&lt;-</span> <span class="n">links</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">actor</span> <span class="o">{</span> <span class="n">caller</span> <span class="o">!</span> <span class="o">(</span><span class="n">link</span><span class="o">,</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">link</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span> <span class="o">)</span> <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">(</span><span class="n">size</span> <span class="o">/:</span> <span class="n">links</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">link</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">receive</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">s</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">+</span> <span class="n">s</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>      <span class="n">size</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">urls</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;http://www.amazon.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.twitter.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.google.com&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;http://www.cnn.com&quot;</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">timeMethod</span><span class="o">(</span><span class="n">method</span> <span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">start</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>  <span class="n">method</span><span class="o">()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">end</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">nanoTime</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Method took &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">/</span> <span class="mf">1000000000.0</span> <span class="o">+</span> <span class="s">&quot; seconds.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">getPageSizeConcurrently</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">caller</span> <span class="k">=</span> <span class="n">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">url</span> <span class="k">&lt;-</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">actor</span> <span class="o">{</span> <span class="n">caller</span> <span class="o">!</span> <span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="nc">PageLoader</span><span class="o">.</span><span class="n">getPageSize</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">urls</span><span class="o">.</span><span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">receive</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">size</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="s">&quot;Size for &quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">size</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Concurrent run:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">timeMethod</span> <span class="o">{</span> <span class="n">getPageSizeConcurrently</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Output:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (par_output.txt)</span> <a href='/downloads/code/7l7w/scala/par_output.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Concurrent run:
</span><span class='line'>Size for http://www.google.com: 280972
</span><span class='line'>Size for http://www.twitter.com: 291430
</span><span class='line'>Size for http://www.amazon.com: 12387773
</span><span class='line'>Size for http://www.cnn.com: 11463136
</span><span class='line'>Method took 103.645557 seconds.
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Wrapping up Day 3 and Scala</h2>

<p>I really feel I would enjoy working full time with Scala. I disagree with the author statement that Scala has an academic syntax. It does not take that much time to get used to, and it feels quite lighter than Java's (of course, coming from Ruby would provide an entirely different perspective).</p>

<p>As I was doing the exercises, I found a few dark corners, most notably about collections and iterators.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Welcome</span> <span class="n">to</span> <span class="nc">Scala</span> <span class="n">version</span> <span class="mf">2.9</span><span class="o">.</span><span class="mf">1.f</span><span class="n">inal</span> <span class="o">(</span><span class="nc">Java</span> <span class="nc">HotSpot</span><span class="o">(</span><span class="nc">TM</span><span class="o">)</span> <span class="mi">64</span><span class="o">-</span><span class="nc">Bit</span> <span class="nc">Server</span> <span class="nc">VM</span><span class="o">,</span> <span class="nc">Java</span> <span class="mf">1.6</span><span class="o">.</span><span class="mi">0</span><span class="n">_26</span><span class="o">).</span>
</span><span class='line'><span class="nc">Type</span> <span class="n">in</span> <span class="n">expressions</span> <span class="n">to</span> <span class="n">have</span> <span class="n">them</span> <span class="n">evaluated</span><span class="o">.</span>
</span><span class='line'><span class="nc">Type</span> <span class="k">:</span><span class="kt">help</span> <span class="kt">for</span> <span class="kt">more</span> <span class="kt">information.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scala.util.matching.Regex</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching.Regex</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">re</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Regex</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">re</span><span class="k">:</span> <span class="kt">scala.util.matching.Regex</span> <span class="o">=</span> <span class="n">a</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">str</span> <span class="k">=</span> <span class="s">&quot;abracadabra&quot;</span>
</span><span class='line'><span class="n">str</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="n">abracadabra</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">matches</span> <span class="k">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findAllIn</span><span class="o">(</span><span class="n">str</span><span class="o">).</span><span class="n">matchData</span>
</span><span class='line'><span class="n">matches</span><span class="k">:</span> <span class="kt">java.lang.Object</span> <span class="kt">with</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">scala.util.matching.Regex.Match</span><span class="o">]</span> <span class="k">=</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span> <span class="n">iterator</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;</span> <span class="n">matches</span> <span class="n">foreach</span> <span class="o">{</span><span class="n">md</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">md</span><span class="o">)}</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">a</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">matches</span><span class="o">.</span><span class="n">size</span><span class="o">)</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code just finds regular expression matches in a string, prints each of them, them prints how many it found (at least that's what I expected it would do).</p>

<p>But apparently, the <code>foreach</code> method consumes the data, and <code>size</code> returns 0.</p>

<p>Scala tries to tell me something with its warning about a <code>non-empty iterator</code>. Unfortunately, the same code run non interactively does not display any warning.</p>

<p>Obviously, it is not safe to keep references to some intermediate data structures (like iterators). I hope that as I learn more about the language, I will also learn to recognize such situations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Scala Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/10/29/seven-languages-in-seven-weeks-scala-day-2/"/>
    <updated>2011-10-29T10:33:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/10/29/seven-languages-in-seven-weeks-scala-day-2</id>
    <content type="html"><![CDATA[<p>Second day is dedicated to containers, mostly. Lists, Sets and Maps, some of their most useful methods, and the use of code blocks (anonymous functions)</p>

<!--more-->


<p>The various containers are nothing new or special for Java programmers, but the anonymous functions are an effective way to greatly increase the power of existing iteration methods by having them accept arbitrary logic to process each element. This is nothing new or special for functional programmers, of course.</p>

<p>While this is possible in Java (where anonymous classes often play this role), the result is less fluid than in functional languages, so it comes less naturally.</p>

<h2>Exercises</h2>

<h3>Using foldLeft to compute sum of string sizes.</h3>

<p>Not as challenging an exercise as <a href="/blog/2011/10/28/seven-languages-in-seven-weeks-scala-day-1/">yesterday's</a>. Still, it shows how light and easy to use Scala's anonymous functions are.</p>

<p>A first version with the <code>foldLeft</code> method:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>foldLeft  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="s">&quot;three&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">java.lang.String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">one</span><span class="o">,</span> <span class="n">two</span><span class="o">,</span> <span class="n">three</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">sum</span> <span class="k">=</span> <span class="n">list</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">{(</span><span class="n">sum</span><span class="o">,</span> <span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="n">size</span> <span class="o">}</span>
</span><span class='line'><span class="n">sum</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">11</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A second version with the <code>/:</code> operator. The anonymous function is of course strictly identical.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>foldLeft operator  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="s">&quot;three&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">java.lang.String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">one</span><span class="o">,</span> <span class="n">two</span><span class="o">,</span> <span class="n">three</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">sum</span> <span class="k">=</span> <span class="o">(</span><span class="mi">0</span> <span class="o">/:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{(</span><span class="n">sum</span><span class="o">,</span> <span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="n">size</span> <span class="o">}</span>
</span><span class='line'><span class="n">sum</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">11</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Censor trait</h3>

<p>Looking for a Scala documentation of <code>String</code> is somewhat frustrating, because there's none. But that in turns means that Scala just uses Java's <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/lang/String.html">String</a>.</p>

<p>Java String comes with a method that seems to do just what is needed here: <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/lang/String.html#replaceAll%28java.lang.String,%20java.lang.String%29"><code>replaceAll</code></a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>replaceAll  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;one two three&quot;</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="s">&quot;TWO&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="n">one</span> <span class="nc">TWO</span> <span class="n">three</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>replaceAll, word boundaries  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;she sells shells&quot;</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="s">&quot;\bshe\b&quot;</span><span class="o">,</span> <span class="s">&quot;the lady&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="n">the</span> <span class="n">lady</span> <span class="n">sells</span> <span class="n">shells</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>replaceAll, case insensitive  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;She sells shells&quot;</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="s">&quot;(?i)\bshe\b&quot;</span><span class="o">,</span> <span class="s">&quot;the lady&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">res3</span><span class="k">:</span> <span class="kt">java.lang.String</span> <span class="o">=</span> <span class="n">the</span> <span class="n">lady</span> <span class="n">sells</span> <span class="n">shells</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As seen in the last two examples, the first argument is actually a regular expression. For a while, I toyed with the idea of using Scala's <a href="http://www.scala-lang.org/api/current/scala/util/matching/Regex.html"><code>Regex.replaceAllIn</code></a>, so I could check whether the match was capitalized or all upper case and insert the replacement word with identical case, as Emacs does. But this is a whole lot more work, and generic code can only handle a few cases (all lower case, all upper case and capitalized) satisfactorily.</p>

<p>The first version iterates over the pairs in the censored words map, and for each one replaces each basic forms of the censored word by the same form of its replacement (the forms being capitalized, lower case and upper case).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Censor, version 1  (censor.scala)</span> <a href='/downloads/code/7l7w/scala/censor.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">words</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;Shoot&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Pucky&quot;</span><span class="o">,</span> <span class="s">&quot;Darn&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Beans&quot;</span><span class="o">)</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">var</span> <span class="n">result</span> <span class="k">=</span> <span class="n">text</span>
</span><span class='line'>		<span class="n">words</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span> <span class="n">p</span> <span class="k">=&gt;</span>
</span><span class='line'>			<span class="n">result</span> <span class="k">=</span> <span class="n">result</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">imm</span><span class="o">(</span><span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">))</span>
</span><span class='line'>		<span class="o">)</span>
</span><span class='line'>		<span class="n">result</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* capitalize */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">c</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toUpper</span> <span class="o">+</span> <span class="n">str</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">toLowerCase</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* lowercase */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">l</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toLowerCase</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* uppercase */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">u</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toUpperCase</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* make matcher method */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">mm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'>	<span class="cm">/* make case insensitive matcher method */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">imm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;(?i)\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I like the way Scala allows me to write extremely short code for utility methods (like <code>c</code>, <code>l</code>, ...).</p>

<p>One problem with this version is that there's a mutable variable. Using <code>foldLeft</code>, the mutable variable is no longer needed:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Censor, version 2  (censor_fold.scala)</span> <a href='/downloads/code/7l7w/scala/censor_fold.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">words</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;Shoot&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Pucky&quot;</span><span class="o">,</span> <span class="s">&quot;Darn&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Beans&quot;</span><span class="o">)</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>		<span class="o">(</span><span class="n">text</span> <span class="o">/:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">imm</span><span class="o">(</span><span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* capitalize */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">c</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toUpper</span> <span class="o">+</span> <span class="n">str</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">toLowerCase</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* lowercase */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">l</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toLowerCase</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* uppercase */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">u</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toUpperCase</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* make matcher method */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">mm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'>	<span class="cm">/* make case insensitive matcher method */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">imm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;(?i)\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With the code above, the world is now safe from the threat of rude language:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Censor test code  (censor_test.scala)</span> <a href='/downloads/code/7l7w/scala/censor_test.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Test</span><span class="o">(</span><span class="k">val</span> <span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">getText</span><span class="o">()</span> <span class="k">=</span> <span class="n">text</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">getCensoredText</span><span class="o">()</span> <span class="k">=</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">test</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Test</span><span class="o">(</span><span class="s">&quot;Phil Wenneck: God damn it!\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;Alan Garner: Gosh darn it!\n&quot;</span><span class="o">+</span>
</span><span class='line'><span class="s">&quot;Phil Wenneck: Shit!\n&quot;</span><span class="o">+</span>
</span><span class='line'><span class="s">&quot;Alan Garner: Shoot!&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Original text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getText</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Censored text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getCensoredText</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>produces:</p>

<p><code>
Original text:
Phil Wenneck: God damn it!
Alan Garner: Gosh darn it!
Phil Wenneck: Shit!
Alan Garner: Shoot!
Censored text:
Phil Wenneck: God damn it!
Alan Garner: Gosh beans it!
Phil Wenneck: Shit!
Alan Garner: Pucky!
</code></p>

<h4>Loading from file</h4>

<p>To load censored words from a file, I first need to define a format. To keep things simple, each pair is on one line, separated by one or more spaces.</p>

<p>The <a href="http://www.scala-lang.org/api/current/index.html#scala.io.Source"><code>Source</code></a> object contains a useful <code>fromFile</code> method (unfortunately, not documented directly. You have to dig it from the source file). Then it is possible to <code>foldLeft</code> the lines to populate the replacement map.</p>

<p>The rest of the code is identical.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Censor, loading from a file  (censor_load.scala)</span> <a href='/downloads/code/7l7w/scala/censor_load.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>	<span class="k">var</span> <span class="n">words</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">()</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">]</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">def</span> <span class="n">load</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">import</span> <span class="nn">scala.io.Source</span>
</span><span class='line'>		<span class="n">words</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">file</span><span class="o">).</span><span class="n">getLines</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">words</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="n">line</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>			<span class="k">if</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="n">trim</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>				<span class="k">val</span> <span class="n">pair</span> <span class="k">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\\s+&quot;</span><span class="o">)</span>
</span><span class='line'>				<span class="n">map</span> <span class="o">+</span> <span class="o">((</span><span class="n">pair</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">pair</span><span class="o">(</span><span class="mi">1</span><span class="o">)))</span>
</span><span class='line'>			<span class="o">}</span> <span class="k">else</span> <span class="n">map</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">def</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>		<span class="o">(</span><span class="n">text</span> <span class="o">/:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">c</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">mm</span><span class="o">(</span><span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">l</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)).</span><span class="n">replaceAll</span><span class="o">(</span><span class="n">imm</span><span class="o">(</span><span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">)),</span> <span class="n">u</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* capitalize */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">c</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toUpper</span> <span class="o">+</span> <span class="n">str</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">toLowerCase</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* lowercase */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">l</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toLowerCase</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* uppercase */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">u</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">str</span><span class="o">.</span><span class="n">toUpperCase</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/* make matcher method */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">mm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'>	<span class="cm">/* make case insensitive matcher method */</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">imm</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;(?i)\\b&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">&quot;\\b&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* testing */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Test</span><span class="o">(</span><span class="k">val</span> <span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Censor</span> <span class="o">{</span>
</span><span class='line'>	<span class="n">load</span><span class="o">(</span><span class="s">&quot;censor.txt&quot;</span><span class="o">)</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">getText</span><span class="o">()</span> <span class="k">=</span> <span class="n">text</span>
</span><span class='line'>	<span class="k">def</span> <span class="n">getCensoredText</span><span class="o">()</span> <span class="k">=</span> <span class="n">censor</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">test</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Test</span><span class="o">(</span><span class="s">&quot;Phil Wenneck: God damn it!\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;Alan Garner: Gosh darn it!\n&quot;</span><span class="o">+</span>
</span><span class='line'><span class="s">&quot;Phil Wenneck: Shit!\n&quot;</span><span class="o">+</span>
</span><span class='line'><span class="s">&quot;Alan Garner: Shoot!&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;\nOriginal text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getText</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;\nCensored text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getCensoredText</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;\nImproved censored text:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">test</span><span class="o">.</span><span class="n">load</span><span class="o">(</span><span class="s">&quot;censor2.txt&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="n">getCensoredText</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>outputs:</p>

<p>```
$ scala censor_load.scala</p>

<p>Original text:
Phil Wenneck: God damn it!
Alan Garner: Gosh darn it!
Phil Wenneck: Shit!
Alan Garner: Shoot!</p>

<p>Censored text:
Phil Wenneck: God damn it!
Alan Garner: Gosh bean it!
Phil Wenneck: Shit!
Alan Garner: Pucky!</p>

<p>Improved censored text:
Phil Wenneck: God d--n it!
Alan Garner: Gosh bean it!
Phil Wenneck: S--t!
Alan Garner: Pucky!
```</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>censor.txt  (censor.txt)</span> <a href='/downloads/code/7l7w/scala/censor.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>shoot   pucky
</span><span class='line'>darn    bean
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>censor2.txt  (censor2.txt)</span> <a href='/downloads/code/7l7w/scala/censor2.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>shit    s--t
</span><span class='line'>damn    d--n
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Wrapping up Day 2</h2>

<p>Scala's syntax is clearly much shorter than Java's, and fairly expressive as well. The code flows, is more concise, and feels natural (assuming that you think functional code feels natural, as I do).</p>

<p>Moreover, looking at the <a href="www.scala-lang.org/api/current/index.html">online documentation</a>, I can see that there's more depth to Scala's type system than can be covered in such a book. This is another area I look forward to investigating further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Scala Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/10/28/seven-languages-in-seven-weeks-scala-day-1/"/>
    <updated>2011-10-28T16:43:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/10/28/seven-languages-in-seven-weeks-scala-day-1</id>
    <content type="html"><![CDATA[<p>The language for this week is <a href="http://www.scala-lang.org/">Scala</a>, which attempts (among other things) to brings functional programming and a new concurrency model to the JVM.</p>

<!--more-->


<p>This was a language I was really keen to know more about. I am using Java a lot, professionally, so I am always looking for options in this ecosystem. I am pretty sure the next book after this one will be a Scala book.</p>

<h2>Scala Types</h2>

<p>The first thing we learn about Scala is that it is "strongly typed." This is not a very helpful description, as the <a href="http://en.wikipedia.org/wiki/Strong_typing">definition</a> is fairly loose. And the proof offered by the author that the language is strongly typed is strange:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Scala is strongly typed?  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="mi">4</span> <span class="o">*</span> <span class="s">&quot;abc&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="o">&gt;:</span><span class="mi">8</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">overloaded</span> <span class="kt">method</span> <span class="kt">value</span> <span class="kt">*</span> <span class="kt">with</span> <span class="kt">alternatives:</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="nc">Double</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Float</span><span class="o">)</span><span class="nc">Float</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="nc">Long</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="nc">Int</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Char</span><span class="o">)</span><span class="nc">Int</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Short</span><span class="o">)</span><span class="nc">Int</span> <span class="o">&lt;</span><span class="n">and</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Byte</span><span class="o">)</span><span class="nc">Int</span>
</span><span class='line'> <span class="n">cannot</span> <span class="n">be</span> <span class="n">applied</span> <span class="n">to</span> <span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">String</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>          <span class="mi">4</span> <span class="o">*</span> <span class="s">&quot;abc&quot;</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So a string cannot be multiplied by a number? By this standard, <a href="http://en.wikipedia.org/wiki/C_%28programming_language%29">C</a> is strongly typed as well:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>What about C?  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">str</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>
$ gcc -o typed typed.c
typed.c: In function ‘main’:
typed.c:6: error: invalid operands to binary * (have ‘int’ and ‘char *’)
</code></p>

<p>As Scala has a theoretical background, perhaps it is useful to move to the language of <a href="http://en.wikipedia.org/wiki/Type_theory">Type Theory</a>.</p>

<p>A more useful definition than strong typing, is whether a type system is expressive: what do types of expressions tell about how the expressions can be combined, and what to expect when these expressions are evaluated. From this perspective, C types are unexpressive (barely above assembly language), Java's much better, <a href="http://caml.inria.fr/ocaml/">OCaml</a>, and <a href="http://haskell.org/haskellwiki/Haskell">Haskell</a> better still, and <a href="http://coq.inria.fr/">Coq</a> and other dependently-typed languages are perhaps the most expressive of all.</p>

<p><blockquote><p>A type system is a tractable syntactic method for proving the absence of certain program behaviors by classifying phrases according to the kinds of values they compute.</p><footer><strong>Benjamin C. Pierce, Types and Programming Languages,</strong><cite><a href='http://www.cis.upenn.edu/~bcpierce/tapl/'>www.cis.upenn.edu/~bcpierce/&hellip;</a></cite></footer></blockquote></p>

<p>From this perspective, type expressivity is a static (i.e. compile time) feature only. The dynamic equivalent is a type is a tag, i.e. the runtime information about what operations a value supports, so it is impossible to prove any behaviour as impossible before running the program.</p>

<p>Another scale to judge a type system is how verbose it is. In C, as in Java, the type of everything has to be declared. In dynamic languages, no type is needed (or even possible). OCaml and Haskell can figure out the type of most expressions with no need for declarations (which are still useful for documentation). Scala falls somewhere between Java and OCaml. It has <a href="http://en.wikipedia.org/wiki/Type_inference">type inference</a> over portions of a program.</p>

<p>So when it comes to Scala types (or any type system, really), I have two criteria: whether it is expressive enough to be used to enforce specific properties over portions of a program, and whether it is concise enough that using it does not become a major effort.</p>

<h2>Scala syntax</h2>

<p>Scala reminds me of OCaml, vaguely. The syntax is fairly concise (especially compared to Java). Scala has list comprehension (as in Python or Haskell), ranges, singletons (<code>object</code>), and mixins (<code>trait</code>).</p>

<p>The syntax for the definition of functions (that is, methods that return a value) is somewhat strange, as it requires an equal sign:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Function definition  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">my_fun</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Procedures (methods that return nothing) only need one when they are defined as returning <code>Unit</code> (which is <code>void</code> for Scala):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Function definition  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">my_proc</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="n">str</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">my_proc2</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="n">str</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Nothing overly complex, and if I believe the error message ("warning: Detected apparent refinement of Unit; are you missing an '=' sign?"), the reason for this syntax is to support other constructs. Still, I had this error a few times as I wrote my code, before I finally internalized the rule.</p>

<p>The rest of the syntax (as introduced today) is straightforward, and easy to get used to (at least for me).</p>

<h2>Exercises</h2>

<p>For a first day, the exercise was rather demanding.</p>

<h3>Tic-Tac-Toe</h3>

<p>My first version is, admittedly, ugly. I build a list of the possible lines (i.e. rows, columns or  diagonals) in the board (as a list of pairs of indices) in <code>lines</code>, then in the function <code>winner</code> I iterate over this list and check if the positions for each pair have the same content, and if this content belong to a player or not.</p>

<p>For the bonus part, I use <code>print_board</code>, which displays a board with numbers on unused locations, and <code>play</code>, which asks players in turn for their move, checks whether the move is valid, whether it is a winning move, and switches between players when needed.</p>

<p>The <code>play</code> function relies on variables more than I would like, but on the other hand it is harder to model a board with no update at all.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Tic-Tac-Toe  (tictactoe.scala)</span> <a href='/downloads/code/7l7w/scala/tictactoe.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">board</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">.</span><span class="n">ofDim</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">)</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]]</span>
</span><span class='line'><span class="k">val</span> <span class="n">lines</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(((</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">),(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">)),</span> <span class="o">((</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">),(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="mi">2</span><span class="o">,</span><span class="mi">0</span><span class="o">)))</span> <span class="o">++</span> <span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">).</span><span class="n">flatMap</span><span class="o">((</span><span class="n">i</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">List</span><span class="o">(((</span><span class="mi">0</span><span class="o">,</span><span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="n">i</span><span class="o">)),</span> <span class="o">((</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">),(</span><span class="n">i</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="n">i</span><span class="o">,</span><span class="mi">2</span><span class="o">))))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]],</span> <span class="n">i</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span><span class="kt">Int</span><span class="o">))</span><span class="k">:</span> <span class="kt">Char</span> <span class="o">=</span> <span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="n">_1</span><span class="o">)(</span><span class="n">i</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">winner</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">lines</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span><span class="o">(</span><span class="n">i1</span><span class="o">,</span><span class="n">i2</span><span class="o">,</span><span class="n">i3</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span><span class="n">i1</span><span class="o">)</span> <span class="o">==</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i2</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i2</span><span class="o">)</span> <span class="o">==</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i3</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i1</span><span class="o">)</span> <span class="o">==</span> <span class="-Symbol">&#39;X</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">println</span><span class="o">(</span><span class="s">&quot;Player X is the winner&quot;</span><span class="o">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>       <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">i1</span><span class="o">)</span> <span class="o">==</span> <span class="-Symbol">&#39;O</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">println</span><span class="o">(</span><span class="s">&quot;Player Y is the winner&quot;</span><span class="o">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">print_board</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">print</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="n">get</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">))</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">print_board_clear</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">line</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">print</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">line</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">c</span> <span class="k">=&gt;</span> <span class="n">print</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">init_board</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="sc">&#39; &#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">init_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Test on empty board&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">winner</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">1</span><span class="o">)(</span><span class="mi">1</span><span class="o">)=</span><span class="-Symbol">&#39;X</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">0</span><span class="o">)(</span><span class="mi">0</span><span class="o">)=</span><span class="-Symbol">&#39;O</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">0</span><span class="o">)(</span><span class="mi">2</span><span class="o">)=</span><span class="-Symbol">&#39;X</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">0</span><span class="o">)(</span><span class="mi">1</span><span class="o">)=</span><span class="-Symbol">&#39;O</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'><span class="n">board</span><span class="o">(</span><span class="mi">2</span><span class="o">)(</span><span class="mi">0</span><span class="o">)=</span><span class="-Symbol">&#39;X</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">print_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;After game:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">winner</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;And now play:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">init_board</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">play</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">init_board</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">playerX</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">9</span><span class="o">).</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">i</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">print_board</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
</span><span class='line'>    <span class="n">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">valid_pos</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(!</span><span class="n">valid_pos</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">playerX</span><span class="o">)</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="s">&quot;Player X&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="s">&quot;Player O&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot; move:&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">ln</span> <span class="k">=</span> <span class="n">readLine</span><span class="o">().</span><span class="n">toInt</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">i</span> <span class="k">=</span> <span class="o">(</span><span class="n">ln</span> <span class="o">-</span><span class="mi">1</span> <span class="o">)</span> <span class="o">/</span> <span class="mi">3</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">j</span> <span class="k">=</span> <span class="o">(</span><span class="n">ln</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">3</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="s">&quot;Invalid position. Try again&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">playerX</span><span class="o">)</span>
</span><span class='line'>          <span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="-Symbol">&#39;X</span><span class="err">&#39;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="-Symbol">&#39;O</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">valid_pos</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">playerX</span> <span class="k">=</span> <span class="o">!</span><span class="n">playerX</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">winner</span><span class="o">(</span><span class="n">b</span><span class="o">))</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Draw!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">play</span><span class="o">(</span><span class="n">board</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When running it, it will first test the code by playing a predefined game. Then the bonus code is run, and an interactive game can be tried:</p>

<p>```
$ scala tictactoe.scala</p>

<h2>Test on empty board</h2>

<p>|123|
|456|</p>

<h2>|789|</h2>

<hr />

<p>|123|
|4X6|</p>

<h2>|789|</h2>

<hr />

<p>|O23|
|4X6|</p>

<h2>|789|</h2>

<hr />

<p>|O2X|
|4X6|</p>

<h2>|789|</h2>

<hr />

<p>|OOX|
|4X6|</p>

<h2>|789|</h2>

<hr />

<p>|OOX|
|4X6|</p>

<h2>|X89|</h2>

<p>After game:
Player X is the winner</p>

<h2>And now play:</h2>

<p>|123|
|456|</p>

<h2>|789|</h2>

<p>1 Player X move:</p>

<h2>5</h2>

<p>|123|
|4X6|</p>

<h2>|789|</h2>

<p>2 Player O move:</p>

<h2>1</h2>

<p>|O23|
|4X6|</p>

<h2>|789|</h2>

<p>3 Player X move:</p>

<h2>2</h2>

<p>|OX3|
|4X6|</p>

<h2>|789|</h2>

<p>4 Player O move:</p>

<h2>4</h2>

<p>|OX3|
|OX6|</p>

<h2>|789|</h2>

<p>5 Player X move:
8
Player X is the winner
```</p>

<p>The interactive code is not great (see below for an improvement); especially a draw</p>

<h4>Tic-Tac-Toe with class</h4>

<p>A second version, slightly cleaned up (but presumably still ugly), this time in a class. Only one variable remains (the board); everything else is immutable.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Tic-Tac-Toe with class  (tictactoe_class.scala)</span> <a href='/downloads/code/7l7w/scala/tictactoe_class.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">TicTacToe</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">players</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;O&quot;</span><span class="o">,</span> <span class="s">&quot;X&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">lines</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(((</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">),(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">)),</span> <span class="o">((</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">),(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="mi">2</span><span class="o">,</span><span class="mi">0</span><span class="o">)))</span> <span class="o">++</span> <span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">).</span><span class="n">flatMap</span><span class="o">((</span><span class="n">i</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">List</span><span class="o">(((</span><span class="mi">0</span><span class="o">,</span><span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="n">i</span><span class="o">)),</span> <span class="o">((</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">),(</span><span class="n">i</span><span class="o">,</span><span class="mi">1</span><span class="o">),(</span><span class="n">i</span><span class="o">,</span><span class="mi">2</span><span class="o">))))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">board</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">.</span><span class="n">ofDim</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">)</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">]]</span>
</span><span class='line'>  <span class="n">init_board</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">get</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span><span class="kt">Int</span><span class="o">))</span><span class="k">:</span> <span class="kt">Char</span> <span class="o">=</span> <span class="n">board</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="n">_1</span><span class="o">)(</span><span class="n">i</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">init_board</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">board</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="sc">&#39; &#39;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">isWinner</span><span class="o">()</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span><span class="o">(</span><span class="n">i1</span><span class="o">,</span><span class="n">i2</span><span class="o">,</span><span class="n">i3</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">i1</span><span class="o">)</span> <span class="o">==</span> <span class="n">get</span><span class="o">(</span><span class="n">i2</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">get</span><span class="o">(</span><span class="n">i2</span><span class="o">)</span> <span class="o">==</span> <span class="n">get</span><span class="o">(</span><span class="n">i3</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">i1</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">print_board_with_num</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">print</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="n">get</span><span class="o">((</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">))</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">print</span><span class="o">(</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">print</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">play</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">9</span><span class="o">).</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">move</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">play_one_move</span><span class="o">(</span><span class="n">players</span><span class="o">(</span><span class="n">move</span> <span class="o">%</span> <span class="mi">2</span><span class="o">)))</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Draw!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">play_one_move</span><span class="o">(</span><span class="n">player</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">print_board_with_num</span><span class="o">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="n">get_move</span><span class="o">(</span><span class="n">player</span><span class="o">)</span>
</span><span class='line'>    <span class="n">board</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="n">player</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isWinner</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Player &quot;</span> <span class="o">+</span> <span class="n">player</span> <span class="o">+</span> <span class="s">&quot; won!&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">get_move</span><span class="o">(</span><span class="n">player</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">print</span><span class="o">(</span><span class="s">&quot;Player &quot;</span> <span class="o">+</span> <span class="n">player</span><span class="o">)</span>
</span><span class='line'>      <span class="n">print</span><span class="o">(</span><span class="s">&quot; move: &quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">ln</span> <span class="k">=</span> <span class="n">readLine</span><span class="o">().</span><span class="n">toInt</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">i</span> <span class="k">=</span> <span class="o">(</span><span class="n">ln</span> <span class="o">-</span><span class="mi">1</span> <span class="o">)</span> <span class="o">/</span> <span class="mi">3</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">j</span> <span class="k">=</span> <span class="o">(</span><span class="n">ln</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">3</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">(</span><span class="n">i</span><span class="o">)(</span><span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="s">&quot;Invalid position. Try again&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(-</span><span class="mi">1</span><span class="o">,-</span><span class="mi">1</span><span class="o">)</span>                      <span class="c1">// actually, can&#39;t happen but compiler doesn&#39;t know</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">game</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">TicTacToe</span>
</span><span class='line'><span class="n">game</span><span class="o">.</span><span class="n">play</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It still handles normal victory:
```</p>

<h2>$ scala  tictactoe_class.scala </h2>

<p>|123|
|456|</p>

<h2>|789|</h2>

<h2>Player X move: 5</h2>

<p>|123|
|4X6|</p>

<h2>|789|</h2>

<h2>Player O move: 1</h2>

<p>|O23|
|4X6|</p>

<h2>|789|</h2>

<h2>Player X move: 2</h2>

<p>|OX3|
|4X6|</p>

<h2>|789|</h2>

<h2>Player O move: 4</h2>

<p>|OX3|
|OX6|</p>

<h2>|789|</h2>

<p>Player X move: 8
Player X won!
```</p>

<p>as well as the more common case of draw:</p>

<p>```</p>

<h2>$ scala  tictactoe_class.scala </h2>

<p>|123|
|456|</p>

<h2>|789|</h2>

<h2>Player X move: 5</h2>

<p>|123|
|4X6|</p>

<h2>|789|</h2>

<h2>Player O move: 1</h2>

<p>|O23|
|4X6|</p>

<h2>|789|</h2>

<h2>Player X move: 2</h2>

<p>|OX3|
|4X6|</p>

<h2>|789|</h2>

<h2>Player O move: 8</h2>

<p>|OX3|
|4X6|</p>

<h2>|7O9|</h2>

<h2>Player X move: 3</h2>

<p>|OXX|
|4X6|</p>

<h2>|7O9|</h2>

<h2>Player O move: 7</h2>

<p>|OXX|
|4X6|</p>

<h2>|OO9|</h2>

<h2>Player X move: 4</h2>

<p>|OXX|
|XX6|</p>

<h2>|OO9|</h2>

<h2>Player O move: 6</h2>

<p>|OXX|
|XXO|</p>

<h2>|OO9|</h2>

<p>Player X move: 9
Draw!
```</p>

<h2>Wrapping Up Day 1</h2>

<p>Scala seems easy enough to get started with. The syntax is readable; the semantic close enough to Java's (and other mainstream languages) that there is little surprise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Prolog Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/10/24/seven-languages-in-seven-weeks-prolog-day-3/"/>
    <updated>2011-10-24T13:33:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/10/24/seven-languages-in-seven-weeks-prolog-day-3</id>
    <content type="html"><![CDATA[<p>The final day with Prolog is called "Blowing Up Vegas" in the book, and was certainly intended as a Shock and Awe moment. Unfortunately, it feels more like Razzle Dazzle.</p>

<!--more-->


<p>Certainly, the code for both solvers (8 Queens and Sudoku) is short (if slightly incomplete) and effective. But it has one, significant shortcoming: it is not Prolog code.</p>

<p>Prolog's main control mechanism, backtracking, means the language is a natural match for problems that can be expressed as searches. But to be efficient, it is important to pay attention to the shape of the tree that is defined by the rules. Cutting and pruning are critical to ensure that Prolog will answer quickly (that is, before the Sun blows up or the Universe cools down).</p>

<p>As I was looking at the code for Day 3, I was specifically looking for the code that would shape the search tree; there were a couple of predicates (<code>fd_domain</code>, <code>fd_all_different</code>) which I didn't know about, so I mentally replaced them with code whose meaning was derived from the names of the unknown predicates (so <code>fd_domain</code> would try to assign a value between 1 and the passed maximum to each variables in the passed list, while <code>fd_all_different</code> would ensure that all values in the passed list was indeed different). The explanation in the book supported this interpretation.</p>

<p>Now, my problem was that the code as I understood it would be terribly slow: the <code>fd_domain</code> would generate a lot of different solutions, and <code>fd_all_different</code> would invalidate all but a few. Certainly, I was thinking, the 9x9 Sudoku will never work, even if the 4x4 seems to.</p>

<p>So I was surprised when I ran the 9x9 Sudoku (see below for the code): it was really fast. My assumptions regarding the unknown predicates were all wrong. Time to look at the <a href="http://www.gprolog.org/manual/html_node/gprolog055.html">manual</a>. It turns out that these predicates below to a specific GNU Prolog library (so it is not portable) designed to solve <a href="http://en.wikipedia.org/wiki/Constraint_logic_programming">Finite Domain</a> problems. Now, clearly, this is a great library, it simplifies things a lot. But there's also the problem: what is so great about today's code is due to the library, not specifically to Prolog. Many languages have such a library, so the case for Prolog is kind of weakened.</p>

<p>Before I finally understood the role of the finite domain solver in today's code, I had reimplemented the 8 Queens (generalized to N Queens) with explicit search tree pruning. So here I will show variants of the book code, which I hope will be better witnesses to Prolog's strengths.</p>

<h2>Exercises</h2>

<p>As stated above, I will depart considerably from the exercises, although the ones mentioned in the book are all here.</p>

<h3>Input/Ouput</h3>

<p>There are a number of such predicates, listed <a href="http://www.gprolog.org/manual/html_node/gprolog038.html#toc126">here</a>.</p>

<h3>Print only successful solutions</h3>

<p>I must say I'm not sure I understand this one. My approach is always to organise clauses so that the printing occurs last, when solutions are fully known. See below the code for the solvers.</p>

<h3>9x9 Sudoku Solver</h3>

<p>A first thing: when using GNU Prolog's Finite Domain Solver, the variables must be assigned a label from the domain, using <code>fd_labeling</code>. Otherwise, solutions will be displayed with a superset of the possible values for each unknown, rather than just the possible ones.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>9x9 Sudoku Solver  (sudoku_book.pl)</span> <a href='/downloads/code/7l7w/prolog/sudoku_book.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nf">sudoku</span><span class="p">(</span><span class="nv">Puzzle</span><span class="p">,</span> <span class="nv">Solution</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nv">Solution</span> <span class="o">=</span> <span class="nv">Puzzle</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">Puzzle</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S11</span><span class="p">,</span> <span class="nv">S12</span><span class="p">,</span> <span class="nv">S13</span><span class="p">,</span> <span class="nv">S14</span><span class="p">,</span> <span class="nv">S15</span><span class="p">,</span> <span class="nv">S16</span><span class="p">,</span> <span class="nv">S17</span><span class="p">,</span> <span class="nv">S18</span><span class="p">,</span> <span class="nv">S19</span><span class="p">,</span>
</span><span class='line'>              <span class="nv">S21</span><span class="p">,</span> <span class="nv">S22</span><span class="p">,</span> <span class="nv">S23</span><span class="p">,</span> <span class="nv">S24</span><span class="p">,</span> <span class="nv">S25</span><span class="p">,</span> <span class="nv">S26</span><span class="p">,</span> <span class="nv">S27</span><span class="p">,</span> <span class="nv">S28</span><span class="p">,</span> <span class="nv">S29</span><span class="p">,</span>
</span><span class='line'>              <span class="nv">S31</span><span class="p">,</span> <span class="nv">S32</span><span class="p">,</span> <span class="nv">S33</span><span class="p">,</span> <span class="nv">S34</span><span class="p">,</span> <span class="nv">S35</span><span class="p">,</span> <span class="nv">S36</span><span class="p">,</span> <span class="nv">S37</span><span class="p">,</span> <span class="nv">S38</span><span class="p">,</span> <span class="nv">S39</span><span class="p">,</span>
</span><span class='line'>              <span class="nv">S41</span><span class="p">,</span> <span class="nv">S42</span><span class="p">,</span> <span class="nv">S43</span><span class="p">,</span> <span class="nv">S44</span><span class="p">,</span> <span class="nv">S45</span><span class="p">,</span> <span class="nv">S46</span><span class="p">,</span> <span class="nv">S47</span><span class="p">,</span> <span class="nv">S48</span><span class="p">,</span> <span class="nv">S49</span><span class="p">,</span>
</span><span class='line'>              <span class="nv">S51</span><span class="p">,</span> <span class="nv">S52</span><span class="p">,</span> <span class="nv">S53</span><span class="p">,</span> <span class="nv">S54</span><span class="p">,</span> <span class="nv">S55</span><span class="p">,</span> <span class="nv">S56</span><span class="p">,</span> <span class="nv">S57</span><span class="p">,</span> <span class="nv">S58</span><span class="p">,</span> <span class="nv">S59</span><span class="p">,</span>
</span><span class='line'>              <span class="nv">S61</span><span class="p">,</span> <span class="nv">S62</span><span class="p">,</span> <span class="nv">S63</span><span class="p">,</span> <span class="nv">S64</span><span class="p">,</span> <span class="nv">S65</span><span class="p">,</span> <span class="nv">S66</span><span class="p">,</span> <span class="nv">S67</span><span class="p">,</span> <span class="nv">S68</span><span class="p">,</span> <span class="nv">S69</span><span class="p">,</span>
</span><span class='line'>              <span class="nv">S71</span><span class="p">,</span> <span class="nv">S72</span><span class="p">,</span> <span class="nv">S73</span><span class="p">,</span> <span class="nv">S74</span><span class="p">,</span> <span class="nv">S75</span><span class="p">,</span> <span class="nv">S76</span><span class="p">,</span> <span class="nv">S77</span><span class="p">,</span> <span class="nv">S78</span><span class="p">,</span> <span class="nv">S79</span><span class="p">,</span>
</span><span class='line'>              <span class="nv">S81</span><span class="p">,</span> <span class="nv">S82</span><span class="p">,</span> <span class="nv">S83</span><span class="p">,</span> <span class="nv">S84</span><span class="p">,</span> <span class="nv">S85</span><span class="p">,</span> <span class="nv">S86</span><span class="p">,</span> <span class="nv">S87</span><span class="p">,</span> <span class="nv">S88</span><span class="p">,</span> <span class="nv">S89</span><span class="p">,</span>
</span><span class='line'>              <span class="nv">S91</span><span class="p">,</span> <span class="nv">S92</span><span class="p">,</span> <span class="nv">S93</span><span class="p">,</span> <span class="nv">S94</span><span class="p">,</span> <span class="nv">S95</span><span class="p">,</span> <span class="nv">S96</span><span class="p">,</span> <span class="nv">S97</span><span class="p">,</span> <span class="nv">S98</span><span class="p">,</span> <span class="nv">S99</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">fd_domain</span><span class="p">(</span><span class="nv">Puzzle</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">9</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">Col1</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S11</span><span class="p">,</span> <span class="nv">S21</span><span class="p">,</span> <span class="nv">S31</span><span class="p">,</span> <span class="nv">S41</span><span class="p">,</span> <span class="nv">S51</span><span class="p">,</span> <span class="nv">S61</span><span class="p">,</span> <span class="nv">S71</span><span class="p">,</span> <span class="nv">S81</span><span class="p">,</span> <span class="nv">S91</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Col2</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S12</span><span class="p">,</span> <span class="nv">S22</span><span class="p">,</span> <span class="nv">S32</span><span class="p">,</span> <span class="nv">S42</span><span class="p">,</span> <span class="nv">S52</span><span class="p">,</span> <span class="nv">S62</span><span class="p">,</span> <span class="nv">S72</span><span class="p">,</span> <span class="nv">S82</span><span class="p">,</span> <span class="nv">S92</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Col3</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S13</span><span class="p">,</span> <span class="nv">S23</span><span class="p">,</span> <span class="nv">S33</span><span class="p">,</span> <span class="nv">S43</span><span class="p">,</span> <span class="nv">S53</span><span class="p">,</span> <span class="nv">S63</span><span class="p">,</span> <span class="nv">S73</span><span class="p">,</span> <span class="nv">S83</span><span class="p">,</span> <span class="nv">S93</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Col4</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S14</span><span class="p">,</span> <span class="nv">S24</span><span class="p">,</span> <span class="nv">S34</span><span class="p">,</span> <span class="nv">S44</span><span class="p">,</span> <span class="nv">S54</span><span class="p">,</span> <span class="nv">S64</span><span class="p">,</span> <span class="nv">S74</span><span class="p">,</span> <span class="nv">S84</span><span class="p">,</span> <span class="nv">S94</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Col5</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S15</span><span class="p">,</span> <span class="nv">S25</span><span class="p">,</span> <span class="nv">S35</span><span class="p">,</span> <span class="nv">S45</span><span class="p">,</span> <span class="nv">S55</span><span class="p">,</span> <span class="nv">S65</span><span class="p">,</span> <span class="nv">S75</span><span class="p">,</span> <span class="nv">S85</span><span class="p">,</span> <span class="nv">S95</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Col6</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S16</span><span class="p">,</span> <span class="nv">S26</span><span class="p">,</span> <span class="nv">S36</span><span class="p">,</span> <span class="nv">S46</span><span class="p">,</span> <span class="nv">S56</span><span class="p">,</span> <span class="nv">S66</span><span class="p">,</span> <span class="nv">S76</span><span class="p">,</span> <span class="nv">S86</span><span class="p">,</span> <span class="nv">S96</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Col7</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S17</span><span class="p">,</span> <span class="nv">S27</span><span class="p">,</span> <span class="nv">S37</span><span class="p">,</span> <span class="nv">S47</span><span class="p">,</span> <span class="nv">S57</span><span class="p">,</span> <span class="nv">S67</span><span class="p">,</span> <span class="nv">S77</span><span class="p">,</span> <span class="nv">S87</span><span class="p">,</span> <span class="nv">S97</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Col8</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S18</span><span class="p">,</span> <span class="nv">S28</span><span class="p">,</span> <span class="nv">S38</span><span class="p">,</span> <span class="nv">S48</span><span class="p">,</span> <span class="nv">S58</span><span class="p">,</span> <span class="nv">S68</span><span class="p">,</span> <span class="nv">S78</span><span class="p">,</span> <span class="nv">S88</span><span class="p">,</span> <span class="nv">S98</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Col9</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S19</span><span class="p">,</span> <span class="nv">S29</span><span class="p">,</span> <span class="nv">S39</span><span class="p">,</span> <span class="nv">S49</span><span class="p">,</span> <span class="nv">S59</span><span class="p">,</span> <span class="nv">S69</span><span class="p">,</span> <span class="nv">S79</span><span class="p">,</span> <span class="nv">S89</span><span class="p">,</span> <span class="nv">S99</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">Row1</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S11</span><span class="p">,</span> <span class="nv">S12</span><span class="p">,</span> <span class="nv">S13</span><span class="p">,</span> <span class="nv">S14</span><span class="p">,</span> <span class="nv">S15</span><span class="p">,</span> <span class="nv">S16</span><span class="p">,</span> <span class="nv">S17</span><span class="p">,</span> <span class="nv">S18</span><span class="p">,</span> <span class="nv">S19</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Row2</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S21</span><span class="p">,</span> <span class="nv">S22</span><span class="p">,</span> <span class="nv">S23</span><span class="p">,</span> <span class="nv">S24</span><span class="p">,</span> <span class="nv">S25</span><span class="p">,</span> <span class="nv">S26</span><span class="p">,</span> <span class="nv">S27</span><span class="p">,</span> <span class="nv">S28</span><span class="p">,</span> <span class="nv">S29</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Row3</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S31</span><span class="p">,</span> <span class="nv">S32</span><span class="p">,</span> <span class="nv">S33</span><span class="p">,</span> <span class="nv">S34</span><span class="p">,</span> <span class="nv">S35</span><span class="p">,</span> <span class="nv">S36</span><span class="p">,</span> <span class="nv">S37</span><span class="p">,</span> <span class="nv">S38</span><span class="p">,</span> <span class="nv">S39</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Row4</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S41</span><span class="p">,</span> <span class="nv">S42</span><span class="p">,</span> <span class="nv">S43</span><span class="p">,</span> <span class="nv">S44</span><span class="p">,</span> <span class="nv">S45</span><span class="p">,</span> <span class="nv">S46</span><span class="p">,</span> <span class="nv">S47</span><span class="p">,</span> <span class="nv">S48</span><span class="p">,</span> <span class="nv">S49</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Row5</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S51</span><span class="p">,</span> <span class="nv">S52</span><span class="p">,</span> <span class="nv">S53</span><span class="p">,</span> <span class="nv">S54</span><span class="p">,</span> <span class="nv">S55</span><span class="p">,</span> <span class="nv">S56</span><span class="p">,</span> <span class="nv">S57</span><span class="p">,</span> <span class="nv">S58</span><span class="p">,</span> <span class="nv">S59</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Row6</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S61</span><span class="p">,</span> <span class="nv">S62</span><span class="p">,</span> <span class="nv">S63</span><span class="p">,</span> <span class="nv">S64</span><span class="p">,</span> <span class="nv">S65</span><span class="p">,</span> <span class="nv">S66</span><span class="p">,</span> <span class="nv">S67</span><span class="p">,</span> <span class="nv">S68</span><span class="p">,</span> <span class="nv">S69</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Row7</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S71</span><span class="p">,</span> <span class="nv">S72</span><span class="p">,</span> <span class="nv">S73</span><span class="p">,</span> <span class="nv">S74</span><span class="p">,</span> <span class="nv">S75</span><span class="p">,</span> <span class="nv">S76</span><span class="p">,</span> <span class="nv">S77</span><span class="p">,</span> <span class="nv">S78</span><span class="p">,</span> <span class="nv">S79</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Row8</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S81</span><span class="p">,</span> <span class="nv">S82</span><span class="p">,</span> <span class="nv">S83</span><span class="p">,</span> <span class="nv">S84</span><span class="p">,</span> <span class="nv">S85</span><span class="p">,</span> <span class="nv">S86</span><span class="p">,</span> <span class="nv">S87</span><span class="p">,</span> <span class="nv">S88</span><span class="p">,</span> <span class="nv">S89</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Row9</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S91</span><span class="p">,</span> <span class="nv">S92</span><span class="p">,</span> <span class="nv">S93</span><span class="p">,</span> <span class="nv">S94</span><span class="p">,</span> <span class="nv">S95</span><span class="p">,</span> <span class="nv">S96</span><span class="p">,</span> <span class="nv">S97</span><span class="p">,</span> <span class="nv">S98</span><span class="p">,</span> <span class="nv">S99</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">Square1</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S11</span><span class="p">,</span> <span class="nv">S21</span><span class="p">,</span> <span class="nv">S31</span><span class="p">,</span> <span class="nv">S12</span><span class="p">,</span> <span class="nv">S22</span><span class="p">,</span> <span class="nv">S32</span><span class="p">,</span> <span class="nv">S13</span><span class="p">,</span> <span class="nv">S23</span><span class="p">,</span> <span class="nv">S33</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Square2</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S41</span><span class="p">,</span> <span class="nv">S51</span><span class="p">,</span> <span class="nv">S61</span><span class="p">,</span> <span class="nv">S42</span><span class="p">,</span> <span class="nv">S52</span><span class="p">,</span> <span class="nv">S62</span><span class="p">,</span> <span class="nv">S43</span><span class="p">,</span> <span class="nv">S53</span><span class="p">,</span> <span class="nv">S63</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Square3</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S71</span><span class="p">,</span> <span class="nv">S81</span><span class="p">,</span> <span class="nv">S91</span><span class="p">,</span> <span class="nv">S72</span><span class="p">,</span> <span class="nv">S82</span><span class="p">,</span> <span class="nv">S92</span><span class="p">,</span> <span class="nv">S73</span><span class="p">,</span> <span class="nv">S83</span><span class="p">,</span> <span class="nv">S93</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Square4</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S14</span><span class="p">,</span> <span class="nv">S24</span><span class="p">,</span> <span class="nv">S34</span><span class="p">,</span> <span class="nv">S15</span><span class="p">,</span> <span class="nv">S25</span><span class="p">,</span> <span class="nv">S35</span><span class="p">,</span> <span class="nv">S16</span><span class="p">,</span> <span class="nv">S26</span><span class="p">,</span> <span class="nv">S36</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Square5</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S44</span><span class="p">,</span> <span class="nv">S54</span><span class="p">,</span> <span class="nv">S64</span><span class="p">,</span> <span class="nv">S45</span><span class="p">,</span> <span class="nv">S55</span><span class="p">,</span> <span class="nv">S65</span><span class="p">,</span> <span class="nv">S46</span><span class="p">,</span> <span class="nv">S56</span><span class="p">,</span> <span class="nv">S66</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Square6</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S74</span><span class="p">,</span> <span class="nv">S84</span><span class="p">,</span> <span class="nv">S94</span><span class="p">,</span> <span class="nv">S75</span><span class="p">,</span> <span class="nv">S85</span><span class="p">,</span> <span class="nv">S95</span><span class="p">,</span> <span class="nv">S76</span><span class="p">,</span> <span class="nv">S86</span><span class="p">,</span> <span class="nv">S96</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Square7</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S17</span><span class="p">,</span> <span class="nv">S27</span><span class="p">,</span> <span class="nv">S37</span><span class="p">,</span> <span class="nv">S18</span><span class="p">,</span> <span class="nv">S28</span><span class="p">,</span> <span class="nv">S38</span><span class="p">,</span> <span class="nv">S19</span><span class="p">,</span> <span class="nv">S29</span><span class="p">,</span> <span class="nv">S39</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Square8</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S47</span><span class="p">,</span> <span class="nv">S57</span><span class="p">,</span> <span class="nv">S67</span><span class="p">,</span> <span class="nv">S48</span><span class="p">,</span> <span class="nv">S58</span><span class="p">,</span> <span class="nv">S68</span><span class="p">,</span> <span class="nv">S49</span><span class="p">,</span> <span class="nv">S59</span><span class="p">,</span> <span class="nv">S69</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Square9</span> <span class="o">=</span> <span class="p">[</span><span class="nv">S77</span><span class="p">,</span> <span class="nv">S87</span><span class="p">,</span> <span class="nv">S97</span><span class="p">,</span> <span class="nv">S78</span><span class="p">,</span> <span class="nv">S88</span><span class="p">,</span> <span class="nv">S98</span><span class="p">,</span> <span class="nv">S79</span><span class="p">,</span> <span class="nv">S89</span><span class="p">,</span> <span class="nv">S99</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">valid</span><span class="p">([</span><span class="nv">Row1</span><span class="p">,</span> <span class="nv">Row2</span><span class="p">,</span> <span class="nv">Row3</span><span class="p">,</span> <span class="nv">Row4</span><span class="p">,</span> <span class="nv">Row5</span><span class="p">,</span> <span class="nv">Row6</span><span class="p">,</span> <span class="nv">Row7</span><span class="p">,</span> <span class="nv">Row8</span><span class="p">,</span> <span class="nv">Row9</span><span class="p">,</span>
</span><span class='line'>           <span class="nv">Col1</span><span class="p">,</span> <span class="nv">Col2</span><span class="p">,</span> <span class="nv">Col3</span><span class="p">,</span> <span class="nv">Col4</span><span class="p">,</span> <span class="nv">Col5</span><span class="p">,</span> <span class="nv">Col6</span><span class="p">,</span> <span class="nv">Col7</span><span class="p">,</span> <span class="nv">Col8</span><span class="p">,</span> <span class="nv">Col9</span><span class="p">,</span>
</span><span class='line'>           <span class="nv">Square1</span><span class="p">,</span> <span class="nv">Square2</span><span class="p">,</span> <span class="nv">Square3</span><span class="p">,</span> <span class="nv">Square4</span><span class="p">,</span> <span class="nv">Square5</span><span class="p">,</span>
</span><span class='line'>           <span class="nv">Square6</span><span class="p">,</span> <span class="nv">Square7</span><span class="p">,</span> <span class="nv">Square8</span><span class="p">,</span> <span class="nv">Square9</span><span class="p">]),</span>
</span><span class='line'>    <span class="nf">fd_labeling</span><span class="p">(</span><span class="nv">Puzzle</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">valid</span><span class="p">([]).</span>
</span><span class='line'><span class="nf">valid</span><span class="p">([</span><span class="nv">Head</span><span class="p">|</span><span class="nv">Tail</span><span class="p">])</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">fd_all_different</span><span class="p">(</span><span class="nv">Head</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">valid</span><span class="p">(</span><span class="nv">Tail</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This was clearly tedious to write (I wrote a few Emacs functions to do the job). I will show a better (I think) way below.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sudoko test  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">sudoku</span><span class="p">([</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">pre&gt;&lt;code</span><span class="o">&gt;</span>    <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="m">5</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span>
</span><span class='line'>    <span class="m">4</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">],</span>
</span><span class='line'>   <span class="nv">Solution</span><span class="p">).</span>
</span><span class='line'><span class="s-Atom">&lt;/code&gt;&lt;/pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Solution</span> <span class="o">=</span> <span class="p">[</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">]</span> <span class="s-Atom">?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note: I found a few implementations missing the <code>fd_labeling</code> clause, which causes the test above to return:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sudoko test without fd_labeling  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">sudoku</span><span class="p">([</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">pre&gt;&lt;code</span><span class="o">&gt;</span>    <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="m">5</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span>
</span><span class='line'>    <span class="m">4</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">],</span>
</span><span class='line'>   <span class="nv">Solution</span><span class="p">).</span>
</span><span class='line'><span class="s-Atom">&lt;/code&gt;&lt;/pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Solution</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">3</span><span class="p">(</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">25</span><span class="p">(</span><span class="m">4</span><span class="p">..</span><span class="m">5</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">47</span><span class="p">(</span><span class="m">4</span><span class="p">..</span><span class="m">5</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="m">2</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">83</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">105</span><span class="p">(</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="m">7</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">191</span><span class="p">(</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">213</span><span class="p">(</span><span class="m">7</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">235</span><span class="p">(</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">257</span><span class="p">(</span><span class="m">6</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">343</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">365</span><span class="p">(</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">),</span><span class="m">1</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">401</span><span class="p">(</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">423</span><span class="p">(</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="p">),</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">509</span><span class="p">(</span><span class="m">1</span><span class="p">..</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">8</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">531</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">4</span><span class="p">..</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">553</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="p">..</span><span class="m">5</span><span class="s-Atom">:</span><span class="m">7</span><span class="p">..</span><span class="m">8</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">575</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">597</span><span class="p">(</span><span class="m">1</span><span class="p">..</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">619</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">641</span><span class="p">(</span><span class="m">1</span><span class="p">..</span><span class="m">3</span><span class="s-Atom">:</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">),</span><span class="m">9</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">677</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">699</span><span class="p">(</span><span class="m">1</span><span class="p">..</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">721</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">743</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">7</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="m">5</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">807</span><span class="p">(</span><span class="m">1</span><span class="p">..</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">829</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">7</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">851</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">873</span><span class="p">(</span><span class="m">1</span><span class="p">..</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="m">3</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">909</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="p">..</span><span class="m">5</span><span class="s-Atom">:</span><span class="m">7</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">931</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">953</span><span class="p">(</span><span class="m">1</span><span class="p">..</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">975</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">997</span><span class="p">(</span><span class="m">1</span><span class="p">..</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">1019</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">4</span><span class="p">..</span><span class="m">5</span><span class="s-Atom">:</span><span class="m">7</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">1041</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">..</span><span class="m">7</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">1063</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">1127</span><span class="p">(</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">1149</span><span class="p">(</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="m">5</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">1185</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">7</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">1207</span><span class="p">(</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">7</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="m">5</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">1243</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="m">3</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">1293</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">1315</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">4</span><span class="s-Atom">:</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">1337</span><span class="p">(</span><span class="m">1</span><span class="p">..</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">1359</span><span class="p">(</span><span class="m">1</span><span class="s-Atom">:</span><span class="m">4</span><span class="p">),</span><span class="m">8</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">1423</span><span class="p">(</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">1445</span><span class="p">(</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">1467</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">5</span><span class="p">..</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">8</span><span class="p">..</span><span class="m">9</span><span class="p">),</span><span class="m">1</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;#</span><span class="m">1503</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">6</span><span class="p">),</span><span class="m">3</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;#</span><span class="m">1547</span><span class="p">(</span><span class="m">2</span><span class="s-Atom">:</span><span class="m">6</span><span class="s-Atom">:</span><span class="m">9</span><span class="p">)]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">(</span><span class="m">1</span> <span class="s-Atom">ms</span><span class="p">)</span> <span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Utility predicates</h3>

<p>First, I need to introduce a few helper predicates which will come handy later on.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Utility predicates  (utils.pl)</span> <a href='/downloads/code/7l7w/prolog/utils.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="c1">% apply a clause to each element of a list, and collect the results</span>
</span><span class='line'><span class="nf">maplist</span><span class="p">(</span><span class="k">_</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">maplist</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="p">[</span><span class="nv">R</span><span class="p">|</span><span class="nv">Rs</span><span class="p">])</span> <span class="p">:-</span> <span class="nf">call</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">H</span><span class="p">,</span> <span class="nv">R</span><span class="p">),</span> <span class="nf">maplist</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">T</span><span class="p">,</span> <span class="nv">Rs</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% same, but without return value - only side effect</span>
</span><span class='line'><span class="nf">maplist_</span><span class="p">(</span><span class="k">_</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">maplist_</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">])</span> <span class="p">:-</span> <span class="nf">call</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">H</span><span class="p">),</span> <span class="nf">maplist_</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">T</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% same as maplist, but passes the current index to the predicate</span>
</span><span class='line'><span class="nf">maplistidx</span><span class="p">(</span><span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">maplistidx</span><span class="p">(</span><span class="nv">Pred</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="p">[</span><span class="nv">X</span><span class="p">|</span><span class="nv">R</span><span class="p">])</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">call</span><span class="p">(</span><span class="nv">Pred</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="nv">H</span><span class="p">,</span> <span class="nv">X</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">N1</span> <span class="o">is</span> <span class="nv">N</span> <span class="o">+</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">maplistidx</span><span class="p">(</span><span class="nv">Pred</span><span class="p">,</span> <span class="nv">N1</span><span class="p">,</span> <span class="nv">T</span><span class="p">,</span> <span class="nv">R</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% subtract(S, Es, R) deletes all elements in Es from S, and puts the result in R</span>
</span><span class='line'><span class="nf">subtract</span><span class="p">(</span><span class="nv">Set</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Set</span><span class="p">).</span>
</span><span class='line'><span class="nf">subtract</span><span class="p">(</span><span class="nv">Set</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Result</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">delete</span><span class="p">(</span><span class="nv">Set</span><span class="p">,</span> <span class="nv">H</span><span class="p">,</span> <span class="nv">R1</span><span class="p">),</span> <span class="nf">subtract</span><span class="p">(</span><span class="nv">R1</span><span class="p">,</span> <span class="nv">T</span><span class="p">,</span> <span class="nv">Result</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% Matrix transposition. A Matrix is a list of list</span>
</span><span class='line'><span class="nf">transpose</span><span class="p">([],</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">transpose</span><span class="p">([[]|</span><span class="k">_</span><span class="p">],</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">transpose</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="p">[</span><span class="nv">Hs</span><span class="p">|</span><span class="nv">M1</span><span class="p">])</span> <span class="p">:-</span> <span class="nf">maplist</span><span class="p">(</span><span class="s-Atom">head</span><span class="p">,</span> <span class="nv">M</span><span class="p">,</span> <span class="nv">Hs</span><span class="p">),</span> <span class="nf">maplist</span><span class="p">(</span><span class="s-Atom">tail</span><span class="p">,</span> <span class="nv">M</span><span class="p">,</span> <span class="nv">Ts</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">transpose</span><span class="p">(</span><span class="nv">Ts</span><span class="p">,</span> <span class="nv">M1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% simple utility predicates used in transpose</span>
</span><span class='line'><span class="nf">head</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="k">_</span><span class="p">],</span> <span class="nv">H</span><span class="p">).</span>
</span><span class='line'><span class="nf">tail</span><span class="p">([</span><span class="k">_</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">T</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% make_var makes a list of variables</span>
</span><span class='line'><span class="nf">make_var</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">length</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">N</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% take up to N element from F, return them as P. The rest is returned as S</span>
</span><span class='line'><span class="nf">take</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">F</span><span class="p">,</span> <span class="nv">P</span><span class="p">,</span> <span class="nv">S</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">length</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Fl</span><span class="p">),</span> <span class="nv">Sl</span> <span class="o">is</span> <span class="nf">min</span><span class="p">(</span><span class="nv">Fl</span><span class="p">,</span> <span class="nv">N</span><span class="p">),</span> <span class="nf">make_var</span><span class="p">(</span><span class="nv">Sl</span><span class="p">,</span> <span class="nv">P</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">append</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">S</span><span class="p">,</span> <span class="nv">F</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% split a list into sublists of N elements</span>
</span><span class='line'><span class="nf">chunk</span><span class="p">(</span><span class="k">_</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">chunk</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="p">[</span><span class="nv">L</span><span class="p">|</span><span class="nv">Ls</span><span class="p">],</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">R</span><span class="p">])</span> <span class="p">:-</span> <span class="nf">take</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="p">[</span><span class="nv">L</span><span class="p">|</span><span class="nv">Ls</span><span class="p">],</span> <span class="nv">H</span><span class="p">,</span> <span class="nv">R1</span><span class="p">),</span> <span class="nf">chunk</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">R1</span><span class="p">,</span> <span class="nv">R</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% concatenate a list of list. Unlike flatten, only operate on one level</span>
</span><span class='line'><span class="nf">concatenate</span><span class="p">([],</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">A</span><span class="p">).</span>
</span><span class='line'><span class="nf">concatenate</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">R</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">append</span><span class="p">(</span><span class="nv">H</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">A1</span><span class="p">),</span> <span class="nf">concatenate</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">R</span><span class="p">,</span> <span class="nv">A1</span><span class="p">).</span>
</span><span class='line'><span class="nf">concatenate</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">concatenate</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% make a list of N Char</span>
</span><span class='line'><span class="nf">const</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="nv">N</span><span class="p">).</span>
</span><span class='line'><span class="nf">make_line</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">Char</span><span class="p">,</span> <span class="nv">Out</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">make_var</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">In</span><span class="p">),</span> <span class="nf">maplist</span><span class="p">(</span><span class="nf">const</span><span class="p">(</span><span class="nv">Char</span><span class="p">),</span> <span class="nv">In</span><span class="p">,</span> <span class="nv">Out</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% make a list with values 1 to N</span>
</span><span class='line'><span class="nf">make_range</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">R</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">make_var</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">L</span><span class="p">),</span> <span class="nf">maplistidx</span><span class="p">(</span><span class="s-Atom">const</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% print_line print each element in a list without list formatting</span>
</span><span class='line'><span class="nf">print_list</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">maplist_</span><span class="p">(</span><span class="s-Atom">write</span><span class="p">,</span> <span class="nv">List</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>maplist</code> is just the same as the <code>map</code> function found in many functional programming language.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>maplist: apply sort to each sublist in a list  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">maplist</span><span class="p">(</span><span class="s-Atom">sort</span><span class="p">,</span> <span class="p">[[</span><span class="m">3</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">],</span> <span class="p">[</span><span class="m">7</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">8</span><span class="p">],</span> <span class="p">[</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">]],</span> <span class="nv">O</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">O</span> <span class="o">=</span> <span class="p">[[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">],[</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">9</span><span class="p">],[</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">]]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>maplist_</code> is the same, but called only for side effects.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>maplist<em>: output each element  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="s-Atom">maplist&lt;/em&gt;</span><span class="p">(</span><span class="s-Atom">print</span><span class="p">,</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]).</span>
</span><span class='line'><span class="m">123</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">true</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>maplistidx</code> is the same as <code>maplist</code> again, but additionally passes the index (position within the list) to the predicate.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>maplistidx  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">maplistidx</span><span class="p">(</span><span class="s-Atom">const</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">],</span> <span class="nv">O</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">O</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>subtract</code> generalizes <code>delete</code>: it removes all the elements of a list from another one.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>subtract  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">subtract</span><span class="p">([</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">10</span><span class="p">],</span> <span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">],</span> <span class="nv">O</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">O</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">10</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>transpose</code> is a matrix transposition predicate. It uses <code>head</code> and <code>tail</code> to split a list.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>transpose  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">transpose</span><span class="p">([[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">],</span> <span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">]],</span> <span class="nv">O</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">O</span> <span class="o">=</span> <span class="p">[[</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">],[</span><span class="m">2</span><span class="p">,</span><span class="m">5</span><span class="p">],[</span><span class="m">3</span><span class="p">,</span><span class="m">6</span><span class="p">]]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>make_var</code> makes a list of <code>N</code> vars</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>make_var  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">make_var</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="k">_</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>take</code> is similar to the <code>take</code> function in Haskell: it split a list in two, the prefix being up to <code>N</code> elements long.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>take  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">take</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">],</span> <span class="nv">T</span><span class="p">,</span> <span class="nv">R</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">]</span>
</span><span class='line'><span class="nv">T</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>chunk</code> splits a list into chunks of size <code>N</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>chunk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">chunk</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">9</span><span class="p">],</span> <span class="nv">O</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">O</span> <span class="o">=</span> <span class="p">[[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">],[</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">],[</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">9</span><span class="p">]]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>make_line</code> create a list of length <code>N</code>, and set each element to <code>Char</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>make_line: creating and printing a line of '-'  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">make_line</span><span class="p">(</span><span class="m">20</span><span class="p">,</span> <span class="s-Atom">&#39;-&#39;</span><span class="p">,</span> <span class="nv">O</span><span class="p">),</span> <span class="nf">maplist_</span><span class="p">(</span><span class="s-Atom">print</span><span class="p">,</span> <span class="nv">O</span><span class="p">),</span> <span class="s-Atom">nl</span><span class="p">.</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">O</span> <span class="o">=</span> <span class="p">[</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">,</span><span class="s-Atom">-</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, <code>make_range</code> creates a list with elements ranging from 1 to <code>N</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>make_range  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">make_range</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">10</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Pretty printing Sudoku solutions</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Pretty Printing Sudoku  (sudoku_print.pl)</span> <a href='/downloads/code/7l7w/prolog/sudoku_print.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nf">sudoku_print</span><span class="p">(</span><span class="nv">Board</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">length</span><span class="p">(</span><span class="nv">Board</span><span class="p">,</span> <span class="nv">LB</span><span class="p">),</span>          <span class="c1">% complete board length</span>
</span><span class='line'>    <span class="nv">LL</span> <span class="o">is</span> <span class="nf">floor</span><span class="p">(</span><span class="nf">sqrt</span><span class="p">(</span><span class="nv">LB</span><span class="p">)),</span>      <span class="c1">% a line length is the square root of board length</span>
</span><span class='line'>    <span class="nv">SL</span> <span class="o">is</span> <span class="nf">floor</span><span class="p">(</span><span class="nf">sqrt</span><span class="p">(</span><span class="nv">LL</span><span class="p">)),</span>      <span class="c1">% a square length is the square root of line length</span>
</span><span class='line'>    <span class="nf">sudoku_print_</span><span class="p">(</span><span class="nv">LL</span><span class="p">,</span> <span class="nv">SL</span><span class="p">,</span> <span class="nv">SL</span><span class="p">,</span> <span class="nv">Board</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">% assuming values up to 9. Otherwise would need to</span>
</span><span class='line'><span class="c1">% configure cell width.</span>
</span><span class='line'><span class="nf">sudoku_print_</span><span class="p">(</span><span class="nv">LL</span><span class="p">,</span> <span class="nv">SH</span><span class="p">,</span> <span class="nv">SV</span><span class="p">,</span> <span class="nv">Board</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">chunk</span><span class="p">(</span><span class="nv">LL</span><span class="p">,</span> <span class="nv">Board</span><span class="p">,</span> <span class="nv">Lines</span><span class="p">),</span>             <span class="c1">% cut the board in lines</span>
</span><span class='line'>    <span class="nf">maplist</span><span class="p">(</span><span class="nf">chunk</span><span class="p">(</span><span class="nv">SH</span><span class="p">),</span> <span class="nv">Lines</span><span class="p">,</span> <span class="nv">LSquares</span><span class="p">),</span> <span class="c1">% cut each line in squares</span>
</span><span class='line'>    <span class="nf">chunk</span><span class="p">(</span><span class="nv">SV</span><span class="p">,</span> <span class="nv">LSquares</span><span class="p">,</span> <span class="nv">Squares</span><span class="p">),</span>        <span class="c1">% group each SV lines</span>
</span><span class='line'>    <span class="nv">SepL</span> <span class="o">is</span> <span class="p">(</span><span class="m">2</span> <span class="o">*</span> <span class="nv">LL</span><span class="p">)</span> <span class="o">+</span> <span class="nf">round</span><span class="p">(</span><span class="nv">LL</span><span class="o">/</span><span class="nv">SH</span><span class="p">)</span> <span class="o">+</span> <span class="m">1</span><span class="p">,</span> <span class="c1">% 2 spaces for each number</span>
</span><span class='line'>    <span class="nf">make_line</span><span class="p">(</span><span class="nv">SepL</span><span class="p">,</span> <span class="s-Atom">&#39;-&#39;</span><span class="p">,</span> <span class="nv">Line</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">print_list</span><span class="p">(</span><span class="nv">Line</span><span class="p">),</span> <span class="s-Atom">nl</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">maplist_</span><span class="p">(</span><span class="nf">out_squares</span><span class="p">(</span><span class="nv">Line</span><span class="p">),</span> <span class="nv">Squares</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">out_squares</span><span class="p">(</span><span class="nv">LineSep</span><span class="p">,</span> <span class="nv">SBlock</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">maplist_</span><span class="p">(</span><span class="s-Atom">in_squares</span><span class="p">,</span> <span class="nv">SBlock</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">print_list</span><span class="p">(</span><span class="nv">LineSep</span><span class="p">),</span> <span class="s-Atom">nl</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">in_squares</span><span class="p">(</span><span class="nv">Line</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">write</span><span class="p">(</span><span class="s-Atom">&#39;|&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">maplist_</span><span class="p">(</span><span class="s-Atom">line</span><span class="p">,</span> <span class="nv">Line</span><span class="p">),</span><span class="s-Atom">nl</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">line</span><span class="p">(</span><span class="nv">SubLine</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">maplist_</span><span class="p">(</span><span class="s-Atom">print_number</span><span class="p">,</span> <span class="nv">SubLine</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">write</span><span class="p">(</span><span class="s-Atom">&#39;|&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">print_number</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">format</span><span class="p">(</span><span class="s2">&quot;~k &quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">N</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>First, a test to show what the output looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sudoku Pretty Printer  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nv">GNU</span> <span class="nv">Prolog</span> <span class="m">1</span><span class="p">.</span><span class="m">4</span><span class="p">.</span><span class="m">0</span>
</span><span class='line'><span class="nv">By</span> <span class="nv">Daniel</span> <span class="nv">Diaz</span>
</span><span class='line'><span class="nv">Copyright</span> <span class="p">(</span><span class="nv">C</span><span class="p">)</span> <span class="m">1999</span><span class="o">-</span><span class="m">2011</span> <span class="nv">Daniel</span> <span class="nv">Diaz</span>
</span><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">consult</span><span class="p">(</span><span class="s-Atom">&#39;utils&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">...</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">consult</span><span class="p">(</span><span class="s-Atom">&#39;sudoku_book&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">...</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">consult</span><span class="p">(</span><span class="s-Atom">&#39;sudoku_print&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">....</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">sudoku</span><span class="p">([</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">pre&gt;&lt;code</span><span class="o">&gt;</span>    <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="m">5</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span>
</span><span class='line'>    <span class="m">4</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">],</span>
</span><span class='line'>   <span class="nv">Solution</span><span class="p">),</span> <span class="nf">sudoku_print</span><span class="p">(</span><span class="nv">Solution</span><span class="p">).</span>
</span><span class='line'><span class="s-Atom">&lt;/code&gt;&lt;/pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">hr</span> <span class="s-Atom">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">8</span> <span class="m">5</span> <span class="m">4</span> <span class="p">|</span><span class="m">2</span> <span class="m">1</span> <span class="m">9</span> <span class="p">|</span><span class="m">7</span> <span class="m">6</span> <span class="m">3</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span><span class="m">3</span> <span class="m">9</span> <span class="m">7</span> <span class="p">|</span><span class="m">8</span> <span class="m">6</span> <span class="m">5</span> <span class="p">|</span><span class="m">4</span> <span class="m">2</span> <span class="m">1</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">2</span> <span class="m">6</span> <span class="m">1</span> <span class="p">|</span><span class="m">4</span> <span class="m">7</span> <span class="m">3</span> <span class="p">|</span><span class="m">9</span> <span class="m">8</span> <span class="m">5</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">7</span> <span class="m">8</span> <span class="m">5</span> <span class="p">|</span><span class="m">1</span> <span class="m">2</span> <span class="m">6</span> <span class="p">|</span><span class="m">3</span> <span class="m">9</span> <span class="m">4</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span><span class="m">6</span> <span class="m">4</span> <span class="m">9</span> <span class="p">|</span><span class="m">5</span> <span class="m">3</span> <span class="m">8</span> <span class="p">|</span><span class="m">1</span> <span class="m">7</span> <span class="m">2</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">1</span> <span class="m">3</span> <span class="m">2</span> <span class="p">|</span><span class="m">9</span> <span class="m">4</span> <span class="m">7</span> <span class="p">|</span><span class="m">8</span> <span class="m">5</span> <span class="m">6</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">9</span> <span class="m">2</span> <span class="m">6</span> <span class="p">|</span><span class="m">3</span> <span class="m">8</span> <span class="m">4</span> <span class="p">|</span><span class="m">5</span> <span class="m">1</span> <span class="m">7</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span><span class="m">5</span> <span class="m">1</span> <span class="m">3</span> <span class="p">|</span><span class="m">7</span> <span class="m">9</span> <span class="m">2</span> <span class="p">|</span><span class="m">6</span> <span class="m">4</span> <span class="m">8</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">4</span> <span class="m">7</span> <span class="m">8</span> <span class="p">|</span><span class="m">6</span> <span class="m">5</span> <span class="m">1</span> <span class="p">|</span><span class="m">2</span> <span class="m">3</span> <span class="m">9</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Solution</span> <span class="o">=</span> <span class="p">[</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">]</span> <span class="s-Atom">?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>First the various modules have to be loaded (GNU Prolog does not have a module system, so this is tedious). Then the solver is run on a hard problem (from <a href="http://www.sudoku.ws/hard.htm">this</a> site), and finally pretty printed. As usual, Prolog then lists the variables introduced in the query, here only <code>Solution</code>.</p>

<p>Pretty printing a 6x6 (dummy) board works as well:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>A 6x6 board  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">make_line</span><span class="p">(</span><span class="m">36</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="nv">L</span><span class="p">),</span> <span class="nf">sudoku_print_</span><span class="p">(</span><span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code is fairly simple; the major difficulty is to find names for the various segments that are printed.</p>

<p><code>sudoku_print</code> computes some parameters using assumptions that are valid for some board sizes, but not all. <code>sudoku_print_</code> should be used for these other sizes. The paramaters are the number of columns or rows <code>LL</code> and the size of the subdivisions, horizontally <code>SH</code>, and vertically <code>SV</code>.</p>

<p><code>sudoku_print_</code> then splits the <code>Board</code> into <code>LL</code> lines; each line is split into <code>SH</code> long segments (which will form the squares); and the list of lines is split into <code>SV</code> long vertical segments. A <code>LineSep</code> as large as the board: counting 2 characters per value, <code>2*LL</code>, plus 1 character for each separation before, between and after subdivisions (each subdivision is <code>SH</code> long, so there are <code>LL/SH</code> subdivisions). That <code>LineSep</code> is first printed (the general logic is that the various predicates print the separation after their output; the calling predicate emits the separation before the output).</p>

<p><code>out_squares</code> iterates over the group of lines (each <code>SV</code> long). It prints a <code>LineSep</code> after each group.</p>

<p><code>in_squares</code> iterates over a group of lines inside a square. It prints the <code>|</code> character that begins a line.</p>

<p><code>line</code> iterates over the groups within a line. It prints the <code>|</code> after each group.</p>

<p>Finally, <code>print_number</code> iterate over each number inside a group. It prints the number, then a space.</p>

<h3>The n Queens problem</h3>

<p>Here I depart from the book, as the code below solves the n Queens problem (that is, it is general over the number of queens), and I do not use the Finite Domain predicates, so as to show how Prolog can constrain the search tree.</p>

<p>The constraints on a n Queens problems are easy:</p>

<ul>
<li>no two queens on the same row</li>
<li>no two queens on the same column</li>
<li>no two queens on the same diagonal</li>
</ul>


<p>The first constraint it easy to ensure: the solution is the list of rows, each one giving the position of a single queen in that row. In other words, by the nature of the format for the solution, it is already impossible to have two queens in the same row.</p>

<p>For instance, the (dummy and wrong) board solution
<code>
[1,3,2]
</code>
puts one queen in column 1 of row 1, one queen in column 3 of row 2, and one queen in column 2 of row 3.</p>

<p>With such the board, the design of the algorithm starts to emerge:</p>

<ul>
<li>select a column for each row top to bottom,</li>
<li>for each row, know the columns selected for rows above it</li>
<li>use the selected columns to filter out the potential candidate columns for the current row</li>
<li>if no candidate exists, backtrack</li>
<li>if all rows have a column, emit the result</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>n Queens Solver  (queens.pl)</span> <a href='/downloads/code/7l7w/prolog/queens.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="c1">%% Solver predicates </span>
</span><span class='line'>
</span><span class='line'><span class="nf">exclude_diag</span><span class="p">(</span><span class="k">_</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">exclude_diag</span><span class="p">(</span><span class="nv">Diff</span><span class="p">,</span> <span class="p">[</span><span class="nv">X</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="p">[</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">|</span> <span class="nv">RE</span><span class="p">])</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nv">L</span> <span class="o">is</span> <span class="nv">X</span> <span class="o">+</span> <span class="nv">Diff</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">R</span> <span class="o">is</span> <span class="nv">X</span> <span class="o">-</span> <span class="nv">Diff</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">Diff1</span> <span class="o">is</span> <span class="nv">Diff</span> <span class="o">+</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">exclude_diag</span><span class="p">(</span><span class="nv">Diff1</span><span class="p">,</span> <span class="nv">T</span><span class="p">,</span> <span class="nv">RE</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">valid</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="nv">S</span><span class="p">,</span> <span class="nv">S</span><span class="p">).</span>
</span><span class='line'><span class="nf">valid</span><span class="p">(</span><span class="nv">Pos</span><span class="p">,</span> <span class="nv">Range</span><span class="p">,</span> <span class="nv">Sol</span><span class="p">,</span> <span class="nv">R</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">exclude_diag</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="nv">Sol</span><span class="p">,</span> <span class="nv">Excl</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">subtract</span><span class="p">(</span><span class="nv">Range</span><span class="p">,</span> <span class="nv">Excl</span><span class="p">,</span> <span class="nv">Poss</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">member</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Poss</span><span class="p">),</span>            <span class="c1">% pick one location</span>
</span><span class='line'>    <span class="nf">select</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Range</span><span class="p">,</span> <span class="nv">Rest</span><span class="p">),</span>     <span class="c1">% don&#39;t reuse it</span>
</span><span class='line'>    <span class="nv">Pos1</span> <span class="o">is</span> <span class="nv">Pos</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">valid</span><span class="p">(</span><span class="nv">Pos1</span><span class="p">,</span> <span class="nv">Rest</span><span class="p">,</span> <span class="p">[</span><span class="nv">X</span><span class="p">|</span><span class="nv">Sol</span><span class="p">],</span> <span class="nv">R</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">queens</span><span class="p">(</span><span class="nv">Max</span><span class="p">,</span> <span class="nv">Sol</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">make_range</span><span class="p">(</span><span class="nv">Max</span><span class="p">,</span> <span class="nv">Range</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">make_var</span><span class="p">(</span><span class="nv">Max</span><span class="p">,</span> <span class="nv">Sol</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">valid</span><span class="p">(</span><span class="nv">Max</span><span class="p">,</span> <span class="nv">Range</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Sol</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">%% Formatting predicates</span>
</span><span class='line'>
</span><span class='line'><span class="nf">format_board</span><span class="p">(</span><span class="nv">Max</span><span class="p">,</span> <span class="nv">In</span><span class="p">,</span> <span class="nv">Out</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">maplist</span><span class="p">(</span><span class="nf">format_line</span><span class="p">(</span><span class="nv">Max</span><span class="p">),</span> <span class="nv">In</span><span class="p">,</span> <span class="nv">Out</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">put_queen</span><span class="p">(</span><span class="nv">Pos</span><span class="p">,</span> <span class="nv">Pos</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="s-Atom">&#39;Q&#39;</span><span class="p">).</span>
</span><span class='line'><span class="nf">put_queen</span><span class="p">(</span><span class="nv">P1</span><span class="p">,</span> <span class="nv">P2</span><span class="p">,</span> <span class="nv">E</span><span class="p">,</span> <span class="nv">E</span><span class="p">)</span> <span class="p">:-</span> <span class="nv">P1</span> <span class="s-Atom">\=</span> <span class="nv">P2</span><span class="p">.</span>
</span><span class='line'><span class="nf">format_line</span><span class="p">(</span><span class="nv">Max</span><span class="p">,</span> <span class="nv">Pos</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">make_line</span><span class="p">(</span><span class="nv">Max</span><span class="p">,</span> <span class="s-Atom">&#39; &#39;</span><span class="p">,</span> <span class="nv">R</span><span class="p">),</span> <span class="nv">Prev</span> <span class="o">is</span> <span class="nv">Pos</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">take</span><span class="p">(</span><span class="nv">Prev</span><span class="p">,</span> <span class="nv">R</span><span class="p">,</span> <span class="nv">P</span><span class="p">,</span> <span class="p">[</span><span class="k">_</span><span class="p">|</span><span class="nv">S</span><span class="p">]),</span> <span class="nf">append</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="p">[</span><span class="s-Atom">&#39;Q&#39;</span><span class="p">|</span><span class="nv">S</span><span class="p">],</span> <span class="nv">L</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">%% Pretty Printer predicates</span>
</span><span class='line'>
</span><span class='line'><span class="nf">print_board</span><span class="p">(</span><span class="nv">B</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">length</span><span class="p">(</span><span class="nv">B</span><span class="p">,</span> <span class="nv">L</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">LL</span> <span class="o">is</span> <span class="nv">L</span> <span class="o">*</span> <span class="m">2</span> <span class="o">+</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">make_line</span><span class="p">(</span><span class="nv">LL</span><span class="p">,</span> <span class="s-Atom">&#39;-&#39;</span><span class="p">,</span> <span class="nv">LineSep</span><span class="p">),</span>
</span><span class='line'>    <span class="s-Atom">nl</span><span class="p">,</span> <span class="nf">print_list</span><span class="p">(</span><span class="nv">LineSep</span><span class="p">),</span> <span class="s-Atom">nl</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">maplist_</span><span class="p">(</span><span class="nf">print_line</span><span class="p">(</span><span class="nv">LineSep</span><span class="p">),</span> <span class="nv">B</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">print_line</span><span class="p">(</span><span class="nv">LineSep</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">print</span><span class="p">(</span><span class="s-Atom">&#39;|&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">maplist_</span><span class="p">(</span><span class="s-Atom">print_square</span><span class="p">,</span> <span class="nv">L</span><span class="p">),</span> <span class="s-Atom">nl</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">print_list</span><span class="p">(</span><span class="nv">LineSep</span><span class="p">),</span> <span class="s-Atom">nl</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">print_square</span><span class="p">(</span><span class="nv">S</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">print</span><span class="p">(</span><span class="nv">S</span><span class="p">),</span> <span class="nf">print</span><span class="p">(</span><span class="s-Atom">&#39;|&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">%% Toplevel predicate</span>
</span><span class='line'><span class="nf">run_queens</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">queens</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">S</span><span class="p">),</span> <span class="nf">format_board</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">S</span><span class="p">,</span> <span class="nv">B</span><span class="p">),</span> <span class="nf">print_board</span><span class="p">(</span><span class="nv">B</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With the utility predicates defined above, the code becomes fairly simple. It is divided into three groups:</p>

<ul>
<li>solver</li>
<li>formatting</li>
<li>pretty printer</li>
</ul>


<h4>Solver</h4>

<p>The solver is made of three predicates:</p>

<ul>
<li><code>queens/2</code></li>
<li><code>valid/4</code></li>
<li><code>exclude_diag/3</code></li>
</ul>


<p><code>queens</code> prepares the work: it generates the list of possible columns in <code>Range</code> (similar to the <code>fd_domain</code> predicate the book uses), and a list for the solutions in <code>Sol</code>. The actual solution is computed by <code>valid</code>.</p>

<p><code>valid</code> keeps a number of parameters:</p>

<ul>
<li><code>Pos</code> runs from <code>Max</code> to 0. When <code>Pos</code> is 0, it means we have a valid column for each row in <code>Sol</code>.</li>
<li><code>Range</code> is the currently available columns</li>
<li><code>Sol</code> is the columns of the queens in the rows above the current one</li>
<li>the last parameter is the actual solution. It is copied from <code>Sol</code> when <code>Pos</code> is 0.</li>
</ul>


<p>The logic to remove possible positions is the following:</p>

<ul>
<li>any selected column is removed from the <code>Range</code> for the rows below it</li>
<li>at each row, the diagonals of previous solutions is computed by <code>exclude_diag</code>, and removed from the <code>Range</code> only for the current row</li>
</ul>


<p>The <code>member(X, Poss)</code> clause is the core of the backtracking: from the list of not excluded columns, each element is selected, and then we try to fill the remaining rows by calling <code>valid</code> recursively. If there are no remaining columns, Prolog backtracks until the more recent <code>member(X, Poss)</code>. When <code>Poss</code> is exhausted, the backtracking continues up to the next most recent <code>member(X, Poss)</code>. So <code>member(X, Poss)</code> generates branching, and <code>valid</code> generally closes them (or finds a solution). The branching is limited as much as possible by the design of the solution, and <code>exclude_diag</code>.</p>

<p><code>exclude_diag</code> rely on a trick: let's say a queen has been put on column <code>C</code> in a given column. Then on the next row, it blocks the columns <code>C+1</code> and <code>C-1</code>. On the row to the below, it blocks the columns <code>C+2</code> and <code>C-2</code>. In other words, it blocks columns left and right its own by a number equal to the distance in rows.</p>

<p>So <code>exclude_diag</code> iterates over the existing solutions, keeping track of the difference in column in <code>Diff</code>, and collects the blocked diagonals.</p>

<p>And yes, <code>exclude_diag</code> could be written with <code>maplistidx</code> and <code>flatten</code>. This is left as an exercise to the reader.</p>

<p>With the code above, it is already possible to compute solutions. Here is a partial list of the 8 Queens boards:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>queens solver  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">queens</span><span class="p">(</span><span class="m">8</span><span class="p">,</span> <span class="nv">Sol</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Sol</span> <span class="o">=</span> <span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Sol</span> <span class="o">=</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Sol</span> <span class="o">=</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Sol</span> <span class="o">=</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Sol</span> <span class="o">=</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Sol</span> <span class="o">=</span> <span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">2</span><span class="p">]</span> <span class="s-Atom">?&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">(</span><span class="m">3</span> <span class="s-Atom">ms</span><span class="p">)</span> <span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and a complete list of the 4 Queens boards (there's only two):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>4 queens solutions  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">queens</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="nv">Sol</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Sol</span> <span class="o">=</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="s-Atom">a&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Sol</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Formatting Predicates</h4>

<p>The formatting predicates simply replace the basic solution with a list of lists, each representing a line of the board. Each cell is either a space for empty, or a 'Q' character for a queen.</p>

<p>There are 2 predicates:</p>

<ul>
<li><code>format_board/3</code></li>
<li><code>format_line/3</code></li>
</ul>


<p><code>format_board</code> applies <code>format_line</code> to each column.</p>

<p><code>format_line</code> make a empty line, then split it to insert the 'Q' at the right location.</p>

<h4>Pretty Printer</h4>

<p>The pretty printer predicates follow pretty much the same strategy as the pretty printer for Sudoku boards above.</p>

<p>There are 3 predicates:</p>

<ul>
<li><code>print_board/1</code></li>
<li><code>print_line/2</code></li>
<li><code>print_squares/1</code></li>
</ul>


<p>As the design is the same as the Sudoku pretty printer, it is not repeated here.</p>

<h4>Computing and printing solutions</h4>

<p>Finally, <code>run_queens</code> provide a top level predicate that computes then render each solution board. Here are the two boards from the 4 Queens problem:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>4 Queens boards  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">run_queens</span><span class="p">(</span><span class="m">4</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">hr</span> <span class="s-Atom">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2</span><span class="o">&gt;</span><span class="s-Atom">true</span> <span class="s-Atom">?</span> <span class="s-Atom">a&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">true&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">(</span><span class="m">1</span> <span class="s-Atom">ms</span><span class="p">)</span> <span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and the first two boards from the 8 Queens problem:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>8 Queens - first 2 boards  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">run_queens</span><span class="p">(</span><span class="m">8</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">hr</span> <span class="s-Atom">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">true</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">hr</span> <span class="s-Atom">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="nv">Q</span><span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">true</span> <span class="s-Atom">?&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">(</span><span class="m">2</span> <span class="s-Atom">ms</span><span class="p">)</span> <span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Wrapping up n Queens problem</h4>

<p>Given suitable utility predicates, the code to solve the n Queens problem (rather than just the 8 Queens problem) <em>without</em> the dedicated Finite Domain predicates is actually very short (slightly more than half is the formatting and pretty printer code).</p>

<p>The trick is to identify the best location for branching (the <code>member(X, Poss)</code> in <code>validate</code> above), and making sure the branching is as pruned as possible.</p>

<p>Prolog supports many other tricks (such at the cut <code>!</code> operator) to further constrain the search tree; and of course the availability of Finite Domain extensions add expressivity and power to an already powerful base.</p>

<h3>Improving Sudoku</h3>

<p>The code above is tied to the size of the board, and the list of constrains has to be written by hand (or using code outside Prolog). It does not have to be this way.</p>

<p>Using techniques similar to the n Queens solver, and a judicious combination of utility predicates, the list of constrains can be abstracted over.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Flexible Sudoku  (sudoku.pl)</span> <a href='/downloads/code/7l7w/prolog/sudoku.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nf">sudoku</span><span class="p">(</span><span class="nv">Puzzle</span><span class="p">,</span> <span class="nv">Solution</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nv">Solution</span> <span class="o">=</span> <span class="nv">Puzzle</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">length</span><span class="p">(</span><span class="nv">Solution</span><span class="p">,</span> <span class="nv">Len</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">Side</span> <span class="o">is</span> <span class="nf">floor</span><span class="p">(</span><span class="nf">sqrt</span><span class="p">(</span><span class="nv">Len</span><span class="p">)),</span>   <span class="c1">% side of the board</span>
</span><span class='line'>    <span class="nv">SH</span> <span class="o">is</span> <span class="nf">floor</span><span class="p">(</span><span class="nf">sqrt</span><span class="p">(</span><span class="nv">Side</span><span class="p">)),</span>    <span class="c1">% horizontal length of a Square</span>
</span><span class='line'>    <span class="nv">SV</span> <span class="o">is</span> <span class="nf">floor</span><span class="p">(</span><span class="nf">sqrt</span><span class="p">(</span><span class="nv">Side</span><span class="p">)),</span>    <span class="c1">% vertical length of a Square</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">sudoku_</span><span class="p">(</span><span class="nv">Len</span><span class="p">,</span> <span class="nv">Side</span><span class="p">,</span> <span class="nv">SH</span><span class="p">,</span> <span class="nv">SV</span><span class="p">,</span> <span class="nv">Puzzle</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sudoku_</span><span class="p">(</span><span class="nv">Len</span><span class="p">,</span> <span class="nv">Side</span><span class="p">,</span> <span class="nv">SH</span><span class="p">,</span> <span class="nv">SV</span><span class="p">,</span> <span class="nv">Puzzle</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">make_var</span><span class="p">(</span><span class="nv">Len</span><span class="p">,</span> <span class="nv">Puzzle</span><span class="p">),</span>      <span class="c1">% create the Puzzle list </span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">fd_domain</span><span class="p">(</span><span class="nv">Puzzle</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="nv">Side</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">chunk</span><span class="p">(</span><span class="nv">Side</span><span class="p">,</span> <span class="nv">Puzzle</span><span class="p">,</span> <span class="nv">Cols</span><span class="p">),</span>  <span class="c1">% split the Puzzle into columns</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">transpose</span><span class="p">(</span><span class="nv">Cols</span><span class="p">,</span> <span class="nv">Rows</span><span class="p">),</span>      <span class="c1">% transpose the columns into rows</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">make_squares</span><span class="p">(</span><span class="nv">SH</span><span class="p">,</span> <span class="nv">SV</span><span class="p">,</span> <span class="nv">Cols</span><span class="p">,</span> <span class="nv">Squares</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">concatenate</span><span class="p">([</span><span class="nv">Cols</span><span class="p">,</span> <span class="nv">Rows</span><span class="p">,</span> <span class="nv">Squares</span><span class="p">],</span> <span class="nv">Constrains</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">valid</span><span class="p">(</span><span class="nv">Constrains</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">fd_labeling</span><span class="p">(</span><span class="nv">Puzzle</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">valid</span><span class="p">([]).</span>
</span><span class='line'><span class="nf">valid</span><span class="p">([</span><span class="nv">Head</span><span class="p">|</span><span class="nv">Tail</span><span class="p">])</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">fd_all_different</span><span class="p">(</span><span class="nv">Head</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">valid</span><span class="p">(</span><span class="nv">Tail</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_squares</span><span class="p">(</span><span class="nv">SH</span><span class="p">,</span> <span class="nv">SV</span><span class="p">,</span> <span class="nv">Cols</span><span class="p">,</span> <span class="nv">Squares</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">maplist</span><span class="p">(</span><span class="nf">chunk</span><span class="p">(</span><span class="nv">SH</span><span class="p">),</span> <span class="nv">Cols</span><span class="p">,</span> <span class="nv">ColSplit</span><span class="p">),</span> <span class="c1">% split each line into SH long segments</span>
</span><span class='line'>    <span class="nf">transpose</span><span class="p">(</span><span class="nv">ColSplit</span><span class="p">,</span> <span class="nv">RowSplit</span><span class="p">),</span> <span class="c1">% transpose the result to process columns</span>
</span><span class='line'>    <span class="nf">maplist</span><span class="p">(</span><span class="nf">chunk</span><span class="p">(</span><span class="nv">SV</span><span class="p">),</span> <span class="nv">RowSplit</span><span class="p">,</span> <span class="nv">ListOfListOfSquares</span><span class="p">),</span> <span class="c1">% split each column into SV long segments</span>
</span><span class='line'>    <span class="nf">maplist</span><span class="p">(</span><span class="nf">maplist</span><span class="p">(</span><span class="s-Atom">concatenate</span><span class="p">),</span> <span class="nv">ListOfListOfSquares</span><span class="p">,</span> <span class="nv">ListOfSquares</span><span class="p">),</span> <span class="c1">% group the squares together into each column </span>
</span><span class='line'>    <span class="nf">concatenate</span><span class="p">(</span><span class="nv">ListOfSquares</span><span class="p">,</span> <span class="nv">Squares</span><span class="p">).</span> <span class="c1">% group all the columns together, so at to have a list of squares</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The new code is about the size of the original 4x4 Sudoku code from the book, and clearly shorter than the 9x9 Sudoku code above. Of course it hides some or the complexity in utility predicates, but that's what libraries are for.</p>

<p>Now the Sudoku solver can be used on the old 4x4 problem:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Testing new Sudoku solver on 4x4 problem  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nv">GNU</span> <span class="nv">Prolog</span> <span class="m">1</span><span class="p">.</span><span class="m">4</span><span class="p">.</span><span class="m">0</span>
</span><span class='line'><span class="nv">By</span> <span class="nv">Daniel</span> <span class="nv">Diaz</span>
</span><span class='line'><span class="nv">Copyright</span> <span class="p">(</span><span class="nv">C</span><span class="p">)</span> <span class="m">1999</span><span class="o">-</span><span class="m">2011</span> <span class="nv">Daniel</span> <span class="nv">Diaz</span>
</span><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">consult</span><span class="p">(</span><span class="s-Atom">&#39;utils&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">....</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">consult</span><span class="p">(</span><span class="s-Atom">&#39;sudoku&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">....</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">consult</span><span class="p">(</span><span class="s-Atom">&#39;sudoku_print&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">....</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">sudoku</span><span class="p">([</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">pre&gt;&lt;code</span><span class="o">&gt;</span>         <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>         <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>         <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">],</span>
</span><span class='line'>         <span class="nv">Solution</span><span class="p">),</span> <span class="nf">sudoku_print</span><span class="p">(</span><span class="nv">Solution</span><span class="p">).</span>
</span><span class='line'><span class="s-Atom">&lt;/code&gt;&lt;/pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">hr</span> <span class="s-Atom">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">4</span> <span class="m">1</span> <span class="p">|</span><span class="m">2</span> <span class="m">3</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">2</span> <span class="m">3</span> <span class="p">|</span><span class="m">4</span> <span class="m">1</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">1</span> <span class="m">2</span> <span class="p">|</span><span class="m">3</span> <span class="m">4</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">3</span> <span class="m">4</span> <span class="p">|</span><span class="m">1</span> <span class="m">2</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Solution</span> <span class="o">=</span> <span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="s-Atom">a&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>as well as on 8x8 (hard) problems:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Testing new Sudoku solver on 8x8 problem  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">sudoku</span><span class="p">([</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span> <span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">pre&gt;&lt;code</span><span class="o">&gt;</span>    <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">_</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span>
</span><span class='line'>    <span class="m">5</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span>
</span><span class='line'>    <span class="m">4</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">,</span> <span class="k">_</span><span class="p">],</span>
</span><span class='line'>   <span class="nv">Solution</span><span class="p">),</span> <span class="nf">sudoku_print</span><span class="p">(</span><span class="nv">Solution</span><span class="p">).</span>
</span><span class='line'><span class="s-Atom">&lt;/code&gt;&lt;/pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">hr</span> <span class="s-Atom">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">8</span> <span class="m">5</span> <span class="m">4</span> <span class="p">|</span><span class="m">2</span> <span class="m">1</span> <span class="m">9</span> <span class="p">|</span><span class="m">7</span> <span class="m">6</span> <span class="m">3</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span><span class="m">3</span> <span class="m">9</span> <span class="m">7</span> <span class="p">|</span><span class="m">8</span> <span class="m">6</span> <span class="m">5</span> <span class="p">|</span><span class="m">4</span> <span class="m">2</span> <span class="m">1</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">2</span> <span class="m">6</span> <span class="m">1</span> <span class="p">|</span><span class="m">4</span> <span class="m">7</span> <span class="m">3</span> <span class="p">|</span><span class="m">9</span> <span class="m">8</span> <span class="m">5</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">7</span> <span class="m">8</span> <span class="m">5</span> <span class="p">|</span><span class="m">1</span> <span class="m">2</span> <span class="m">6</span> <span class="p">|</span><span class="m">3</span> <span class="m">9</span> <span class="m">4</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span><span class="m">6</span> <span class="m">4</span> <span class="m">9</span> <span class="p">|</span><span class="m">5</span> <span class="m">3</span> <span class="m">8</span> <span class="p">|</span><span class="m">1</span> <span class="m">7</span> <span class="m">2</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">1</span> <span class="m">3</span> <span class="m">2</span> <span class="p">|</span><span class="m">9</span> <span class="m">4</span> <span class="m">7</span> <span class="p">|</span><span class="m">8</span> <span class="m">5</span> <span class="m">6</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">|</span><span class="m">9</span> <span class="m">2</span> <span class="m">6</span> <span class="p">|</span><span class="m">3</span> <span class="m">8</span> <span class="m">4</span> <span class="p">|</span><span class="m">5</span> <span class="m">1</span> <span class="m">7</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span><span class="m">5</span> <span class="m">1</span> <span class="m">3</span> <span class="p">|</span><span class="m">7</span> <span class="m">9</span> <span class="m">2</span> <span class="p">|</span><span class="m">6</span> <span class="m">4</span> <span class="m">8</span> <span class="p">|</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">h2&gt;</span><span class="p">|</span><span class="m">4</span> <span class="m">7</span> <span class="m">8</span> <span class="p">|</span><span class="m">6</span> <span class="m">5</span> <span class="m">1</span> <span class="p">|</span><span class="m">2</span> <span class="m">3</span> <span class="m">9</span> <span class="p">|</span><span class="s-Atom">&lt;/h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">Solution</span> <span class="o">=</span> <span class="p">[</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">9</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="s-Atom">a&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">(</span><span class="m">1</span> <span class="s-Atom">ms</span><span class="p">)</span> <span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Wrapping Day 3 and Prolog</h2>

<p>I really enjoyed coding in Prolog again. Backtracking is a powerful mechanism which allows clear and concise descriptions of some problems. And I can feel that there is yet a more interesting language lurking just beyond my current understanding.</p>

<p>The book gives a fair account of Prolog strengths and weaknesses. While I see little to no use for it in my daily activities, I wished my copy of "The Art of Prolog" was not on another continent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Languages in Seven Weeks Prolog Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/10/23/seven-languages-in-seven-weeks-prolog-day-2/"/>
    <updated>2011-10-23T23:10:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/10/23/seven-languages-in-seven-weeks-prolog-day-2</id>
    <content type="html"><![CDATA[<p>The second day with Prolog is about the main data structure (the list) and the writing of rules.</p>

<!--more-->


<h3>Lists</h3>

<p>Lists in Prolog are just the same as in Lisp: either empty, or a pair with the head (a single element) and the rest of the list:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Lists in Prolog  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span> <span class="o">=</span> <span class="nv">L</span><span class="p">.</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">].</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">H</span> <span class="o">=</span> <span class="m">1</span>
</span><span class='line'><span class="nv">T</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">E1</span><span class="p">|[</span><span class="nv">E2</span><span class="p">|</span><span class="nv">T</span><span class="p">]].</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">E1</span> <span class="o">=</span> <span class="m">1</span>
</span><span class='line'><span class="nv">E2</span> <span class="o">=</span> <span class="m">2</span>
</span><span class='line'><span class="nv">T</span> <span class="o">=</span> <span class="p">[</span><span class="m">3</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">E1</span><span class="p">,</span> <span class="nv">E2</span><span class="p">,</span> <span class="nv">E3</span><span class="p">].</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">E1</span> <span class="o">=</span> <span class="m">1</span>
</span><span class='line'><span class="nv">E2</span> <span class="o">=</span> <span class="m">2</span>
</span><span class='line'><span class="nv">E3</span> <span class="o">=</span> <span class="m">3</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Rules</h3>

<p>Rules are superficially similar to the definition of functions in functional languages (especially <a href="http://www.erlang.org/">Erlang</a>), but the similarity is treacherous. In both, rules or functions can have multiple definitions, each with different patterns; in both, the pattern must match for the rules to fire or the function to be executed; but in functional languages, only the body of the first matching pattern will be executed, whereas in Prolog all the matching patterns can fire (there are ways to control that, but they are not covered in this book).</p>

<p>Another way in which they differ is that they do not return a value: whatever they return must be unified against one of the parameters. While this might appear clumsy, it has a significant benefit: rules can relate parameters in more than one direction (see the section 'Using Rules in Both Directions' in the book). Consider this:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Rules invocation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">length</span><span class="p">([</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">],</span> <span class="nv">L</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="m">3</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">length</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="m">3</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="k">_</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first query is a typical invocation; the second ask what a list of length 3 might look like. Rules do not always support such multiple interpretations, and it is not always easy to know which does. But writing such rules is like writing functions that handle infinite data structure in Haskell: a necessary step on the way from superficial knowledge of the language to deeper understanding.</p>

<p>The second answer is a list of 3, unbound variables. Combined with other rules,</p>

<p>Sometimes the alternative interpretation is unbounded. Consider <a href="http://www.gprolog.org/manual/gprolog.html#htoc209"><code>member</code></a>:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>member invocation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">member</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">X</span> <span class="o">=</span> <span class="m">1</span> <span class="s-Atom">?</span> <span class="s-Atom">a&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">X</span> <span class="o">=</span> <span class="m">2</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">X</span> <span class="o">=</span> <span class="m">3</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">member</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">|</span><span class="k">_</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="m">1</span><span class="p">|</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="m">1</span><span class="p">|</span><span class="k">_</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="m">1</span><span class="p">|</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="m">1</span><span class="p">|</span><span class="k">_</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="m">1</span><span class="p">|</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="m">1</span><span class="p">|</span><span class="k">_</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="m">1</span><span class="p">|</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">]</span> <span class="s-Atom">?&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first query will match for each element (3 in total), as <code>X</code> is unconstrained. But the second query tries to find what a list that contains 1 look like; obviously there is an infinite number of such list (so I aborted the query after the 8 first answers).</p>

<p>I could constrain the list in different ways, for instance:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Constrained member invocation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">length</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="m">3</span><span class="p">),</span> <span class="nf">member</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="s-Atom">a&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="m">1</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or more interestingly, querying the sublists of length 3 of another list:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sublists of length 3  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">length</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="m">3</span><span class="p">),</span> <span class="nf">sublist</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">]).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="s-Atom">a&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">5</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">5</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">5</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Now, if you have read the book already past Prolog Day 3, think about what the kind of code above could have done to reduce the list of variables.</p>

<h3>Higher-order Rules</h3>

<p>Prolog would be a very limited language without a way to build queries from individual components. Fortunately, it comes  with a number of predicates that let you do just that.</p>

<p><a href="http://www.gprolog.org/manual/gprolog.html#htoc67"><code>call</code></a> is one such predicates, and it is fairly powerful.</p>

<p>The most basic invocation just specifies the target predicate, then the arguments, each as a separate argument to <code>call</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>call invocation </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">call</span><span class="p">(</span><span class="s-Atom">length</span><span class="p">,</span> <span class="nv">L</span><span class="p">,</span> <span class="m">3</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="k">_</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Passing the predicate as a atom via a variable is also supported:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dynamic predicate invocation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nv">P</span> <span class="o">=</span> <span class="s-Atom">length</span><span class="p">,</span> <span class="nf">call</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">L</span><span class="p">,</span> <span class="m">3</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="k">_</span><span class="p">]</span>
</span><span class='line'><span class="nv">P</span> <span class="o">=</span> <span class="s-Atom">length&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The actual predicate could come from even stranger places:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dynamic predicate computation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">member</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="p">[</span><span class="s-Atom">length</span><span class="p">]),</span> <span class="nf">call</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">L</span><span class="p">,</span> <span class="m">3</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="s-Atom">em&gt;</span><span class="p">,</span><span class="s-Atom">&lt;/em&gt;</span><span class="p">,</span><span class="k">_</span><span class="p">]</span>
</span><span class='line'><span class="nv">P</span> <span class="o">=</span> <span class="s-Atom">length&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, <code>call</code> supports a kind of currying (partial application): the first argument can specify it's first parameters:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dynamic predicate computation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">member</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="p">[</span><span class="nf">member</span><span class="p">(</span><span class="s-Atom">x</span><span class="p">),</span> <span class="nf">member</span><span class="p">(</span><span class="s-Atom">y</span><span class="p">)]),</span> <span class="nf">length</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="m">2</span><span class="p">),</span> <span class="nf">call</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="s-Atom">x</span><span class="p">,</span><span class="k">_</span><span class="p">]</span>
</span><span class='line'><span class="nv">P</span> <span class="o">=</span> <span class="nf">member</span><span class="p">(</span><span class="s-Atom">x</span><span class="p">)</span> <span class="s-Atom">?</span> <span class="s-Atom">a&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="k">_</span><span class="p">,</span><span class="s-Atom">x</span><span class="p">]</span>
</span><span class='line'><span class="nv">P</span> <span class="o">=</span> <span class="nf">member</span><span class="p">(</span><span class="s-Atom">x</span><span class="p">)</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="s-Atom">y</span><span class="p">,</span><span class="k">_</span><span class="p">]</span>
</span><span class='line'><span class="nv">P</span> <span class="o">=</span> <span class="nf">member</span><span class="p">(</span><span class="s-Atom">y</span><span class="p">)</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="k">_</span><span class="p">,</span><span class="s-Atom">y</span><span class="p">]</span>
</span><span class='line'><span class="nv">P</span> <span class="o">=</span> <span class="nf">member</span><span class="p">(</span><span class="s-Atom">y</span><span class="p">)</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here <code>P</code> is unified with two partially applied predicates, <code>member(x)</code> and <code>member(y)</code>. Then each is applied to a list of length 2. Note that backtracking works across <code>call</code>.</p>

<p>As a side note: a predicate followed by a list of arguments (either variables or atoms or other valid Prolog values) is called a structure. It is a kind of names tuple. In a Prolog file, it can be used to define facts. At the Prolog prompt, it can be used to run queries. But it can also be used as generic data structure, or as argument to <code>call</code> and similar functions.</p>

<h2>Exercises</h2>

<p>After the preamble above, the exercises won't be too taxing.</p>

<h3>Hanoi Tower</h3>

<p>This was not exactly an exercise, but the implementation is really simple. It doesn't take too long to come up with a recursive algorithm (and for those who really can't, check the Wikipedia <a href="http://en.wikipedia.org/wiki/Tower_of_Hanoi">page</a>):</p>

<ul>
<li>to move one disk from a peg to another, just do it;</li>
<li>to move a stack of disks from one peg to a second one, first move all but the last disk to the third peg, move the last disk to the second peg, then move all the disks previously moved from third to second.</li>
</ul>


<p>A translation in Prolog is equally simple:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Hanoi Tower  (hanoi.pl)</span> <a href='/downloads/code/7l7w/prolog/hanoi.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nf">hanoi</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">move</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="s-Atom">left</span><span class="p">,</span> <span class="s-Atom">right</span><span class="p">,</span> <span class="s-Atom">center</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">move</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="nv">P1</span><span class="p">,</span> <span class="nv">P2</span><span class="p">,</span> <span class="k">_</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">move_one</span><span class="p">(</span><span class="nv">P1</span><span class="p">,</span> <span class="nv">P2</span><span class="p">).</span>
</span><span class='line'><span class="nf">move</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">P1</span><span class="p">,</span> <span class="nv">P2</span><span class="p">,</span> <span class="nv">P3</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nv">N</span> <span class="o">&gt;</span> <span class="m">1</span><span class="p">,</span> <span class="nv">N1</span> <span class="o">is</span> <span class="nv">N</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">move</span><span class="p">(</span><span class="nv">N1</span><span class="p">,</span> <span class="nv">P1</span><span class="p">,</span> <span class="nv">P3</span><span class="p">,</span> <span class="nv">P2</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">move</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="nv">P1</span><span class="p">,</span> <span class="nv">P2</span><span class="p">,</span> <span class="nv">P3</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">move</span><span class="p">(</span><span class="nv">N1</span><span class="p">,</span> <span class="nv">P3</span><span class="p">,</span> <span class="nv">P2</span><span class="p">,</span> <span class="nv">P1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">move_one</span><span class="p">(</span><span class="nv">P1</span><span class="p">,</span> <span class="nv">P2</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">format</span><span class="p">(</span><span class="s2">&quot;Move disk from ~k to ~k&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">P1</span><span class="p">,</span> <span class="nv">P2</span><span class="p">]),</span> <span class="s-Atom">nl</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It should be easy to match the algorithm to the implementation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Testing Hanoi implementation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">hanoi</span><span class="p">(</span><span class="m">3</span><span class="p">).</span>
</span><span class='line'><span class="nv">Move</span> <span class="s-Atom">disk</span> <span class="s-Atom">from</span> <span class="s-Atom">left</span> <span class="s-Atom">to</span> <span class="s-Atom">right</span>
</span><span class='line'><span class="nv">Move</span> <span class="s-Atom">disk</span> <span class="s-Atom">from</span> <span class="s-Atom">left</span> <span class="s-Atom">to</span> <span class="s-Atom">center</span>
</span><span class='line'><span class="nv">Move</span> <span class="s-Atom">disk</span> <span class="s-Atom">from</span> <span class="s-Atom">right</span> <span class="s-Atom">to</span> <span class="s-Atom">center</span>
</span><span class='line'><span class="nv">Move</span> <span class="s-Atom">disk</span> <span class="s-Atom">from</span> <span class="s-Atom">left</span> <span class="s-Atom">to</span> <span class="s-Atom">right</span>
</span><span class='line'><span class="nv">Move</span> <span class="s-Atom">disk</span> <span class="s-Atom">from</span> <span class="s-Atom">center</span> <span class="s-Atom">to</span> <span class="s-Atom">left</span>
</span><span class='line'><span class="nv">Move</span> <span class="s-Atom">disk</span> <span class="s-Atom">from</span> <span class="s-Atom">center</span> <span class="s-Atom">to</span> <span class="s-Atom">right</span>
</span><span class='line'><span class="nv">Move</span> <span class="s-Atom">disk</span> <span class="s-Atom">from</span> <span class="s-Atom">left</span> <span class="s-Atom">to</span> <span class="s-Atom">right&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">true</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">no</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Not expressions</h3>

<p>Prolog cannot handle not expressions properly. Fundamentally, all it can say is whether a query can be proven to true. If it says no, it just means it could not be proven true, which is slightly different from being proven false.</p>

<p>Because Prolog is a Turing complete language, it could also fail to return an answer to a specific query, meaning either the query is false, or it just needs a bit more time to be proven true...</p>

<p>There are newer languages (<a href="http://coq.inria.fr/">Coq</a> for instance) that were designed as not Turing complete (which makes them interesting. Anybody can invent a Turing complete language. It takes far more work to come up with a useful language that isn't complete), and can handle not expressions over larger logic domains.</p>

<h3>Reverse elements in a list</h3>

<p>I am using an accumulator to build the reverse. Note that in Prolog, predicates have a specific number of arguments called the predicate arity. Predicates with the same name but different arity are different predicates. In the solution below, I have two predicates: <code>my_reverse/2</code> and <code>my_reverse/3</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>my_reverse  (reverse.pl)</span> <a href='/downloads/code/7l7w/prolog/reverse.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nf">my_reverse</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">compound</span><span class="p">(</span><span class="nv">R</span><span class="p">),</span> <span class="p">!,</span> <span class="nf">my_reverse</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span>
</span><span class='line'><span class="nf">my_reverse</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">my_reverse</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">my_reverse</span><span class="p">([],</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">A</span><span class="p">).</span>
</span><span class='line'><span class="nf">my_reverse</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">R</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">my_reverse</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">R</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">A</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let's ignore the first line for a moment. <code>my_reverse/2</code> invokes <code>my_reverse/3</code>, passing an empty accumulator. <code>my_reverse/3</code> just iterates over the element of the list, adding them to the accumulator. When it runs out of element, the accumulator becomes the result.</p>

<p>First, the code works for at least the basic case:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>my_reverse, basic case  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">my_reverse</span><span class="p">([</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">],</span> <span class="nv">R</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>More interestingly, the code also works when the parameters are both variables, or partially defined lists:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>my_reverse, undefined or partially defined parameters  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">my_reverse</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="nv">A</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">A</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="nv">A</span><span class="p">,</span><span class="nv">B</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">B</span><span class="p">,</span><span class="nv">A</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="nv">A</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">C</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">C</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">A</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="nv">A</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">C</span><span class="p">,</span><span class="nv">D</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">D</span><span class="p">,</span><span class="nv">C</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">A</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="nv">A</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">C</span><span class="p">,</span><span class="nv">D</span><span class="p">,</span><span class="nv">E</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">E</span><span class="p">,</span><span class="nv">D</span><span class="p">,</span><span class="nv">C</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">A</span><span class="p">]</span> <span class="s-Atom">?&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">|</span><span class="k">_</span><span class="p">],</span> <span class="nf">my_reverse</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="nv">A</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">A</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">B</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">B</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">C</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">C</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">C</span><span class="p">,</span><span class="nv">D</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">D</span><span class="p">,</span><span class="nv">C</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">C</span><span class="p">,</span><span class="nv">D</span><span class="p">,</span><span class="nv">E</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="nv">E</span><span class="p">,</span><span class="nv">D</span><span class="p">,</span><span class="nv">C</span><span class="p">,</span><span class="nv">B</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p&gt;</span><span class="p">(</span><span class="m">1</span> <span class="s-Atom">ms</span><span class="p">)</span> <span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first query just states that both lists are reverse of each other, but does not mention any content. There is an infinite number of such list, and the code dutifully return them in order; the fresh variables used as elements for the first list are indeed in reverse order in the second.</p>

<p>The second query specifies a prefix, but not the end of the first parameter. Once again, there is an infinite number of possible answers, a few of which are shown above.</p>

<p>Now back to the first line in the definition: the code checks if the second parameter is <a href="http://www.gprolog.org/manual/gprolog.html#htoc71"><code>compound</code></a>, in other word if it is at least partially defined. This is to make the following query work:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>my_reverse, reversed parameters  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">my_reverse</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Without this line, the first result would be returned, but then Prolog would hang looking for a second (non existing) result. I must admit I do not fully understand why (rules with multiple interpretations are complex to design). I also make sure this rule is the only one to match but using the cut <code>!</code> operator: once the rule has started to match, any backtracking that could have happened in this rule is <em>cut</em>. In other words, the second pattern will not match, even though it could.</p>

<p>Backtracking introduced by previous rules is still available:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>cut and backtracking  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span> <span class="nf">member</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">],</span> <span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">]]),</span> <span class="nf">my_reverse</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">L</span><span class="p">).</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">]</span> <span class="s-Atom">?</span> <span class="p">;</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">]</span>
</span><span class='line'><span class="nv">R</span> <span class="o">=</span> <span class="p">[</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">]</span><span class="s-Atom">&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="s-Atom">p</span><span class="o">&gt;</span><span class="s-Atom">yes</span>
</span><span class='line'><span class="p">|</span> <span class="s-Atom">?-</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here, the <code>member</code> clause can backtrack over the two elements; the cut in <code>my_reverse</code> does not prevent it.</p>

<h3>The smallest element in a list</h3>

<p>This time the code is not fancy at all. Using arithmetic operators (such as min) tends to constraint the code in a way that prevent fancy use (as in <code>my_reverse</code> above). So <code>my_min</code> does what it needs to do as simply as possible:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>my_min  (min.pl)</span> <a href='/downloads/code/7l7w/prolog/min.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nf">my_min</span><span class="p">([</span><span class="nv">M</span><span class="p">],</span> <span class="nv">M</span><span class="p">).</span>
</span><span class='line'><span class="nf">my_min</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">M</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">my_min</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">M1</span><span class="p">),</span> <span class="nv">M</span> <span class="o">is</span> <span class="nf">min</span><span class="p">(</span><span class="nv">H</span><span class="p">,</span> <span class="nv">M1</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Either there's only one element in the list, and this is the minimum, or the minimum of a list is the minimum between the first element of the list, and the minimum of the rest of the list.</p>

<h3>Sort the elements of a list</h3>

<p>For this exercise, I will use the insert sort. Slow but easy. Faster implementations are provided as standard predicates in decent Prologs anyway.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>, my_sort  (sort.pl)</span> <a href='/downloads/code/7l7w/prolog/sort.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nf">my_sort</span><span class="p">([],</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">my_sort</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">S2</span><span class="p">)</span> <span class="p">:-</span> <span class="nf">my_sort</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">S1</span><span class="p">),</span> <span class="nf">my_insert</span><span class="p">(</span><span class="nv">H</span><span class="p">,</span> <span class="nv">S1</span><span class="p">,</span> <span class="nv">S2</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">my_insert</span><span class="p">(</span><span class="nv">H</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[</span><span class="nv">H</span><span class="p">]).</span>
</span><span class='line'><span class="nf">my_insert</span><span class="p">(</span><span class="nv">H</span><span class="p">,</span> <span class="p">[</span><span class="nv">S1</span><span class="p">|</span><span class="nv">S1T</span><span class="p">],</span> <span class="p">[</span><span class="nv">H</span><span class="p">|[</span><span class="nv">S1</span><span class="p">|</span><span class="nv">S1T</span><span class="p">]])</span> <span class="p">:-</span> <span class="nv">H</span> <span class="o">=&lt;</span> <span class="nv">S1</span><span class="p">.</span>
</span><span class='line'><span class="nf">my_insert</span><span class="p">(</span><span class="nv">H</span><span class="p">,</span> <span class="p">[</span><span class="nv">S1</span><span class="p">|</span><span class="nv">S1T</span><span class="p">],</span> <span class="p">[</span><span class="nv">S1</span><span class="p">|</span><span class="nv">S1T2</span><span class="p">])</span> <span class="p">:-</span> <span class="nv">H</span> <span class="o">&gt;</span> <span class="nv">S1</span><span class="p">,</span> <span class="nf">my_insert</span><span class="p">(</span><span class="nv">H</span><span class="p">,</span> <span class="nv">S1T</span><span class="p">,</span> <span class="nv">S1T2</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once again, nothing fancy: the empty list is already sorted; to sort a larger list, sort the tail of the list, then insert the head at the right position.</p>

<p>To insert an element in a sorted list, if the list is empty, then the singleton list with that element is the answer. Otherwise, compare the element to the head: if smaller, the element is prefixed as new head of the list; otherwise, insert the element in the rest of the list.</p>

<h2>Wrapping up Day 2</h2>

<p>As I mentioned <a href="/blog/2011/10/23/seven-languages-in-seven-weeks-prolog-day-1">yesterday</a>, Prolog really is different. I suspect many readers among those who had no previous exposure to this language must have been left rather confused. The problem is that Prolog introduces a lot of features (unification, pattern matching, backtracking) that are unusual in mainstream languages. Perhaps a different order in the languages (Erlang first?) would have helped assimilate some of these features before tackling backtracking.</p>
]]></content>
  </entry>
  
</feed>
