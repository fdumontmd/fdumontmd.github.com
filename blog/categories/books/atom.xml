<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2012-02-10T20:03:17+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Psychic Modeling]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/10/psychic-modeling/"/>
    <updated>2012-02-10T12:26:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/10/psychic-modeling</id>
    <content type="html"><![CDATA[<p>In the <a href="http://www.algorist.com/">Algorithm Design Manual</a>, Stephen
Skiena entertains, edifies and educates his readers with so called
"War Stories", that is, interesting implementation challenges from his
own experience.</p>

<p>The first War Story is
<a href="http://www8.cs.umu.se/kurser/TDBAfl/VT06/algorithms/BOOK/BOOK/NODE19.HTM">Psychic Modeling</a>,
an attempt to exploit "precognition" to improve the chances of winning
the lottery.</p>

<!-- more -->


<p>This war story is also the subject of one of the first implementation
projects. In chapter 1.  A few years ago, when I bought the book, I
had easily solved the previous exercises, but then I reached this
implementation project, and I got stuck. I could not even get a
high level sketch of what a solution would look like.</p>

<p>Certainly, if I was unable to solve an exercise of the first chapter
of this book, it was hopelessly beyond my reach...</p>

<p>Still, I had the ambition of one day resuming my reading, and I would
from time to time give this problem another attempt.</p>

<p>Recently, it feels like all the pieces finally fell into places, and
after a few hours of coding I had an (naive) implementation. Yet I
still have doubts, as the only reference I have to compare my solution
with, Skiena's own paper
(<a href="http://www.cs.sunysb.edu/~skiena/papers/lotto.doc">Randomized Algorithms for Identifying Minimal Lottery Ticket Sets</a>),
apparently is worse (in terms of necessary tickets) than my solution...</p>

<p>Note on this paper: unfortunately it is in Word format, and I found
that some characters are not properly displayed on non MS Word text
processing tools (such as Open Office). So you might have to open it
with MS Word or MS Word Viewer.</p>

<h3>The problem</h3>

<p>I will use the notation from the book rather than the paper. The
problem is defined as this:</p>

<ul>
<li>a lottery ticket has $k$ numbers</li>
<li>a win requires $j$ numbers from the winning ticket</li>
<li>the psychic visualises $n$ numbers</li>
<li>of which $j$ are "guaranteed" to be on the winning ticket.</li>
</ul>


<h3>Defining "sufficient coverage"</h3>

<p>A first difference between the paper's approach and mine is that I'm
using the notion of coverage size rather than distance: I measure how
similar two subsets are by defining their cover as the size of their
intersection; in their paper the authors use a notion of distance defined as
the size of the difference of the two subsets (perhaps to help with
the design of heuristics in the backtracking version of their algorithm).</p>

<p>Now, clearly the two approaches are equivalent; it is less clear that
the formulas derived from either are indeed the same.</p>

<p>For a given $j$-subset, how many $j$-subsets have a coverage of at
least $l$ with the first one? The covered $j$-subsets must have at
least $l$ numbers (between $l$ and $j$, to be precise) in common with
the first one, and the rest taken from the $n-j$ other numbers. This gives</p>

<div markdown="0">
\begin{align}
\sum_{l \le i \le j} \binom{j}{i} \binom{n-j}{j-i}
\end{align}
</div>


<p>For a given $j$-subset, how many $j$-subsets are within $j-l$ distance
of the first one? We can choose at most $j-l$ numbers out of the $n-j$
rest; and complete with numbers from the first subset. This gives</p>

<div markdown="0">
\begin{align}
\sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{j-i} = \sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{i}
\end{align}
</div>


<p>It took me a while to confirm it, but the formulas are indeed the
same:</p>

<div markdown="0">
\begin{align}
\sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{i} &amp; = \sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{j-i}\\\\
&amp; = \sum_{l-j \le i \le 0} \binom{n-j}{-i} \binom{j}{j+i}&amp;&amp;\text{changing the sign of \(i\)}\\\\
&amp; = \sum_{l \le j+i \le j} \binom{n-j}{-i} \binom{j}{j+i}\\\\
&amp; = \sum_{l \le i \le j} \binom{n-j}{j-i} \binom{j}{i}&amp;&amp;\text{replacing \(j+i\) by \(i\)}\\\\
\end{align}
</div>


<h3>Size of a ticket</h3>

<p>Note that I do not use the $k$ size of a ticket. In fact, in my
original design, I used it but ignored $j$; reading the paper I
realised that $j$ was indeed critical: one of the $j$-subsets will be
on the winning ticket, so they are the ones we need to cover. However,
I could not understand why the paper did not use the potentially
larger size of a ticket to cover more $j$-subsets.</p>

<p>Restated with a complete ticket, the coverage formula becomes</p>

<div markdown="0">
\begin{align}
\sum_{l \le i \le j} \binom{k}{i} \binom{n-k}{j-i}
\end{align}
</div>


<p>This apparent small change actually reduces the lower bound of the
necessary tickets significantly. For $n=15$, $k=6$, $j=5$, $l=4$, for
instance, will the paper offers as a lower bound $58$, the formula
above gives $22$.</p>

<p>So the question is: is it valid to use the possibly larger value $k$
when generating tickets? I could not think of any reason not too, and
if I'm right, this gives each ticket a much larger cover, and
therefore a lower number of necessary tickets.</p>

<h2>Implementation</h2>

<p>For a first effort, I chose to code in Haskell, and favoured simplicity
over speed. The code is indeed both simple, and wasteful, but Moore's
Law says that computers have become about 1000 times faster since the
time the paper was written, so I have some margin.</p>

<p>To keep things simple, sets and subsets are just lists.</p>

<h3>Support functions</h3>

<p>Such functions ought to belong to a dedicated library (and perhaps
they do); I include them to keep the implementation mostly
self-contained.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Support functions  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fact</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">product</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'><span class="nf">combi</span> <span class="n">n</span> <span class="n">c</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fact</span> <span class="n">n</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">div</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">fact</span> <span class="n">c</span> <span class="o">*</span> <span class="n">fact</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">c</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">remainingNumbers</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="n">union</span> <span class="kt">[]</span> <span class="n">js</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>fact</code> is just the factorial; <code>combi</code> computes the binomial
coefficient, and <code>remainingNumbers</code> is just the union of all the
passed $j$-subsets.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Generating Combinations  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">genCombi</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="n">k</span> <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">=</span> <span class="p">[</span><span class="n">l</span><span class="kt">:</span><span class="n">cs</span> <span class="o">|</span> <span class="n">cs</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">genCombi</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">ls</span><span class="p">]</span> <span class="o">++&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                <span class="n">genCombi</span> <span class="n">k</span> <span class="n">ls</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>genCombi k s</code> generates the $k$-subsets of $s$.</p>

<h3>Lower Bound Estimate</h3>

<p>These are simple implementations of the formula above.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Lower Bound Estimates  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="n">sum</span> <span class="p">[</span> <span class="p">(</span><span class="n">combi</span> <span class="n">k</span> <span class="n">i</span><span class="p">)</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                        <span class="p">(</span><span class="n">combi</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">)</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="p">))</span> <span class="o">|</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="p">[</span><span class="n">l</span><span class="o">..</span><span class="n">j</span><span class="p">]]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">lowerBound</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">combi</span> <span class="n">n</span> <span class="n">j</span><span class="p">)</span> <span class="o">/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                 <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>ticketCover</code> just implements the coverage estimate I defined above
(the one that uses $k$); <code>lowerBound</code> computes the lower bound for a
single win.</p>

<h3>Coverage</h3>

<p>As stated above, I define the cover between two subsets as the size of
their intersection, and define sufficient coverage as the cover being
larger than $l$.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Defining Coverage  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">cover</span> <span class="n">l1</span> <span class="n">l2</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">intersect</span> <span class="n">l1</span> <span class="n">l2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="ow">=</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'><span class="nf">notCoveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">notCoveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span><span class='line'><span class="nf">notCoveredBatch</span> <span class="n">l</span> <span class="n">ts</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="n">notCovered</span> <span class="n">l</span><span class="p">)</span> <span class="n">js</span> <span class="n">ts</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>cover</code> implements the cover definition; <code>coveredP</code> and <code>notCoveredP</code>
are predicates that check for (or against) sufficient coverage.</p>

<p><code>notCovered</code> and <code>notCoveredBatch</code> computes the subsets that are not covered by a single ticket or a set
of tickets, respectively; they are used to compute what is left to
cover after selecting a ticket, and to check solutions.</p>

<p>Finally <code>coverageScore</code> computes the size of of the covered subsets by
a ticket. This function is used to compare potential tickets and
select the one with the best (i.e. largest) coverage.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Checking the estimates  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">checkFormula</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">candidates</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">ticket</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>  <span class="n">covered</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">ticket</span><span class="p">)</span> <span class="n">candidates</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kr">in</span> <span class="n">length</span> <span class="n">covered</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>checkFormula</code> computes the size of the coverage of a single ticket;
it can be used to confirm the value of <code>ticketCover</code> above (and as far
as I can tell from my checks, it does).</p>

<h3>Solution Loop</h3>

<p>The solution loop takes the parameters and a ticket candidate
generating function; it then gets one ticket at a time, computes the
$j$-subsets not covered yet, and repeat until the remaining
$j$-subsets set becomes empty.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Solution Loop  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">solve</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">gc</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">jtuples</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">loop</span> <span class="n">jtuples</span>
</span><span class='line'> <span class="kr">where</span> <span class="n">loop</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="n">loop</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>     <span class="n">t</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">gc</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span>
</span><span class='line'>     <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">loop</span> <span class="o">$</span> <span class="n">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span>
</span><span class='line'>     <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">ts</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>solve</code> function expects the candidate generation function to be a
monad; this is to make it possible to use random number generators.</p>

<h3>Naive Ticket Selection</h3>

<p>I do not really know how to navigate subsets, so I won't try to
implement a backtracking solution as describe in the paper. Instead, I
have what is really the simplest greedy algorithm: when a new ticket
is needed, get the one that has the best coverage among all the
possible tickets:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Naive Ticket Selection  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">getCandidate</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">tickets</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">k</span> <span class="n">numbers</span>
</span><span class='line'>  <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kr">in</span> <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So for each $j$-subsets set, generate all the $k$-subsets, and compare
their coverage.</p>

<p>Needless to say, this function does not return anything anytime soon
for even slightly large values of $n$.</p>

<h3>Randomised Ticket Selection</h3>

<p>To improve the performance (well, to get a result in my lifetime), I
am using what I understand to be the same approach as in the paper:
generates $\beta$ tickets, compare their coverage of the remaining
subsets, and keep the best one.</p>

<p>The different with the paper, as mentioned before, is that my tickets
are $k$-subsets rather than $j$-subsets themselves.</p>

<p>I first need a function to generate a random combination. I'm using a
method derived from Knuth (no reference as I don't have Volume 4 just yet).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample Generation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">sample</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="n">k</span> <span class="n">ds</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">sample</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">randomRIO</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">length</span> <span class="n">ds</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">t</span> <span class="ow">=</span> <span class="n">ds</span><span class="o">!!</span><span class="n">p</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">not</span> <span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">elem</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">s</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kr">then</span> <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="kr">else</span> <span class="n">return</span> <span class="p">(</span><span class="n">head</span> <span class="n">ds</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The generating function is very similar to the naive one</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Randomised Generating Function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">getCandidateRandom</span> <span class="n">beta</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>  <span class="n">tickets</span> <span class="ow">&lt;-</span> <span class="n">replicateM</span> <span class="n">beta</span> <span class="p">(</span><span class="n">sample</span> <span class="n">k</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The only difference is the <code>tickets</code> candidate set: the naive function
generates them all; the randomised one selects $\beta$ randomly.</p>

<h3>Compatibility with the paper version</h3>

<p>By using <code>solve n j j l</code> instead of <code>solve n k j l</code>, my implementation
should compute subset coverage the same way the paper's implementation
does.</p>

<h3>Testing and Results</h3>

<p>I will not compare speed, as this would be meaningless. But I can check
whether different values for ticket size can indeed help reduce the size of
the covering set.</p>

<p>Let's start with a very simple problem, where $n=5$, $k=3$, $j=3$ and
$l=2$.</p>

<p>I don't really need to generate the $j$-subsets, but if I do I can
check the solution.</p>

<p>The solution itself is computed by passing a ticket generating
function; I could have used <code>getCandidate</code>, but here I'm passing
<code>getCandidateRandom</code> with a $\beta=100$.</p>

<p>The <code>notCovered</code> set is empty, so the solution is at least a covering one.</p>

<p>The solution has two tickets, and the lower bound confirms it is
pretty good.</p>

<p><code>
*Main&gt; let problem = genCombi 3 [1..5]
*Main&gt; solution &lt;- solve 5 3 3 2 (getCandidateRandom 100)
*Main&gt; solution
[[3,4,5],[1,2,4]]
*Main&gt; notCoveredBatch 2 solution problem
[]
*Main&gt; lowerBound 5 3 3 2
1.4285714285714286
</code></p>

<p>Next test, with $n=15$, $k=5$, $j=5$ and $l=4$. The paper reports that
they found a solution with $137$ tickets. As $k=j$, my algorithm
cannot really beat that (and indeed finds a solution of the same size,
if I try a couple of times):</p>

<p><code>
*Main&gt; let problem = genCombi 5 [1..15]
*Main&gt; solution &lt;- solve 15 5 5 4 (getCandidateRandom 100)
*Main&gt; length solution
137
*Main&gt; notCoveredBatch  4 solution problem
[]
*Main&gt; lowerBound 15 5 5 4
58.88235294117647
</code></p>

<p>For the next test, I should have a better solution than the paper, as
$k$ is larger than $j$: $n=15$, $k=6$, $j=5$, $l=4$.</p>

<p>The paper has a lower bound of $58$, and a solution of size $138$, but my
lower bound is $22$, and my solution has size $57$.</p>

<p><code>
*Main&gt; let problem = genCombi 5 [1..15]
*Main&gt; solution &lt;- solve 15 6 5 4 (getCandidateRandom  100)
*Main&gt; length solution
57
*Main&gt; notCoveredBatch 4 solution problem
[]
*Main&gt; lowerBound 15 6 5 4
21.29787234042553
</code></p>

<p>When the difference between $k$ and $j$ becomes large, the solution
improves significantly: with $n=18$, $k=10$, $j=7$, $l=6$, the paper
has a lower bound of $408$, mine is $18$. The paper's solution has
size $1080$, but mine is just $73$.</p>

<p><code>
*Main&gt; let problem = genCombi 7 [1..18]
*Main&gt; solution &lt;- solve 18 10 7 6 (getCandidateRandom 100)
*Main&gt; length solution
73
*Main&gt; notCoveredBatch 6 solution problem
[]
*Main&gt; lowerBound 18 10 7 6
17.68
</code></p>

<h3>Wrapping up</h3>

<p>Even if my approach is ultimately wrong, I can say I must be close to
an actual solution. I could (and probably will, given time) try to
rewrite my solution in C, and focus on performance.</p>

<p>So I declare this problem conquered, I will resume my reading.</p>

<h3>Complete code</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Psychic Modeling Implementation (psychic.hs)</span> <a href='/downloads/code/algo-design-manual/psychic.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Ord</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- helpers functions</span>
</span><span class='line'><span class="nf">fact</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">product</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'><span class="nf">combi</span> <span class="n">n</span> <span class="n">c</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fact</span> <span class="n">n</span><span class="p">)</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="p">(</span><span class="n">fact</span> <span class="n">c</span> <span class="o">*</span> <span class="n">fact</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nf">remainingNumbers</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="n">union</span> <span class="kt">[]</span> <span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- generate combinations</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="n">k</span> <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">=</span> <span class="p">[</span><span class="n">l</span><span class="kt">:</span><span class="n">cs</span> <span class="o">|</span> <span class="n">cs</span> <span class="ow">&lt;-</span> <span class="n">genCombi</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">ls</span><span class="p">]</span> <span class="o">++</span>
</span><span class='line'>                    <span class="n">genCombi</span> <span class="n">k</span> <span class="n">ls</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- estimates for the solution size</span>
</span><span class='line'><span class="nf">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="n">sum</span> <span class="p">[</span> <span class="p">(</span><span class="n">combi</span> <span class="n">k</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span>
</span><span class='line'>                            <span class="p">(</span><span class="n">combi</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">)</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="p">))</span> <span class="o">|</span> <span class="n">i</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="n">l</span><span class="o">..</span><span class="n">j</span><span class="p">]]</span>
</span><span class='line'><span class="nf">lowerBound</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">combi</span> <span class="n">n</span> <span class="n">j</span><span class="p">)</span> <span class="o">/</span>
</span><span class='line'>                     <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- definition of coverage measure</span>
</span><span class='line'><span class="nf">cover</span> <span class="n">l1</span> <span class="n">l2</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">intersect</span> <span class="n">l1</span> <span class="n">l2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- predicate functions: check cover between ticket and j-subset</span>
</span><span class='line'><span class="nf">coveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&lt;=</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'><span class="nf">notCoveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- keep only j-subsets that are not covered by tickets</span>
</span><span class='line'><span class="nf">notCoveredBatch</span> <span class="n">l</span> <span class="n">ts</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="n">notCovered</span> <span class="n">l</span><span class="p">)</span> <span class="n">js</span> <span class="n">ts</span>
</span><span class='line'><span class="nf">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">notCoveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- length of j-subsets from js that are sufficiently covered by t</span>
</span><span class='line'><span class="nf">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- check the coverage of a single k number ticket on the C_j^n</span>
</span><span class='line'><span class="c1">-- potentials; can be compared against ticketCover estimate</span>
</span><span class='line'><span class="nf">checkFormula</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">candidates</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>      <span class="n">ticket</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>      <span class="n">covered</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">ticket</span><span class="p">)</span> <span class="n">candidates</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">length</span> <span class="n">covered</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- compute solution given a candidate generator</span>
</span><span class='line'><span class="nf">solve</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">gc</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">jtuples</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">loop</span> <span class="n">jtuples</span>
</span><span class='line'> <span class="kr">where</span> <span class="n">loop</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'>       <span class="n">loop</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>         <span class="n">t</span> <span class="ow">&lt;-</span> <span class="n">gc</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span>
</span><span class='line'>         <span class="n">ts</span> <span class="ow">&lt;-</span> <span class="n">loop</span> <span class="o">$</span> <span class="n">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span>
</span><span class='line'>         <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">ts</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- naive candidate generator</span>
</span><span class='line'><span class="nf">getCandidate</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>      <span class="n">tickets</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">k</span> <span class="n">numbers</span>
</span><span class='line'>      <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Knuth method for generating combination</span>
</span><span class='line'><span class="c1">-- adapted for arbitrary set</span>
</span><span class='line'><span class="nf">sample</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="n">k</span> <span class="n">ds</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">s</span> <span class="ow">&lt;-</span> <span class="n">sample</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">p</span> <span class="ow">&lt;-</span> <span class="n">randomRIO</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">length</span> <span class="n">ds</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">t</span> <span class="ow">=</span> <span class="n">ds</span><span class="o">!!</span><span class="n">p</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">not</span> <span class="p">(</span><span class="n">t</span> <span class="p">`</span><span class="n">elem</span><span class="p">`</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">then</span> <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">else</span> <span class="n">return</span> <span class="p">(</span><span class="n">head</span> <span class="n">ds</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- random candidate generator</span>
</span><span class='line'><span class="nf">getCandidateRandom</span> <span class="n">beta</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>  <span class="n">tickets</span> <span class="ow">&lt;-</span> <span class="n">replicateM</span> <span class="n">beta</span> <span class="p">(</span><span class="n">sample</span> <span class="n">k</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Exam Problems]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/05/concrete-mathematics-chapter-1-exam-problems/"/>
    <updated>2012-02-05T12:27:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/05/concrete-mathematics-chapter-1-exam-problems</id>
    <content type="html"><![CDATA[<p>It took me longer than I thought, and the outcome is slightly
disappointing: I failed to solve two of the problems, and I solved the
remaining ones way too slowly, so in a real exam conditions I probably
would have solved just one or two...</p>

<!-- more -->


<h2>Exam Problems</h2>

<h3>4 Pegs Tower of Hanoi</h3>

<p>First, it helps to see that the indices of the recurrence are actually
$S_n$:</p>

<div markdown="0">
\begin{align}
W_{n(n+1)/2}&amp;= W_{S_n}\\\\
W_{n(n-1)/2}&amp;= W_{S_{n-1}}
\end{align}
</div>


<p>And of course, $S_n = S_{n-1} + n$.</p>

<p>Setting $m=S_{n-1}$, we try to show:</p>

<div markdown="0">
\begin{align}
W_{m+n} &amp; \le 2W_{m} + T_n\\\\
\end{align}
</div>


<p>Now, obviously, if we have $m+n$ discs, we can move the $m$ top ones
from $A$ to $C$ using $B$ and $D$ as transfer pegs, then move the
bottom $n$ ones from $A$ to $B$ using $D$ as transfer peg, and finally
move the top $m$ ones from $C$ to $B$.</p>

<p>The first step takes $W_m$ moves, the second one is the classic Tower
of Hanoi problem (as we can no longer use peg $C$, we only have three
pegs), so it takes $T_n$ moves, and the last step takes $W_m$  moves again.</p>

<p>This is only one possible solution; the optimal one must be equal or
better, so we have</p>

<div markdown="0">
\begin{align}
W_{m+n} &amp; \le 2W_m + T_n\\\\
\end{align}
</div>


<p>This is true for any $m+n$ discs, and in particular for
$S_n = S_{n-1} + n$ ones.</p>

<h3>Specific Zigs</h3>

<p>I could not solve this problem. I had found that the half-lines did
intersect, but then I failed to show that their intersections were all
distinct.</p>

<p>Even with the solution from the book, it took me a while before I
finally had a complete understanding.</p>

<p>One problem I had was that lines in a graph are basic college level
mathematics, but college was a long, long time ago. I pretty much had
to work from first principles.</p>

<p>Following the book in writing the positions as $(x_j, 0)$ and
$(x_j - a_j, 1)$, I need to find $\alpha$ and $\beta$ such that
$y=\alpha x + \beta$ is true for both points above.</p>

<div markdown="0">
\begin{align}
0 &amp; = \alpha x_j + \beta \\\\
\beta &amp; = - \alpha x_j\\\\
1 &amp; = \alpha (x_j - a_j) - \alpha x_j\\\\
&amp; = \alpha x_j - \alpha a_j - \alpha x_j\\\\
&amp; = - \alpha a_j\\\\
\alpha &amp; = \frac{-1}{a_j}\\\\
y &amp; = \frac{x_j - x}{a_j}\\\\
\end{align}
</div>


<p>With this given, I can try to find the intersection of lines from
different zigs, $j$ and $k$:</p>

<div markdown="0">
\begin{align}
\frac{x_j - x}{a_j} &amp; = \frac{x_k - x}{a_k}\\\\
a_k (x_j - x) &amp; = a_j (x_k - x)\\\\
a_k x_j - a_k x &amp; = a_j x_k - a_j x\\\\
a_k x_j - a_j x_k &amp; = (a_k - a_j) x\\\\
\end{align}
</div>


<p>Now, still following the book, I replace $x$ by $t$ with
$x=x_j - t a_j$:</p>

<div markdown="0">
\begin{align}
a_k x_j - a_j x_k &amp; = (a_k - a_j) (x_j - t a_j)\\\\
a_k x_j - a_j x_k &amp; = a_k x_j - a_j x_j - t a_j a_k + t a_j^2\\\\
- a_j x_k &amp; = t a_j^ 2 - a_j x_j - t a_j a_k\\\\
- x_k &amp; = t a_j - x_j -t a_k&amp;&amp;\text{dividing by \(a_j\)}\\\\
x_j - x_k &amp; = t (a_j - a_k)\\\\
t &amp; = \frac{x_j - x_k}{a_j - a_k}\\\\
\end{align}
</div>


<p>Somehow, I have a faint memory of such a result; I need to check a
college math book.</p>

<p>To complete, I need to show that $y = t$:</p>

<div markdown="0">
\begin{align}
y &amp; = \frac{x_j - x}{a_j}\\\\
&amp; = \frac{x_j - x_j + t a_j}{a_j}\\\\
&amp; = \frac{t a_j}{a_j}\\\\
&amp; = t\\\\
\end{align}
</div>


<p>So the intersection of any two pair of half-lines from different zigs
is $(x_j - t a_j, t)$. Note that $t$ has the same value whether
$j \gt k$ or $k \gt j$. To simplify further computations, I set
$j \gt k$.</p>

<p>There are two remaining steps: show that $t$ is different for
different pairs of $j$, $k$ (with $j \ne k$); and then show that the
four intersections for a pair $j$, $k$ are also distinct.</p>

<p>$a_j$ can be of two forms: $n^j$ and $n^j + n^{-n}$. So $a_j - a_k$
can be one of</p>

<div markdown="0">
\begin{align}
&amp; n^j - n^k\\\\
&amp; n^j + n^{-n} - n^k\\\\
&amp; n^j - n^k - n^{-n}\\\\
n^j + n^{-n} - n^k - n^{-n} = &amp; n^j - n^k\\\\
\end{align}
</div>


<p>So there are three different forms for $a_j - a_k$, which I will
simply write $n^j - n^k + \epsilon$ where $|\epsilon| \lt 1$.</p>

<div markdown="0">
\begin{align}
t &amp; = \frac{n^{2j} - n^{2k}}{n^j - n^k + \epsilon}\\\\
&amp; = \frac{(n^j - n^k)(n^j + n^k)}{n^j - n^k + \epsilon}\\\\
\end{align}
</div>


<p>Let's show that $n^j+n^k - 1 \lt t \lt n^j+n^k + 1$: multiply the
whole inequality by $n^j - n^k + \epsilon$. As</p>

<div markdown"0">
\begin{align}
n^j - n^k &amp; \ge n\\\\
&amp; \ge 2\\\\
&amp; \gt |\epsilon|\\\\
\end{align}
</div>


<p>so $n^j - n^k + \epsilon \gt 0$. Defining</p>

<div markdown="0">
\begin{align}
N_{jk} &amp; = n^j + n^k\\\\
N'_{jk} &amp; = n^j - n^k\\\\
\end{align}
</div>


<p>the left and right inequalities become</p>

<div markdown="0">
\begin{align}
(N_{jk} - 1) (N'_{jk} + \epsilon) &amp; = N_{jk}N'_{jk} - N'_{jk} + \epsilon N_{jk} - \epsilon\\\\
(N_{jk} + 1) (N'_{jk} + \epsilon) &amp; = N_{jk}N'_{jk} + N'_{jk} + \epsilon N_{jk} + \epsilon\\\\
\end{align}
</div>


<p>Subtracting $N_{jk}N'_{jk} = (n^j-n^k)(n^j+n^k)$ from the original inequality:</p>

<div markdown="0">
\begin{align}
-N'_{jk}+\epsilon N_jk - \epsilon \lt 0 \lt N'_{jk} + \epsilon N_{jk} + \epsilon\\\\
\end{align}
</div>


<p>I need to prove the following inequality</p>

<div markdown"0">
\begin{align}
(n^j - n^k) &amp; \gt |\epsilon| + |\epsilon| (n^j - n^k)\\\\
\end{align}
</div>


<p>We already know $|\epsilon| \lt 1$, so looking at the second term (and
assuming $\epsilon \ne 0$, as this case is trivial)</p>

<div markdown"0">
\begin{align}
|\epsilon| (n^j-n^k) &amp; = n^{-n} (n^j - n^k)\\\\
&amp; = n^{j-n} - n^{k-n}\\\\
&amp;\lt 1\\\\
\end{align}
</div>


<p>and we have</p>

<div markdown"0">
\begin{align}
n^j - n^k &amp; \ge 2
&amp; \gt |\epsilon| + |\epsilon (n^j - n^k)|\\\\
\end{align}
</div>


<p>So the inequalities are established. $N_{jk}$ can be seen as a number
in based $n$ where the digits are all zeroes except the $j$ and $k$ ones,
$N_{jk} = N_{j'k'} \implies j=j', k=k'$, and therefore $t$ uniquely
defines $j$ and $k$ or, two pairs of zigs must have different $t$.</p>

<p>I still need to show that for a given pair, when $t$ is the same, the
intersections are different. There are three different values of
$t$, so two intersections points have the same height. This happens
for</p>

<div markdown="0">
\begin{align}
t &amp; = \frac{n^{2j} - n^{2k}}{n^j - n^k}\\\\
\end{align}
</div>


<p>which happens when $a_j = n^j$, $a_k = n^k$ and $a_j = n^j + n^{-n}$,
$a_k = n^k + n^{-n}$. But the $x = x_j - t a_j$ value for
intersections is different: $t n^j$ and $t (n^j + n^{-n})$, so there
are indeed four distinct intersection points.</p>

<h3>30 degrees Zigs</h3>

<p>I could not solve this problem. Once again, my lack of intuition with
geometry was to blame.</p>

<p>But if we have two zigs with half-lines angles $\phi$, $\phi + 30^{\circ}$
and $\theta$, $\theta + 30^{\circ}$, then for any two pairs of
half-lines from the two zigs to intersect, their angles must be
between $0^{\circ}$ and $180^{\circ}$. Taken together, these
constraints give $0^{\circ} \lt |\phi - \theta| \lt 150^{\circ}$.</p>

<p>This means there cannot be more than $5$ such pairs (and to be honest,
I would have said 4, but the book says it's indeed 5).</p>

<h3>Recurrence Equations</h3>

<h3>Good and Bad Persons in Josephus Problem</h3>

<p>It took me a while, as I was trying to find a recurrence equation of
some sort which would help me with this problem and the bonus one
(where Josephus' position is fixed but he can pick $m$). Eventually I
found one, which did not help me with the bonus problem, but led me to
a solution for this problem.</p>

<p>Obviously, if we have $k$ persons and want to remove the last one in
the first round, we can choose $m=k$ and that will work. Actually, any
multiple $m=ak$ works as well.</p>

<p>This shows that at each round, if we have $k$ persons left, and we
start counting on the first one, when $m=ak$ we will remove the $k^{th}$
person then start counting from the first one again.</p>

<p>Back to the original problem: there are $2n$ persons, and we want to
get rid of the $n+1, \cdots, 2n$ first. If we take
$m=lcm(n+1,\cdots, 2n)$, then for the first $n$ rounds the last (bad)
person will be remove, leaving only the good ones at the end.</p>

<p>When first solving the problem, I picked $m=\prod_{i=1}^n (n+i)$,
which has the same property as the least common multiple, but is
larger. Perhaps a smaller number is better for the nerves of the
participants.</p>

<h3>Bonus Problems</h3>

<p>I tried to solve the bonus questions, but after repeatedly failing, I
had a glimpse at the solutions: they obviously require either
knowledge of later chapters, or other concepts I know nothing about,
so I will get back to these bonus problems after I finish the book.</p>

<p>I am now working through Chapter 2. It is a much larger chapter than
the first, so it will take me some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks CouchDB Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/01/seven-databases-in-seven-weeks-couchdb-day-3/"/>
    <updated>2012-02-01T18:06:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/01/seven-databases-in-seven-weeks-couchdb-day-3</id>
    <content type="html"><![CDATA[<p>Today is a bit juicier than the previous days (together). On the menu,
advanced views (full MapReduce), replication, conflict management, and
change monitoring.</p>

<!-- more -->


<h3>Advanced views</h3>

<p><a href="http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views">Advanced views</a>
in CouchDB are, as noted yesterday, materialized output of MapReduce
computations.</p>

<p>This has a cost: such computations are saved, so they take more time
than with other implementations, the first time at least.</p>

<p>Updating the views, on the other hand, is fairly fast (CouchDB
recomputes only what is necessary). Views have to be planned, but
once there they are fairly cheap. For exploratory queries, other databases
might be more appropriate.</p>

<p>CouchDB's reduce functions distinguishes between the first invocation,
and the following ones (on values that have already gone through the
reduce function). This makes it possible to implement a <code>_count</code>
function which counts the number of values (the first invocation
transforms values into numbers, and the following ones add the numbers
up).</p>

<h3>Replication</h3>

<p><a href="http://wiki.apache.org/couchdb/Replication">Replication</a> is the
one-way process of replicating the changes of one database on
another. Replication can be between any two databases, whether on the
same server or on different ones. It can be one time, or
continuous. The documents to replicate can be filtered, or selected by
<code>_id</code>.</p>

<p>Replication is a lower level mechanism than what MongoDB, for
instance, proposes (where there is a strict hierarchy of masters and
slaves), and closer to the flexible approach or Riak.</p>

<p>Of course, when concurrent writes are permitted, conflicts can occur,
and CouchDB handles them.</p>

<h3>Conflicts</h3>

<p><a href="http://wiki.apache.org/couchdb/Replication_and_conflicts">Concurrent updates</a>
can cause conflicts, and CouchDB detects them so they can be dealt
with.</p>

<p>First, conflicts cannot happen on a single server: updates to a
document must refer to the latest revision, otherwise the update
fails. So clients are directly aware that they need to resubmit the
(merged) document.</p>

<p>When replication is enabled, conflicts result from concurrent updates
in two replicated databases. At the next replication, one version will
be selected as winning, and replicated to other databases. The other
versions are still accessible from the <code>_conflicts</code> attribute
(initially, only in the losing databases).</p>

<p>If two ways replications are in place, eventually, all databases will
have the <code>_conflicts</code> attribute populated (with all the losing
revisions, if there are more than one).</p>

<p>This makes it possible to implement a remedial action; it is possible
to have views with only documents in conflicts, or to filter changes
for conflicts, and implement merging actions in monitoring scripts.</p>

<p>CouchDB documentation helpfully provides some
<a href="http://wiki.apache.org/couchdb/How_to_design_for_replication">advice</a>
for designing conflict-aware applications.</p>

<h3>Changes</h3>

<p>Changes are dedicated views that contains a list of updates for a
specific database. The
<a href="http://wiki.apache.org/couchdb/HTTP_database_API#Changes">parameters</a>
support starting at a given revision (in this case, a database
revision, not a document revision), filtering documents, and keeping
the stream open in several ways.</p>

<p>This makes it possible (easy, even) to monitor (interesting or
relevant) changes, to synchronize with other systems, or to
automatically resolve conflicts, for instance.</p>

<p>When using Long-Polling, I found that one very large datasets, the
<code>JSON.parse</code> invocation could take a long time, and would suggest to
always use a <code>limit</code> parameter on the query, to cut the dataset down
to manageable chunks.</p>

<h2>Exercises</h2>

<h3>Built-in Reduce Functions</h3>

<p>There are three, documented on the
<a href="http://wiki.apache.org/couchdb/Built-In_Reduce_Functions">Wiki</a>.</p>

<p>They are implemented directly in Erlang, so they have a better
performance than JavaScript functions.</p>

<h4><code>_sum</code></h4>

<p>This function behaves just as the reduce function from the book; it
sums the values by key. It is useful when the map functions uses
<code>emit(key, 1);</code> (or some other numeric value).</p>

<h4><code>_count</code></h4>

<p>It is similar to <code>_sum</code>, but it counts the number of values rather
than merely summing them. It is useful when the value is not a number.</p>

<h4><code>_stat</code></h4>

<p>This is an extension of <code>_sum</code> which computes additional statistics
(minimum, maximum, ...) on the numeric values.</p>

<h3>Filtering <code>_changes</code> output</h3>

<p>Filters are nicely described in
<a href="http://guide.couchdb.org/draft/notifications.html#filters">CouchDB The Definitive Guide</a>.</p>

<p>To create a new filter, I first create a design document to store the function:</p>

<p><code>
$ curl -X PUT http://localhost:5984/music/_design/filters \
-d '{ "filters": { "by_country": "function(doc, req) {
return doc.country == req.query.country; }" } }'
</code></p>

<p>The <code>by_country</code> function retrieves a <code>country</code> parameter from the
request, and compares it against the record <code>country</code> attribute; only
the matching records are returned.</p>

<p>To monitor only updates to bands from Spain, for instance, I can use</p>

<p><code>
curl http://localhost:5984/music/_changes?filter=filters/by_country\&amp;country=ESP
</code></p>

<p>To monitor for conflicts, I have the following design document:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;&lt;em&gt;id&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;/em&gt;design/filters&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_rev&quot;</span><span class="o">:</span> <span class="s2">&quot;3-ec032384bf365d3caef0ed91185ae45a&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;filters&quot;</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>   <span class="s2">&quot;by_country&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc, req) { return doc.country == req.query.country; }&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;conflicts&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc, req) { return doc._conflicts; }&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With that, I can then listen for changes, keeping only the conflicts:</p>

<p><code>
$ curl http://localhost:5984/music-repl/_changes?filter=filters/conflicts\&amp;since=26000
{"results":[
{"seq":26994,"id":"theconflicts","changes":[{"rev":"2-cab47bf4444a20d6a2d2204330fdce2a"}]}
],
"last_seq":27000}
</code></p>

<p>Because CouchDB only set the <code>_conflicts</code> attribute on the
losing database; the winner database (the one in which the winning
revision was initially created) does not know about conflicts. This
means I must check against <code>music-repl</code> instead of <code>music</code>.</p>

<h3>Replication HTTP API</h3>

<p>The API is documented
<a href="http://www.couchbase.org/sites/default/files/uploads/all/documentation/couchbase-api-misc.html#couchbase-api-misc_replicate_post">here</a>.</p>

<p>To use it, simply pass the <code>source</code> and <code>target</code> databases to the
<code>_replicate</code> URL:</p>

<p><code>
$ curl -X POST http://localhost:5984/_replicate \
-H 'Content-Type: application/json' \
-H 'Accept: application/json' -d \
'{ "source" : "music", "target" : "music-repl" }'
</code></p>

<h3><code>_replicator</code> database</h3>

<p>The
<a href="http://docs.couchbase.org/couchdb-release-1.1/couchb-release-1.1-replicatordb.html"><code>_replicator</code> database</a>
is an alternative to the use of the
<code>_replicate</code> URL above: documents inserted in the <code>_replicator</code>
database will, if properly formed, cause a replication job to be
started (either one-off, or continuous).</p>

<p>Deleting the document will cancel the replication job.</p>

<p>Document describing replications are updated to reflect the progress
of the job.</p>

<p>The command below triggers a replication from <code>music</code> to <code>music-repl</code>:</p>

<p><code>
$ curl -X PUT http://localhost:5984/_replicator/music-rep \
-H 'Content-type: application/json' \
-d '{ "source" : "music", "target" : "music-repl" }'
{"ok":true,"id":"music-rep","rev":"1-ba761c16b5ca36848b2474758cbc4b22"}
</code></p>

<p>Using the <code>watch_changes_longpolling_impl.js</code> script on the <code>_replicator</code>
database, it is possible to monitor the replication job:</p>

<p>```
$ node watch_changes_longpolling_impl.js <em>replicator
... elided ...
{ seq: 2,
  id: 'music-rep',
  changes: [ { rev: '1-ba761c16b5ca36848b2474758cbc4b22' } ],
  doc:
   { </em>id: 'music-rep',</p>

<pre><code> _rev: '1-ba761c16b5ca36848b2474758cbc4b22',
 source: 'music',
 target: 'music-repl' } }
</code></pre>

<p>{ seq: 3,
  id: 'music-rep',
  changes: [ { rev: '2-d1b4fc9da1ef17d43fa91dd7b345a9e6' } ],
  doc:
   { _id: 'music-rep',</p>

<pre><code> _rev: '2-d1b4fc9da1ef17d43fa91dd7b345a9e6',
 source: 'music',
 target: 'music-repl',
 _replication_state: 'triggered',
 _replication_state_time: '2012-02-02T10:23:44+09:00',
 _replication_id: 'ab65eb4c4ca880bf65e02626573ef683' } }
</code></pre>

<p>{ seq: 4,
  id: 'music-rep',
  changes: [ { rev: '3-b6d32c3ce979af8dc2190735aa39d4f3' } ],
  doc:
   { _id: 'music-rep',</p>

<pre><code> _rev: '3-b6d32c3ce979af8dc2190735aa39d4f3',
 source: 'music',
 target: 'music-repl',
 _replication_state: 'completed',
 _replication_state_time: '2012-02-02T10:23:46+09:00',
 _replication_id: 'ab65eb4c4ca880bf65e02626573ef683' } }
</code></pre>

<p>... elided ...
```</p>

<p>The first change is when the document is created; the second when the
job starts, and the third when it successfully completes.</p>

<p>Unlike the <code>_replicate</code> based API, continuous jobs stored in
<code>_replicator</code> will resume when the database is restarted.</p>

<h3>Continuous watcher skeleton</h3>

<p>The approach is to keep input in a buffer, then extract as many line
from the buffer as possible (if the last line is incomplete, it is put
back into the buffer), and parse each line as a JSON object.</p>

<p>The format of each parsed object is different: each change is in its
own object, so there is no <code>results</code> attribute any more.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>watch_changes_continuous.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">http_options</span> <span class="o">=&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">host</span><span class="o">:</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">db</span> <span class="o">+</span> <span class="s1">&#39;/_changes&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s1">&#39;?feed=continuous&amp;amp;include_docs=true&amp;amp;since=&#39;</span> <span class="o">+</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">last_seq</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">processLine</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">line</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">line</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">line</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">output</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// don&#39;t emit last_seq</span>
</span><span class='line'>        <span class="c1">// watcher.last_seq not used in this code</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">last_seq</span><span class="p">)</span>
</span><span class='line'>            <span class="nx">watcher</span><span class="p">.</span><span class="nx">last_seq</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">last_seq</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="nx">watcher</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="nx">output</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">watcher</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">line</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">checkForData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">lines</span> <span class="o">=</span> <span class="nx">buffer</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// if the last character is line return</span>
</span><span class='line'><span class="c1">// use the last line; otherwise put it back</span>
</span><span class='line'><span class="c1">// into the buffer to be completed later</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;\n&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">buffer</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span><span class='line'><span class="c1">// process the remaining lines one at a time</span>
</span><span class='line'><span class="nx">lines</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">processLine</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="nx">buffer</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">http_options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">buffer</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">checkForData</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">checkForData</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">})</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">watcher</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Continuous watcher implementation</h3>

<p>I just inserted the code block above in the original
<code>watch_changes_skeleton.js</code>; no other modifications were required.</p>

<p>With the code block above, both the long polling and the continuous
outputs are identical.</p>

<h3>Conflicts view</h3>

<p>As I said above, conflicts are only created in the losing database, so
to test this I must use the <code>music-repl</code> database.</p>

<p>Otherwise, the code is simple: iterate on the <code>_conflicts</code> attribute,
and for each revision it contains, emit that revision mapped to the
document <code>_id</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;&lt;em&gt;id&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;/em&gt;design/conflicts&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_rev&quot;</span><span class="o">:</span> <span class="s2">&quot;4-1f5c35d83a4cfc7783d60f665946dc6d&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;language&quot;</span><span class="o">:</span> <span class="s2">&quot;javascript&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;views&quot;</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>   <span class="s2">&quot;conflicts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;map&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc) { (doc._conflicts || []).forEach(function(rev) { emit(rev, doc._id); }); }&quot;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Testing it:</p>

<p>```
$ curl http://localhost:5984/music-repl/<em>design/conflicts/</em>view/conflicts | python -mjson.tool
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>100   129    0   129    0     0  37478      0 --:--:-- --:--:-- --:--:-- 64500
{</p>

<pre><code>"offset": 0, 
"rows": [
    {
        "id": "theconflicts", 
        "key": "2-0c969fbfa76eb7fcdf6412ef219fcac5", 
        "value": "theconflicts"
    }
], 
"total_rows": 1
</code></pre>

<p>}
```</p>

<p>And this completes Day 3 and this overview of CouchDB.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks CouchDB Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-2/"/>
    <updated>2012-01-30T18:58:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-2</id>
    <content type="html"><![CDATA[<p>Day 2 is about Views in CouchDB, which serve as an introduction to the
more general MapReduce support.</p>

<p>It is another fairly short day, as much of this section is actually
about the complexities of XML parsing...</p>

<!-- more -->


<p>Like Riak and MongoDB, CouchDB is scripted with JavaScript, so today has
a feeling of déjà vu.</p>

<h3>View concept</h3>

<p>A View is just a mapping of a key to a value. Keys and values are
extracted from documents; there can be more than one key for each
document, as in MongoDB.</p>

<p>Once the view has been built and updated for the documents it applies
to, it can be accessed by key using optimized methods (all based on
some form of lexicographical order).</p>

<h3>View performance</h3>

<p>A View in CouchDB is essentially the equivalent of a
<a href="http://en.wikipedia.org/wiki/Materialized_view">materialized view</a>
in relational databases.</p>

<p>Access to the view causes it to be updated (i.e. recomputed) if
necessary, which can be a painfully slow experience. I had imported
the whole content of the music database (26990 records), and each time
I tested a Temporary View or saved a Permanent one, I had to wait for
CouchDB to finish the refresh (fortunately not too long on this
dataset).</p>

<p>It interesting to note that while relational databases require the
schema to be designed ahead of time, but support arbitrary queries,
CouchDB let you ignore the schema, but need you to design the
queries ahead of time.</p>

<h2>Exercises</h2>

<h3><code>emit</code> function</h3>

<p>The key can be
<a href="http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Complex_Keys">any JSON object</a>,
although I would say that only strings and arrays of strings have
sensible semantics.</p>

<p>Arrays can be used with reduce functions to provide query time custom
grouping, as explained
<a href="http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Grouping">here</a>.</p>

<p>For instance, to compute the number of records by date, I used the
<code>releasedate</code> of each album to create a key array
<code>[year, month, date]</code>, and a value of <code>1</code> (1 for each album):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Album by Date  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">album</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s1">&#39;releasedate&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">album</span><span class="p">.</span><span class="nx">releasedate</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">d</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">(),</span>
</span><span class='line'>                           <span class="nx">d</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">(),</span>
</span><span class='line'>                           <span class="nx">d</span><span class="p">.</span><span class="nx">getDate</span><span class="p">()];</span>
</span><span class='line'>                <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As I intend to use grouping, I also need a reduce function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Reduce Function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">values</span><span class="p">,</span> <span class="nx">rereduce</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">values</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Each document in the view is now a date as an array, with a single
number for the record made that date (there are as many identical keys
as there were records for a given day).</p>

<p>When querying, by default, the reduce function will be called on
identical keys to get a single value:</p>

<p><code>
$ curl http://localhost:5984/music/_design/count/_view/album_by_date?limit=5\&amp;group=true
{"rows":[
{"key":[2004,11,18],"value":2},
{"key":[2004,11,21],"value":1},
{"key":[2004,11,22],"value":1},
{"key":[2004,11,28],"value":1},
{"key":[2004,11,29],"value":2}
]}
</code></p>

<p>(month is 0 based...)</p>

<p>With the <code>group_level</code> parameter, I can control whether I want to
group by day (<code>group=true</code> or <code>group_level=3</code>, as above), by month
(<code>group_level=2</code>), or year (<code>group_level=1</code>):</p>

<p><code>
$ curl http://localhost:5984/music/_design/count/_view/album_by_date?limit=5\&amp;group_level=2
{"rows":[
{"key":[2004,11],"value":7},
{"key":[2005,0],"value":3},
{"key":[2005,1],"value":3},
{"key":[2005,2],"value":5},
{"key":[2005,3],"value":15}
]}
</code></p>

<p><code>
$ curl http://localhost:5984/music/_design/count/_view/album_by_date?limit=5\&amp;group_level=1
{"rows":[
{"key":[2004],"value":7},
{"key":[2005],"value":306},
{"key":[2006],"value":1277},
{"key":[2007],"value":3454},
{"key":[2008],"value":7330}
]}
</code></p>

<h3>View request parameters</h3>

<p>There are quite a few of them listed
<a href="http://wiki.apache.org/couchdb/HTTP_view_API?action=show&amp;redirect=HttpViewApi">here</a>.</p>

<h3>Random artist script</h3>

<p>The code is essentially the same as the one mapping names to ids, but
here it associates <code>random</code> to <code>name</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Random Artist  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s1">&#39;random&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Random artist URL</h3>

<p>The URL below returns the first artist whose random number is greater
than the random one generated by Ruby.</p>

<p><code>
$ curl http://localhost:5984/music/_design/random/_view/artist?limit=1\&amp;startkey=`ruby -e 'p rand'`
{"total_rows":26987,"offset":23180,"rows":[
{"id":"364215","key":0.8581072409917536,"value":"rakombiacje"}
]}
</code></p>

<p>As expected, if given a value too large (for instance, 1), the query
returns nothing:</p>

<p><code>
$ curl http://localhost:5984/music/_design/random/_view/artist?limit=1\&amp;startkey=1
{"total_rows":26987,"offset":26987,"rows":[]}
</code></p>

<h3>Random everything</h3>

<p>The code of each script is similar, in a way Russian Dolls are
similar: each one is an extension of the previous, digging deeper into
the nested structure of the original document.</p>

<h4>Random Album</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Random Album  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">album</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s1">&#39;random&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">album</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">by</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">album</span><span class="o">:</span> <span class="nx">album</span><span class="p">.</span><span class="nx">name</span> <span class="p">};</span>
</span><span class='line'>            <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Testing:</p>

<p><code>``
$ curl http://localhost:5984/music/_design/random/_view/album?limit=1\&amp;startkey=</code>ruby -e 'p rand'` | python -mjson.tool
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>100   142    0   142    0     0  36419      0 --:--:-- --:--:-- --:--:-- 71000
{</p>

<pre><code>"offset": 19416, 
"rows": [
    {
        "id": "357995", 
        "key": 0.35656765622628905, 
        "value": {
            "album": "Demo Releses", 
            "by": "SilvanestY"
        }
    }
], 
"total_rows": 54669
</code></pre>

<p>}
```</p>

<h4>Random Track</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Random Track  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;tracks&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">album</span><span class="p">.</span><span class="nx">tracks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">track</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">by</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                              <span class="nx">album</span><span class="o">:</span> <span class="nx">album</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                              <span class="nx">track</span><span class="o">:</span> <span class="nx">track</span><span class="p">.</span><span class="nx">name</span> <span class="p">};</span>
</span><span class='line'>                    <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Testing:</p>

<p><code>``
$ curl http://localhost:5984/music/_design/random/_view/track?limit=1\&amp;startkey=</code>ruby -e 'p rand'` | python -mjson.tool
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>100   163    0   163    0     0  10294      0 --:--:-- --:--:-- --:--:-- 11642
{</p>

<pre><code>"offset": 118485, 
"rows": [
    {
        "id": "370935", 
        "key": 0.3460755726665503, 
        "value": {
            "album": "Mako Yama", 
            "by": "Mako Yama", 
            "track": "Kinu No Tsuki"
        }
    }
], 
"total_rows": 342013
</code></pre>

<p>}
```</p>

<h4>Random Tag</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Random Tag  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">doc</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s1">&#39;albums&#39;</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">doc</span><span class="p">.</span><span class="nx">albums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;tracks&#39;</span> <span class="k">in</span> <span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">album</span><span class="p">.</span><span class="nx">tracks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">track</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s1">&#39;tags&#39;</span> <span class="k">in</span> <span class="nx">track</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">track</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;idstr&#39;</span> <span class="k">in</span> <span class="nx">tag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">random</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">value</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">by</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                      <span class="nx">album</span><span class="o">:</span> <span class="nx">album</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                      <span class="nx">track</span><span class="o">:</span> <span class="nx">track</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                                      <span class="nx">tag</span><span class="o">:</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">idstr</span> <span class="p">};</span>
</span><span class='line'>                            <span class="nx">emit</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">});</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Testing:</p>

<p><code>``
$ curl http://localhost:5984/music/_design/random/_view/tag?limit=1\&amp;startkey=</code>ruby -e 'p rand'` | python -mjson.tool
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>100   218    0   218    0     0   9717      0 --:--:-- --:--:-- --:--:-- 10380
{</p>

<pre><code>"offset": 151963, 
"rows": [
    {
        "id": "340779", 
        "key": 0.2788540070246309, 
        "value": {
            "album": "CABACA-5", 
            "by": "CC Asia Band", 
            "tag": "electricguitar", 
            "track": "CC Asia Band - CABACA - 35 CCilly Love Song"
        }
    }
], 
"total_rows": 545892
</code></pre>

<p>}
```</p>

<p>And that's it for Day 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks CouchDB Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-1/"/>
    <updated>2012-01-30T13:57:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/01/30/seven-databases-in-seven-weeks-couchdb-day-1</id>
    <content type="html"><![CDATA[<p>Another beta version of the book, finally with the chapter on
<a href="http://couchdb.apache.org/">CouchDB</a>. I was going through
the Redis chapter, but the third day uses other databases, in
particular CouchDB. So I'll get back to Redis after I'm done with
CouchDB.</p>

<!--more-->


<p>Today is just a short introduction: CouchDB is (yet another) key-value
store; it has a ReST API, stores JSON data, and, like Riak, only
supports full updates. Unlike Riak, however, it does not support
concurrent updates; instead it requires the client to only update from
the latest version of the data.</p>

<p>I thought at first that the data was versioned, like in HBase, but
this is not the case: the version id (<code>_rev</code>) is there to ensure that
updates occur sequentially, not concurrently. CouchDB can keep
previous versions of documents, but the retention is unreliable as
explained <a href="http://wiki.apache.org/couchdb/Document_revisions">here</a>.</p>

<p>Besides the HTTP based ReST API, CouchDB also provides a web
interface; among other tools, there is a complete test suite, which is
always nice to check the installation.</p>

<h2>Exercises</h2>

<h3>CouchDB HTTP Document API documentation</h3>

<p>The documentation is
<a href="http://wiki.apache.org/couchdb/HTTP_Document_API">here</a>; there is
also a <a href="http://wiki.apache.org/couchdb/Complete_HTTP_API_Reference">reference</a></p>

<h3>HTTP commands</h3>

<p>Besides the basic CRUD <code>POST</code> <code>GET</code> <code>PUT</code> and <code>DELETE</code>, there is also
<code>HEAD</code> (for basic information on a document):</p>

<p><code>
$ curl -I -X HEAD http://localhost:5984/music/ee6637073ab24aaeeda094dcb3749a22
HTTP/1.1 200 OK
Server: CouchDB/1.1.1 (Erlang OTP/R15B)
Etag: "4-e70582ded641cebc5b259da96805344b"
Date: Mon, 30 Jan 2012 09:18:44 GMT
Content-Type: text/plain;charset=utf-8
Content-Length: 246
Cache-Control: must-revalidate
</code></p>

<p>When using <code>cURL</code>, the command <code>HEAD</code> must be used with the flag <code>-I</code>,
otherwise <code>cURL</code> will wait (endlessly) for data after the headers.</p>

<p>Finally, there is a <code>COPY</code> command, which as expected copies a
document (without having to retrieve it first):</p>

<p>```
$ curl -X COPY  http://localhost:5984/music/ee6637073ab24aaeeda094dcb3749a22 \
-H 'Destination: beatles'
{"id":"beatles","rev":"1-6ea1608de6609c9985ff06aa9bc23a16"}
$ curl http://localhost:5984/music/beatles | python -mjson.tool
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>100   221  100   221    0     0  78396      0 --:--:-- --:--:-- --:--:--  215k
{</p>

<pre><code>"_id": "beatles", 
"_rev": "1-6ea1608de6609c9985ff06aa9bc23a16", 
"albums": [
    {
        "title": "Help!", 
        "year": 1965
    }, 
    {
        "title": "Sgt. Pepper's Lonely Hearts Club Band", 
        "year": 1967
    }, 
    {
        "title": "Abbey Road", 
        "year": 1969
    }
], 
"name": "The Beatles"
</code></pre>

<p>}
```</p>

<h3><code>PUT</code> a new document with a specific <code>_id</code></h3>

<p>It is just a matter of specifying an id when creating the document:</p>

<p>```
$ curl -i -X PUT http://localhost:5984/music/sonic_youth \
-H "Content-Type: application/json" --data @-
{</p>

<pre><code>    "name": "Sonic Youth",
    "albums": [
            { "title": "Bad Moon Rising", "year": 1985
            },
            { "title": "Daydream Nation", "year": 1988
            },
            { "title": "Goo", "year": 1990
            }
</code></pre>

<p>]             <br/>
}     <br/>
HTTP/1.1 201 Created
Server: CouchDB/1.1.1 (Erlang OTP/R15B)
Location: http://localhost:5984/music/sonic_youth
Etag: "1-69886eb003b1f007cabaac678d5edc16"
Date: Mon, 30 Jan 2012 09:35:37 GMT
Content-Type: text/plain;charset=utf-8
Content-Length: 74
Cache-Control: must-revalidate</p>

<p>{"ok":true,"id":"sonic_youth","rev":"1-69886eb003b1f007cabaac678d5edc16"}
```</p>

<h3>Document with a text attachment</h3>

<p>To create an attachment, it is necessary to know the version of the
document, as it is considered an update. The URL for the attachment is
just the URL for its document, with any suffix (the suffix naming the
attachment). The <code>_rev</code> is specified by passing a <code>rev</code> parameter.</p>

<p>Using the document with <code>_id</code> 'beatles' created above, the attachment
is uploaded with:</p>

<p>```
$ curl -i -X PUT http://localhost:5984/music/beatles/lyrics?rev=1-6ea1608de6609c9985ff06aa9bc23a16 \
-H "Content-type: text/plain" --data @-
It was twenty years ago today
Sgt. Pepper taught the band to play...
Ctrl-D</p>

<p>HTTP/1.1 201 Created
Server: CouchDB/1.1.1 (Erlang OTP/R15B)
Location: http://localhost:5984/music/beatles/attachment
Etag: "2-2b22345fd492f31e3061e23a2b79fc08"
Date: Mon, 30 Jan 2012 09:41:51 GMT
Content-Type: text/plain;charset=utf-8
Content-Length: 70
Cache-Control: must-revalidate</p>

<p>{"ok":true,"id":"beatles","rev":"2-2b22345fd492f31e3061e23a2b79fc08"}
```</p>

<p>The document now has a new <code>_rev</code>.</p>

<p>To retrieve the attachment, just use its URL:</p>

<p><code>
$ curl http://localhost:5984/music/beatles/lyrics
It was twenty years ago todaySgt. Pepper taught the band to play...
</code></p>

<p>(the line breaks have been lost...)</p>

<p>Onward to Day 2!</p>
]]></content>
  </entry>
  
</feed>
