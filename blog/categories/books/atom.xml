<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2012-02-28T22:39:10+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 2 Warmups]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/28/concrete-mathematics-chapter-2-warmups/"/>
    <updated>2012-02-28T19:18:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/28/concrete-mathematics-chapter-2-warmups</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Warmups</h2>

<h3>$\sum_{k=4}^0 q_k$</h3>

<p>The meaning of such an expression is not clear, so there is no real
way to fail this exercise.</p>

<p>A first interpretation, maybe the common one, is that the sum is zero
because the range is empty. In other words, the sum is
$\sum_{4\le k\le 0} q_k$.</p>

<p>A second interpretation, perhaps for those used to programming
languages with very flexible loops could argue that the sum is
$q_4 + q_3 + q_2 + q_1 + q_0$.</p>

<p>I toyed briefly with a negative sum, similar to integrals with
reversed bounds, but I did not come up with the nice book solution
of $\sum_{k=m}^n = \sum_{k\le n} - \sum_{k\lt m}$, which is consistent
with and extends the first interpretation.</p>

<h3>Simplify $x([x\gt 0] - [x\lt 0])$</h3>

<p>It is easy to see that the expression has the same value as $|x|$:</p>

<div markdown="0">
\begin{align}
x([x\gt 0] - [x\lt 0]) &amp; = x (1-0)&amp;&amp;\text{when \(x\gt 0\)}\\\\
&amp; = x\\\\
x([x\gt 0] - [x\lt 0]) &amp; = x (0-1)&amp;&amp;\text{when \(x\lt 0\)}\\\\
&amp; = -x\\\\
x([x\gt 0] - [x\lt 0]) &amp; = 0&amp;&amp;\text{when \(x = 0\)}\\\\
\end{align}
</div>


<h3>Writing out sums</h3>

<p>The first one is easy:</p>

<div markdown="0">
\begin{align}
\sum_{0\le k\le 5}a_k = a_0+a_1+a_2+a_3+a_4+a_5\\\\
\end{align}
</div>


<p>The second one is tricky, is more than one way. One problem is that
$k$ is not explicitly defined, and I had assumed it was a natural,
when the authors thought of it as a integer; now the latter is in line
with the book conventions, so I was wrong and had missing terms. The
right answer is:</p>

<div markdown="0">
\begin{align}
\sum_{0\le k^2 \le 5}a_k = a_4 + a_1 + a_0 + a_1 + a_4\\\\
\end{align}
</div>


<h3>Triple Sum</h3>

<p>Here it is important to restrict the bounds as much as possible (but
no more); otherwise there is a risk of introducing spurious terms.</p>

<div markdown="0">
\begin{align}
\sum_{1\le i \lt j \lt k \le n}a_{ijk} &amp; = \sum_{i=1}^2 \sum_{j=i+1}^3 \sum_{k=j+1}^4 a_{ijk}\\\\
&amp; = \left((a_{123} + a_{124}) + a_{134} \right) + a_{234}\\\\
&amp; = \sum_{k=3}^4 \sum_{j=2}^{k-1} \sum_{i=1}^{j-1} a_{ijk}\\\\
&amp; = a_{123}+\left(a_{124} + (a_{134} + a_{234})\right)\\\\
\end{align}
</div>


<p>The terms appear in the same order, but are grouped in sums differently.</p>

<h3>Incorrect derivation</h3>

<p>The problem is the step</p>

<div markdown="0">
\begin{align}
\sum_{j=1}^n \sum_{k=1}^n = \frac{a_j}{a_k}\sum_{k=1}^n \sum_{k=1}^n \frac{a_k}{a_k}\\\\
\end{align}
</div>


<p>$k$ is already bound in the inner sum, so it is invalid to replace $j$
by $k$ in the outer.</p>

<h3>$\sum_k [1\le j\le k\le n]$</h3>

<p>This can be worked explicitly:</p>

<div markdown="0">
\begin{align}
\sum_k [1 \le j \le k \le n] &amp = \sum_k [1 \le j \le n] [j \le k \le n]\\\\
&amp; = \sum_{j\le k \le n} [1 \le j \le n]\\\\
&amp; = [1 \le j \le n] \sum_{j\le k \le n} 1\\\\
&amp; = [1 \le j \le n] (n-j+1)\\\\
\end{align}
</div>


<h3>$\bigtriangledown f(x)$</h3>

<p>The result is not surprising:</p>

<div markdown="0">
\begin{align}
\bigtriangledown x^{\overline{m}} &amp; = x^{\overline{m}} - (x-1)^{\overline{m}}\\\\
&amp; = x(x+1)\cdots(x+m-1) - (x-1)x\cdots(x+m-2)\\\\
&amp; = x(x+1)\cdots(x+m-2)(x+m-1-(x-1))\\\\
&amp; = m x^{\overline{m-1}}\\\\
\end{align}
</div>


<p>So $\bigtriangledown f(x)$ is the difference operator to use with
rising factorials.</p>

<h3>$0^{\overline{m}}$</h3>

<p>Clearly, when $m\lt 0$, $0^{\overline{m}} = 0$; when $m = 0$,
$0^{\overline{m}} = 1$ (to make the expression
$x^{\underline{1+0}}=x^{\underline 1}(x-1)^{\underline 0}$ work when $x=1$); I
had forgotten about $m&lt;0$, which was perhaps the easiest case, as $\frac{1}{m!}$
(it follows directly from the definition of falling factorials with negative
powers).</p>

<h3>Law of exponents for rising factorials</h3>

<p>It is easy to see that $x^{\overline{m+n}} = x^{\overline m}(x+m)^{\overline n}$:</p>

<div markdown="0">
\begin{align}
x^{\overline{m+n}} &amp; = x\cdots(x+m-1)(x+m)\cdots(x+m+n-1)\\\\
&amp; = \left( x\cdots(x+m-1) \right) \left( (x+m)\cdots(x+m+n-1) \right)\\\\
&amp; = x^{\overline m}(x+m)^{\overline n}\\\\
\end{align}
</div>


<p>From there, the value of rising factorials for negative powers follows quickly:</p>

<div markdown="0">
\begin{align}
1 = x^{\overline{-n+n}} &amp; = x^{\overline{-n}} (x-n)^\overline{n}\\\\
x^{\overline{-1}} &amp; = \frac{1}{(x-n)^\overline{n}}\\\\
&amp; = \frac{1}{(x-n)\cdots(x-1)}\\\\
&amp; = \frac{1}{(x-1)^{\underline{n}}}\\\\
\end{align}
</div>


<h3>Symmetric difference of a product</h3>

<p>To start, I quickly looked up the proof of the original derivative
product rule on
<a href="http://en.wikipedia.org/wiki/Product_rule#Proof_of_the_product_rule">Wikipedia</a>;
the geometric nature of the proof was illuminating (I believe I was
taught the so called
<a href="http://en.wikipedia.org/wiki/Product_rule#A_Brief_Proof">Brief Proof</a>
both in high-school and at university).</p>

<p>This geometric proof can be used for both the infinite and the finite
calculus, and its symmetric nature (there are two ways to compute the
area of the big rectangle:
$f(x)g(x)+(f(w)-f(x))g(w) + f(x)(g(w)-g(x))$ and
$f(x)g(x)+f(w)(g(w)-g(x)) + (f(w)-f(x))g(x)$) can be used in the
finite case. The symmetry (and equality) is restored
because in the infinite calculus, $\lim_{w\rightarrow x}f(w) = f(x)$
and $\lim_{w\rightarrow x}g(w) = g(x)$, a restoration that is not
possible in the finite calculus.</p>

<p>However, the equivalent finite calculus formulas,
$\bigtriangleup(uv) = u\bigtriangleup v + Ev\bigtriangleup u$ and
$\bigtriangleup(uv) = Eu\bigtriangleup v + v\bigtriangleup u$, have
together the symmetry they lack on their own.</p>

<h3>Wrapping up</h3>

<p>OK, that was not entirely bad (two small mistakes, both about negative
numbers blindness). Next step, the basic exercises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 2 Notes]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/27/concrete-mathematics-chapter-2-notes/"/>
    <updated>2012-02-27T10:54:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/27/concrete-mathematics-chapter-2-notes</id>
    <content type="html"><![CDATA[<p>After a long but busy silence, I have now a few notes on the second
chapter, Sums. As with
<a href="/blog/2012/01/06/concrete-mathematics-chapter-1-notes/">Chapter 1</a>,
these are nothing revolutionary; just some clarifications of the
points that were not obvious to me, as well as other, random
observations.</p>

<!--more-->


<p>Overall, this chapter felt less overwhelming than the first, despite
being much longer and introducing very powerful techniques. I have yet
to do the exercises, though, so I may still revise this judgement.</p>

<h3>Notation</h3>

<p>The authors mentions that the Sigma-notation is "... impressive to
family and friends". I can confirm that assessment.</p>

<p>The remark on keeping bounds simple actually goes beyond resisting
"premature optimisation", that is, removing terms just because they
are equal to zero. Sometimes, it is worth adding a zero term if it
simplifies the bounds. Such a trick is used in solving
$\sum_{1\le j\lt k\le n} \frac{1}{k-j}$, and I'll get back to this
point when I go over this solution.</p>

<p>The Iverson notation (or Iversonian) is a very useful tool, as is the
general Sigma-notation. About the latter, it already simplifies
variable changes a lot, but I found it useful (and less error prone)
to always write the variable change on the right margin (for instance
as $k \leftarrow k+1$) and to keep that change as the only one in a
given line of the rewrite; otherwise, no matter how trivial the
change, any error I make at that time will be hard to locate (I know;
I tried).</p>

<h3>Sums and Recurrence</h3>

<p>First we see how easy it is to use the repertoire method to build
solutions to common (or slightly generalised) sums. The only problem
with the repertoire method is it requires a well furnished repertoire
of solutions to basic recurrences; I'm sure I would never have come up
with the radix-change solution to the generalised Josephus
problem. And given that there is an infinite number of functions one
could try, a more directed method is sometimes necessary.</p>

<p>This section also shows how to turn some recurrence equations (such as
the Tower of Hanoi one) into a sum; this method involve a choice
($s_1$ can be any non-zero value), which could either simplify or
complicate the solution. I haven't done the exercises yet, so I don't
know to what extent the choice is obvious or tricky.</p>

<p>Finally it shows how to turn a recurrence expressed as a sum of all
the previous values into a simpler recurrence by computing the
difference between two successive values. This is one instance of a
more general simplification using a linear combination of a few
successive values.</p>

<h3>Manipulation of Sums</h3>

<p>Unsurprisingly, sums have the same basic properties as common
additions: distributive, associative and commutative laws. Only the
latter is really tricky, as it involves a change to the index
variable. As mentioned above, I found useful to make such changes
really clear and isolated in any reasoning.</p>

<p>With these laws confirmed, it is possible to build the first method
for solving sums: the perturbation method. It is very simple, and
while it does not always work, when it does it is very quick.</p>

<h3>Multiple Sums</h3>

<p>This is perhaps the first section where I had to slow down; basically
multiple sums are not different from simple sums, and manipulations
are defined by the distributive law, but index variable changes
(especially the rocky road variety) require special attention. This,
combined with "obvious" simplifications (obvious to the authors, and
sometimes in retrospect to the reader as well), gave me some
difficulties.</p>

<p>For instance, the solution to</p>

<div markdown="0">
\begin{align}
\sum_{1\le j\lt k\le n} \frac{1}{k-j}
\end{align}
</div>


<p>The index variable change $k \leftarrow k+j$ is explained as a
specific instance of the simplification of $k+f(j)$; more perplexing
are the ranges for $j$ and $k$ when the sum is replaced by a sum of sum:</p>

<div markdown="0">
\begin{align}
\sum_{1\le k\le n} \sum_{1\le j \le n-k} \frac{1}{k}
\end{align}
</div>


<p>The range for $j$ is built from $1\le j$ and $k+j\le n$, so there is
nothing really strange here.</p>

<p>The range for $k$, however, looks like a typo: certainly the authors
meant $1\le k\lt n$. A margin graffiti confirms the range, but it does
not really explain it.</p>

<p>The fact is, it is safe to let $k\le n$ here, because the sum over $j$
when $k=n$ is zero: not only the expression
$\sum_{1\le j \le k-n = 0} \frac{1}{k}$ is zero because there is no
$j$ that can satisfies the range predicate, but the closed form
of this sum, $\frac{k-n}{k}$, is also zero when $k=n$.</p>

<p>With the closed form checked, it is safe to add extra terms to
simplify the range of $k$.</p>

<p>What happens if you don't see this possible simplification? As
expected, the answer remains the same:</p>

<div markdown="0">
\begin{align}
\sum_{1\le k\lt n} \sum_{1\le j \le n-k} \frac{1}{k} &amp; = \sum_{1\le k\lt n} \frac{n-k}{k}\\\\
&amp; = \sum_{1\le k\lt n} \frac{n}{k} - \sum_{1\le k\lt n} \frac{k}{k}\\\\
&amp; = \sum_{1\le k\lt n} \frac{n}{k} - (n-1)\\\\
&amp; = \sum_{1\le k\lt n} \frac{n}{k} + \frac{n}{n} - n\\\\
&amp; = \sum_{1\le k\le n} \frac{n}{k} - n\\\\
&amp; = nH_n - n\\\\
\end{align}
</div>


<p>So to expend on the original advice of keeping the bounds as simple as
possible: sometimes it is possible to extend the bounds (in order to
simplify them), as long as the extra terms in closed form evaluate to
zero. If the extra terms are still defined as sums, just checking that
the range is empty might not be enough.</p>

<h3>General Methods</h3>

<p>A cool and fun section on the various ways to solve a given sum.</p>

<p>Method 0 is to look it up. This book, written before the rise of
Internet (I remember Internet in the early 1990's; most of it was still
indexed manually on the CERN index pages...), suggests a few books as
resources.</p>

<p>Fortunately, some of them have migrated to the
<a href="https://oeis.org/">Web</a>, which is a more suitable tool than books for
such knowledge; the combination of searches and instant updates is
hard to beat (a book remains best for a content that is mostly linear
and somewhat independent of time; a novel, or textbook, for
instance. References are better on Internet, free if possible, for
a subscription otherwise).</p>

<p>Method 1 is guessing then proving; proving in fact should be a
complement for all the other methods (except perhaps Method 0). Having
two independents proofs is always good.</p>

<p>Method 2 is the perturbation method. In this section example, we see
how an apparent failure can still be exploited by being imaginative.</p>

<p>Method 3 is the repertoire method. In this chapter it is usually much
simpler than in the first.</p>

<p>Method 4 uses calculus to get a first approximation, then uses other
methods to solve the equations for the error function.</p>

<p>Method 5 is a clever rewriting of the problem into a sum of sums;
like the repertoire method but unlike the others, it requires some
intuition to find a solution (perhaps more than the repertoire
method); I have bad memories of trying such a method to solve problems
at university, always somehow ending up right where I started. I guess
I will try other methods if I can.</p>

<p>Method 6 is the topic of the next section; method 7 is for another
chapter.</p>

<h3>Finite and Infinite Calculus</h3>

<p>This section was surprising and exciting, but not really that
complex. It really is a matter of adapting regular calculus reflexes to the
finite version. I have to see how it works in practice.</p>

<p>One thing that is causing me some trouble is the falling-power version
of the law of exponents:</p>

<div markdown="0">
\begin{align}
x^{\underline{m+n}} &amp; = x^{\underline m}(x-m)^{\underline n}\\\\
\end{align}
</div>


<p>While the rule is easy to prove and to remember, it is less easy than
the general one to recognise in practice; I failed to see it when it
came up in the solution to</p>

<div markdown="0">
\begin{align}
\Sigma xH_x\delta x\\\\
\end{align}
</div>


<p>Worse, even the explanation in the book, I had to write it down, play
with it, before seeing it.</p>

<p>So I'm thinking about a notation that would bring out the rule more
clearly, an extension of the <em>shift operator</em> $E$:</p>

<div markdown="0">
\begin{align}
E_k f(x) &amp; = f(x-k)\\\\
\end{align}
</div>


<p>This would turn the exponent law into</p>

<div markdown="0">
\begin{align}
x^{\underline{m+n}} &amp; = x^{\underline m} E_m x^{\underline n}\\\\
\end{align}
</div>


<p>Whether this is useful, or whether I'll get used to the original
notation anyway, we'll see in the exercises...</p>

<h3>Infinite Sums</h3>

<p>The last section is about infinite sums. The authors quite sensibly
restrict the scope to absolutely convergent sums, which have the
advantage that the three basic laws and the manipulations they allow
are still valid.</p>

<p>Once again, this was not overly difficult; the only point I had
trouble understanding was the existence of the subsets $F_j$ such that
$\sum_{k\in F_j} a_{j,k} \gt (A/A')A_j$ when
$\sum_{j\in G} A_j = A' \gt A$. But this last equation means that
$A/A' \lt 1$, so $(A/A')A_j \lt A_j$. The first equation is therefore
just a consequence of the fact that $A_j$ is a least upper bound.</p>

<p>Next post, the warmups.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Psychic Modeling (fast version)]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/13/psychic-modeling-fast-version/"/>
    <updated>2012-02-13T20:23:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/13/psychic-modeling-fast-version</id>
    <content type="html"><![CDATA[<p>In <a href="/blog/2012/02/10/psychic-modeling/">Psychic Modeling</a>, I described
a reasonably understandable implementation of a ticket generator for
the
<a href="http://www8.cs.umu.se/kurser/TDBAfl/VT06/algorithms/BOOK/BOOK/NODE19.HTM">Psychic Modeling Problem</a>. While
this version is not overly slow, it is not amazingly fast either.</p>

<p>As I'm refreshing my C skills, I thought it would be interesting to
try and implement a version as fast as possible.</p>

<!-- more -->


<h3>Design</h3>

<p>I represent a subset as bit patterns in a 32-bits integer. This means
I am limited to 32 different values (in other words, $n$ must be no
larger than 32). The upside is that I have extremely fast intersection
(<code>&amp;</code>) and union (<code>|</code>) operations, among others.</p>

<h3>Memory Management</h3>

<p>I use a work memory allocated at the beginning of the search;
additional memory is allocated on the stack (using C99 features), and
the selected tickets are just printed to avoid having to remember
them.</p>

<p>The work memory is large enough to store $1 + \beta$ times a block
large that can hold the complete set of $j$-subsets. The first block
keeps the remaining $j$-subsets, and there's an extra block for each
random ticket: each time (for a total of $\beta$) a random ticket is
generated, the $j$-subsets that are not covered yet is computed for
this ticket; after I have generated $\beta$ tickets, I copy the work
block of the best one over the first one.</p>

<p>I could have use just 3 blocks, a reference, the best so far, and one
for the current random ticket, and copy from the current to the best
each time the current ticket is better. There would be more copy
operations, but perhaps less movement between the cache and the
memory. The current design requires less than 2M, and only one copy
operation per random ticket.</p>

<h3>Non portable features</h3>

<p>I am using a few GCC
<a href="http://gcc.gnu.org/onlinedocs/gcc-4.6.2/gcc/Other-Builtins.html">built-in</a>
bit-level operations (number of bits, index of least significant 1
bit, and count of trailing zeroes);
<a href="http://www-graphics.stanford.edu/~seander/bithacks.html">Bit Twiddling Hacks</a>
and <a href="http://www.hackersdelight.org/">Hacker's Delight</a> have portable
alternatives.</p>

<p>I also use <code>/dev/random</code> as a source of random numbers; replacing
<code>dev_random</code> by <code>random</code> would restore portability (but the output
would always be the same, and the random state is reset when the
program starts).</p>

<h3>Performance</h3>

<p>So, is it fast?</p>

<p>```
$ time ./psychic 18 10 7 6 > output.txt</p>

<p>real    0m0.289s
user    0m0.238s
sys     0m0.050s
```</p>

<p>The program found 71 tickets covering all 7-subsets with at least 6
numbers in less than a second. Even when the conditions are not that
good, it remains fast:</p>

<p>```
$ time ./psychic 18 7 7 6 > output.txt</p>

<p>real    0m5.445s
user    0m5.007s
sys     0m0.430s
```</p>

<p>Here it generated 1077 tickets using the smaller ticket size from
<a href="http://www.cs.sunysb.edu/~skiena/papers/lotto.doc">Younas and Skiena paper</a>;
the paper had a 1080 tickets solution, so my version is effective.</p>

<p>Of course, it would be useless and unfair to compare the speed of this
version against the numbers from the paper; more relevant is the
difference with the Haskell version: while the latter was not meant to
be fast, it is hundreds of times slower. I suppose it would be
interesting to try and make it faster, but I suspect it would be just
as ugly or uglier than the C version. And I like to keep using Haskell as a
design and exploratory tool.</p>

<h3>Overview of the code</h3>

<h4><code>solve</code></h4>

<p>The main function, <code>solve</code>, is more complex than in the Haskell
version. It allocates the work memory, and fills it with <code>init</code>. A
first ticket is used in <code>init</code> to filter out $j$-subsets.</p>

<p>Then the loop for the other tickets starts. It of course stops when
there are no remaining $j$-subsets.</p>

<p>The subset of remaining numbers is computed with <code>funion</code> (fold
union), and the <code>digits</code> array prepared to be used in <code>sample</code>. It
consists of the individual bits of the number representing the
remaining numbers subset. It is computed by repeatedly isolating the
rightmost 1 bit (with <code>d &amp; -d</code>), then clearing this bit (with <code>d &amp;= d -1</code>).</p>

<p>A first ticket is randomly generated and its uncovered set
computed. It is also set as the best new ticket (and indeed is the
best so far). Then for the remaining $\beta-1$ new tickets, the
uncovered set is computed as well, and if the new set is smaller than
the best's, the new ticket becomes the best as well.</p>

<p>The best ticket is printed, the main work memory is updated with the
best uncovered set, and if there are any remaining $j$-subsets to
find, we loop.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>solve  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">solve</span><span class="p">(</span><span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">j</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="n">combi</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'><span class="n">UINT</span> <span class="o">*</span><span class="n">work</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">BETA</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">UINT</span> <span class="n">t</span> <span class="o">=</span> <span class="n">first_perm</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">show_set</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">init</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">d</span> <span class="o">=</span> <span class="n">funion</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">bc</span> <span class="o">=</span> <span class="n">bits_count</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">digits</span><span class="p">[</span><span class="n">bc</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">-</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="n">d</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">best_ticket</span><span class="p">,</span> <span class="n">best_remaining</span><span class="p">,</span> <span class="n">best_pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">best_ticket</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">bc</span><span class="p">,</span> <span class="n">digits</span><span class="p">);</span>
</span><span class='line'>    <span class="n">best_remaining</span> <span class="o">=</span> <span class="n">check_cover</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">best_ticket</span><span class="p">,</span> <span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">BETA</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">new_ticket</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">bc</span><span class="p">,</span> <span class="n">digits</span><span class="p">);</span>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">new_remaining</span> <span class="o">=</span> <span class="n">check_cover</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">new_ticket</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">new_remaining</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">best_remaining</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">best_ticket</span> <span class="o">=</span> <span class="n">new_ticket</span><span class="p">;</span>
</span><span class='line'>            <span class="n">best_remaining</span> <span class="o">=</span> <span class="n">new_remaining</span><span class="p">;</span>
</span><span class='line'>            <span class="n">best_pos</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">show_set</span><span class="p">(</span><span class="n">best_ticket</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">best_remaining</span><span class="p">)</span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span><span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="p">(</span><span class="n">best_pos</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">)</span> <span class="o">*</span> <span class="n">best_remaining</span><span class="p">);</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">best_remaining</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">free</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>init</code></h4>

<p><code>init</code>'s purpose it to avoid wasting a loop over the $j$-subsets by
merging the generation of $j$-subsets with the coverage of a first
permutation (defined as <code>[1..k]</code> in <code>solve</code>). The returned value is
not size of the not yet covered set of $j$-subsets.</p>

<p>If all tickets had to be generated randomly, 0 could be passed instead
of a ticket to keep all $j$-subsets.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>init  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">UINT</span> <span class="nf">init</span><span class="p">(</span><span class="n">UINT</span> <span class="n">c</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">w</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">UINT</span> <span class="n">v</span> <span class="o">=</span> <span class="n">first_perm</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">c</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">bits_count</span><span class="p">(</span><span class="n">v</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">k</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>        <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="n">next_perm</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>check_cover</code></h4>

<p><code>check_cover</code> has a similar design as <code>init</code>, but reads the
$j$-subsets from the work memory <code>from</code> instead of generating them.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>check_cover  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">UINT</span> <span class="nf">check_cover</span><span class="p">(</span><span class="n">UINT</span> <span class="n">r</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">t</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">from</span><span class="p">[],</span> <span class="n">UINT</span> <span class="n">to</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">r</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">bits_count</span><span class="p">(</span><span class="n">from</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>        <span class="n">to</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">from</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>sample</code></h4>

<p><code>sample</code> is very similar to the Hashell version (indeed they are both
based on the same algorithm); here the <code>digits</code> array plays the role
that <code>ds</code> played in the Haskell version.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sample  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">UINT</span> <span class="nf">sample</span><span class="p">(</span><span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">ds</span><span class="p">[])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">UINT</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">ds</span><span class="p">);</span>
</span><span class='line'><span class="n">UINT</span> <span class="n">p</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="n">randomR</span><span class="p">(</span><span class="n">n</span><span class="p">)];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ds</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">|</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span> <span class="o">|</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>next_perm</code></h4>

<p>The <code>next_perm</code> is from <a href="http://graphics.stanford.edu/~seander/bithacks.html#NextBitPermutation">Bit Twiddling Hacks</a>, and explained <a href="http://www.alexbowe.com/generating-binary-permutations-in-popcount-or">here</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>next_perm  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">UINT</span> <span class="nf">next_perm</span><span class="p">(</span><span class="n">UINT</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UINT</span> <span class="n">t</span> <span class="o">=</span> <span class="n">v</span> <span class="o">|</span> <span class="p">(</span><span class="n">v</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(((</span><span class="o">~</span><span class="n">t</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">-~</span><span class="n">t</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">(</span><span class="n">__builtin_ctz</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Compiling and running</h4>

<p>Using <code>gcc</code>, the necessary option is <code>-std=c99</code> to activate C99
support; <code>-O3</code> gives much (really) better performance, while <code>-Wall</code>
is in general a good idea:</p>

<p><code>
$ gcc-4.6.2 -Wall -O3 -std=c99 psychic.c -o psychic
</code></p>

<p>To run it, just pass the $n$, $k$, $j$ and $l$ parameters on the
command line. There is no checks, so avoid mistakes. The program
outputs the generated tickets:</p>

<p><code>
$ ./psychic 5 3 3 2
1, 2, 3
1, 4, 5
</code></p>

<h3>Wrapping up</h3>

<p>After I completed the Haskell version, I found it not overly difficult
to implement the C one. I was lucky to have discovered Bit Twiddling
Hacks the week before; the code fragments there were very helpful in
writing efficient set oriented functions over words.</p>

<p>Surprisingly, I had just one bug to track (I was using a variable both
as parameter and temporary storage in one of the function); that was
lucky as I'm not sure I could have debugged such code.</p>

<h3>Complete Code</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Psychic Modeling Fast Version  (psychic.c)</span> <a href='/downloads/code/algo-design-manual/psychic.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdbool.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">UINT</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define BETA 100</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define first_perm(n) ((1 &lt;&lt; n) - 1);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Mac OS X/Linux specific */</span>
</span><span class='line'><span class="kt">FILE</span> <span class="o">*</span><span class="n">drand</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">UINT</span> <span class="nf">def_random</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">drand</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define _random() def_random()</span>
</span><span class='line'>
</span><span class='line'><span class="cp">/* GCC specific definitions */</span>
</span><span class='line'><span class="cp">#define bits_count(v) __builtin_popcount(v)</span>
</span><span class='line'><span class="cp">#define least_one(v) __builtin_ffs(v)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* http://www-graphics.stanford.edu/~seander/bithacks.html#NextBitPermutation */</span>
</span><span class='line'><span class="cm">/* return next lexicographic permutation */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">next_perm</span><span class="p">(</span><span class="n">UINT</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">t</span> <span class="o">=</span> <span class="n">v</span> <span class="o">|</span> <span class="p">(</span><span class="n">v</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(((</span><span class="o">~</span><span class="n">t</span> <span class="o">&amp;</span> <span class="o">-~</span><span class="n">t</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">__builtin_ctz</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* following</span>
</span><span class='line'><span class="cm">   http://mikeash.com/pyblog/friday-qa-2011-03-18-random-numbers.html */</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * return a random UINT 0 &lt;= r &lt; n</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">randomR</span><span class="p">(</span><span class="n">UINT</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">two31</span> <span class="o">=</span> <span class="mi">1U</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">max</span> <span class="o">=</span> <span class="p">(</span><span class="n">two31</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="n">_random</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="n">max</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">r</span> <span class="o">%</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* http://rosettacode.org/wiki/Evaluate_binomial_coefficients#C */</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * binomial coefficient</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">combi</span><span class="p">(</span><span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">d</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">k</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">*=</span> <span class="n">n</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">d</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">r</span> <span class="o">%</span> <span class="n">d</span><span class="p">))</span>
</span><span class='line'>            <span class="n">r</span> <span class="o">/=</span> <span class="n">d</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * select k digits from ds. n is length of ds</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">sample</span><span class="p">(</span><span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">ds</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">ds</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">p</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="n">randomR</span><span class="p">(</span><span class="n">n</span><span class="p">)];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ds</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">|</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span> <span class="o">|</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * displays subset expressed as bit positions</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">show_set</span><span class="p">(</span><span class="n">UINT</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">bool</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">least_one</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class='line'>        <span class="n">f</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">&amp;=</span> <span class="n">v</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * union of all subsets</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">funion</span><span class="p">(</span><span class="n">UINT</span> <span class="n">c</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">w</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">|=</span> <span class="n">w</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * init work memory with subsets that are far from</span>
</span><span class='line'><span class="cm"> * initial ticket (defined as first_perm)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">init</span><span class="p">(</span><span class="n">UINT</span> <span class="n">c</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">w</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">v</span> <span class="o">=</span> <span class="n">first_perm</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">c</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bits_count</span><span class="p">(</span><span class="n">v</span> <span class="o">&amp;</span> <span class="n">k</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>            <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">next_perm</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * copies subsets that are far from passed ticket</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">UINT</span> <span class="nf">check_cover</span><span class="p">(</span><span class="n">UINT</span> <span class="n">r</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">t</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">from</span><span class="p">[],</span> <span class="n">UINT</span> <span class="n">to</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bits_count</span><span class="p">(</span><span class="n">from</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>            <span class="n">to</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">from</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">solve</span><span class="p">(</span><span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">k</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">j</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">r</span> <span class="o">=</span> <span class="n">combi</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="o">*</span><span class="n">work</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">BETA</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">t</span> <span class="o">=</span> <span class="n">first_perm</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">show_set</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">init</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">d</span> <span class="o">=</span> <span class="n">funion</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">bc</span> <span class="o">=</span> <span class="n">bits_count</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">digits</span><span class="p">[</span><span class="n">bc</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span> <span class="o">&amp;</span> <span class="o">-</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">&amp;=</span> <span class="n">d</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UINT</span> <span class="n">best_ticket</span><span class="p">,</span> <span class="n">best_remaining</span><span class="p">,</span> <span class="n">best_pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">best_ticket</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">bc</span><span class="p">,</span> <span class="n">digits</span><span class="p">);</span>
</span><span class='line'>        <span class="n">best_remaining</span> <span class="o">=</span> <span class="n">check_cover</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">best_ticket</span><span class="p">,</span> <span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">UINT</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">BETA</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">UINT</span> <span class="n">new_ticket</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">bc</span><span class="p">,</span> <span class="n">digits</span><span class="p">);</span>
</span><span class='line'>            <span class="n">UINT</span> <span class="n">new_remaining</span> <span class="o">=</span> <span class="n">check_cover</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">new_ticket</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">new_remaining</span> <span class="o">&lt;</span> <span class="n">best_remaining</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">best_ticket</span> <span class="o">=</span> <span class="n">new_ticket</span><span class="p">;</span>
</span><span class='line'>                <span class="n">best_remaining</span> <span class="o">=</span> <span class="n">new_remaining</span><span class="p">;</span>
</span><span class='line'>                <span class="n">best_pos</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">show_set</span><span class="p">(</span><span class="n">best_ticket</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">best_remaining</span><span class="p">)</span>
</span><span class='line'>            <span class="n">memcpy</span><span class="p">(</span><span class="n">work</span><span class="p">,</span> <span class="n">work</span><span class="o">+</span><span class="p">(</span><span class="n">best_pos</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UINT</span><span class="p">)</span> <span class="o">*</span> <span class="n">best_remaining</span><span class="p">);</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">best_remaining</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UINT</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sscanf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;%u&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sscanf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="s">&quot;%u&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sscanf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="s">&quot;%u&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sscanf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="s">&quot;%u&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">l</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drand</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;/dev/random&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">l</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fclose</span><span class="p">(</span><span class="n">drand</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Psychic Modeling]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/10/psychic-modeling/"/>
    <updated>2012-02-10T12:26:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/10/psychic-modeling</id>
    <content type="html"><![CDATA[<p>In the <a href="http://www.algorist.com/">Algorithm Design Manual</a>, Stephen
Skiena entertains, edifies and educates his readers with so called
"War Stories", that is, interesting implementation challenges from his
own experience.</p>

<p>The first War Story is
<a href="http://www8.cs.umu.se/kurser/TDBAfl/VT06/algorithms/BOOK/BOOK/NODE19.HTM">Psychic Modeling</a>,
an attempt to exploit "precognition" to improve the chances of winning
the lottery.</p>

<!-- more -->


<p>This war story is also the subject of one of the first implementation
projects. In chapter 1.  A few years ago, when I bought the book, I
had easily solved the previous exercises, but then I reached this
implementation project, and I got stuck. I could not even get a
high level sketch of what a solution would look like.</p>

<p>Certainly, if I was unable to solve an exercise of the first chapter
of this book, it was hopelessly beyond my reach...</p>

<p>Still, I had the ambition of one day resuming my reading, and I would
from time to time give this problem another attempt.</p>

<p>Recently, it feels like all the pieces finally fell into places, and
after a few hours of coding I had an (naive) implementation. Yet I
still have doubts, as the only reference I have to compare my solution
with, Skiena's own paper
(<a href="http://www.cs.sunysb.edu/~skiena/papers/lotto.doc">Randomized Algorithms for Identifying Minimal Lottery Ticket Sets</a>),
apparently is worse (in terms of necessary tickets) than my solution...</p>

<p>Note on this paper: unfortunately it is in Word format, and I found
that some characters are not properly displayed on non MS Word text
processing tools (such as Open Office). So you might have to open it
with MS Word or MS Word Viewer.</p>

<h3>The problem</h3>

<p>I will use the notation from the book rather than the paper. The
problem is defined as this:</p>

<ul>
<li>a lottery ticket has $k$ numbers</li>
<li>a win requires $j$ numbers from the winning ticket</li>
<li>the psychic visualises $n$ numbers</li>
<li>of which $j$ are "guaranteed" to be on the winning ticket.</li>
</ul>


<h3>Defining "sufficient coverage"</h3>

<p>A first difference between the paper's approach and mine is that I'm
using the notion of coverage size rather than distance: I measure how
similar two subsets are by defining their cover as the size of their
intersection; in their paper the authors use a notion of distance defined as
the size of the difference of the two subsets (perhaps to help with
the design of heuristics in the backtracking version of their algorithm).</p>

<p>Now, clearly the two approaches are equivalent; it is less clear that
the formulas derived from either are indeed the same.</p>

<p>For a given $j$-subset, how many $j$-subsets have a coverage of at
least $l$ with the first one? The covered $j$-subsets must have at
least $l$ numbers (between $l$ and $j$, to be precise) in common with
the first one, and the rest taken from the $n-j$ other numbers. This gives</p>

<div markdown="0">
\begin{align}
\sum_{l \le i \le j} \binom{j}{i} \binom{n-j}{j-i}
\end{align}
</div>


<p>For a given $j$-subset, how many $j$-subsets are within $j-l$ distance
of the first one? We can choose at most $j-l$ numbers out of the $n-j$
rest; and complete with numbers from the first subset. This gives</p>

<div markdown="0">
\begin{align}
\sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{j-i} = \sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{i}
\end{align}
</div>


<p>It took me a while to confirm it, but the formulas are indeed the
same:</p>

<div markdown="0">
\begin{align}
\sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{i} &amp; = \sum_{0 \le i \le j-l} \binom{n-j}{i} \binom{j}{j-i}\\\\
&amp; = \sum_{l-j \le i \le 0} \binom{n-j}{-i} \binom{j}{j+i}&amp;&amp;\text{changing the sign of \(i\)}\\\\
&amp; = \sum_{l \le j+i \le j} \binom{n-j}{-i} \binom{j}{j+i}\\\\
&amp; = \sum_{l \le i \le j} \binom{n-j}{j-i} \binom{j}{i}&amp;&amp;\text{replacing \(j+i\) by \(i\)}\\\\
\end{align}
</div>


<h3>Size of a ticket</h3>

<p>Note that I do not use the $k$ size of a ticket. In fact, in my
original design, I used it but ignored $j$; reading the paper I
realised that $j$ was indeed critical: one of the $j$-subsets will be
on the winning ticket, so they are the ones we need to cover. However,
I could not understand why the paper did not use the potentially
larger size of a ticket to cover more $j$-subsets.</p>

<p>Restated with a complete ticket, the coverage formula becomes</p>

<div markdown="0">
\begin{align}
\sum_{l \le i \le j} \binom{k}{i} \binom{n-k}{j-i}
\end{align}
</div>


<p>This apparent small change actually reduces the lower bound of the
necessary tickets significantly. For $n=15$, $k=6$, $j=5$, $l=4$, for
instance, will the paper offers as a lower bound $58$, the formula
above gives $22$.</p>

<p>So the question is: is it valid to use the possibly larger value $k$
when generating tickets? I could not think of any reason not too, and
if I'm right, this gives each ticket a much larger cover, and
therefore a lower number of necessary tickets.</p>

<h2>Implementation</h2>

<p>For a first effort, I chose to code in Haskell, and favoured simplicity
over speed. The code is indeed both simple, and wasteful, but Moore's
Law says that computers have become about 1000 times faster since the
time the paper was written, so I have some margin.</p>

<p>To keep things simple, sets and subsets are just lists.</p>

<h3>Support functions</h3>

<p>Such functions ought to belong to a dedicated library (and perhaps
they do); I include them to keep the implementation mostly
self-contained.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Support functions  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fact</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">product</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'><span class="nf">combi</span> <span class="n">n</span> <span class="n">c</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fact</span> <span class="n">n</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">div</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">fact</span> <span class="n">c</span> <span class="o">*</span> <span class="n">fact</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">c</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">remainingNumbers</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="n">union</span> <span class="kt">[]</span> <span class="n">js</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>fact</code> is just the factorial; <code>combi</code> computes the binomial
coefficient, and <code>remainingNumbers</code> is just the union of all the
passed $j$-subsets.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Generating Combinations  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">genCombi</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="n">k</span> <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">=</span> <span class="p">[</span><span class="n">l</span><span class="kt">:</span><span class="n">cs</span> <span class="o">|</span> <span class="n">cs</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">genCombi</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">ls</span><span class="p">]</span> <span class="o">++&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                <span class="n">genCombi</span> <span class="n">k</span> <span class="n">ls</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>genCombi k s</code> generates the $k$-subsets of $s$.</p>

<h3>Lower Bound Estimate</h3>

<p>These are simple implementations of the formula above.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Lower Bound Estimates  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="n">sum</span> <span class="p">[</span> <span class="p">(</span><span class="n">combi</span> <span class="n">k</span> <span class="n">i</span><span class="p">)</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                        <span class="p">(</span><span class="n">combi</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">)</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="p">))</span> <span class="o">|</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="p">[</span><span class="n">l</span><span class="o">..</span><span class="n">j</span><span class="p">]]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">lowerBound</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">combi</span> <span class="n">n</span> <span class="n">j</span><span class="p">)</span> <span class="o">/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                 <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>ticketCover</code> just implements the coverage estimate I defined above
(the one that uses $k$); <code>lowerBound</code> computes the lower bound for a
single win.</p>

<h3>Coverage</h3>

<p>As stated above, I define the cover between two subsets as the size of
their intersection, and define sufficient coverage as the cover being
larger than $l$.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Defining Coverage  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">cover</span> <span class="n">l1</span> <span class="n">l2</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">intersect</span> <span class="n">l1</span> <span class="n">l2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="ow">=</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'><span class="nf">notCoveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">notCoveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span><span class='line'><span class="nf">notCoveredBatch</span> <span class="n">l</span> <span class="n">ts</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="n">notCovered</span> <span class="n">l</span><span class="p">)</span> <span class="n">js</span> <span class="n">ts</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>cover</code> implements the cover definition; <code>coveredP</code> and <code>notCoveredP</code>
are predicates that check for (or against) sufficient coverage.</p>

<p><code>notCovered</code> and <code>notCoveredBatch</code> computes the subsets that are not covered by a single ticket or a set
of tickets, respectively; they are used to compute what is left to
cover after selecting a ticket, and to check solutions.</p>

<p>Finally <code>coverageScore</code> computes the size of of the covered subsets by
a ticket. This function is used to compare potential tickets and
select the one with the best (i.e. largest) coverage.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Checking the estimates  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">checkFormula</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">candidates</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">ticket</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>  <span class="n">covered</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">ticket</span><span class="p">)</span> <span class="n">candidates</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kr">in</span> <span class="n">length</span> <span class="n">covered</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>checkFormula</code> computes the size of the coverage of a single ticket;
it can be used to confirm the value of <code>ticketCover</code> above (and as far
as I can tell from my checks, it does).</p>

<h3>Solution Loop</h3>

<p>The solution loop takes the parameters and a ticket candidate
generating function; it then gets one ticket at a time, computes the
$j$-subsets not covered yet, and repeat until the remaining
$j$-subsets set becomes empty.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Solution Loop  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">solve</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">gc</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">jtuples</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">loop</span> <span class="n">jtuples</span>
</span><span class='line'> <span class="kr">where</span> <span class="n">loop</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="n">loop</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>     <span class="n">t</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">gc</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span>
</span><span class='line'>     <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">loop</span> <span class="o">$</span> <span class="n">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span>
</span><span class='line'>     <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">ts</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>solve</code> function expects the candidate generation function to be a
monad; this is to make it possible to use random number generators.</p>

<h3>Naive Ticket Selection</h3>

<p>I do not really know how to navigate subsets, so I won't try to
implement a backtracking solution as describe in the paper. Instead, I
have what is really the simplest greedy algorithm: when a new ticket
is needed, get the one that has the best coverage among all the
possible tickets:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Naive Ticket Selection  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">getCandidate</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">tickets</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">k</span> <span class="n">numbers</span>
</span><span class='line'>  <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kr">in</span> <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So for each $j$-subsets set, generate all the $k$-subsets, and compare
their coverage.</p>

<p>Needless to say, this function does not return anything anytime soon
for even slightly large values of $n$.</p>

<h3>Randomised Ticket Selection</h3>

<p>To improve the performance (well, to get a result in my lifetime), I
am using what I understand to be the same approach as in the paper:
generates $\beta$ tickets, compare their coverage of the remaining
subsets, and keep the best one.</p>

<p>The different with the paper, as mentioned before, is that my tickets
are $k$-subsets rather than $j$-subsets themselves.</p>

<p>I first need a function to generate a random combination. I'm using a
method derived from Knuth (no reference as I don't have Volume 4 just yet).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample Generation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">sample</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="n">k</span> <span class="n">ds</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">sample</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">randomRIO</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">length</span> <span class="n">ds</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">t</span> <span class="ow">=</span> <span class="n">ds</span><span class="o">!!</span><span class="n">p</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">not</span> <span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">elem</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">s</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kr">then</span> <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="kr">else</span> <span class="n">return</span> <span class="p">(</span><span class="n">head</span> <span class="n">ds</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The generating function is very similar to the naive one</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Randomised Generating Function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">getCandidateRandom</span> <span class="n">beta</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>  <span class="n">tickets</span> <span class="ow">&lt;-</span> <span class="n">replicateM</span> <span class="n">beta</span> <span class="p">(</span><span class="n">sample</span> <span class="n">k</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The only difference is the <code>tickets</code> candidate set: the naive function
generates them all; the randomised one selects $\beta$ randomly.</p>

<h3>Compatibility with the paper version</h3>

<p>By using <code>solve n j j l</code> instead of <code>solve n k j l</code>, my implementation
should compute subset coverage the same way the paper's implementation
does.</p>

<h3>Testing and Results</h3>

<p>I will not compare speed, as this would be meaningless. But I can check
whether different values for ticket size can indeed help reduce the size of
the covering set.</p>

<p>Let's start with a very simple problem, where $n=5$, $k=3$, $j=3$ and
$l=2$.</p>

<p>I don't really need to generate the $j$-subsets, but if I do I can
check the solution.</p>

<p>The solution itself is computed by passing a ticket generating
function; I could have used <code>getCandidate</code>, but here I'm passing
<code>getCandidateRandom</code> with a $\beta=100$.</p>

<p>The <code>notCovered</code> set is empty, so the solution is at least a covering one.</p>

<p>The solution has two tickets, and the lower bound confirms it is
pretty good.</p>

<p><code>
*Main&gt; let problem = genCombi 3 [1..5]
*Main&gt; solution &lt;- solve 5 3 3 2 (getCandidateRandom 100)
*Main&gt; solution
[[3,4,5],[1,2,4]]
*Main&gt; notCoveredBatch 2 solution problem
[]
*Main&gt; lowerBound 5 3 3 2
1.4285714285714286
</code></p>

<p>Next test, with $n=15$, $k=5$, $j=5$ and $l=4$. The paper reports that
they found a solution with $137$ tickets. As $k=j$, my algorithm
cannot really beat that (and indeed finds a solution of the same size,
if I try a couple of times):</p>

<p><code>
*Main&gt; let problem = genCombi 5 [1..15]
*Main&gt; solution &lt;- solve 15 5 5 4 (getCandidateRandom 100)
*Main&gt; length solution
137
*Main&gt; notCoveredBatch  4 solution problem
[]
*Main&gt; lowerBound 15 5 5 4
58.88235294117647
</code></p>

<p>For the next test, I should have a better solution than the paper, as
$k$ is larger than $j$: $n=15$, $k=6$, $j=5$, $l=4$.</p>

<p>The paper has a lower bound of $58$, and a solution of size $138$, but my
lower bound is $22$, and my solution has size $57$.</p>

<p><code>
*Main&gt; let problem = genCombi 5 [1..15]
*Main&gt; solution &lt;- solve 15 6 5 4 (getCandidateRandom  100)
*Main&gt; length solution
57
*Main&gt; notCoveredBatch 4 solution problem
[]
*Main&gt; lowerBound 15 6 5 4
21.29787234042553
</code></p>

<p>When the difference between $k$ and $j$ becomes large, the solution
improves significantly: with $n=18$, $k=10$, $j=7$, $l=6$, the paper
has a lower bound of $408$, mine is $18$. The paper's solution has
size $1080$, but mine is just $73$.</p>

<p><code>
*Main&gt; let problem = genCombi 7 [1..18]
*Main&gt; solution &lt;- solve 18 10 7 6 (getCandidateRandom 100)
*Main&gt; length solution
73
*Main&gt; notCoveredBatch 6 solution problem
[]
*Main&gt; lowerBound 18 10 7 6
17.68
</code></p>

<h3>Wrapping up</h3>

<p>Even if my approach is ultimately wrong, I can say I must be close to
an actual solution. I could (and probably will, given time) try to
rewrite my solution in C, and focus on performance.</p>

<p>So I declare this problem conquered, I will resume my reading.</p>

<h3>Complete code</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Psychic Modeling Implementation (psychic.hs)</span> <a href='/downloads/code/algo-design-manual/psychic.hs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Ord</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- helpers functions</span>
</span><span class='line'><span class="nf">fact</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">product</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'><span class="nf">combi</span> <span class="n">n</span> <span class="n">c</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fact</span> <span class="n">n</span><span class="p">)</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="p">(</span><span class="n">fact</span> <span class="n">c</span> <span class="o">*</span> <span class="n">fact</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nf">remainingNumbers</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="n">union</span> <span class="kt">[]</span> <span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- generate combinations</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">genCombi</span> <span class="n">k</span> <span class="p">(</span><span class="n">l</span><span class="kt">:</span><span class="n">ls</span><span class="p">)</span> <span class="ow">=</span> <span class="p">[</span><span class="n">l</span><span class="kt">:</span><span class="n">cs</span> <span class="o">|</span> <span class="n">cs</span> <span class="ow">&lt;-</span> <span class="n">genCombi</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">ls</span><span class="p">]</span> <span class="o">++</span>
</span><span class='line'>                    <span class="n">genCombi</span> <span class="n">k</span> <span class="n">ls</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- estimates for the solution size</span>
</span><span class='line'><span class="nf">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="n">sum</span> <span class="p">[</span> <span class="p">(</span><span class="n">combi</span> <span class="n">k</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span>
</span><span class='line'>                            <span class="p">(</span><span class="n">combi</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">)</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="p">))</span> <span class="o">|</span> <span class="n">i</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="n">l</span><span class="o">..</span><span class="n">j</span><span class="p">]]</span>
</span><span class='line'><span class="nf">lowerBound</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">combi</span> <span class="n">n</span> <span class="n">j</span><span class="p">)</span> <span class="o">/</span>
</span><span class='line'>                     <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">ticketCover</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- definition of coverage measure</span>
</span><span class='line'><span class="nf">cover</span> <span class="n">l1</span> <span class="n">l2</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">intersect</span> <span class="n">l1</span> <span class="n">l2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- predicate functions: check cover between ticket and j-subset</span>
</span><span class='line'><span class="nf">coveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&lt;=</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'><span class="nf">notCoveredP</span> <span class="n">l</span> <span class="n">t</span> <span class="n">j</span> <span class="ow">=</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">cover</span> <span class="n">t</span> <span class="n">j</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- keep only j-subsets that are not covered by tickets</span>
</span><span class='line'><span class="nf">notCoveredBatch</span> <span class="n">l</span> <span class="n">ts</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="n">notCovered</span> <span class="n">l</span><span class="p">)</span> <span class="n">js</span> <span class="n">ts</span>
</span><span class='line'><span class="nf">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">notCoveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- length of j-subsets from js that are sufficiently covered by t</span>
</span><span class='line'><span class="nf">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">t</span><span class="p">)</span> <span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- check the coverage of a single k number ticket on the C_j^n</span>
</span><span class='line'><span class="c1">-- potentials; can be compared against ticketCover estimate</span>
</span><span class='line'><span class="nf">checkFormula</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">candidates</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>      <span class="n">ticket</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>      <span class="n">covered</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">coveredP</span> <span class="n">l</span> <span class="n">ticket</span><span class="p">)</span> <span class="n">candidates</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">length</span> <span class="n">covered</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- compute solution given a candidate generator</span>
</span><span class='line'><span class="nf">solve</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">gc</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">jtuples</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">j</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">loop</span> <span class="n">jtuples</span>
</span><span class='line'> <span class="kr">where</span> <span class="n">loop</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'>       <span class="n">loop</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>         <span class="n">t</span> <span class="ow">&lt;-</span> <span class="n">gc</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span>
</span><span class='line'>         <span class="n">ts</span> <span class="ow">&lt;-</span> <span class="n">loop</span> <span class="o">$</span> <span class="n">notCovered</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span>
</span><span class='line'>         <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">ts</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- naive candidate generator</span>
</span><span class='line'><span class="nf">getCandidate</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>      <span class="n">tickets</span> <span class="ow">=</span> <span class="n">genCombi</span> <span class="n">k</span> <span class="n">numbers</span>
</span><span class='line'>      <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="kr">in</span> <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Knuth method for generating combination</span>
</span><span class='line'><span class="c1">-- adapted for arbitrary set</span>
</span><span class='line'><span class="nf">sample</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">return</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sample</span> <span class="n">k</span> <span class="n">ds</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">s</span> <span class="ow">&lt;-</span> <span class="n">sample</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">p</span> <span class="ow">&lt;-</span> <span class="n">randomRIO</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">length</span> <span class="n">ds</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">t</span> <span class="ow">=</span> <span class="n">ds</span><span class="o">!!</span><span class="n">p</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">not</span> <span class="p">(</span><span class="n">t</span> <span class="p">`</span><span class="n">elem</span><span class="p">`</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">then</span> <span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">else</span> <span class="n">return</span> <span class="p">(</span><span class="n">head</span> <span class="n">ds</span><span class="kt">:</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- random candidate generator</span>
</span><span class='line'><span class="nf">getCandidateRandom</span> <span class="n">beta</span> <span class="n">n</span> <span class="n">k</span> <span class="n">j</span> <span class="n">l</span> <span class="n">js</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="n">remainingNumbers</span> <span class="n">js</span>
</span><span class='line'>  <span class="n">tickets</span> <span class="ow">&lt;-</span> <span class="n">replicateM</span> <span class="n">beta</span> <span class="p">(</span><span class="n">sample</span> <span class="n">k</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">ticketsScore</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">t</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">coverageScore</span> <span class="n">l</span> <span class="n">t</span> <span class="n">js</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span> <span class="n">tickets</span>
</span><span class='line'>  <span class="n">return</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">maximumBy</span> <span class="p">(</span><span class="n">comparing</span> <span class="n">fst</span><span class="p">)</span> <span class="n">ticketsScore</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 1 Exam Problems]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/05/concrete-mathematics-chapter-1-exam-problems/"/>
    <updated>2012-02-05T12:27:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/05/concrete-mathematics-chapter-1-exam-problems</id>
    <content type="html"><![CDATA[<p>It took me longer than I thought, and the outcome is slightly
disappointing: I failed to solve two of the problems, and I solved the
remaining ones way too slowly, so in a real exam conditions I probably
would have solved just one or two...</p>

<!-- more -->


<h2>Exam Problems</h2>

<h3>4 Pegs Tower of Hanoi</h3>

<p>First, it helps to see that the indices of the recurrence are actually
$S_n$:</p>

<div markdown="0">
\begin{align}
W_{n(n+1)/2}&amp;= W_{S_n}\\\\
W_{n(n-1)/2}&amp;= W_{S_{n-1}}
\end{align}
</div>


<p>And of course, $S_n = S_{n-1} + n$.</p>

<p>Setting $m=S_{n-1}$, we try to show:</p>

<div markdown="0">
\begin{align}
W_{m+n} &amp; \le 2W_{m} + T_n\\\\
\end{align}
</div>


<p>Now, obviously, if we have $m+n$ discs, we can move the $m$ top ones
from $A$ to $C$ using $B$ and $D$ as transfer pegs, then move the
bottom $n$ ones from $A$ to $B$ using $D$ as transfer peg, and finally
move the top $m$ ones from $C$ to $B$.</p>

<p>The first step takes $W_m$ moves, the second one is the classic Tower
of Hanoi problem (as we can no longer use peg $C$, we only have three
pegs), so it takes $T_n$ moves, and the last step takes $W_m$  moves again.</p>

<p>This is only one possible solution; the optimal one must be equal or
better, so we have</p>

<div markdown="0">
\begin{align}
W_{m+n} &amp; \le 2W_m + T_n\\\\
\end{align}
</div>


<p>This is true for any $m+n$ discs, and in particular for
$S_n = S_{n-1} + n$ ones.</p>

<h3>Specific Zigs</h3>

<p>I could not solve this problem. I had found that the half-lines did
intersect, but then I failed to show that their intersections were all
distinct.</p>

<p>Even with the solution from the book, it took me a while before I
finally had a complete understanding.</p>

<p>One problem I had was that lines in a graph are basic college level
mathematics, but college was a long, long time ago. I pretty much had
to work from first principles.</p>

<p>Following the book in writing the positions as $(x_j, 0)$ and
$(x_j - a_j, 1)$, I need to find $\alpha$ and $\beta$ such that
$y=\alpha x + \beta$ is true for both points above.</p>

<div markdown="0">
\begin{align}
0 &amp; = \alpha x_j + \beta \\\\
\beta &amp; = - \alpha x_j\\\\
1 &amp; = \alpha (x_j - a_j) - \alpha x_j\\\\
&amp; = \alpha x_j - \alpha a_j - \alpha x_j\\\\
&amp; = - \alpha a_j\\\\
\alpha &amp; = \frac{-1}{a_j}\\\\
y &amp; = \frac{x_j - x}{a_j}\\\\
\end{align}
</div>


<p>With this given, I can try to find the intersection of lines from
different zigs, $j$ and $k$:</p>

<div markdown="0">
\begin{align}
\frac{x_j - x}{a_j} &amp; = \frac{x_k - x}{a_k}\\\\
a_k (x_j - x) &amp; = a_j (x_k - x)\\\\
a_k x_j - a_k x &amp; = a_j x_k - a_j x\\\\
a_k x_j - a_j x_k &amp; = (a_k - a_j) x\\\\
\end{align}
</div>


<p>Now, still following the book, I replace $x$ by $t$ with
$x=x_j - t a_j$:</p>

<div markdown="0">
\begin{align}
a_k x_j - a_j x_k &amp; = (a_k - a_j) (x_j - t a_j)\\\\
a_k x_j - a_j x_k &amp; = a_k x_j - a_j x_j - t a_j a_k + t a_j^2\\\\
- a_j x_k &amp; = t a_j^ 2 - a_j x_j - t a_j a_k\\\\
- x_k &amp; = t a_j - x_j -t a_k&amp;&amp;\text{dividing by \(a_j\)}\\\\
x_j - x_k &amp; = t (a_j - a_k)\\\\
t &amp; = \frac{x_j - x_k}{a_j - a_k}\\\\
\end{align}
</div>


<p>Somehow, I have a faint memory of such a result; I need to check a
college math book.</p>

<p>To complete, I need to show that $y = t$:</p>

<div markdown="0">
\begin{align}
y &amp; = \frac{x_j - x}{a_j}\\\\
&amp; = \frac{x_j - x_j + t a_j}{a_j}\\\\
&amp; = \frac{t a_j}{a_j}\\\\
&amp; = t\\\\
\end{align}
</div>


<p>So the intersection of any two pair of half-lines from different zigs
is $(x_j - t a_j, t)$. Note that $t$ has the same value whether
$j \gt k$ or $k \gt j$. To simplify further computations, I set
$j \gt k$.</p>

<p>There are two remaining steps: show that $t$ is different for
different pairs of $j$, $k$ (with $j \ne k$); and then show that the
four intersections for a pair $j$, $k$ are also distinct.</p>

<p>$a_j$ can be of two forms: $n^j$ and $n^j + n^{-n}$. So $a_j - a_k$
can be one of</p>

<div markdown="0">
\begin{align}
&amp; n^j - n^k\\\\
&amp; n^j + n^{-n} - n^k\\\\
&amp; n^j - n^k - n^{-n}\\\\
n^j + n^{-n} - n^k - n^{-n} = &amp; n^j - n^k\\\\
\end{align}
</div>


<p>So there are three different forms for $a_j - a_k$, which I will
simply write $n^j - n^k + \epsilon$ where $|\epsilon| \lt 1$.</p>

<div markdown="0">
\begin{align}
t &amp; = \frac{n^{2j} - n^{2k}}{n^j - n^k + \epsilon}\\\\
&amp; = \frac{(n^j - n^k)(n^j + n^k)}{n^j - n^k + \epsilon}\\\\
\end{align}
</div>


<p>Let's show that $n^j+n^k - 1 \lt t \lt n^j+n^k + 1$: multiply the
whole inequality by $n^j - n^k + \epsilon$. As</p>

<div markdown"0">
\begin{align}
n^j - n^k &amp; \ge n\\\\
&amp; \ge 2\\\\
&amp; \gt |\epsilon|\\\\
\end{align}
</div>


<p>so $n^j - n^k + \epsilon \gt 0$. Defining</p>

<div markdown="0">
\begin{align}
N_{jk} &amp; = n^j + n^k\\\\
N'_{jk} &amp; = n^j - n^k\\\\
\end{align}
</div>


<p>the left and right inequalities become</p>

<div markdown="0">
\begin{align}
(N_{jk} - 1) (N'_{jk} + \epsilon) &amp; = N_{jk}N'_{jk} - N'_{jk} + \epsilon N_{jk} - \epsilon\\\\
(N_{jk} + 1) (N'_{jk} + \epsilon) &amp; = N_{jk}N'_{jk} + N'_{jk} + \epsilon N_{jk} + \epsilon\\\\
\end{align}
</div>


<p>Subtracting $N_{jk}N'_{jk} = (n^j-n^k)(n^j+n^k)$ from the original inequality:</p>

<div markdown="0">
\begin{align}
-N'_{jk}+\epsilon N_jk - \epsilon \lt 0 \lt N'_{jk} + \epsilon N_{jk} + \epsilon\\\\
\end{align}
</div>


<p>I need to prove the following inequality</p>

<div markdown"0">
\begin{align}
(n^j - n^k) &amp; \gt |\epsilon| + |\epsilon| (n^j - n^k)\\\\
\end{align}
</div>


<p>We already know $|\epsilon| \lt 1$, so looking at the second term (and
assuming $\epsilon \ne 0$, as this case is trivial)</p>

<div markdown"0">
\begin{align}
|\epsilon| (n^j-n^k) &amp; = n^{-n} (n^j - n^k)\\\\
&amp; = n^{j-n} - n^{k-n}\\\\
&amp;\lt 1\\\\
\end{align}
</div>


<p>and we have</p>

<div markdown"0">
\begin{align}
n^j - n^k &amp; \ge 2
&amp; \gt |\epsilon| + |\epsilon (n^j - n^k)|\\\\
\end{align}
</div>


<p>So the inequalities are established. $N_{jk}$ can be seen as a number
in based $n$ where the digits are all zeroes except the $j$ and $k$ ones,
$N_{jk} = N_{j'k'} \implies j=j', k=k'$, and therefore $t$ uniquely
defines $j$ and $k$ or, two pairs of zigs must have different $t$.</p>

<p>I still need to show that for a given pair, when $t$ is the same, the
intersections are different. There are three different values of
$t$, so two intersections points have the same height. This happens
for</p>

<div markdown="0">
\begin{align}
t &amp; = \frac{n^{2j} - n^{2k}}{n^j - n^k}\\\\
\end{align}
</div>


<p>which happens when $a_j = n^j$, $a_k = n^k$ and $a_j = n^j + n^{-n}$,
$a_k = n^k + n^{-n}$. But the $x = x_j - t a_j$ value for
intersections is different: $t n^j$ and $t (n^j + n^{-n})$, so there
are indeed four distinct intersection points.</p>

<h3>30 degrees Zigs</h3>

<p>I could not solve this problem. Once again, my lack of intuition with
geometry was to blame.</p>

<p>But if we have two zigs with half-lines angles $\phi$, $\phi + 30^{\circ}$
and $\theta$, $\theta + 30^{\circ}$, then for any two pairs of
half-lines from the two zigs to intersect, their angles must be
between $0^{\circ}$ and $180^{\circ}$. Taken together, these
constraints give $0^{\circ} \lt |\phi - \theta| \lt 150^{\circ}$.</p>

<p>This means there cannot be more than $5$ such pairs (and to be honest,
I would have said 4, but the book says it's indeed 5).</p>

<h3>Recurrence Equations</h3>

<h3>Good and Bad Persons in Josephus Problem</h3>

<p>It took me a while, as I was trying to find a recurrence equation of
some sort which would help me with this problem and the bonus one
(where Josephus' position is fixed but he can pick $m$). Eventually I
found one, which did not help me with the bonus problem, but led me to
a solution for this problem.</p>

<p>Obviously, if we have $k$ persons and want to remove the last one in
the first round, we can choose $m=k$ and that will work. Actually, any
multiple $m=ak$ works as well.</p>

<p>This shows that at each round, if we have $k$ persons left, and we
start counting on the first one, when $m=ak$ we will remove the $k^{th}$
person then start counting from the first one again.</p>

<p>Back to the original problem: there are $2n$ persons, and we want to
get rid of the $n+1, \cdots, 2n$ first. If we take
$m=lcm(n+1,\cdots, 2n)$, then for the first $n$ rounds the last (bad)
person will be remove, leaving only the good ones at the end.</p>

<p>When first solving the problem, I picked $m=\prod_{i=1}^n (n+i)$,
which has the same property as the least common multiple, but is
larger. Perhaps a smaller number is better for the nerves of the
participants.</p>

<h3>Bonus Problems</h3>

<p>I tried to solve the bonus questions, but after repeatedly failing, I
had a glimpse at the solutions: they obviously require either
knowledge of later chapters, or other concepts I know nothing about,
so I will get back to these bonus problems after I finish the book.</p>

<p>I am now working through Chapter 2. It is a much larger chapter than
the first, so it will take me some time.</p>
]]></content>
  </entry>
  
</feed>
