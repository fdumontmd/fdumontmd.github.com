<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2011-12-26T23:25:50+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks MongoDB Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/25/seven-databases-in-seven-weeks-mongodb-day-3/"/>
    <updated>2011-12-25T17:18:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/25/seven-databases-in-seven-weeks-mongodb-day-3</id>
    <content type="html"><![CDATA[<p>Final day with MongoDB. First to cover geospatial indexing; then to
explore MongoDB's approach to the CAP theorem.</p>

<!--more-->


<p>Like PostgreSQL, MongoDB has integrated support for geometric of
geographic data and queries. Finding the neighbours of a point or
location is trivial, and such queries are optimized using dedicated
kind of indexes.</p>

<p>Regarding the CAP theorem, MongoDB strictly separates Availability
from Partition tolerance: replica sets are designed for availability,
using a quorum approach (like Riak) to select the most recent data in
case of conflict.</p>

<p>Sharding is the dedicated mechanism for partitions. A replica set can
own a shard of the data.</p>

<p>Unlike with Riak, where availability and partitioning are functions of
the properties set on buckets, MongoDB requires the whole topology to
be explicitly configured. I assume that what MongoDB loses in
flexibility, it gets it back in predictability.</p>

<h2>Exercises</h2>

<h3>Replica set configuration options</h3>

<p>The documentation is
<a href="http://www.mongodb.org/display/DOCS/Replica+Set+Configuration">here</a>.</p>

<h3>Spherical geo index</h3>

<p>I don't know if this is another instance of the book describing
features from old version of MongoDB, but there is no such thing as a
spherical geo index.</p>

<p>Spherical searches rely on standard <code>2d</code> indexing, as explained
<a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing#GeospatialIndexing-TheEarthisRoundbutMapsareFlat">here</a>.</p>

<h3>Find all cities within a 50 mile radius of London</h3>

<p>To solve this exercise, it is necessary to format the data as required
in the
<a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing#GeospatialIndexing-NewSphericalModel">documentation</a>. Unfortunately,
the data files in the code for the second beta version of the book use
latitude, longitude whereas MongoDB expects longitude, latitude
(i.e. a X, Y coordinate).</p>

<p>I used the small script below to reformat the data file, and imported
the reformated one:</p>

<p><code>
sed -e 's/^\(.*\)latitude\(.*\), *longitude\([^}]*\)}\(.*\)$/\1longitude\3, latitude\2}\4/' \
mongo_cities1000.json &gt; mongo_cities1000_lon_lat.json
</code></p>

<p>With that loaded, and with the geospatial indexing in place, MongoDB
is ready to run the queries.</p>

<p>First I need to locate London. There are a few places named London,
but I assume the authors meant the one in England. I create a <code>centre</code>
variable to be used in the queries.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Finding London  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">london</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">cities</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;London&#39;</span><span class="p">,</span> <span class="nx">country</span><span class="o">:</span> <span class="s1">&#39;GB&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">location</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">centre</span> <span class="o">=</span> <span class="p">[</span><span class="nx">london</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">longitude</span><span class="p">,</span> <span class="nx">london</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">latitude</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As indicated in the documentation, I have to measure distances in
radians. For this I need to know the
<a href="http://en.wikipedia.org/wiki/Earth_radius">Earth Radius</a> in miles.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Earth Radius and Range  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">earthRadius</span> <span class="o">=</span> <span class="mi">3959</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">range</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally I can run my queries. I have a few options:</p>

<h4><code>geoNear</code> command</h4>

<p>I can pass the <code>spherical: true</code> option to the <code>geoNear</code> command. By
default, the query will only return 100 results.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>geoNear  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">runCommand</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">geoNear</span><span class="o">:</span> <span class="s2">&quot;cities&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">near</span><span class="o">:</span> <span class="nx">centre</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">spherical</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">maxDistance</span><span class="o">:</span> <span class="nx">range</span><span class="o">/</span><span class="nx">earthRadius</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As it turns out, there are far more cities in this range. A circle of
500 miles radius around London includes much of Western Europe:</p>

<div class="gmap" id="map_canvas"></div>


<p>To get unlimited results, I set the number of possible results to the
number of cities:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>unlimited geoNear  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">runCommand</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">geoNear</span><span class="o">:</span> <span class="s2">&quot;cities&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">near</span><span class="o">:</span> <span class="nx">centre</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">spherical</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">num</span><span class="o">:</span> <span class="nx">db</span><span class="p">.</span><span class="nx">cities</span><span class="p">.</span><span class="nx">count</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">maxDistance</span><span class="o">:</span> <span class="nx">range</span><span class="o">/</span><span class="nx">earthRadius</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>$within</code> operator</h4>

<p>Alternatively, I can use the <code>$within</code> operator. I get the spherical
behaviour by specifying a <code>centerSphere</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$within  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">cities</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">location</span><span class="o">:</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">$within</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$centerSphere</span><span class="o">:</span> <span class="p">[</span><span class="nx">centre</span><span class="p">,</span> <span class="nx">range</span><span class="o">/</span><span class="nx">earthRadius</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}}})</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This query will return cities within the range, just like the
unlimited <code>geoNear</code> one.</p>

<h3>Sharded replicas</h3>

<p>This is the kind of things that is not overly difficult, but
tedious. And I don't like tedious.</p>

<p>As a good UNIX geek, I'd rather spend hours to automate what would
have taken me 10 minutes to do manually. So here's the automated setup
in Bash scripts.</p>

<p>First I create all the necessary directories:</p>

<p><code>
mkdir mongo{1..6}
mkdir mongoconfig
</code></p>

<p>Then I start two sets of 3 replicas that can also be sharded:</p>

<p><code>
for i in {1..6}; do
  s=$(( (i-1 ) / 3 + 1))
  mongod --replSet shard$s --shardsvr --dbpath ./mongo$i \
  --port 2701$i --logpath ./mongod_$i.log --rest &amp;
done
</code></p>

<p>I setup each replica set:</p>

<p>```
for i in 1 2; do
  members=""
  p=$(( (i-1) * 3 + 1))
  for j in 1 2 3; do</p>

<pre><code>members="$members, { _id: $j, host: 'localhost:2701$((p+j-1))'}"
</code></pre>

<p>  done
  members=${members:1}
  mongo localhost:2701$p &lt;&lt;HERE
rs.initiate({
  _id: 'shard$i',
  members: [ $members ]
})
HERE
done
```</p>

<p>At this point it is good to wait a minute for the replica sets to be
fully online.</p>

<p>Next step is to figure out the shards URL: they are composed of the
shard name, followed by the list of comma separated servers:</p>

<p><code>
shards=()
for i in 1 2; do
  p=$(( (i-1) * 3 + 1))
  output=`mongo --quiet localhost:2701$p/test&lt;&lt;HERE
db.isMaster().setName + '/' + db.isMaster().hosts
HERE`
  shards=( "${shards[@]}" ${output%?bye} )
done
</code></p>

<p>Now it is time to start the config server. I move it to the port <code>27019</code> as <code>27016</code> is already in use:</p>

<p><code>
mongod --configsvr --dbpath ./mongoconfig --port 27019 --logpath=mongoconfig.log &amp;
sleep 1
mongos --configdb localhost:27019 --chunkSize 1 --port 27020 --logpath=mongos.log &amp;
</code></p>

<p>And finally I add the shards to the config mongo, and enable sharding
on <code>test</code> for both the <code>cities</code> collection and GridFS:</p>

<p><code>
for shard in ${shards[@]}; do
  echo $shard
  mongo localhost:27020/admin --quiet &lt;&lt;HERE
db.runCommand( { addshard: "$shard" })
HERE
done
mongo localhost:27020/admin --quiet &lt;&lt;HERE
db.runCommand( { enablesharding : "test" } );
db.runCommand( { shardcollection : "test.cities", key : {name : 1} } );
db.runCommand( { shardcollection : "test.fs.chunks", key : { files_id : 1 } } )
HERE
</code></p>

<p>I can check that everything looks ok with:</p>

<p><code>
mongo localhost:27020/admin --quiet &lt;&lt;HERE
db.runCommand( { listshards : 1 })
HERE
</code></p>

<p>Of course, all these scripts would be useless to actually distribute
the servers on different machines. Given some time, I'll try to setup
a AWS EC2 cluster as I did for Riak.</p>

<p>At this point, I tried to import the cities data file. It was somewhat
slower than without replicas, but not significantly so.</p>

<p>I also added a file, using the same command as in the book.</p>

<p>Now, to test the replicas, I killed the two primary servers (to
identify them, I used <code>ps auxw | grep mongod</code>, which gave me the
process id I needed to kill).</p>

<p>With two servers down, <code>mongofiles -h localhost:27020 get my_file.txt</code>
was still able to retrieve the file.</p>

<h2>Wrapping up MongoDB</h2>

<p>MongoDB is the first database besides PostgreSQL I feel comfortable
using. They both provide more "database-like" features than either
Riak or HBase: integrated queries, advanced indexing, ... The use of
JavaScript is well integrated and pleasant to use.</p>

<p>Moreover, MongoDB's approach to the CAP theorem is simple. While it is
less flexible or dynamic than Riak's, its simplicity makes it easy to
reason about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks MongoDB Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/24/seven-databases-in-seven-weeks-mongodb-day-2/"/>
    <updated>2011-12-24T14:49:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/24/seven-databases-in-seven-weeks-mongodb-day-2</id>
    <content type="html"><![CDATA[<p>Today the book covers all kinds of queries goodness in MongoDB:
indexing, advanced group queries, and MapReduce.</p>

<p>Once again, the contrast with Riak is stark. MongoDB is able to
optimize queries on its JSON documents because it understand the
format directly (whereas it is stored as an opaque block in Riak).
Using JavaScript is also simpler: no need to quote the function codes;
just pass a function object to the commands that need one.</p>

<!--more-->


<h3>Indexes</h3>

<p>MongoDB comes by default with fairly sophisticated indexing
options. Perhaps not as many as PostgreSQL, but still very
flexible. Two basic types, range (B-Tree) and geospatial indexes;
multikeys (with the ability to sort each key in a different order);
sparse, ...</p>

<p>Combined with the
<a href="http://www.mongodb.org/display/DOCS/Explain"><code>explain</code></a> function,
this makes classic (i.e. non MapReduce) queries usable.</p>

<p>Thus MongoDB is a good hybrid between traditional databases (although
document rather than schema oriented), and new MapReduce platforms
such as <a href="http://hadoop.apache.org/"><code>Hadoop</code></a>.</p>

<h3>Aggregation</h3>

<p>MongoDB also supports a number of aggregation functions. The most
flexible one,
<a href="http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Group"><code>group</code></a>,
is not compatible with sharding, but otherwise it provides yet more
coverage of relational database features.</p>

<h3>MapReduce</h3>

<p>Using MongoDB's
<a href="http://www.mongodb.org/display/DOCS/MapReduce"><code>mapreduce</code></a> is much
easier than using Riak`s: the functions do not have to be passed as
strings, they can be stored in the server directly from the shell, and
because MongoDB understand JSON directly, there is not need to first
parse the document</p>

<p>On the other hand, Riak's agnostic approach makes
it possible to MapReduce other kinds of data.</p>

<h2>Exercises</h2>

<h3>Shortcut for the admin commands</h3>

<p>I could not find a single place with the info. The mongo shell
<a href="http://api.mongodb.org/js/current/">API</a> has no central list of
functions; instead they are spread in the documentation or source for
each prototype.</p>

<p>In general, an admin command that takes a MongoDB object as a
first argument will have an equivalent method in the relevant prototype.</p>

<p>For instance, the
<a href="http://www.mongodb.org/display/DOCS/List+of+Database+Commands"><code>dbStats</code></a>
command takes a
<a href="http://api.mongodb.org/js/current/symbols/_global_.html#DB"><code>DB</code></a>;
in the
<a href="http://api.mongodb.org/js/current/symbols/src/shell_db.js.html"><code>db.js</code></a>
source file of the <code>DB</code> prototype, there is a <code>stats</code> method that
invokes the <code>dbStats</code> command.</p>

<h3>Online documentation for Queries and Cursors</h3>

<p>As stated in the
<a href="http://www.mongodb.org/display/DOCS/Queries+and+Cursors">documentation</a>,
MongoDB returns a cursor for each queries; it is up to the client to
iterate over the cursor to retrieve results.</p>

<p>The mongo shell usually hides the existence of cursors, but even there
it is possible to expose them, using JavaScript.</p>

<h3>MongoDB documentation for MapReduce</h3>

<p>The documentation is
<a href="http://www.mongodb.org/display/DOCS/MapReduce">here</a>.</p>

<h3>Collection function code</h3>

<p>In each case, I got the code by running <code>db.towns.functionName</code> (note
the absence of parenthesis). The mongo shell direct access to
JavaScript source code is especially convenient.</p>

<h4>Collection <code>help</code></h4>

<p>The source code is just a long list of <code>print</code> statements.</p>

<h4>Collection <code>findOne</code></h4>

<p>The code will first execute a query, returning a cursor. The cursor is
then checked for the presence of results; if there is any, the first
one is returned.</p>

<h4>Collection <code>stats</code></h4>

<p>This function will simply delegate the job to the <code>runCommand</code> method,
invoking the <code>collStats</code> command.</p>

<h3>Finalize method</h3>

<p>The <code>finalize</code> function is very simple: rename the attribute <code>count</code>
to <code>total</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>finalize function  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finalize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span> <span class="nx">total</span><span class="o">:</span> <span class="nx">value</span><span class="p">.</span><span class="nx">count</span> <span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To use it, just add the <code>finalize</code> attribute to the <code>mapReduce</code> command:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">results</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">runCommand</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">mapReduce</span><span class="o">:</span> <span class="s1">&#39;phones&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">map</span><span class="o">:</span> <span class="nx">map</span><span class="p">,</span>
</span><span class='line'><span class="nx">reduce</span><span class="o">:</span> <span class="nx">reduce</span><span class="p">,</span>
</span><span class='line'><span class="nx">finalize</span><span class="o">:</span> <span class="nx">finalize</span><span class="p">,</span>
</span><span class='line'><span class="nx">out</span><span class="o">:</span> <span class="s1">&#39;phones.report&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, I can check  the result with <code>db.phones.report.find()</code>:</p>

<p>```</p>

<blockquote><p>db.phones.report.find()
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 1 }, "value" : { "total" : 35 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 2 }, "value" : { "total" : 30 } }
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 3 }, "value" : { "total" : 35 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 4 }, "value" : { "total" : 22 } }
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 5 }, "value" : { "total" : 35 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 6 }, "value" : { "total" : 19 } }
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 7 }, "value" : { "total" : 32 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 4, 5, 6 ], "country" : 8 }, "value" : { "total" : 32 } }
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 1 }, "value" : { "total" : 7 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 2 }, "value" : { "total" : 5 } }
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 3 }, "value" : { "total" : 5 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 4 }, "value" : { "total" : 10 } }
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 5 }, "value" : { "total" : 6 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 6 }, "value" : { "total" : 4 } }
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 7 }, "value" : { "total" : 6 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 5 ], "country" : 8 }, "value" : { "total" : 5 } }
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 1 }, "value" : { "total" : 116 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 2 }, "value" : { "total" : 103 } }
{ "<em>id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 3 }, "value" : { "total" : 118 } }
{ "</em>id" : { "digits" : [ 0, 1, 2, 3, 5, 6 ], "country" : 4 }, "value" : { "total" : 104 } }
has more
```</p></blockquote>

<h3>Use of driver</h3>

<p>I used Java, and simply reimplemented the original Phones collection
in a different database:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (MongoTest.java)</span> <a href='/downloads/code/7d7w/mongo/src/main/java/jp/wakatta/MongoTest.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">jp</span><span class="o">.</span><span class="na">wakatta</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">random</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">round</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.BasicDBObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DB</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DBCollection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DBObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.Mongo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MongoTest</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span><span class="na">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">try</span> <span class="o">{</span>
</span><span class='line'>			<span class="c1">// connect to the database server</span>
</span><span class='line'>			<span class="c1">// note: use 127.0.0.1 instead of localhost</span>
</span><span class='line'>			<span class="c1">// as mongoDB only listen to the loopback</span>
</span><span class='line'>			<span class="c1">// interface and not the ethernet one</span>
</span><span class='line'>			<span class="n">Mongo</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mongo</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">);</span>
</span><span class='line'>			
</span><span class='line'>			<span class="c1">// make sure we&#39;re in a clean state</span>
</span><span class='line'>			<span class="n">m</span><span class="o">.</span><span class="na">dropDatabase</span><span class="o">(</span><span class="s">&quot;java&quot;</span><span class="o">);</span>
</span><span class='line'>			
</span><span class='line'>			<span class="c1">// create and access the database</span>
</span><span class='line'>			<span class="n">DB</span> <span class="n">db</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">getDB</span><span class="o">(</span><span class="s">&quot;java&quot;</span><span class="o">);</span>
</span><span class='line'>			
</span><span class='line'>			<span class="c1">// create collection and populate it</span>
</span><span class='line'>			<span class="n">DBCollection</span> <span class="n">phones</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">getCollection</span><span class="o">(</span><span class="s">&quot;phones&quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="n">populatePhones</span><span class="o">(</span> <span class="mi">800</span><span class="o">,</span> <span class="mi">5550000</span><span class="o">,</span> <span class="mi">5650000</span> <span class="o">,</span> <span class="n">phones</span><span class="o">);</span>
</span><span class='line'>			
</span><span class='line'>			<span class="c1">// create index</span>
</span><span class='line'>			<span class="n">phones</span><span class="o">.</span><span class="na">createIndex</span><span class="o">(</span><span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">(</span><span class="s">&quot;display&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>			
</span><span class='line'>			<span class="c1">// list the indexes</span>
</span><span class='line'>			<span class="n">List</span><span class="o">&lt;</span><span class="n">DBObject</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">phones</span><span class="o">.</span><span class="na">getIndexInfo</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>	        <span class="k">for</span> <span class="o">(</span><span class="n">DBObject</span> <span class="n">o</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>	            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
</span><span class='line'>	        <span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	        <span class="c1">// close and cleanup</span>
</span><span class='line'>	        <span class="n">m</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">populatePhones</span><span class="o">(</span><span class="kt">long</span> <span class="n">area</span><span class="o">,</span> <span class="kt">long</span> <span class="n">start</span><span class="o">,</span> <span class="kt">long</span> <span class="n">stop</span><span class="o">,</span> <span class="n">DBCollection</span> <span class="n">coll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">for</span> <span class="o">(</span><span class="kt">long</span> <span class="n">i</span><span class="o">=</span><span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">stop</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>			<span class="kt">long</span> <span class="n">country</span> <span class="o">=</span> <span class="n">round</span><span class="o">(</span><span class="n">floor</span><span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="n">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">8</span><span class="o">)));</span>
</span><span class='line'>			<span class="kt">long</span> <span class="n">num</span> <span class="o">=</span> <span class="o">(</span><span class="n">country</span> <span class="o">*</span> <span class="mi">10000000000</span><span class="n">l</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">area</span> <span class="o">*</span> <span class="mi">10000000</span><span class="o">)</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>			<span class="n">BasicDBObject</span> <span class="n">phone</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">();</span>
</span><span class='line'>			<span class="n">BasicDBObject</span> <span class="n">components</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">();</span>
</span><span class='line'>			<span class="n">phone</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;_id&quot;</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>			<span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;country&quot;</span><span class="o">,</span> <span class="n">country</span><span class="o">);</span>
</span><span class='line'>			<span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;area&quot;</span><span class="o">,</span> <span class="n">area</span><span class="o">);</span>
</span><span class='line'>			<span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;prefix&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">));</span>
</span><span class='line'>			<span class="n">components</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;number&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>			<span class="n">phone</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;components&quot;</span><span class="o">,</span> <span class="n">components</span><span class="o">);</span>
</span><span class='line'>			<span class="n">phone</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;display&quot;</span><span class="o">,</span> <span class="s">&quot;+&quot;</span> <span class="o">+</span> <span class="n">country</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">area</span> <span class="o">+</span> <span class="s">&quot;-&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>			<span class="n">coll</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">phone</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For the complete project, I just used Maven to fetch the MongoDB
driver:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (pom.xml)</span> <a href='/downloads/code/7d7w/mongo/pom.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>	<span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>	<span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>	<span class="nt">&lt;groupId&gt;</span>jp.wakatta<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>	<span class="nt">&lt;artifactId&gt;</span>mongo-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>	<span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>	<span class="nt">&lt;name&gt;</span>mongo-test<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>	<span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>		<span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>			<span class="nt">&lt;groupId&gt;</span>org.mongodb<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;artifactId&gt;</span>mongo-java-driver<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;version&gt;</span>2.7.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>	<span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>		<span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>			<span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>			<span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>			<span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>				<span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>				<span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>			<span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ugly, but it does the job.</p>

<p>And that's all for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks MongoDB Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/23/seven-databases-in-seven-weeks-mongodb-day-1/"/>
    <updated>2011-12-23T08:19:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/23/seven-databases-in-seven-weeks-mongodb-day-1</id>
    <content type="html"><![CDATA[<p>It has been ... a little over a week since I closed with HBase so it
is time to move to the next database in the program:
<a href="http://www.mongodb.org/">MongoDB</a>. It is a so-called
<a href="http://en.wikipedia.org/wiki/Document-oriented_database">document oriented database</a>,
relying on Javascript and JSON like Riak but, MongoDB, unlike Riak,
has a built-in support for querying, and can also perform partial
updates.</p>

<p>Fittingly, this first day is about CRUD and queries.</p>

<!--more-->


<h3>CRUD in MongoDB</h3>

<p>Unlike Riak, MongoDB makes a difference between Create and Update
operations. It is not possible to insert documents with the same id
twice in the same collection:</p>

<p>```</p>

<blockquote><p>db.test.insert( { <em>id: 'one', value: 1 } )
db.test.find()
{ "</em>id" : "one", "value" : 1 }
db.test.insert( { <em>id: 'one', value: 2 } )
E11000 duplicate key error index: book.test.$</em>id_  dup key: { : "one" }
```</p></blockquote>

<p>Like in SQL, the Read, Update and Delete operations all operate on the
result of a search. And because the criteria query for a search is
just a JSON document, it is possible to reuse it in different
contexts. Combined with JavaScript as a query/shell language, this
makes a very flexible combination.</p>

<h3>Reaching into objects</h3>

<p>As documents are naturally nested, it is important to know how to
refer to nested attributes and how to use them in queries.</p>

<p>Using the JSON nesting notation is possible but does not have the
expected semantic (unless you change your expectations):</p>

<p>```</p>

<blockquote><p>db.towns.find( { mayor: { name: 'Sam Adams' } }, {name: 1} )</p>

<p>```</p></blockquote>

<p>The query above returns nothing, despite the fact that there is a town
whose mayor is named 'Sam Adams'. The problem here is that this
specific notation will match documents in the collection whose <code>mayor</code>
attribute has the exact value <code>{ name: 'Sam Adams' }</code>, rather than
merely those whose <code>mayor</code> attribute has a sub-attribute <code>name</code> with
the <code>Sam Adams</code> value (and possible other sub-attributes, a
possibility that the first query denies).</p>

<p>The correct form for the query is
```</p>

<blockquote><p>db.towns.find( { 'mayor.name' : 'Sam Adams' }, {name: 1})
{ "_id" : ObjectId("4eed55b0ef971f5317e68e91"), "name" : "Portland" }</p>

<p>```</p></blockquote>

<p><a href="http://www.mongodb.org/display/DOCS/Dot+Notation+%28Reaching+into+Objects%29">This documentation</a>
from the official website was very useful to me in clarifying this aspect.</p>

<h3>The <a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-Metaoperator%3A%7B%7B%24not%7D%7D"><code>$not</code></a> operator</h3>

<p>I first got curious about this operator because the example from the
book did not work. It generated an error in MongoDB 2.0.2 (the latest
at the time of writing).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;exports.foods&#39;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$not</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;burgers&#39;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="nx">_id</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">name</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The error is</p>

<p><code>
error: { "$err" : "invalid use of $not", "code" : 13034 }
</code></p>

<p>From the
<a href="https://github.com/mongodb/mongo/blob/master/src/mongo/db/queryutil.cpp">source code</a>,
it seems $not cannot be applied to a (implicit) equal operator. So the
book code should be using <code>$ne</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s1">&#39;exports.foods.name&#39;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$ne</span><span class="o">:</span> <span class="s1">&#39;burgers&#39;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It does not help that the online shell (accessible from the 'Try it
out' link on <a href="http://www.mongodb.org/">http://www.mongodb.org/</a>) does
not return an error for the book query. It does not return anything
at all, so it is still not correct.</p>

<p>Still, even with 2.0.2, this query:
```</p>

<blockquote><p>db.countries.find( {$not: { name: 'United States' } } )</p>

<p>```</p></blockquote>

<p>is accepted but does not return every country but US. Yet again it
returns nothing.</p>

<p>As far as I can tell, this query is actually incorrect (the <code>$not</code>
operator should be applied to an operator, not a match), so its value
is irrelevant, but it is worrying that the parser allows this code.</p>

<p>The general problem is that the semantic of <code>$not</code> is not exactly
the same as the similar operator from logic. So basic logic reasoning
cannot help.</p>

<p>I suppose this is just something to keep in mind: be wary of using
<code>$not</code>.</p>

<h2>Exercises</h2>

<h3>The online MongoDB documentation</h3>

<p>is <a href="http://www.mongodb.org/display/DOCS/Manual">here</a>.</p>

<h3>Query using regular expressions</h3>

<p>As explained
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-RegularExpressions">here</a>,
MongoDB supports two notations: a direct JavaScript regexp object
using <code>/.../</code> and slightly more verbose but more flexible <code>$regexp</code>
operator. The syntax for the regular expression in both cases is the
same.</p>

<h3>MongoDB drivers</h3>

<p>The <a href="http://www.mongodb.org/display/DOCS/Drivers">list of drivers</a>.</p>

<h3>Print a JSON document containing <code>{ "hello" : "world" }</code></h3>

<p>The <code>tojson</code> function can display (and pretty-print) JSON documents:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tojson</span><span class="p">({</span> <span class="s2">&quot;hello&quot;</span><span class="o">:</span> <span class="s2">&quot;world&quot;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Find a town by case insensitive regular expression search</h3>

<p>This would be the <code>i</code> option to the regular expression:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="sr">/new/i</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Find all cities whose names contain an ‘e’, and are famous for food or beer.</h3>

<p>A good use for the
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24in"><code>$in</code></a>
operator:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="sr">/e/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">famous_for</span> <span class="o">:</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">$in</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">,</span> <span class="s1">&#39;beer&#39;</span><span class="p">]</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>or the equivalent but verbose:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="sr">/e/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">$or</span><span class="o">:</span> <span class="p">[{</span><span class="nx">famous_for</span> <span class="o">:</span> <span class="s1">&#39;food&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">famous_for</span><span class="o">:</span> <span class="s1">&#39;beer&#39;</span><span class="p">}</span> <span class="p">]</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Find all countries that do not export tasty bacon</h3>

<p>To find countries that export tasty bacon, one has to use
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24elemMatch"><code>$elemMatch</code></a>. It
should not come as a surprise that it is used here as well, but with
the dreaded <code>$not</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span><span class="s1">&#39;exports.foods&#39;</span><span class="o">:</span>
</span><span class='line'> <span class="p">{</span> <span class="nx">$not</span><span class="o">:</span>
</span><span class='line'>   <span class="p">{</span><span class="nx">$elemMatch</span><span class="o">:</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bacon&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">tasty</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>produces</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;&lt;em&gt;id&quot;</span> <span class="o">:</span> <span class="s2">&quot;ca&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Canada&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;&lt;/em&gt;id&quot;</span> <span class="o">:</span> <span class="s2">&quot;mx&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Mexico&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(I had not deleted Canada from the database).</p>

<p>The seemingly equivalent</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">$not</span><span class="o">:</span>
</span><span class='line'>  <span class="p">{</span><span class="s1">&#39;exports.foods&#39;</span><span class="o">:</span>
</span><span class='line'>   <span class="p">{</span> <span class="nx">$elemMatch</span><span class="o">:</span>
</span><span class='line'>     <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bacon&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">tasty</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>will not work. It does not return anything. See above my findings on <code>$not</code>.</p>

<h3>Create a database <code>blogger</code> with a collection of <code>articles</code></h3>

<h4>A new database:</h4>

<p>Creating a new database is extremely easy: just name it when you
launch the <code>mongo</code> shell command:</p>

<p><code>
mongo blogger
</code></p>

<h4>A new collection:</h4>

<p>Like for the database, a collection is created just by inserting
something in it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">articles</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Frederic&#39;</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;my@email.org&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">creation</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">test</span><span class="o">:</span> <span class="s1">&#39;Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...&#39;</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Update the article with an array of comments</h4>

<p>With the operator
<a href="http://www.mongodb.org/display/DOCS/Updating#Updating-%24set"><code>$set</code></a>,
I can specify just what I need to update, not the whole document as in
Riak:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">articles</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span><span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;4ef3c78c7d67f191b06653e4&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="nx">$set</span><span class="o">:</span> <span class="p">{</span> <span class="nx">comments</span><span class="o">:</span>
</span><span class='line'>         <span class="p">[</span> <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Me too&#39;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Me three&#39;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Carol&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;I know all your secret&#39;</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>       <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I can check the inserted value with <code>db.articles.findOne()</code> (without
arguments it returns the first element in the collection, and pretty
prints it):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;4ef3c78c7d67f191b06653e4&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s2">&quot;comments&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Alice&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;Me too&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;Me three&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Carol&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;I know all your secrets&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;creation&quot;</span> <span class="o">:</span> <span class="nx">ISODate</span><span class="p">(</span><span class="s2">&quot;2011-12-23T00:13:00.636Z&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s2">&quot;email&quot;</span> <span class="o">:</span> <span class="s2">&quot;my@email.org&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Frederic&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;test&quot;</span> <span class="o">:</span> <span class="s2">&quot;Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Tomorrow will cover indexing, and more advanced uses of the data (such
as MapReduce).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak on EC2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2/"/>
    <updated>2011-12-17T14:36:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2</id>
    <content type="html"><![CDATA[<p>The third day with Riak had proposed to deploy Riak on a
<a href="http://aws.amazon.com/ec2/">EC2</a> cluster as an exercise. I could not
do it then due to poor network connectivity and lack of time (I was
traveling), but I did it since and here I explain how.</p>

<!--more-->


<p>EC2 is a service from Amazon to commission a number of virtual
computers with specific performance characteristics, and with use
charged by the hour (the rate depending of the performance).</p>

<p>The whole process is fairly simple and flexible. I got my computers up
and running in minutes. Setting up Riak was a bit more involved (I
should probably had tried on my local network first), but eventually I
was able to load the data and run the queries I wanted.</p>

<p>In outline, here's the process</p>

<ul>
<li>figure out the security requirements</li>
<li>think about the cluster organisation</li>
<li>create a few instances of virtual computers</li>
<li>create the security configuration</li>
<li>connect to each machine and set it up</li>
<li>open an SSL tunnel</li>
<li>...</li>
<li>Profit!</li>
</ul>


<p>And now the details.</p>

<h3>Security requirements</h3>

<p>There will be a few machines, and I need each Riak instance to speak
to each other. This means I need to keep all the required ports open.</p>

<p>As each instance is on a different machine (presumably, I could have
several instances on each machine but I want to keep things simple), I
can use the same ports for each instance. I will just have to give
them different names.</p>

<p>Basho has a helpful
<a href="http://wiki.basho.com/Network-Security-and-Firewall-Configurations.html">page</a>
on this topic. It lists the defaults ports (all of them TCP):</p>

<ul>
<li>epmd's listener: 4369</li>
<li>handoff_port listener: 8099</li>
<li>web_port: 8098</li>
<li>pb_port: 8087</li>
<li>plus a range than can be configured. As I have just a small
network, I restrict this range to 6000-6999.</li>
</ul>


<p>These are the ports I will open in my configuration settings.</p>

<h3>Cluster organisation</h3>

<p>I want a simple setup:</p>

<ul>
<li>3 machines</li>
<li>first one is the ring leader</li>
<li>first one is also my interface for client connections</li>
</ul>


<p>So I need to set 3 machines up, make the last two join the first, and
open an SSL tunnel from my local machine to the ring leader.</p>

<h3>EC2 instances</h3>

<p>First I had to sign up to <a href="http://aws.amazon.com/">AWS</a>.</p>

<p>Once this is done, I can use the console, select the EC2 tab, and
click on "Launch Instance".</p>

<p>I chose "Launch Classic Wizard" to have as much flexibility as possible:</p>

<p><img src="https://lh6.googleusercontent.com/-MKXddn82uO8/Tu23KOzMhGI/AAAAAAAAB6Y/XpOren_ANVk/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.26.png"></p>

<p>Then I select a basic 64bit Amazon Linux:</p>

<p><img src="https://lh3.googleusercontent.com/--F8ajmA-58c/Tu23KHI9YNI/AAAAAAAAB6U/1fCrHF_tqg0/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.34.png"></p>

<p>I request 3 instances of type Micro (I'm just playing; I don't really care about performance):</p>

<p><img src="https://lh4.googleusercontent.com/-w31FLsR0iC8/Tu2222Q_ZtI/AAAAAAAAB58/E-E86lTf7xg/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.44.png"></p>

<p>I just click through the next two screens (I do not have any specific need for such tuning):</p>

<p><img src="https://lh5.googleusercontent.com/-kRBmxXnSwRc/Tu222wmgj4I/AAAAAAAAB50/U1Rwuqv6R9o/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.05.png">
<img src="https://lh3.googleusercontent.com/-WiqCpx2PT70/Tu222Iz5nTI/AAAAAAAAB5s/k1ZuuVs1yrE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.08.png"></p>

<p>For the key pair, I just give a name, then download the file. I will use it later to connect to my new machines:</p>

<p><img src="https://lh4.googleusercontent.com/-JEnCFjVIM54/Tu222D8yOGI/AAAAAAAAB5o/qdAleXN-iDU/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.28.png"></p>

<p>For the security, I first name my group, then I can use this name as the source parameter for the rules. All the rules are Custom TCP ones; I just need to give the ports (as determined above):</p>

<p><img src="https://lh3.googleusercontent.com/-dSxG8pYQLEc/Tu222KSxpgI/AAAAAAAAB5w/AtiqjF-QTts/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.41.18.png"></p>

<p>And then I can finally start my new machines.</p>

<p>On my first attempts, two of the machines did not start; I just created a couple of new machines of the same kind (64bit Amazon Linux Micro), and put them in the same security group.</p>

<p>Here are the complete security rules (I had to add some after the initial setup):</p>

<p><img src="https://lh6.googleusercontent.com/-tSUcf1TbrLQ/Tu23KB_o3wI/AAAAAAAAB6Q/2OopRB6HFeE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252017.05.42.png"></p>

<p>With this, I have a small cluster of machines. Time to connect and put
them to good use.</p>

<h3>Configuring each machine</h3>

<p>From the EC2 Dashboard, I can access my instances, and get the address for each.</p>

<p>Using the private key downloaded earlier, I can open an SSH connection
to each machine. Note that the user is by default called <code>ec2-user</code>:</p>

<p><code>
ssh -i riak-private.pem ec2-user@&lt;MACHINE_NAME&gt;
</code></p>

<p>On each, I first need to install riak. I download it directly from
Basho <a href="http://downloads.basho.com/riak/CURRENT/">website</a>.</p>

<p>Each machine has some basic tools, but no Erlang compiler. To avoid
any complications, I chose and retrieved a binary distribution:</p>

<p><code>
wget http://downloads.basho.com/riak/CURRENT/riak-1.0.2-1.el6.x86_64.rpm
</code></p>

<p>Then I  installed the  downloaded package  (<code>ec2-user</code> can  use <code>sudo</code>
without having to provide a password):</p>

<p><code>
sudo rpm -Uvh riak-1.0.2-1.el6.x86_64.rpm
</code></p>

<p>There are a few error messages (or perhaps warnings), but the package
is installed and running.</p>

<p>Riak is installed but not started yet. It is important to get the
configuration right before starting it.</p>

<h4>Common configuration</h4>

<p>For each server, I give it a name that includes the local network IP
address (not the loopback IP address <code>127.0.0.1</code>). It is important,
otherwise the machines cannot talk to each others.</p>

<p>I can get it by running <code>ifconfig</code>. I look for the ethernet setup and especially the <code>inet</code> value:
this is the IP address in Amazon private network. I need to remember
the IP address for what I will call the first machine, so I copy it
somewhere (and call it here <code>&lt;IP_ADDRESS_1&gt;</code>)</p>

<p>Using <code>sudo -e /etc/riak/vm.args</code>, I can edit the name of each node. I set it to <code>riak_ec2_1@&lt;IP_ADDRESS&gt;</code>, (or <code>riak_ec2_2</code>, <code>riak_ec2_3</code>, ...).</p>

<p>Note: the editor will be <code>vi</code>.</p>

<p>I also need to change the <code>app.config</code> file:</p>

<p><code>
sudo -e /etc/riak/app.config`
</code></p>

<p>I first need to insert a range restriction configuration. I insert the
following block near the top:</p>

<p>```
{ kernel, [</p>

<pre><code>        {inet_dist_listen_min, 6000},
        {inet_dist_listen_max, 6999}
        ]},
</code></pre>

<p>```</p>

<p>For the first machine (the one named <code>riak_ec2_1</code>), I also need to
extend the <code>http</code> interface list. By default it only listen to the
loopback interface (<code>127.0.0.1</code>), but I also need it to listen to the
ethernet interface (see above). Otherwise, I will not be able to set
the SSL tunnel up.</p>

<p>So I replace the lines that read
<code>
{http, [ {"127.0.0.1", 8098 } ]},
</code>
by something like
<code>
{http, [ {"127.0.0.1", 8098 }, {"&lt;IP_ADDRESS_1&gt;", 8098} ]},
</code></p>

<p>Once this is done, I started the instances:</p>

<p><code>
sudo riak start
</code></p>

<p>I can test each instance with:
<code>
curl http://localhost:8098/stats | python -mjson.tool
</code></p>

<p>Finally, I can link all instances together by executing on the second
and third machine:</p>

<p><code>
sudo riak-admin join riak_ec2_1@&lt;IP_ADDRESS_1&gt;
</code></p>

<p>Testing again the status should show three instances in the same ring.</p>

<p>In case of error, uninstall riak, delete the <code>/var/lib/riak</code> directory,
and start again (as I did).</p>

<h3>Setting up the SSL tunnel</h3>

<p>Nothing simpler. Using the first machine name (the one I configured
for connection from the ethernet interface):</p>

<p><code>
ssh -i riak-private.pem -f ec2-user@&lt;MACHINE_NAME&gt; \
-L 8098:ec2-user@&lt;MACHINE_NAME&gt;:8098 -N
</code></p>

<p>And now I can run from my local machine</p>

<p><code>
curl http://localhost:8098/stats | python -mjson.tool
</code></p>

<p>and get the status of the Riak server as if it was local.</p>

<h3>Loading data and running queries</h3>

<p>The book suggest to use the example data from Basho's
<a href="http://wiki.basho.com/Loading-Data-and-Running-MapReduce-Queries.html">website</a>,
which is what I did. I downloaded the
<a href="http://wiki.basho.com/attachments/goog.csv"><code>goog.csv</code></a> data file and
the <a href="http://wiki.basho.com/attachments/load_data"><code>load_data</code></a>
script. I changed the port number in the latter to use 8098 instead of
8091, then I just ran it: the data is send through the SSL tunnel and
loaded in my EC2 cluster (but it is very slow).</p>

<p>Once this was done, I checked the various queries proposed on the page, and also implemented the MapReduce Challenge:</p>

<h3>MapReduce Challenge</h3>

<p>The MapReduce Challenge is to compute the days with the highest volume
of dollar traded. This first step is to compute this value, as it is
not part of the initial data.</p>

<p>I use a definition found
<a href="http://wiki.fool.com/Daily_dollar_volume">here</a>, which makes
intuitive sense: <code>Volume*(High - Low)/2</code></p>

<h4>Dollar Traded Volume by Month</h4>

<p>I need to keep both the date and the amount, so my map function will
keep both items in a data structured indexed by month:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dollar Traded by Month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">month</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pair</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then when reducing, I can compare the traded amount and keep the best:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Highest by month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">month</span> <span class="k">in</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">?</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">})</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To test the whole, I can use the following command, then copy and
paste the query, and execute with <code>Ctrl-D</code>. The command below is run on
my local machine, but thanks to the SSL tunnel, it will execute on the
cluster:</p>

<p><code>
curl -X POST http://127.0.0.1:8098/mapred \
-H "Content-Type: application/json" -d @-
</code></p>

<p>And the query:
```
{"inputs":"goog",
 "query":[{"map":{"language":"javascript",</p>

<pre><code>              "source":"function(value, keyData, arg) {
</code></pre>

<p>  var data = Riak.mapValuesJson(value)[0];
  var month = value.key.split('-').slice(0,2).join('-');
  var pair = {};
  pair['date'] = value.key;
  pair['traded'] = data.Volume * (data.High - data.Low) / 2;
  var obj = {};
  obj[month] = pair;
  return [obj];
}"}},</p>

<pre><code>     {"reduce":{"language":"javascript",
                "source":"function(values, arg) {
</code></pre>

<p>  return [ values.reduce(function(acc, item) {</p>

<pre><code>for(var month in item) {
  if(acc[month]) {
    acc[month] = acc[month]['traded'] &lt; item[month]['traded'] ?
</code></pre>

<p>  item[month] : acc[month];</p>

<pre><code>  } else acc[month] = item[month];
}
return acc;
</code></pre>

<p>  })
  ];
}",</p>

<pre><code>     "keep":true}}]}
</code></pre>

<p>```</p>

<h4>Day by Highest Dollar Traded</h4>

<p>For this one I use a similar approach: I create pairs with the date
and the amount of dollar traded, but this pair is what I return
directly (instead of returning it indexed by month).</p>

<p>Indexing by date would not work as in the reduce step I would have to
keep the result in a simple (i.e. not indexed) variable, and therefore
would forget the date. By keeping both data items (the date and the
volume traded in dollar) in the same object, I can reduce a list of
such objects to a single item and still retain all the relevant information.</p>

<p>The mapping function creates just a pair object from the data:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dollar Traded by Day  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The reducing function retains the best date by volume traded in dollar
for each batch. It is simpler than the previous one as the values are
simple (i.e. not indexed):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Highest ever  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>         <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">)</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">item</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nx">item</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>         <span class="k">else</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>         <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>     <span class="p">];</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the query:
```
{"inputs":"goog",
 "query":[{"map":{"language":"javascript",</p>

<pre><code>              "source":"function(value, keyData, arg) {
</code></pre>

<p>  var data = Riak.mapValuesJson(value)[0];
  var obj = {};
  obj['date'] = value.key;
  obj['traded'] = data.Volume * (data.High - data.Low) / 2;
  return [obj];
}"}},</p>

<pre><code>     {"reduce":{"language":"javascript",
                "source":"function(values, arg){
</code></pre>

<p>  return [ values.reduce(function(acc, item){</p>

<pre><code>             if(acc) { acc = (acc['traded'] &lt; item['traded']) ? item : acc; }
             else { acc = item[date]; }
         return acc;
        })
     ];
</code></pre>

<p>}",</p>

<pre><code>     "keep":true}}]}
</code></pre>

<p>```</p>

<p>And that's it for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3/"/>
    <updated>2011-12-15T16:27:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3</id>
    <content type="html"><![CDATA[<p>The third day with HBase is a bit short, but opens to a world of
possibilities: the Cloud.</p>

<p>This is where HBase belongs. No personal (or even that many corporate)
networks are large enough to let it perform correctly.</p>

<p>HBase depends on a large number of servers running in parallel for
its performance, and there are few other places to find that many
machines.</p>

<!--more-->


<h3>Thrift</h3>

<p>The first topic for today is <a href="http://thrift.apache.org/">Thrift</a>, a
generic remote interface to program servers (and a gift from the new
Evil Empire, Facebook).</p>

<p>It is a tool to document a binary API, and generate client stubs to
use this API. HBase supports such an API, making it possible to write
clients in a variety of languages.</p>

<p>Using Thrift on your own project (on the server side, if you have any)
would make it possible to use different languages on the client side,
depending on whichever better fits the needs (scripting languages for
glue scripts, ...)</p>

<p>When I tried the example from the book, I had to change the connection
address of the <code>thrift_example.rb</code> code from <code>localhost</code> to
<code>127.0.0.1</code>, otherwise Thrift would refuse the connection.</p>

<h3>Whirr</h3>

<p><a href="http://whirr.apache.org/">Whirr</a> is far more exciting. It is a tool
to deploy and configure some specific servers on (among others)
<a href="http://aws.amazon.com/ec2/">Amazon EC2</a>.</p>

<p>The first, and perhaps the most complex step is to open an account on
<a href="http://aws.amazon.com/">AWS</a>. It will require a phone, a credit card,
a computer, and some time. And perhaps a couple of emails if the
account opening remains stuck in "Pending verification" status.</p>

<p>Once this is done, Whirr can be used to create instances (be careful
with that: Amazon will charge at least one hour for each server even
if you take it down after a couple of minutes), download and install
specific servers (mostly from the <a href="http://hadoop.apache.org/">Hadoop</a>
family), configure them, all of this from the comfort of the command
line (which is my case is cosily close to a cup of warm coco, so it is
very comfortable indeed).</p>

<p>All you have to do is retrieve you security token from your AWS
account page, create a public/private key pair, then write a recipe
file (which describes what kind of machines and how many you need,
what to install on each, ...), and Whirr takes care of the rest. The
first two steps only have to be done once; you can deploy as many
recipes as you need.</p>

<p>The setup process takes a few minutes, then you can connect with SSH
to one of your remote servers.</p>

<p>Whirr also creates a security configuration for each recipe, opening
only the ports that are required by the servers in the recipe,
limiting source of the connections to specific servers. You can also
edit the security rules directly in the recipe if you want.</p>

<p>The ease with which this can be done is really surprising. It reminds
me of how easy it was to deploy a Rails application on
<a href="http://www.heroku.com/">Heroku</a>.</p>

<p>Now, I do not have any foreseen uses for such computing capacity, but
I can see how it could be helpful for any organisation to be able to
run occasional large data processing jobs without having to maintain a
permanent data center.</p>

<h2>Exercises</h2>

<p>There is only one exercise today: to open a Thrift connection to an
AWS deployed HBase.</p>

<p>First is to get Thrift to run on the deployed machines. The book
suggest to connect by SSH and start the instance there, but there is a
better way if you know you will need Thrift: ask Whirr to deploy it
automatically.</p>

<p>In the file below, I've added the server <code>hbase-thriftserver</code> to the
master server:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hbase.properties (hbase.properties)</span> <a href='/downloads/code/7d7w/hbase/hbase.properties'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Licensed to the Apache Software Foundation (ASF) under one or more</span>
</span><span class='line'><span class="c"># contributor license agreements.  See the NOTICE file distributed with</span>
</span><span class='line'><span class="c"># this work for additional information regarding copyright ownership.</span>
</span><span class='line'><span class="c"># The ASF licenses this file to You under the Apache License, Version 2.0</span>
</span><span class='line'><span class="c"># (the &quot;License&quot;); you may not use this file except in compliance with</span>
</span><span class='line'><span class="c"># the License.  You may obtain a copy of the License at</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#     http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="c"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="c"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="c"># See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="c"># limitations under the License.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># HBase 0.90.x on Cloudera Hadoop Cluster on AWS EC2</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'>
</span><span class='line'><span class="c"># Read the Configuration Guide for more info:</span>
</span><span class='line'><span class="c"># http://incubator.apache.org/whirr/configuration-guide.html</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the cluster name here</span>
</span><span class='line'><span class="na">whirr.cluster-name</span><span class="o">=</span><span class="s">hbase-0.90</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the number of machines in the cluster here</span>
</span><span class='line'><span class="na">whirr.instance-templates</span><span class="o">=</span><span class="s">1 zookeeper+hadoop-namenode+hadoop-jobtracker+hbase-master+hbase-thriftserver,1 hadoop-datanode+hadoop-tasktracker+hbase-regionserver</span>
</span><span class='line'>
</span><span class='line'><span class="c"># replication level should not be higher than number of data nodes</span>
</span><span class='line'><span class="na">hbase-site.dfs.replication</span><span class="o">=</span><span class="s">2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For EC2 set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables.</span>
</span><span class='line'><span class="na">whirr.provider</span><span class="o">=</span><span class="s">aws-ec2</span>
</span><span class='line'><span class="na">whirr.identity</span><span class="o">=</span><span class="s">${env:AWS_ACCESS_KEY_ID}</span>
</span><span class='line'><span class="na">whirr.credential</span><span class="o">=</span><span class="s">${env:AWS_SECRET_ACCESS_KEY}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The size of the instance to use. See http://aws.amazon.com/ec2/instance-types/</span>
</span><span class='line'><span class="na">whirr.hardware-id</span><span class="o">=</span><span class="s">c1.xlarge</span>
</span><span class='line'><span class="c"># Ubuntu 10.04 LTS Lucid. See http://alestic.com/</span>
</span><span class='line'><span class="na">whirr.image-id</span><span class="o">=</span><span class="s">us-east-1/ami-da0cf8b3</span>
</span><span class='line'><span class="c"># If you choose a different location, make sure whirr.image-id is updated too</span>
</span><span class='line'><span class="na">whirr.location-id</span><span class="o">=</span><span class="s">us-east-1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># By default use the user system SSH keys. Override them here.</span>
</span><span class='line'><span class="na">whirr.private-key-file</span><span class="o">=</span><span class="s">keys/id_rsa</span>
</span><span class='line'><span class="na">whirr.public-key-file</span><span class="o">=</span><span class="s">keys/id_rsa.pub</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The HBase version to use.</span>
</span><span class='line'><span class="na">whirr.hbase.tarball.url</span><span class="o">=</span><span class="s">http://apache.cu.be/hbase/hbase-0.90.4/hbase-0.90.4.tar.gz</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The Hadoop version to use. See http://hbase.apache.org/book/hadoop.html</span>
</span><span class='line'><span class="c"># The default Hadoop version used by Whirr does not fulfill the HBase 0.90.x requirements.</span>
</span><span class='line'><span class="c"># Whirr will replace the hadoop-core jar in HBase with the one from the actually installed Hadoop.</span>
</span><span class='line'><span class="c"># This example uses Cloudera&#39;s CDH3.</span>
</span><span class='line'><span class="na">whirr.hadoop.tarball.url</span><span class="o">=</span><span class="s">http://archive.cloudera.com/cdh/3/hadoop-0.20.2-cdh3u2.tar.gz</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As for the connection to the Thrift server, the method described in
the book is to open the port 9090 to the world, and to hope to be the
only one to know about this port: a likely possibility, but who would
want to take such a chance in production?</p>

<p>Fortunately, there is a better solution: SSH Tunneling. It is very
easy to set up and requires nothing but what we already have.</p>

<p>The general idea is to open a ssh tunnel between a local port and a
remote port: whatever you puts in the local port is taken by ssh,
transported over the SSH connection; once it reaches the remote
machine, the remote ssh instance will forward the data to the remote
port, as if it was a client running on the remote machine.</p>

<p>The transport between the two machines only requires the remote one to
have the SSH port open (which is both the case, and secure). You have
to use authentication and encryption for the transport.</p>

<p>And what is required to implement this SSH tunneling:</p>

<p><code>
ssh -i keys/id_rsa -f ${USER}@&lt;SERVER_NAME&gt; -L 9090:&lt;SERVER_NAME&gt;:9090 -N
</code></p>

<p>(from the directory where you created the <code>keys</code> directory)</p>

<p>Here I map the local port 9090 to the remote machine's port 9090. That
way I don't even have to change my <code>thrift_example.rb</code> code. But of
course, if I had to connect to different machines, I would use
different ports.</p>

<p>The Thrift server was automatically started by the recipe.</p>

<p>With this in place, and after creating some tables in the remote
HBase:</p>

<p>```
$ ruby thrift_example.rb
links
  from:</p>

<pre><code>maxVersions: 1
compression: NONE
bloomFilterType: ROWCOL
</code></pre>

<p>  to:</p>

<pre><code>maxVersions: 1
compression: NONE
bloomFilterType: ROWCOL
</code></pre>

<p>wiki
  revision:</p>

<pre><code>maxVersions: 2147483647
compression: NONE
bloomFilterType: NONE
</code></pre>

<p>  text:</p>

<pre><code>maxVersions: 2147483647
compression: GZ
bloomFilterType: ROW
</code></pre>

<p>```</p>

<p>(be careful not to use LZO as a compression algorithm in the remote
HBase, as I did when I tried the first time: the default HBase has no
LZO support and will fail when you try to enable a table with LZO compression).</p>

<p>To take a tunnel down, you'll have to find and kill it (as far as I
can tell). If you have no other ssh connections, <code>killall ssh</code> is a
simple solution. In any case, the connection will be cut when the
remote servers are destroyed.</p>

<h2>Wrapping up HBase</h2>

<p>I like what I see with HBase: the project has strong backers among its
users (Yahoo, Facebook, ...); it belongs to a large family of tools
that help to design Big Data solutions, and integrates well with some
Cloud networks</p>

<p>The model is easy to understand (the book mentions the possibility of
eventual consistency due to regional replication, but this remains a
simpler model than Riak's), and close to the original MapReduce
concept.</p>

<p>This is really one tool I will have a closer look to in the near
future.</p>
]]></content>
  </entry>
  
</feed>
