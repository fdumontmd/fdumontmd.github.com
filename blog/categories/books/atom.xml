<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2011-12-15T18:04:22+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3/"/>
    <updated>2011-12-15T16:27:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3</id>
    <content type="html"><![CDATA[<p>The third day with HBase is a bit short, but opens to a world of
possibilities: the Cloud.</p>

<p>This is where HBase belongs. No personal (or even that many corporate)
networks are large enough to let it perform correctly.</p>

<p>HBase depends on a large number of servers running in parallel for
its performance, and there are few other places to find that many
machines.</p>

<!--more-->


<h3>Thrift</h3>

<p>The first topic for today is <a href="http://thrift.apache.org/">Thrift</a>, a
generic remote interface to program servers (and a gift from the new
Evil Empire, Facebook).</p>

<p>It is a tool to document a binary API, and generate client stubs to
use this API. HBase supports such an API, making it possible to write
clients in a variety of languages.</p>

<p>Using Thrift on your own project (on the server side, if you have any)
would make it possible to use different languages on the client side,
depending on whichever better fits the needs (scripting languages for
glue scripts, ...)</p>

<p>When I tried the example from the book, I had to change the connection
address of the <code>thrift_example.rb</code> code from <code>localhost</code> to
<code>127.0.0.1</code>, otherwise Thrift would refuse the connection.</p>

<h3>Whirr</h3>

<p><a href="http://whirr.apache.org/">Whirr</a> is far more exciting. It is a tool
to deploy and configure some specific servers on (among others)
<a href="http://aws.amazon.com/ec2/">Amazon EC2</a>.</p>

<p>The first, and perhaps the most complex step is to open an account on
<a href="http://aws.amazon.com/">AWS</a>. It will require a phone, a credit card,
a computer, and some time. And perhaps a couple of emails if the
account opening remains stuck in "Pending verification" status.</p>

<p>Once this is done, Whirr can be used to create instances (be careful
with that: Amazon will charge at least one hour for each server even
if you take it down after a couple of minutes), download and install
specific servers (mostly from the <a href="http://hadoop.apache.org/">Hadoop</a>
family), configure them, all of this from the comfort of the command
line (which is my case is cosily close to a cup of warm coco, so it is
very comfortable indeed).</p>

<p>All you have to do is retrieve you security token from your AWS
account page, create a public/private key pair, then write a recipe
file (which describes what kind of machines and how many you need,
what to install on each, ...), and Whirr takes care of the rest. The
first two steps only have to be done once; you can deploy as many
recipes as you need.</p>

<p>The setup process takes a few minutes, then you can connect with SSH
to one of your remote servers.</p>

<p>Whirr also creates a security configuration for each recipe, opening
only the ports that are required by the servers in the recipe,
limiting source of the connections to specific servers. You can also
edit the security rules directly in the recipe if you want.</p>

<p>The ease with which this can be done is really surprising. It reminds
me of how easy it was to deploy a Rails application on
<a href="http://www.heroku.com/">Heroku</a>.</p>

<p>Now, I do not have any foreseen uses for such computing capacity, but
I can see how it could be helpful for any organisation to be able to
run occasional large data processing jobs without having to maintain a
permanent data center.</p>

<h2>Exercises</h2>

<p>There is only one exercise today: to open a Thrift connection to an
AWS deployed HBase.</p>

<p>The method described in the book is to open the port 9090 to the
world, and to hope to be the only one to know about this port: a
likely possibility, but who would want to take such a chance in
production?</p>

<p>Fortunately, there is a better solution: SSH Tunneling. It is very
easy to set up and requires nothing but what we already have.</p>

<p>The general idea is to open a ssh tunnel between a local port and a
remote port: whatever you puts in the local port is taken by ssh,
transported over the SSH connection; once it reaches the remote
machine, the remote ssh instance will forward the data to the remote
port, as if it was a client running on the remote machine.</p>

<p>The transport between the two machines only requires the remote one to
have the SSH port open (which is both the case, and secure). You have
to use authentication and encryption for the transport.</p>

<p>And what is required to implement this SSH tunneling:</p>

<p><code>
ssh -i keys/id_rsa -f ${USER}@&lt;SERVER_NAME&gt; -L 9090:&lt;SERVER_NAME&gt;:9090 -N
</code></p>

<p>(from the directory where you created the <code>keys</code> directory)</p>

<p>Here I map the local port 9090 to the remote machine's port 9090. That
way I don't even have to change my <code>thrift_example.rb</code> code. But of
course, if I had to connect to different machines, I would use
different ports.</p>

<p>The Thrift server must be started as in the book (binding to
<code>0.0.0.0</code>) because the binding will be from the network IP, not the
loop IP:</p>

<p><code>
sudo /usr/local/hbase-0.90.3/bin/hbase-daemon.sh start thrift -b 0.0.0.0
</code></p>

<p>With this in place, and after creating some tables in the remote
HBase:</p>

<p>```
$ ruby thrift_example.rb
links
  from:</p>

<pre><code>maxVersions: 1
compression: NONE
bloomFilterType: ROWCOL
</code></pre>

<p>  to:</p>

<pre><code>maxVersions: 1
compression: NONE
bloomFilterType: ROWCOL
</code></pre>

<p>wiki
  revision:</p>

<pre><code>maxVersions: 2147483647
compression: NONE
bloomFilterType: NONE
</code></pre>

<p>  text:</p>

<pre><code>maxVersions: 2147483647
compression: GZ
bloomFilterType: ROW
</code></pre>

<p>```</p>

<p>(be careful not to use LZO as a compression algorithm in the remote
HBase, as I did when I tried the first time: the default HBase has no
LZO support and will fail when you try to enable a table with LZO compression).</p>

<p>To take a tunnel down, you'll have to find and kill it (as far as I
can tell). If you have no other ssh connections, <code>killall ssh</code> is a
simple solution.</p>

<h2>Wrapping up HBase</h2>

<p>I like what I see with HBase: the project has strong backers among its
users (Yahoo, Facebook, ...); it belongs to a large family of tools
that help to design Big Data solutions, and integrates well with some
Cloud networks</p>

<p>The model is easy to understand (the book mentions the possibility of
eventual consistency due to regional replication, but this remains a
simpler model than Riak's), and close to the original MapReduce
concept.</p>

<p>This is really one tool I will have a closer look to in the near
future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/12/seven-databases-in-seven-weeks-hbase-day-2/"/>
    <updated>2011-12-12T23:46:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/12/seven-databases-in-seven-weeks-hbase-day-2</id>
    <content type="html"><![CDATA[<p>And on the second day with HBase, we load it with <a href="http://www.wikipedia.org/">Wikipedia</a>. Actually I had to do it twice to get it to work: on my first attempt the process kind of froze at about 200,000 articles.</p>

<!--more-->


<p>After some digging (and finding this very helpful <a href="http://ofps.oreilly.com/titles/9781449396107/installation.html">page</a> from <a href="http://ofps.oreilly.com/titles/9781449396107/">HBase: The Definitive Guide</a>), I tried again with a different setting for the limit on open files:</p>

<p><code>
ulimit -n 10240
</code></p>

<p>With that, HBase was able to keep churning along (the limit is per session, so HBase had to be restarted). I started the import process in the morning, and when I finally stopped it it had passed 10,000,000 pages (not all of them actual articles). Parsing links was equally successful.</p>

<h3>Consistency</h3>

<p>Unlike Riak, which offers <a href="http://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>, HBase ensures row level consistency. This means that each row has only one value, and a write to the row is either entirely successful, or not performed at all (so an update will never be applied partially).</p>

<p>This idea that each row is atomic is a simple yet effective mental model; I feel I should be able to use this model to design reliable solutions on HBase. To make them fast as well is a different matter entirely: I'd first need more experience with the concept of column families and their various options.</p>

<h3>Logging</h3>

<p>HBase uses <a href="http://en.wikipedia.org/wiki/Write-ahead_logging">Write-Ahead Logging</a>, exactly like PostgreSQL and many other databases (Riak too) and file systems. This is a low level mechanism designed to help with consistency: first a description of the updates is written into a log file (and flushed); then the update is performed. If there's a problem during the update, it is always possible to compare the write-ahead log and execute again whatever updates are missing or partial.</p>

<h3>Regions and servers</h3>

<p>I must say I am still a bit unclear on this topic: I have a standalone instance of HBase, so naturally there is no distribution involved.</p>

<p>HBase first keep the data sorted by key, and distributes contiguous chunks of data to each region (growing the number of regions if needed).</p>

<h3>HBase and names</h3>

<p>In a typical relational database, just as in a normal programming language, the name you give to things (tables, columns or variables) is a programmer oriented feature that has no impact on performance.</p>

<p>The idea that you should use short variable names for 'performance reason' is either a joke or a beginner's mistake.</p>

<p>Except in HBase, where the length of names can impact storage performance. See the <a href="http://hbase.apache.org/book.html#rowkey.design">HBase book, Try to minimize row and column sizes</a>.</p>

<h2>Exercises</h2>

<h3>Compression in HBase</h3>

<p>I could not really find any article on the pros and cons of compression in either HBase or Hadoop. I guess the pros and cons here are the same as any other use of compression: trading IO for CPU. Smaller (because compressed) data can be saved to and read from the disk faster, but at the cost of higher CPU usage.</p>

<h3>Bloom filters</h3>

<p>Bloom filters are describe on the always helpful <a href="http://en.wikipedia.org/wiki/Bloom_filter">Wikipedia</a>. Such a filter is a tool to determine quickly if a piece of information in not in a specific storage, with a configurable probability for false positive.</p>

<p>Say you have a key value distributed data store. For each store, you maintain a Bloom filter of the keys.</p>

<p>Assuming you are looking for a key, you can use the Bloom filters to quickly determine where to look further.</p>

<p>If a Bloom filter for a store states the key is not present, you know you can ignore the store. If it says the key is present, it could be wrong, so you have to look. How often it returns yes when it should say no is a trade-off between the size of the filter and the probability of error.</p>

<p>With HBase being distributed by default, knowing where to look for a key or a key, column pair can increase performance.</p>

<h3>Column family options for compression</h3>

<p>There use to be <code>RECORD</code> and <code>BLOCK</code> options, but they appear deprecated. What is left is to specify the compression algorithm for either regular compression, or compacting compression (which happens when HBase reorganize the store). The compacting compression setting can use the same values (i.e. algorithm names) as the compression setting. In the shell, the option is <code>COMPRESSION_COMPACT</code>.</p>

<p>The available algorithms are <code>NONE</code> (no encryption), <code>GZ</code>, <code>LZO</code> and <code>SNAPPY</code> (which is probably better still than LZO).</p>

<h3>Column family compression design consideration</h3>

<p>I could not find any definitive answer to this, but I would guess that:</p>

<ul>
<li>already compressed data (such as JPEG) should be in an uncompressed column family</li>
<li>rarely used by very large data could use a slower but more efficient algorithm such as GZ</li>
<li>small but very often used families should not be compressed</li>
</ul>


<h3>Installing LZO</h3>

<p>To install LZO compression is not exactly trivial, especially on Mac OS X.</p>

<p>The first step is to install the library; I did it with <a href="http://mxcl.github.com/homebrew/">Homebrew</a>. It installs 64 bits versions by default; the only thing to remember is that by default on Mac OS X 10.7, the default compiler is <a href="http://llvm.org">LLVM</a>, but often <a href="http://gcc.gnu.org/">GCC</a> is better.</p>

<p><code>
sudo brew install lzo --use-gcc
</code></p>

<p>and LZO will end up under <code>/usr/local/Cellar/lzo/2.06/</code></p>

<p>Next step is to build the hadoop LZO plugin. The basic information is available on the Hadoop <a href="http://wiki.apache.org/hadoop/UsingLzoCompression">wiki</a>, but the main repository it refers to is obsolete. There is another, maintained <a href="https://github.com/toddlipcon/hadoop-lzo">repository</a> on Github.</p>

<p><code>
git clone https://github.com/toddlipcon/hadoop-lzo
</code></p>

<h4>Mac OS X</h4>

<p>Building on Linux should work right away, but Mac OS X (especially 10.7) is slightly different in frustrating way. The <code>ld</code> command is not GNU, but BSD, so it does not understand the same options.</p>

<p>To get the library to compile, you need to edit the <code>build.xml</code> file and clear the <code>LDFLAGS</code> (by default the value is <code>-Wl,--no-as-needed</code>, it needs to be empty).</p>

<p>Liquid error: ClassNotFound: no lexer for alias 'txt' found</p>

<p>From inside the repository, it can be applied with</p>

<p><code>
patch -p1 &lt; hadoop-lzo.patch
</code></p>

<p>Once this is done, the <code>ant</code> invocation documented in the Wiki should almost work. Two things need to be changed: first is the use of <code>GCC</code> instead of <code>LLVM</code> (by setting the <code>CC</code> variable); second is the strange name of the <code>include</code> directory for Java. The build script expects it under <code>$JAVA_HOME/include</code>, but of course in Mac OS X it had to be somewhere else (<code>/System/Library/Frameworks/JavaVM.framework/Headers</code>, if you need to know), so I added it directly to the include path <code>C_INCLUDE_PATH</code>:</p>

<p><code>
env JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/ \
C_INCLUDE_PATH=/System/Library/Frameworks/JavaVM.framework/Headers:/usr/local/Cellar/lzo/2.06/include/ \
LIBRARY_PATH=/usr/local/Cellar/lzo/2.06/lib/ CFAGS='-arch x86_64' \
CC=/usr/bin/gcc-4.2  ant clean compile-native test tar
</code></p>

<p>Normally, you should now have a <code>build</code> directory with the jar and native libraries.</p>

<p>The final step is to deploy this in HBase. HBase expect everything to be under the <code>$HBASE_HOME/lib</code>. The instructions from the wiki give the right commands (I just added the creation of the <code>$HBASE_HOME/lib/native</code> directory, which does not exist by default):</p>

<p><code>
cp build/hadoop-lzo-0.4.15/hadoop-lzo-0.4.15.jar $HBASE_HOME/lib/
mkdir -p $HBASE_HOME/lib/native
tar -cBf - -C build/hadoop-lzo-0.4.15/lib/native/ . | tar -xBvf - -C $HBASE_HOME/lib/native
</code></p>

<p>Now you can test whether the new library is enabled: run the command:</p>

<p><code>
$ ./bin/hbase org.apache.hadoop.hbase.util.CompressionTest /tmp/data.lzo lzo
</code></p>

<p>and it should output:</p>

<p><code>
11/12/14 09:13:21 INFO lzo.GPLNativeCodeLoader: Loaded native gpl library
11/12/14 09:13:21 INFO lzo.LzoCodec: Successfully loaded &amp; initialized native-lzo library [hadoop-lzo rev c7d54fffe5a853c437ee23413ba71fc6af23c91d]
11/12/14 09:13:21 INFO compress.CodecPool: Got brand-new compressor
SUCCESS
</code></p>

<p>And that's it. The most frustrating part is that HBase will appear to hang when you try to enable a table that uses LZO compression if anything went wrong (and forgot to test as above). The logs will reveal that <code>hadoop-native</code> cannot be found. This means that the native libraries cannot be loaded. So make sure that you have all the files below:</p>

<p><code>
$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.0.dylib
$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.a
$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.dylib
$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.la
</code></p>

<p>After that, restart the server, and you can use LZO compression instead of GZ.</p>

<p>And this completes Day 2. Next and final day is about deploying HBase to the cloud. This might take more than just a day as I need some time to figure out how to use <a href="http://aws.amazon.com/ec2/">AWS EC2</a> and which options to choose, but hopefully I'll be able to deploy Riak there as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/11/seven-databases-in-seven-weeks-hbase-day-1/"/>
    <updated>2011-12-11T12:57:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/11/seven-databases-in-seven-weeks-hbase-day-1</id>
    <content type="html"><![CDATA[<p>New week, new database. This week is about <a href="">HBase</a>, a product that
has a significant enterprisy feel about it. First it is written in
Java, the de facto enterprise language. Then it is already in
production in very large big data consumers (Facebook among others).</p>

<p>Perhaps more surprising is the fact that it even runs at all on a
single, personal computer (as the book states, 5 dedicated servers is
the recommended minimal configuration).</p>

<!--more-->


<p>Today is a fairly short day. Getting HBase to run, creating a single
table and a couple of rows, and that's it.</p>

<p>As for Riak, I recommend downloading the
<a href="http://www.apache.org/dyn/closer.cgi?path=hbase/hbase-0.90.3/hbase-0.90.3.tar.gz">HBase package</a>
rather than trying your luck with the Homebrew version. HBase runs
directly from the extraction directory, and already includes all the
dependencies.</p>

<p>Just edit the hbase-site.xml configuratio file as the book recommends,
and you're good to go.</p>

<h2>Exercises</h2>

<h3>put_many function</h3>

<p>This function is more an exercise in Ruby than in HBase. The code is
just a variant of what is already in the book.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>put_many.rb  (put_many.rb)</span> <a href='/downloads/code/7d7w/hbase/put_many.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># recap some definition to make this definition self-contained</span>
</span><span class='line'><span class="n">import</span> <span class="s1">&#39;org.apache.hadoop.hbase.client.HTable&#39;</span>
</span><span class='line'><span class="n">import</span> <span class="s1">&#39;org.apache.hadoop.hbase.client.Put&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">jbytes</span><span class="p">(</span> <span class="o">*</span><span class="n">args</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">arg</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_java_bytes</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># actual exercise</span>
</span><span class='line'><span class="k">def</span> <span class="nf">put_many</span><span class="p">(</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">column_values</span><span class="p">)</span>
</span><span class='line'>  <span class="n">table</span> <span class="o">=</span> <span class="no">HTable</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@hbase</span><span class="o">.</span><span class="n">configuration</span><span class="p">,</span> <span class="n">table_name</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">p</span> <span class="o">=</span> <span class="no">Put</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="o">*</span><span class="n">jbytes</span><span class="p">(</span> <span class="n">row</span> <span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">column_values</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="n">kf</span><span class="p">,</span> <span class="n">kn</span><span class="p">)</span> <span class="o">=</span> <span class="n">k</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kn</span> <span class="o">||=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="nb">p</span><span class="o">.</span><span class="n">add</span><span class="p">(</span> <span class="o">*</span><span class="n">jbytes</span><span class="p">(</span> <span class="n">kf</span><span class="p">,</span> <span class="n">kn</span><span class="p">,</span> <span class="n">v</span> <span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">table</span><span class="o">.</span><span class="n">put</span><span class="p">(</span> <span class="nb">p</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Use the put_many function</h3>

<p>Invoking the <code>put_many</code> function then checking the insert:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Testing put_many  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">put_many</span> <span class="s1">&#39;wiki&#39;</span><span class="p">,</span> <span class="s1">&#39;Some title&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;text:&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Some article text&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;revision:author&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;jschmoe&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;revision:comment&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;no comment&quot;</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;get &#39;wiki&#39;, &#39;Some title&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>generates</p>

<p><code>
COLUMN                CELL                                                      
 revision:author      timestamp=1323575657943, value=jschmoe                    
 revision:comment     timestamp=1323575657943, value=no comment                 
 text:                timestamp=1323575657943, value=Some article text          
3 row(s) in 0.5340 seconds
</code></p>

<p>And that's all for today. Tomorrow will be a bit more fun: first a
significant take on of Wikipedia files, then using HBase to play with
the loaded data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/09/seven-databases-in-seven-weeks-riak-day-3/"/>
    <updated>2011-12-09T22:32:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/09/seven-databases-in-seven-weeks-riak-day-3</id>
    <content type="html"><![CDATA[<p>Today we complete the tour of Riak features. First conflict resolution
with vector clocks; then pre and post-commit hooks, and finally
searching Riak data with a <a href="http://lucene.apache.org/">Solr</a>
compatible interface.</p>

<!--more-->


<h3>Setting up Riak</h3>

<p>Over the last few days, I have been trying different ways to get Riak up and running.</p>

<p>Following the book advice, I recommend installing Riak from the
sources. Actually, you can just build it, build the <code>devrel</code> target,
and run from the <code>dev</code> directory.</p>

<p>On Mac OS X, <a href="http://mxcl.github.com/homebrew/">Homebrew</a> usually
works for me, but I like my servers to run with their own user, so I
<code>sudo brew install</code> the packages. In the case of Riak, this does not
work at all (the files have incorrect ownership and useless permissions).</p>

<p>There is a small bug in Riak 1.0.2 that causes it to return a 500 HTTP
error when the precommit hook fails, instead of the expected 403. The
problem is a spurious variable binding in Erlang. The patch below
fixes this error; it also make it possible to build Riak with Erlang R14B04.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>riak 1.0.2 patch  (riak-1.0.2.patch)</span> <a href='/downloads/code/7d7w/riak/riak-1.0.2.patch'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>diff -rupN riak-1.0.2-orig/deps/riak_kv/src/riak_kv_wm_object.erl riak-1.0.2/deps/riak_kv/src/riak_kv_wm_object.erl
</span><span class='line'>--- riak-1.0.2-orig/deps/riak_kv/src/riak_kv_wm_object.erl	2011-11-18 04:50:52.000000000 +0900
</span><span class='line'>+++ riak-1.0.2/deps/riak_kv/src/riak_kv_wm_object.erl	2011-12-11 13:27:52.000000000 +0900
</span><span class='line'>@@ -966,8 +966,8 @@ handle_common_error(Reason, RD, Ctx) -&gt;
</span><span class='line'>     case {error, Reason} of
</span><span class='line'>         {error, precommit_fail} -&gt;
</span><span class='line'>             {{halt, 403}, send_precommit_error(RD, undefined), Ctx};
</span><span class='line'>-        {error, {precommit_fail, Reason}} -&gt;
</span><span class='line'>-            {{halt, 403}, send_precommit_error(RD, Reason), Ctx};
</span><span class='line'>+        {error, {precommit_fail, Message}} -&gt;
</span><span class='line'>+            {{halt, 403}, send_precommit_error(RD, Message), Ctx};
</span><span class='line'>         {error, too_many_fails} -&gt;
</span><span class='line'>             {{halt, 503}, wrq:append_to_response_body(&quot;Too Many write failures&quot;
</span><span class='line'>                     &quot; to satisfy W/DW\n&quot;, RD), Ctx};
</span><span class='line'>diff -rupN riak-1.0.2-orig/rebar.config riak-1.0.2/rebar.config
</span><span class='line'>--- riak-1.0.2-orig/rebar.config	2011-11-18 05:17:47.000000000 +0900
</span><span class='line'>+++ riak-1.0.2/rebar.config	2011-12-11 13:28:21.000000000 +0900
</span><span class='line'>@@ -1,6 +1,6 @@
</span><span class='line'> {sub_dirs, [&quot;rel&quot;]}.
</span><span class='line'>
</span><span class='line'>-{require_otp_vsn, &quot;R14B0[23]&quot;}.
</span><span class='line'>+{require_otp_vsn, &quot;R14B0[234]&quot;}.
</span><span class='line'>
</span><span class='line'> {cover_enabled, true}.
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Apply it in the Riak 1.0.2 directory: <code>patch -p1 &lt; ../riak-1.0.2.patch</code>.</p>

<p>It can also be applied on a repository pulled from <a href="https://github.com/basho/riak">github</a>, but the
latest version has already the patch for Erlang R14B04, so you can
ignore that patch.</p>

<p><em>Update (2012/12/13):</em> my fix has been merged into the main Riak github repository,
so you no longer need to apply the patch if you get the latest source
by Git.</p>

<h3>Vector Clocks</h3>

<p><a href="http://en.wikipedia.org/wiki/Vector_clock">Vector clocks</a> are a
common mechanism to attach a precise time to events occurring
concurrently. By having each event producer keep tracks of the vector
clock of events it is responding to, it becomes possible to identify
sequences and branches in the timing of events (when running
concurrently, time is no longer linear, but can be a graph, or even
worse, a tree, where various participants ignore each other's
responses).</p>

<p>In particular, vector clocks allow a participant to detect conflicts
in the data, and take remedial actions.</p>

<p>Unfortunately, the notion of conflict resolution is not trivial; and
with Riak all or nothing updates, there is almost no information left
to do a merge (with concurrent file modifications, on the other hand,
if the updated areas are different, it might be possible to apply both
changes to the original version, which is what version control systems
typically do).</p>

<p>It does not help that, once again, the example chosen by the authors
to illustrate the concept is poor: the idea that a score given by a
number of judges can simply be averaged when a conflict occurs gives a
rather weird meaning to the score. It would make more sense for each
score to be stored in a different property, and averaged when they are
all present...</p>

<p>It could have been useful to show how more elaborate data (with
multiple properties) can be merge based on the identity of the client
(the book passes a client id but does not use it afterwards, so it
might not be possible to retrieve it).</p>

<h3>Pre and post-commit hooks</h3>

<p>Riak allows code to be executed before and after changes on the
database. This is similar to checks and triggers in PostgreSQL, but
the post-commit hooks are more powerful as they can perform pretty
much anything (although I have not explored triggers in other
languages, such as Perl, Python, ... that PostgreSQL supports).</p>

<p>Note: when I tried the example, I had a 500 Internal Server Error
instead of the expected 403 Forbidden return code. I eventually
tracked it down to a bug in the Erlang base code; see my explanations
above to install and patch Riak.</p>

<h3>Indexing and Searching</h3>

<p>Unlike what is stated in the first beta of the book, search is a
standard feature in Riak (at least 1.0.2). Just edit the <code>app.config</code>
file, look for search, and change the <code>enable</code> property to <code>true</code>.</p>

<p>Once search is enabled, it is recommended to change the index schema
to declare how to index and search various fields. Otherwise, the
search will not work as the book describes it. In particular, search
for a specific breed will not be case insensitive.</p>

<p>So, after enabling search in each server, I use the command
<code>dev1/bin/search-cmd install animals</code> to enable auto-indexing on data
updates (indexes can also be built from files, to the extent that you
have them).</p>

<p>Then I exported the default index with <code>dev1/bin/search-cmd get-schema
animals</code> (the output must be piped into a file).</p>

<p>I modified the file to add a declaration for the <code>breed</code> field,
following examples from the original
<a href="http://wiki.basho.com/Riak-Search---Schema.html">documentation</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>animals schema  (animals.json)</span> <a href='/downloads/code/7d7w/riak/animals.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">%%</span> <span class="nx">Schema</span> <span class="k">for</span> <span class="s1">&#39;animals&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">schema</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">version</span><span class="p">,</span> <span class="s2">&quot;1.1&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">n_val</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">default_field</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>	<span class="p">{</span><span class="nx">field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>		<span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;breed&quot;</span><span class="p">},</span>
</span><span class='line'>		<span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>	<span class="p">]},</span>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_num&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_num&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_int&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_int&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_dt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_dt&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_date&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_date&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_txt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">full</span> <span class="nx">text</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">        {dynamic_field, [</span>
</span><span class='line'><span class="s2">            {name, &quot;</span><span class="o">*</span><span class="nx">_txt</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">            {type, string},</span>
</span><span class='line'><span class="s2">            {analyzer_factory, {erlang, text_analyzers, standard_analyzer_factory}}</span>
</span><span class='line'><span class="s2">        ]},</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        %% Field names ending in &quot;</span><span class="nx">_text</span><span class="s2">&quot; are indexed as full text&quot;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_text&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Everything</span> <span class="k">else</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">string</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, I loaded the schema back into Riak with <code>dev1/bin/search-cmd set-schema animals animals.json</code></p>

<p>Now I can load the data as the book proposes (note that as I'm using
the standard <code>dev1</code> Riak server instead of a dedicated one, the port
is 8091 and not 8098).</p>

<p><code>
$ curl -X PUT http://127.0.0.1:8091/riak/animals/dragon \
-H "Content-Type: application/json" \
-d '{"nickname" : "Dragon", "breed" : "Briard", "score" : 1 }'
$ curl -X PUT http://127.0.0.1:8091/riak/animals/ace \
-H "Content-Type: application/json" \
-d '{"nickname" : "The Wonder Dog", "breed" : "German Shepherd", "score" : 3 }'
$ curl -X PUT http://127.0.0.1:8091/riak/animals/rtt \
-H "Content-Type: application/json" \
-d '{"nickname" : "Rin Tin Tin", "breed" : "German Shepherd", "score" : 4 }'
</code></p>

<p>And now the output of a search is as expected:</p>

<p>```
$ curl http://localhost:8091/solr/animals/select?q=breed:shepherd
&lt;?xml version="1.0" encoding="UTF-8"?>
<response>
  <lst name="responseHeader"></p>

<pre><code>&lt;int name="status"&gt;0&lt;/int&gt;
&lt;int name="QTime"&gt;1&lt;/int&gt;
&lt;lst name="params"&gt;
  &lt;str name="indent"&gt;on&lt;/str&gt;
  &lt;str name="start"&gt;0&lt;/str&gt;
  &lt;str name="q"&gt;breed:shepherd&lt;/str&gt;
  &lt;str name="q.op"&gt;or&lt;/str&gt;
  &lt;str name="filter"&gt;&lt;/str&gt;
  &lt;str name="df"&gt;value&lt;/str&gt;
  &lt;str name="wt"&gt;standard&lt;/str&gt;
  &lt;str name="version"&gt;1.1&lt;/str&gt;
  &lt;str name="rows"&gt;2&lt;/str&gt;
&lt;/lst&gt;
</code></pre>

<p>  </lst>
  <result name="response" numFound="2" start="0" maxScore="0.353553"></p>

<pre><code>&lt;doc&gt;
  &lt;str name="id"&gt;ace
  &lt;/str&gt;
  &lt;str name="breed"&gt;German Shepherd
  &lt;/str&gt;
  &lt;str name="nickname"&gt;The Wonder Dog
  &lt;/str&gt;
  &lt;str name="score"&gt;3
  &lt;/str&gt;
&lt;/doc&gt;
&lt;doc&gt;
  &lt;str name="id"&gt;rtt
  &lt;/str&gt;
  &lt;str name="breed"&gt;German Shepherd
  &lt;/str&gt;
  &lt;str name="nickname"&gt;Rin Tin Tin
  &lt;/str&gt;
  &lt;str name="score"&gt;4
  &lt;/str&gt;
&lt;/doc&gt;
</code></pre>

<p>  </result>
</response>
```</p>

<h2>Exercises</h2>

<h3>Indexing on score</h3>

<p>For this I first modified the index schema again:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>animals schema improved  (animals-score.json)</span> <a href='/downloads/code/7d7w/riak/animals-score.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">%%</span> <span class="nx">Schema</span> <span class="k">for</span> <span class="s1">&#39;animals&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">schema</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">version</span><span class="p">,</span> <span class="s2">&quot;1.1&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">n_val</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">default_field</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>	<span class="p">{</span><span class="nx">field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>		<span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;breed&quot;</span><span class="p">},</span>
</span><span class='line'>		<span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>	<span class="p">]},</span>
</span><span class='line'>	<span class="p">{</span><span class="nx">field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>		<span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;score&quot;</span><span class="p">},</span>
</span><span class='line'>		<span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">}</span>
</span><span class='line'>	<span class="p">]},</span>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_num&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_num&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_int&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">integers</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_int&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">integer</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">integer_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_dt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_dt&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_date&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">dates</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_date&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">date</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">noop_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Field</span> <span class="nx">names</span> <span class="nx">ending</span> <span class="k">in</span> <span class="s2">&quot;_txt&quot;</span> <span class="nx">are</span> <span class="nx">indexed</span> <span class="nx">as</span> <span class="nx">full</span> <span class="nx">text</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">        {dynamic_field, [</span>
</span><span class='line'><span class="s2">            {name, &quot;</span><span class="o">*</span><span class="nx">_txt</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">            {type, string},</span>
</span><span class='line'><span class="s2">            {analyzer_factory, {erlang, text_analyzers, standard_analyzer_factory}}</span>
</span><span class='line'><span class="s2">        ]},</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        %% Field names ending in &quot;</span><span class="nx">_text</span><span class="s2">&quot; are indexed as full text&quot;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*_text&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">standard_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">%%</span> <span class="nx">Everything</span> <span class="k">else</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">string</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">dynamic_field</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">type</span><span class="p">,</span> <span class="nx">string</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">analyzer_factory</span><span class="p">,</span> <span class="p">{</span><span class="nx">erlang</span><span class="p">,</span> <span class="nx">text_analyzers</span><span class="p">,</span> <span class="nx">whitespace_analyzer_factory</span><span class="p">}}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then I reentered the data (see above) to get it indexed.</p>

<p>Finally, I input a query in Firefox, to let it figure out the HTTP
escape characters. The result is used below with curl (both outputs
were identical):</p>

<p>```
curl http://localhost:8091/solr/animals/select?q=score:%5B2%20TO%204%5D
&lt;?xml version="1.0" encoding="UTF-8"?>
<response>
  <lst name="responseHeader"></p>

<pre><code>&lt;int name="status"&gt;0&lt;/int&gt;
&lt;int name="QTime"&gt;3&lt;/int&gt;
&lt;lst name="params"&gt;
  &lt;str name="indent"&gt;on&lt;/str&gt;
  &lt;str name="start"&gt;0&lt;/str&gt;
  &lt;str name="q"&gt;score:[2 TO 4]&lt;/str&gt;
  &lt;str name="q.op"&gt;or&lt;/str&gt;
  &lt;str name="filter"&gt;&lt;/str&gt;
  &lt;str name="df"&gt;value&lt;/str&gt;
  &lt;str name="wt"&gt;standard&lt;/str&gt;
  &lt;str name="version"&gt;1.1&lt;/str&gt;
  &lt;str name="rows"&gt;2&lt;/str&gt;
&lt;/lst&gt;
</code></pre>

<p>  </lst>
  <result name="response" numFound="2" start="0" maxScore="0.00000e+0"></p>

<pre><code>&lt;doc&gt;
  &lt;str name="id"&gt;ace
  &lt;/str&gt;
  &lt;str name="breed"&gt;German Shepherd
  &lt;/str&gt;
  &lt;str name="nickname"&gt;The Wonder Dog
  &lt;/str&gt;
  &lt;int name="score"&gt;3
  &lt;/int&gt;
&lt;/doc&gt;
&lt;doc&gt;
  &lt;str name="id"&gt;rtt
  &lt;/str&gt;
  &lt;str name="breed"&gt;German Shepherd
  &lt;/str&gt;
  &lt;str name="nickname"&gt;Rin Tin Tin
  &lt;/str&gt;
  &lt;int name="score"&gt;4
  &lt;/int&gt;
&lt;/doc&gt;
</code></pre>

<p>  </result>
</response>
```</p>

<h3>Distributed Riak</h3>

<p>I don't see much of a problem with this, I'll give it a try when I get
home. There are already 4 different development servers easily
available in a standard Riak package, so using one on each machine
would do the trick. Of course, when adding the various servers to the
ring, the hostname must be changed, but this should really be a piece
of cake.</p>

<h2>Wrapping up Riak</h2>

<p>It seems Riak is a low level data store that trades easy of use and
packaged features for high availability and flexible for
performance cost.</p>

<p>I can see how this could be in theory appealing in some circumstances,
but I don't really see how to put such a framework to use.</p>

<p>SQL databases don't just come with a nice engine optimised for
relational queries; they also come with decades of experience, general
guidelines for schema design and domain specific schema organisations.</p>

<p>All these contribute to make the meaning of the data clear and
useful. With Riak the quorum option can be used as a decision
mechanism, but beside it is not obvious what meaning to give to a
piece of information that has two or more concurrent variations. And
of course consistency can no longer be implemented on more than one key
no matter what.</p>

<p>This means that a solution based on Riak will be significantly
different from one using an SQL database. Perhaps it would feel more
natural to an object oriented programmer who thinks in terms of
objects and object references. But even in this context, the vector
clock based resolution should still be difficult to design properly.</p>

<p>The book in this regard fails even to acknowledge the problem; it
concentrates on tools but does not give any framework to guide in the
design of a solution built on Riak.</p>

<p>I still has to check the
<a href="http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html">Amazon Dynamo Paper</a>
and the other relevant literature, so I have hope yet I will come up with a
reasonable understanding of all this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-2/"/>
    <updated>2011-12-08T22:59:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/08/seven-databases-in-seven-weeks-riak-day-2</id>
    <content type="html"><![CDATA[<p>Day 2 with Riak, to cover Mapreduce, distribution, rings and consistency.</p>

<p>Mapreduce will be familiar to anyone who has been paying attention to Google. The basic idea comes from functional programming, but Google showed how it could be used to distribute the load over many machines (this in turn spawned two distinct recent developments in software: one is the range of databases explicitly built around the concept of Mapreduce; the other is the idea that functional languages are better suited to do concurrent and parallel programming).</p>

<!--more-->


<h3>A followup to yesterday simple trick</h3>

<p>There is an alternative, maybe even simpler than yesterday's use of <code>python -mjson.tool</code>. It is shown (maybe a bit late) in the book: using an <code>Accept: text/plain</code> header in the HTTP request, as in:</p>

<p><code>
curl -H "Accept: text/plain" http://localhost:8091/stats
</code></p>

<p>This asks Riak to return plain text instead of json data; Riak helpfully interprets that as meaning the same data, but formatted for people. The advantage of this approach is that is still works even when <code>curl</code> generates extra output:</p>

<p><code>
curl -v -H "Accept: text/plain" http//localhost:8091/stats
</code></p>

<p>will both generate verbose debugging output, and get the data in human format.</p>

<h3>Nothing wrong with Mapreduce per se, but...</h3>

<p>I understand that the examples have to remain simple enough to be implementable on a (possible shared) single personal computer, but I still think that the authors are being dishonest when they contrast Mapreduce to an "SQL" based solution.</p>

<p>The problem with this solution is that it is just what a self-taught coder with no understanding of SQL might produced (ok, I'm being unfair. Some college educated programmer I have known actually write code like that as well). But this idea of pushing the code to the data instead of pulling the data to the code is exactly what a database like PostgreSQL does.</p>

<p>An actual SQL solution would be much simpler, would run fully in the database (no need for a script to create the initial data), and would deliver the data long before you'd be done coding and debugging the Javascript Mapreduce code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>A real SQL solution  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- SQL supports composite primary key, which this problem maps well to</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">hotel</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">floor</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">room</span>  <span class="nb">int</span>  <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">capacity</span> <span class="nb">int</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">style</span> <span class="nb">char</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="k">CHECK</span> <span class="p">(</span><span class="n">style</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;single&#39;</span><span class="p">,</span> <span class="s1">&#39;double&#39;</span><span class="p">,</span> <span class="s1">&#39;queen&#39;</span><span class="p">,</span> <span class="s1">&#39;king&#39;</span><span class="p">,</span> <span class="s1">&#39;suite&#39;</span><span class="p">)</span> <span class="p">),</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">floor</span><span class="p">,</span> <span class="n">room</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">-- a simple function to provide a easy to use random range</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">random</span><span class="p">(</span><span class="nb">numeric</span><span class="p">,</span> <span class="nb">numeric</span><span class="p">)</span>
</span><span class='line'><span class="k">RETURNS</span> <span class="nb">numeric</span> <span class="k">AS</span>
</span><span class='line'><span class="err">$$</span>
</span><span class='line'>   <span class="k">SELECT</span> <span class="p">(</span><span class="err">$</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="err">$</span><span class="mi">2</span> <span class="o">-</span> <span class="err">$</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">random</span><span class="p">())::</span><span class="nb">numeric</span><span class="p">;</span>
</span><span class='line'><span class="err">$$</span> <span class="k">LANGUAGE</span> <span class="s1">&#39;sql&#39;</span> <span class="k">VOLATILE</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">-- using generate_series and the random function above</span>
</span><span class='line'><span class="c1">-- to fill all the rooms, in pure PostgreSQL</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">hotel</span> <span class="p">(</span><span class="n">floor</span><span class="p">,</span> <span class="n">room</span><span class="p">,</span> <span class="n">style</span><span class="p">,</span> <span class="n">capacity</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">SELECT</span> <span class="n">f</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="p">(</span><span class="nb">ARRAY</span><span class="p">[</span><span class="s1">&#39;single&#39;</span><span class="p">,</span> <span class="s1">&#39;double&#39;</span><span class="p">,</span> <span class="s1">&#39;queen&#39;</span><span class="p">,</span> <span class="s1">&#39;king&#39;</span><span class="p">,</span> <span class="s1">&#39;suite&#39;</span><span class="p">])[</span><span class="n">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span> <span class="n">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span> <span class="k">FROM</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span> <span class="k">AS</span> <span class="n">f</span><span class="p">,</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">99</span><span class="p">)</span> <span class="k">AS</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">-- the basic query</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">style</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">hotel</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">style</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">-- same query with filter</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">style</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">hotel</span> <span class="k">WHERE</span> <span class="n">floor</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">10</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">style</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It does not help that actually testing the code on Riak, I had to wait about 10 seconds while PostgreSQL answer was immediate. Of course, I have 3 instances of Riak on a single machine, which is certainly not a typical setup.</p>

<p>Riak is on a specific point among the trade off line to which data stores are constrained by the <a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP theorem</a>. It would have been better to work on an example (maybe using more complex data, loaded from a file, like the movie database in PostgreSQL Day 3) that plays into Riak strengths rather showing how badly it performs compared to a much easier and more natural solution in SQL.</p>

<p>It might have been enough to ask the reader to imagine the dataset to be so large that it could not fit in a single server (for instance, a simulation of the <a href="http://en.wikipedia.org/wiki/Hilbert's_paradox_of_the_Grand_Hotel">Hilbert's Hotel</a>), or to simulate a rocky network by shutting down some nodes at awkward moments, and show how Riak still delivers the goods. In such conditions most SQL databases would start to show their limits, and these would be legitimate.</p>

<h3>Another comment on the example</h3>

<p>If you run all the examples and the exercises, you will notice something interesting: there is a floor 101. That's actually a bug in the initial seeding script: the room number should range over 0 to 99, not 1 to 100. Mapping composite keys to a single value is not always safe. Oh well...</p>

<p>I've changed my script after I went through everything, rebuild the data, and ran everything again.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Updated seeding script  (hotel.rb)</span> <a href='/downloads/code/7d7w/riak/hotel.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># generate loads and loads of rooms with random styles and capacities</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ripple&#39;</span>
</span><span class='line'><span class="no">STYLES</span> <span class="o">=</span> <span class="sx">%w{single double queen king suite}</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:http_port</span> <span class="o">=&gt;</span> <span class="mi">8091</span><span class="p">)</span>
</span><span class='line'><span class="n">bucket</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="s1">&#39;rooms&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># Create 100 floors to the building</span>
</span><span class='line'><span class="k">for</span> <span class="n">floor</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span>
</span><span class='line'>  <span class="n">current_rooms_block</span> <span class="o">=</span> <span class="n">floor</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Making rooms </span><span class="si">#{</span><span class="n">current_rooms_block</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">current_rooms_block</span> <span class="o">+</span> <span class="mi">99</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="c1"># Put 100 rooms on each floor (huge hotel!)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">room</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">99</span>
</span><span class='line'>    <span class="c1"># Create a unique room number as the key</span>
</span><span class='line'>    <span class="n">ro</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">RObject</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="p">(</span><span class="n">current_rooms_block</span> <span class="o">+</span> <span class="n">room</span><span class="p">))</span>
</span><span class='line'>    <span class="c1"># Randomly grab a room style, and make up a capacity</span>
</span><span class='line'>    <span class="n">style</span> <span class="o">=</span> <span class="no">STYLES</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">STYLES</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="n">capacity</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="c1"># Store the room information as a JSON value </span>
</span><span class='line'>    <span class="n">ro</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s2">&quot;application/json&quot;</span>
</span><span class='line'>    <span class="n">ro</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;style&#39;</span> <span class="o">=&gt;</span> <span class="n">style</span><span class="p">,</span> <span class="s1">&#39;capacity&#39;</span> <span class="o">=&gt;</span> <span class="n">capacity</span><span class="p">}</span>
</span><span class='line'>    <span class="n">ro</span><span class="o">.</span><span class="n">store</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Partial updates are not supported, unless they are</h3>

<p>So I said yesterday that partial updates are not supported. And if they are, I really have not found a way to get them to work.</p>

<p>Except for buckets. You can update properties of a bucket without having to specify every one of them. Which is good. But still, it might have been good for the rest of the data to have this feature.</p>

<p>The fact that the properties of buckets are probably fixed, meaning you can't remove any, makes a partial update non ambiguous. Supporting partial updates on generic data would require a way to specify whether the update was complete or partial, and a way to remove properties. I can see why Riak designers chose not to go that way, but it still feels a bit ad hoc overall.</p>

<h3>CAP choices</h3>

<p>The section called "On Consistency and Durability" is more interesting, and better shows which features Riak attempts to provide.</p>

<p>The ability to choose from various strategies to implement consistency and durability certainly introduces additional ways to make a mistake, but it also offers flexibility where the relational databases typically offer little.</p>

<h2>Exercises</h2>

<h3>Online Riak Mapreduce documentation</h3>

<p>The documentation is <a href="http://wiki.basho.com/MapReduce.html">http://wiki.basho.com/MapReduce.html</a>.</p>

<h3>Riak contrib functions</h3>

<p>Google is a good friend. The central <a href="http://contrib.basho.com/">site</a> and the <a href="https://github.com/basho/riak_function_contrib">repository</a>.</p>

<h3>Keys filter documentation</h3>

<p><a href="http://wiki.basho.com/Key-Filters.html">http://wiki.basho.com/Key-Filters.html</a></p>

<h3>Total capacity by floor</h3>

<p>The first step is to map the original data to an array of capacity indexed by floor. What has not been seen so far is how to get the <code>key</code> of an object, but it is just another property (directly in <code>v</code>, not in the <code>values</code> array):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Mapping data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">parsed_data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">floor</span> <span class="o">=</span> <span class="o">~~</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">data</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parsed_data</span><span class="p">.</span><span class="nx">capacity</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">data</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A quick test:</p>

<p>```
curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
{
  "inputs":[</p>

<pre><code>["rooms","101"],["rooms","102"],["rooms","103"]],
</code></pre>

<p>  "query":[</p>

<pre><code>{"map":{
  "language":"javascript",
  "source":
    "function(v) {
      var parsed_data = JSON.parse(v.values[0].data); 
      var data = {};
      var floor = ~~(parseInt(v.key) / 100);
      data[floor] = parsed_data.capacity; 
      return [data];
    }"}
} ]
</code></pre>

<p>}</p>

<p>Ctrl-D</p>

<p>[{"1":3},{"1":2},{"1":2}]
```</p>

<p>Ok, looking good. Now the <code>reduce</code> part. It is strictly identical to the book's <code>reduce</code> function, but I just renamed some variables to make it clear what is being iterated over:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Reducing data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">totals</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">floor</span> <span class="k">in</span> <span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="nx">totals</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>    <span class="nx">totals</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">floor</span><span class="p">];</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nx">totals</span><span class="p">[</span><span class="nx">floor</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">floor</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="p">[</span><span class="nx">totals</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Testing:</p>

<p>```
curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
{
  "inputs":[</p>

<pre><code>["rooms","101"],["rooms","102"],["rooms","103"]],
</code></pre>

<p>  "query":[</p>

<pre><code>{"map":{
  "language":"javascript",
  "source":
    "function(v) {
      var parsed_data = JSON.parse(v.values[0].data); 
      var data = {};
      var floor = ~~(parseInt(v.key) / 100);
      data[floor] = parsed_data.capacity; 
      return [data];
    }"}
},
{"reduce": {
    "language": "javascript",
    "source":
      "function(v) {
          var totals = {};
          for (var i in v) {
            for(var floor in v[i]) {
              if( totals[floor] ) 
                totals[floor] += v[i][floor];
              else
                totals[floor] = v[i][floor];
            } 
          }

          return [totals];
        }"}
} ]
</code></pre>

<p>}</p>

<p>Ctrl-D</p>

<p>[{"1":7}]
```</p>

<p>Ok, still looking good. Let's run it on the whole set:</p>

<p>```
curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
{
  "inputs":"rooms",
  "query":[</p>

<pre><code>{"map":{
  "language":"javascript",
  "source":
    "function(v) {
      var parsed_data = JSON.parse(v.values[0].data); 
      var data = {};
      var floor = ~~(parseInt(v.key) / 100);
      data[floor] = parsed_data.capacity; 
      return [data];
    }"}
},
{"reduce": {
    "language": "javascript",
    "source":
      "function(v) {
          var totals = {};
          for (var i in v) {
            for(var floor in v[i]) {
              if( totals[floor] ) 
                totals[floor] += v[i][floor];
              else
                totals[floor] = v[i][floor];
            } 
          }

          return [totals];
        }"}
} ]
</code></pre>

<p>}</p>

<p>Ctrl-D</p>

<p>[</p>

<pre><code>{
    "1": 456, 
    "10": 445, 
    "100": 452, 
    "11": 448, 
    "12": 482, 
    "13": 452, 
    "14": 489, 
    "15": 467, 
    "16": 461, 
    "17": 471, 
    "18": 426, 
    "19": 426, 
    "2": 394, 
    "20": 413, 
    "21": 428, 
    "22": 460, 
    "23": 447, 
    "24": 443, 
    "25": 430, 
    "26": 430, 
    "27": 447, 
    "28": 486, 
    "29": 429, 
    "3": 437, 
    "30": 434, 
    "31": 415, 
    "32": 483, 
    "33": 460, 
    "34": 440, 
    "35": 519, 
    "36": 492, 
    "37": 422, 
    "38": 413, 
    "39": 439, 
    "4": 451, 
    "40": 440, 
    "41": 458, 
    "42": 386, 
    "43": 488, 
    "44": 428, 
    "45": 423, 
    "46": 487, 
    "47": 463, 
    "48": 408, 
    "49": 422, 
    "5": 417, 
    "50": 464, 
    "51": 434, 
    "52": 429, 
    "53": 468, 
    "54": 412, 
    "55": 440, 
    "56": 427, 
    "57": 458, 
    "58": 420, 
    "59": 438, 
    "6": 426, 
    "60": 464, 
    "61": 446, 
    "62": 412, 
    "63": 431, 
    "64": 445, 
    "65": 435, 
    "66": 444, 
    "67": 449, 
    "68": 460, 
    "69": 474, 
    "7": 436, 
    "70": 473, 
    "71": 431, 
    "72": 457, 
    "73": 426, 
    "74": 454, 
    "75": 463, 
    "76": 406, 
    "77": 464, 
    "78": 441, 
    "79": 502, 
    "8": 421, 
    "80": 477, 
    "81": 422, 
    "82": 441, 
    "83": 466, 
    "84": 447, 
    "85": 488, 
    "86": 486, 
    "87": 414, 
    "88": 463, 
    "89": 494, 
    "9": 446, 
    "90": 441, 
    "91": 459, 
    "92": 433, 
    "93": 488, 
    "94": 450, 
    "95": 442, 
    "96": 479, 
    "97": 460, 
    "98": 429, 
    "99": 445
}
</code></pre>

<p>]
```</p>

<h3>Restrict the capacity count to floors 42 and 43</h3>

<p>It should be enough that the key be between 4200 and 4390:</p>

<p>```
curl -X POST -H "content-type:application/json" http://localhost:8091/mapred --data @-
{
  "inputs":{</p>

<pre><code>"bucket": "rooms",
"key_filters": [["string_to_int"], ["between", 4200, 4399]]
</code></pre>

<p>  },
  "query":[</p>

<pre><code>{"map":{
  "language":"javascript",
  "source":
    "function(v) {
      var parsed_data = JSON.parse(v.values[0].data); 
      var data = {};
      var floor = ~~(parseInt(v.key) / 100);
      data[floor] = parsed_data.capacity; 
      return [data];
    }"}
},
{"reduce": {
    "language": "javascript",
    "source":
      "function(v) {
          var totals = {};
          for (var i in v) {
            for(var floor in v[i]) {
              if( totals[floor] ) 
                totals[floor] += v[i][floor];
              else
                totals[floor] = v[i][floor];
            } 
          }

          return [totals];
        }"}
} ]
</code></pre>

<p>}</p>

<p>Ctrl-D</p>

<p>[{"42":386,"43":488}]
```</p>

<p>The output matches what was computed for the whole set of rooms, which is always a good thing.</p>

<p>And this completes Day 2. I must admit I have so far mixed feelings: I understand better what Riak tries to achieve, but the example is just not the kind of things Riak should be used for, and the Mapreduce syntax is a bit heavy (although, fortunately, very regular).</p>

<p>Tomorrow will cover Vector Clocks, the mechanism that Riak exposes both to move conflicts resolution to the client side, and to help the client to implement a decent resolution.</p>
]]></content>
  </entry>
  
</feed>
