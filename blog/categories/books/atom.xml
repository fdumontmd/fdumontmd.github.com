<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2012-04-09T15:34:55+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Machine Learning in Action - Naïve Bayes]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/04/09/machine-learning-in-action-naive-bayes/"/>
    <updated>2012-04-09T13:51:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/04/09/machine-learning-in-action-naive-bayes</id>
    <content type="html"><![CDATA[<p>I am currently reading
<a href="http://www.manning.com/pharrington/">Machine Learning in Action</a>, as
I need something light between sessions with
<a href="http://www-cs-faculty.stanford.edu/~uno/gkp.html">Concrete Mathematics</a>. This
book introduces a number of important machine learning algorithms,
each time with a complete implementation and one or more test data sets; it also
explains the underlying mathematics, and provides information about
additional reference material (mostly heavier and more expensive books).</p>

<p>However, in Chapter 4 about Naïve Bayes classifiers, I didn't see how
the implementation derived by the maths. Eventually, I confirm that it
could not, and try to correct it.</p>

<!-- more -->


<p>It is of course possible that the implementation is eventually
correct, and derives from more advanced theoretical concepts or
practical concerns, but the book mentions neither; on the other hands,
I found papers
(<a href="http://trevorstone.org/school/spamfiltering.pdf">here</a> or
<a href="http://www.cs.cmu.edu/%7Etom/mlbook/NBayesLogReg.pdf">here</a>) that
seem to confirm my corrections.</p>

<p>Everything that follows assumes the book's implementation was
wrong. Humble and groveling apologies to the author if it was not.</p>

<h2>What exactly is the model</h2>

<p>The book introduces the concept of conditional probability using balls
in buckets. This makes the explanation clearer, but this is just one
possible model; each model (or
<a href="http://en.wikipedia.org/wiki/Probability_distribution">distribution</a>)
uses dedicated formulas.</p>

<p>The problem is that the book then uses set of words or bags of words
as it these were the same underlying model, which they are not.</p>

<h3>Set of words</h3>

<p>If we are only interested in whether a given word is present in a
message or not, then the correct model is that of a biased coin where
tails indicate the absence of the word, and heads its presence.</p>

<p>This is also known as a
<a href="http://en.wikipedia.org/wiki/Bernoulli_trial">Bernoulli trial</a>,
and the estimator for the probability of presence is the mean
presence: the number of documents in which the word is present,
divided by the total number of documents.</p>

<p>The book algorithm does not implement this model correctly, as its
numerator is the count of documents in which the word is present
(correct), but the denominator is the total number of words
(incorrect).</p>

<h3>Bag of words</h3>

<p>If we want to consider the number of times a word is present in
messages, then the balls in buckets model is correct (it is a
also known as
<a href="http://en.wikipedia.org/wiki/Categorical_distribution">Categorical distribution</a>),
and the code in the book adequately implements it.</p>

<h2>There is a word for it: Additive Smoothing</h2>

<p>The book then improves the algorithm in two different ways. One is the
use of logarithms to prevent underflow. The other is to always use one
as the basic count for words, whether they are present or not.</p>

<p>This is in fact not so much a trick as a concept called
<a href="http://en.wikipedia.org/wiki/Additive_smoothing">Additive smoothing</a>,
where a basic estimator $\theta_i = \frac{w_i}{N}$ is replaced by
$\hat{\theta}_i = \frac{w_i + \alpha}{N + \alpha d}$</p>

<p>$\alpha$ is a so-called smoothing parameter, and $d$ is the total
number of words.</p>

<p>If the model is Bernoulli trial, $w_i$ is the number of documents
where word $i$ is present, and $N$ is the total number of documents.</p>

<p>If the model is categorical distribution, $w_i$ is the total count of
word $i$ is the documents and $N$ is the total count of words in the documents.</p>

<p>As we are interested in $P(w_i|C_j)$ (with $C_0, C_1$ the two
classes we are building a classifier for), $N$ above is restricted to
documents in the relevant class; $\alpha$ and $d$ are independent of
classes.</p>

<p>So the correct formula becomes</p>

<div markdown="0">
\begin{align}
\hat{\theta}_{i,j} = \frac{x_i,j+\alpha}{N_j+\alpha d}\\\\
\end{align}
</div>


<p>With $\alpha=1$ as a smoothing parameter, the book should have used
<code>numWords</code> instead of <code>2.0</code> as an initial value for both <code>p0Denom</code> and
<code>p1Denom</code>.</p>

<h2>Putting it together</h2>

<p>The differences with the code from the book are minor: first I
introduce a flag to indicates whether I'm using set of words
(Bernoulli trials)  or bags of words (categorical distribution) as a
model. Then I initialise <code>p0Denom</code> and <code>p1Denom</code> with <code>numWords</code> as
explained above; finally I check the <code>bag</code> flag to know what to add to
either denominators.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>new trainingNB0  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">trainNB0</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">,</span> <span class="n">trainCategory</span><span class="p">,</span> <span class="n">bag</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">numTrainDocs</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">)</span>
</span><span class='line'><span class="n">numWords</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="n">pAbusive</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">trainCategory</span><span class="p">)</span><span class="o">/</span><span class="nb">float</span><span class="p">(</span><span class="n">numTrainDocs</span><span class="p">)</span>
</span><span class='line'><span class="n">p0Num</span> <span class="o">=</span> <span class="n">ones</span><span class="p">(</span><span class="n">numWords</span><span class="p">);</span> <span class="n">p1Num</span> <span class="o">=</span> <span class="n">ones</span><span class="p">(</span><span class="n">numWords</span><span class="p">)</span>
</span><span class='line'><span class="n">p0Denom</span> <span class="o">=</span> <span class="n">numWords</span><span class="p">;</span> <span class="n">p1Denom</span> <span class="o">=</span> <span class="n">numWords</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numTrainDocs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">trainCategory</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">p1Num</span> <span class="o">+=</span> <span class="n">trainMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bag</span><span class="p">:</span>
</span><span class='line'>            <span class="n">p1Denom</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">p1Denom</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">p0Num</span> <span class="o">+=</span> <span class="n">trainMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bag</span><span class="p">:</span>
</span><span class='line'>            <span class="n">p0Denom</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">trainMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">p0Denom</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">p1Vect</span> <span class="o">=</span> <span class="n">log</span><span class="p">(</span><span class="n">p1Num</span><span class="o">/</span><span class="p">(</span><span class="n">p1Denom</span><span class="o">+</span><span class="n">numWords</span><span class="p">))</span>
</span><span class='line'><span class="n">p0Vect</span> <span class="o">=</span> <span class="n">log</span><span class="p">(</span><span class="n">p0Num</span><span class="o">/</span><span class="p">(</span><span class="n">p0Denom</span><span class="o">+</span><span class="n">numWords</span><span class="p">))</span>
</span><span class='line'><span class="k">return</span> <span class="n">p0Vect</span><span class="p">,</span> <span class="n">p1Vect</span><span class="p">,</span> <span class="n">pAbusive</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Evaluation</h2>

<p>For the Spam test, the book version has an average error of 6%. The
rewritten version has an error between 3% and 4%. The Spam test uses
messages as set, for which my version is the most different.</p>

<p>For the New-York/San Francisco messages classification, I did not
measure any difference in error rates; this test uses messages as
bags, for which the book version was mostly correct (the only
difference was in the denominators).</p>

<h2>So what?</h2>

<p>OK, well, but the book algorithm still works, at least on the original
data.</p>

<p>But how well exactly would it work with other data? As the algorithm
does not seem to implement any kind of sound model, is there any way
to quantify the error we can expect? By building on theoretical
foundations, at least we can quantify the outcome, and rely on the
work of all the brilliant minds who improved that theory.</p>

<p>Theories (the scientific kind, not the hunch kind) provide well
studied abstractions. There are always cases where they do not apply,
and other cases where they do, but only partially or imperfectly. This
should be expected as abstractions ignore part of the real world
problem to make it tractable.</p>

<p>Using a specific theory to address a problem is very much similar to
looking for lost keys under a lamppost: maybe the keys are not there,
but that's where the light is brightest, so there is little chance to
find them anywhere else anyway.</p>

<h2>A bad book then?</h2>

<p>So far, this was the only chapter where I had anything bad to
say about the book. And even then, it was not that bad.</p>

<p>The rest of the book is very good; the underlying concepts are well
explained (indeed, that's how I found the problem in the first place),
there is always data to play with, and the choice of language and
libraries (<a href="http://www.python.org/">Python</a>,
<a href="http://numpy.scipy.org/">Numpy</a> and
<a href="http://matplotlib.sourceforge.net/">matplotlib</a>) is very well
suited to the kind of exploratory programming that makes learning
much easier.</p>

<p>So I would recommend this book as an introduction to this subject, and
I'm certainly glad I bought it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Wrapping Up]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/03/15/seven-databases-in-seven-weeks-wrapping-up/"/>
    <updated>2012-03-15T10:57:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/03/15/seven-databases-in-seven-weeks-wrapping-up</id>
    <content type="html"><![CDATA[<p>This has lasted a little bit longer than seven weeks (the release
schedule of the beta versions did not help; my day job did not help
either), but finally I finished the book.</p>

<!--more-->


<h3>Pro</h3>

<p>I liked that the book started with PostgreSQL. All too often, I am put
of by the amazingly uninformed criticisms of the NoSQL crowd about
relational databases; this left me with the general impression that a
younger generation of engineers was just too ignorant to figure SQL
out, so they build something new (without the benefits of decades of
experience...).</p>

<p>By having a balance approach, the book cleared this misconception
(<a href="http://shop.oreilly.com/product/0636920010388.do">Hadoop, the Definitive Guide</a>
also has a balance coverage in its introduction).</p>

<p>Each database's strengths and weaknesses are correctly (as far as I
can tell) reported, along with its position in the CAP triangle, and
intended or ideal usage.</p>

<p>A recapitulative (but already partially incorrect, at least in the 5.0
beta version) overview of all the databases properties in Appendix A
is also very useful.</p>

<h3>Cons</h3>

<p>Well, this is not exactly a problem of the book itself, but rather of
the tools it covers: the rapid and sometimes radical changes in some
of the databases meant that the technical information in the book was
already obsolete.</p>

<p>The book's intention is not to be a detailed tutorial; for instance,
they skip installations (really, most technical books should skip
installation and go straight to setup and use; think of the number of
trees that would save), but the search for corrections was heavily
taxing my already sparse free time.</p>

<p>All this will eventually improve, as the tools and documentation
mature; right now using them is a bit too involved for the broad but
shallow approach this book follows.</p>

<p>Compared to
<a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">Seven Languages in Seven Weeks</a>,
I found this book more challenging. But this is perhaps a consequence
of my prior exposure to a variety of languages and programming
concepts; I suspect many people may find this book much easier.</p>

<h3>Recommendation</h3>

<p>Of all the books I have read recently, this is the one that changed
and enlarged my views the most.</p>

<p>If you are, like me, a traditional software engineer with years of
experience in relational databases but little exposure to newer kind
of storage, you will benefit from this presentation of many databases and
solution designs.</p>

<p>If, however, you already come from the NoSQL database and have
experience in a few of the covered tools, this one book might not be
the ideal one to convince you of the strengths of PostgreSQL. The
problem with relational databases is that, having been the defacto
standard storage solutions for decades, nobody remember why they
became popular in the first place (they actually replaced databases
that looked pretty much like document or graph databases, only much
more primitive).</p>

<p>Still, given its price, as a broad introduction to many different
data tools and techniques, this book is hard to beat. I certainly am
glad for having read it, and I think you would be too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Redis Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/03/14/seven-databases-in-seven-weeks-redis-day-3/"/>
    <updated>2012-03-14T15:48:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/03/14/seven-databases-in-seven-weeks-redis-day-3</id>
    <content type="html"><![CDATA[<p>Wow, almost two months since I wrote
<a href="/blog/2012/01/21/seven-databases-in-seven-weeks-redis-day-2/">Day 2</a>,
and more than one since the last post in this series... Time to bring
it to an end.</p>

<!--more-->


<p>Today is less about Redis (indeed, it is hardly used at all), and more
about a concept: Polyglot Persistence, and about an implementation
that showcases the concept.</p>

<p>In fact, I spent most of my time browsing the documentation of
<a href="http://nodejs.org/">Node.js</a>, the library/framework the authors used
to build the demo application.</p>

<h2>Polyglot Persistence</h2>

<p>Polyglot Persistence, the use of several kinds of storage systems in a
project, makes even more sense than Polyglot Programming (the
use of several languages in a project).</p>

<p>While languages are, by and large, equivalent in expressive power, and
mostly a matter of choice, culture, or comparative advantage (some
languages favour small teams, other large ones), storage systems are
sufficiently different that they are not interchangeable.</p>

<p>Once the idea of eventual consistency takes root, it is only a simple
extension to view the data as services available from a number of
sources, each optimised for its intended use (instead of a single,
default source that only partially meets the more specialised needs),
and with its own update cycles.</p>

<p>The problem, of course, is that it introduces several levels of
complexity: development, deployment, monitoring, and a dizzying range
of potential errors, failures, ...</p>

<h2>Polyglot Persistent Service</h2>

<p>The implementation described in the book is small enough to fit in
less than 15 pages, yet rich enough to show what is possible.</p>

<p>The databases are (with the versions I used):</p>

<ul>
<li>Redis 2.4.8</li>
<li>CouchDB 1.1.1</li>
<li>Neo4j Community 1.6.1</li>
</ul>


<p>and the glue language is Node.js.</p>

<h3>Redis</h3>

<p>Redis is used first as initial storage for the first data take-on. It
is then used to track the transfer of data between CouchDB and the
other databases, and finally to support auto-completion of band names.</p>

<h3>CouchDB</h3>

<p>CouchDB is intended as the System Of Records (i.e. master database)
for the system. Data is meant to be loaded into CouchDB first, then
propagated to the other databases.</p>

<p>Beside that, it is not used much, and after the exercises, not used at all...</p>

<h3>Neo4j</h3>

<p>Neo4j keeps a graph of bands, members, and instruments (or roles), and
their relationships.</p>

<h3>Node.js</h3>

<p>Node.js is a framework/library for JavaScript based on the concept of
event-based programming (similar to, but perhaps more radical than,
Erlang). All I/O is done in continuation-passing style, which means
that whenever a I/O operation is initiated, one of the argument is a
function to handle whatever the operation produces (or deal with the
errors).</p>

<p>This is good from a performance point of view, but it is of course
more complex to design and code with. Still, it looks like a fun tool
to glue various servers together.</p>

<h3>Book Code Fixes</h3>

<p>I had to fix some of the code from the authors (nothing serious, and
all reported in the <a href="http://pragprog.com/titles/rwdata/errata">errata</a>):</p>

<ul>
<li><code>populate_couch.js</code>: the <code>trackLineCount</code> has an off-by-one
error. The check for completion should be <code>totalBands &lt;=
processedBands</code></li>
<li><code>bands.js</code>: the initialisation of <code>membersQuery</code> in the function
for the <code>/band</code> route has a syntax error. It should be</li>
</ul>


<p>```
membersQuery = 'g.V[[name:"'+bandName+'"]]'</p>

<pre><code>         + '.out("member").in("member").uniqueObject.name';
</code></pre>

<p>```</p>

<h3>Updating the Code</h3>

<p>The book uses a now dated version of Neo4j, so the queries do not
work. The shortcut to access a node by index does not work anymore,
and the <code>uniqueObject</code> step has been replaced by <code>dedup</code>.</p>

<p>Here are the updated relevant portions:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/band Route  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">membersQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;bands&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">bandName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>         <span class="o">+</span> <span class="s1">&#39;.out(&quot;member&quot;).in(&quot;member&quot;).dedup.name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/artist Route  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rolesQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]].out(&quot;plays&quot;).role.dedup&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">bandsQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]].in(&quot;member&quot;).name.dedup&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Exercises</h2>

<p>I'm not sure what the second homework exercise was supposed to be
about: Neo4j already contains information about members and
memberships. Perhaps it dates from an early draft, before this
chapter's code evolved into what it is now. In any case, the first
exercise had enough Neo4j anyway.</p>

<h3>Adding Band Member's start and end dates</h3>

<p>The start and end dates for memberships in bands is sometimes
provided; the purpose of this exercise is to use this information.</p>

<h4>Pre-populate</h4>

<p>I load the start and end dates into their own key in Redis. The key
format are <code>from:bandName:artistName</code> and <code>to:bandName:artistName</code>.</p>

<p>First I take the data from the relevant columns:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Extracting Data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">artist</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">band</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">roles</span> <span class="o">=</span> <span class="nx">buildRoles</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]),</span>
</span><span class='line'>  <span class="nx">from</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">to</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, if they're not empty, I create the keys in Redis:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Updating Redis  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">from</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;from:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">from</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">to</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;to:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>CouchDB</h4>

<p>Adding the information to CouchDB is not hard; the main difficulty is
to figure out how to modify the <code>populate_couch.js</code> script
(continuation-passing style is <em>hard</em>).</p>

<p>Eventually, I just reused the <code>roleBatch</code> (therefore renamed
<code>artistInfoBatch</code>) to retrieve the roles, from and to information.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Retrieving the Information  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">artistInfoBatch</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artistName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s1">&#39;smembers&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s1">&#39;artist:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">]);</span>
</span><span class='line'>  <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s1">&#39;from:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">]);</span>
</span><span class='line'>  <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s1">&#39;to:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The putting it in CouchDB is trivial:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Building Documents  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artistName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">artist</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">artistName</span><span class="p">,</span> <span class="nx">role</span> <span class="o">:</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">]</span> <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="nx">from</span> <span class="o">=</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">to</span> <span class="o">=</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">from</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;from&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">from</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">to</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;to&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">to</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">artistDocs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">artist</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Neo4j</h4>

<p>Neo4j was the hardest piece of the puzzle: I didn't know, and could
not find any definitive documentation on, how to relationship
properties at creation time. Eventually I found that adding them to
the <code>data</code> attribute passed at creation time did the trick (although
it still took me more time to understand how to use them).</p>

<p>The problem to do so is that the <code>neo4j_caching_client.js</code> library
does not support adding properties to relationships, but it was easy
enough to modify this library to add this feature.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Relationship properties  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createRelationship</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fromNode</span><span class="p">,</span> <span class="nx">toNode</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fromPath</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fromNode</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^.*?\/db\/data\//</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="nx">rel</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">to</span><span class="o">:</span> <span class="nx">toNode</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">type</span> <span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">rel</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">[</span><span class="nx">fromPath</span><span class="p">,</span> <span class="s1">&#39;relationships&#39;</span><span class="p">],</span> <span class="nx">rel</span><span class="p">,</span> <span class="nx">callback</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>then the relevant properties can be passed to the function above in
the <code>graph_sync.js</code> script:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Passing from and to properties  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;artist&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">from</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">props</span><span class="p">.</span><span class="nx">from</span> <span class="o">=</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">from</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">to</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">props</span><span class="p">.</span><span class="nx">to</span> <span class="o">=</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">to</span><span class="p">;</span>
</span><span class='line'><span class="nx">relate</span><span class="p">(</span><span class="nx">bandNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="nx">artistNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="s1">&#39;member&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;member&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="nx">props</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Using the new data</h4>

<p>To make use of the new data, I tried to differentiate between current
and old members of a band. I simply define a current member as one
whose <code>to</code> property is null.</p>

<p>Figuring how to write a Gremlin query that extracted the information I
needed was challenging: the documentation is often sparse, and many
concepts barely explained.</p>

<p>I found that I could collect nodes or relationships along a path by
naming them (with the step <code>as</code>), and then gather all of them in a
single row of a
<a href="http://docs.neo4j.org/chunked/stable/gremlin-plugin.html#rest-api-returning-nested-pipes"><code>Table</code></a>.
I used this to get both the <code>from</code>, <code>to</code>
properties and the artist <code>name</code> property in a single query. However,
I spent some time tracking a bug in my filters where apparently, null
<code>to</code> would not be returned as current members. I finally realise that
when a given node or relationship is given two different names, these
names will appear in reverse order in the <code>Table</code>.</p>

<p>So in my case, the query:</p>

<p><code>
g.idx("bands")[["name":"Nine Inch Nails"]].outE("member").as("from").as("to")
.filter{it.to != null}.inV.as("name")
.table(new Table()).{it.to}{it.from}{it.name}.cap()
</code></p>

<p>I give the names <code>from</code> and <code>to</code> to the relationship, but used them in
reverse order in the <code>Table</code> closures. Is this the intended behaviour
or a bug? Does anybody know?</p>

<p>It seems like a common problem with some NoSQL databases: the query
language feels very much adhoc, and not entirely sound or fully
thought through. Despite its many defects, SQL was at least based (if
sometimes remotely) on the relational calculus, which gave a precise
meaning to queries. It was further specified in different standards,
so that even its defects were fully clarified (XPath/XQuery is another
pretty well specified query language). When playing with NoSQL
databases that pretend to have a query language, I often find it
difficult to go beyond the simpler examples, precisely because of this
linguistic fuzziness.</p>

<p>But I solved it for this case, so now I have my <code>Table</code>. It is an
object with two properties: <code>columns</code> is an array of column names, and
<code>data</code> is an array of arrays (each one being a row). To convert them
to an array of objects, I use the following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Convert Table data  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">columns</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;null&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="nx">obj</span><span class="p">[</span><span class="nx">columns</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The rest of the code is just the nested Node.js event functions, and
the formatting using the <a href="http://mustache.github.com/"><code>mustache</code></a>
(which was pretty cool and easy to use).</p>

<h4>Full Code</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (pre_populate.js)</span> <a href='/downloads/code/7d7w/redis/day3/from-to/pre_populate.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="c1">// The band data file name in tab-seperated form</span>
</span><span class='line'>  <span class="nx">tsvFileName</span> <span class="o">=</span> <span class="s1">&#39;group_membership.tsv&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// track how many file lines we&#39;ve processed</span>
</span><span class='line'>  <span class="nx">processedLines</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">csv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;csv&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">redis_client</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A helper function that splits up the comma-seperated list of roles and</span>
</span><span class='line'><span class="cm"> * converts it to an array. If no valid roles exist, return an empty array.</span>
</span><span class='line'><span class="cm"> * @param string the CSV to split into a role array</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">buildRoles</span><span class="p">(</span> <span class="nx">string</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">roles</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">roles</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">roles</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="nx">roles</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">roles</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Utility function that increments the total number</span>
</span><span class='line'><span class="cm"> * of lines (artists) processed and outputs every 1000.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">trackLineCount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="o">++</span><span class="nx">processedLines</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Lines Processed: &#39;</span> <span class="o">+</span> <span class="nx">processedLines</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Does all heavy lifting. Loops through the CSV file</span>
</span><span class='line'><span class="cm"> * and populate Redis with the given values.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">populateRedis</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">csv</span><span class="p">().</span>
</span><span class='line'>  <span class="nx">fromPath</span><span class="p">(</span> <span class="nx">tsvFileName</span><span class="p">,</span> <span class="p">{</span> <span class="nx">delimiter</span><span class="o">:</span> <span class="s1">&#39;\t&#39;</span><span class="p">,</span> <span class="nx">quote</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span>
</span><span class='line'>      <span class="nx">artist</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">band</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">roles</span> <span class="o">=</span> <span class="nx">buildRoles</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">from</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">to</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">band</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span> <span class="o">||</span> <span class="nx">artist</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">trackLineCount</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">redis_client</span><span class="p">.</span><span class="nx">sadd</span><span class="p">(</span><span class="s1">&#39;band:&#39;</span> <span class="o">+</span> <span class="nx">band</span><span class="p">,</span> <span class="nx">artist</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">roles</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">redis_client</span><span class="p">.</span><span class="nx">sadd</span><span class="p">(</span><span class="s1">&#39;artist:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">role</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">from</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;from:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">from</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">to</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;to:&#39;</span> <span class="o">+</span> <span class="nx">band</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">trackLineCount</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">total_lines</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Total Lines Processed: &#39;</span> <span class="o">+</span> <span class="nx">processedLines</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">redis_client</span><span class="p">.</span><span class="nx">quit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">populateRedis</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (populate_couch.js)</span> <a href='/downloads/code/7d7w/redis/day3/from-to/populate_couch.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="c1">// how many bands we expect to process</span>
</span><span class='line'>  <span class="nx">totalBands</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// and keep track of how many bands we have processed</span>
</span><span class='line'>  <span class="nx">processedBands</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// The name of the couch database</span>
</span><span class='line'>  <span class="nx">couchDBpath</span> <span class="o">=</span> <span class="s1">&#39;/bands&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">couchClient</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">5984</span><span class="p">,</span> <span class="s1">&#39;localhost&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A helper function that builds a good CouchDB key</span>
</span><span class='line'><span class="cm"> * @param string the unicode string being keyified</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">couchKeyify</span><span class="p">(</span> <span class="nx">string</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// remove bad chars, and disallow starting with an underscore</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">string</span><span class="p">.</span>
</span><span class='line'>    <span class="nx">replace</span><span class="p">(</span><span class="sr">/[\t \?\#\\\-\+\.\,&#39;&quot;()*&amp;!\/]+/g</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">replace</span><span class="p">(</span><span class="sr">/^_+/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Keep track of the number of bands processed, output every 1000 loaded,</span>
</span><span class='line'><span class="cm"> * and close the Redis client when we&#39;ve loaded them all.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">trackLineCount</span><span class="p">(</span> <span class="nx">increment</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">processedBands</span> <span class="o">+=</span> <span class="nx">increment</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// output once every 1000 lines</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">processedBands</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Bands Loaded: &#39;</span> <span class="o">+</span> <span class="nx">processedBands</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// close the Redis Client when complete</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">totalBands</span> <span class="o">&lt;=</span> <span class="nx">processedBands</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Total Bands Loaded: &#39;</span> <span class="o">+</span> <span class="nx">processedBands</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">redisClient</span><span class="p">.</span><span class="nx">quit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Post one or more documents into CouchDB.</span>
</span><span class='line'><span class="cm"> * @param url is where we POST to.</span>
</span><span class='line'><span class="cm"> * @param docString a stringified JSON document.</span>
</span><span class='line'><span class="cm"> * @param count the number of documents being inserted.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">postDoc</span><span class="p">(</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">docsString</span><span class="p">,</span> <span class="nx">count</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">couchClient</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">:</span> <span class="s1">&#39;application/json&#39;</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span> <span class="nx">docsString</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">==</span> <span class="mi">201</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">trackLineCount</span><span class="p">(</span> <span class="nx">count</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;postDoc Got error: &#39;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Loop through all of the bands populated in Redis. We expect</span>
</span><span class='line'><span class="cm"> * the format of each key to be &#39;band:Band Name&#39; having the value</span>
</span><span class='line'><span class="cm"> * as a set of artist names. The artists each have the list of roles</span>
</span><span class='line'><span class="cm"> * they play in each band, keyed by &#39;artist:Band Name:Artist Name&#39;.</span>
</span><span class='line'><span class="cm"> * The band name, set of artists, and set of roles each artist plays</span>
</span><span class='line'><span class="cm"> * populates the CouchDB documents. eg:</span>
</span><span class='line'><span class="cm">  {</span>
</span><span class='line'><span class="cm">    name:&quot;Nirvana&quot;,</span>
</span><span class='line'><span class="cm">    artists:[{</span>
</span><span class='line'><span class="cm">      name: &quot;Kurt Cobain&quot;,</span>
</span><span class='line'><span class="cm">      roles:[&quot;Lead Vocals&quot;, &quot;Guitar&quot;]</span>
</span><span class='line'><span class="cm">    },...]</span>
</span><span class='line'><span class="cm">  }</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">populateBands</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// First, create the couch database</span>
</span><span class='line'>  <span class="nx">couchClient</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="s1">&#39;PUT&#39;</span><span class="p">,</span> <span class="nx">couchDBpath</span><span class="p">).</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">redisClient</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="s1">&#39;band:*&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">bandKeys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">totalBands</span> <span class="o">=</span> <span class="nx">bandKeys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span>
</span><span class='line'>      <span class="nx">readBands</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">bandsBatch</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">bandKeys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">bandKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// substring of &#39;band:&#39;.length gives us the band name</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">bandName</span> <span class="o">=</span> <span class="nx">bandKey</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">redisClient</span><span class="p">.</span><span class="nx">smembers</span><span class="p">(</span><span class="nx">bandKey</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">artists</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// batch the Redis calls to get all artists&#39; information at once</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">artistInfoBatch</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artistName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
</span><span class='line'>            <span class="s1">&#39;smembers&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;artist:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'>          <span class="p">]);</span>
</span><span class='line'>          <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
</span><span class='line'>            <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;from:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'>          <span class="p">]);</span>
</span><span class='line'>          <span class="nx">artistInfoBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
</span><span class='line'>            <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;to:&#39;</span> <span class="o">+</span> <span class="nx">bandName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">artistName</span>
</span><span class='line'>          <span class="p">]);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// batch up each band member to find the roles they play</span>
</span><span class='line'>        <span class="nx">redisClient</span><span class="p">.</span>
</span><span class='line'>          <span class="nx">multi</span><span class="p">(</span><span class="nx">artistInfoBatch</span><span class="p">).</span>
</span><span class='line'>          <span class="nx">exec</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">artistInfo</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span>
</span><span class='line'>              <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">artistDocs</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// build the artists sub-documents</span>
</span><span class='line'>            <span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artistName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">artist</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">artistName</span><span class="p">,</span> <span class="nx">role</span> <span class="o">:</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">]</span> <span class="p">},</span>
</span><span class='line'>                  <span class="nx">from</span> <span class="o">=</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">],</span>
</span><span class='line'>                  <span class="nx">to</span> <span class="o">=</span> <span class="nx">artistInfo</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">from</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;from&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">from</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">to</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;to&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">to</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">artistDocs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">artist</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// add this new band document to the batch to be executed later</span>
</span><span class='line'>            <span class="nx">bandsBatch</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">_id</span><span class="o">:</span> <span class="nx">couchKeyify</span><span class="p">(</span> <span class="nx">bandName</span> <span class="p">),</span>
</span><span class='line'>              <span class="nx">name</span><span class="o">:</span> <span class="nx">bandName</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">artists</span><span class="o">:</span> <span class="nx">artistDocs</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="c1">// keep track of the total number of bands read</span>
</span><span class='line'>            <span class="nx">readBands</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// upload batches of 50 values to couch, or the remaining values left</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="nx">bandsBatch</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mi">50</span> <span class="o">||</span> <span class="nx">totalBands</span> <span class="o">-</span> <span class="nx">readBands</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">postDoc</span><span class="p">(</span>
</span><span class='line'>                <span class="nx">couchDBpath</span><span class="o">+</span><span class="s1">&#39;/_bulk_docs&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="nx">docs</span> <span class="o">:</span> <span class="nx">bandsBatch</span> <span class="p">}),</span>
</span><span class='line'>                <span class="nx">bandsBatch</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// empty out the batch array to be filled again</span>
</span><span class='line'>              <span class="nx">bandsBatch</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// expose couchKeyify function</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">couchKeyify</span> <span class="o">=</span> <span class="nx">couchKeyify</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// start populating bands if running as main script</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">module</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">populateBands</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (graph_sync.js)</span> <a href='/downloads/code/7d7w/redis/day3/from-to/graph_sync.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">events</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">esc</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;querystring&#39;</span><span class="p">).</span><span class="nx">escape</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// custom libraries</span>
</span><span class='line'>  <span class="nx">couch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./watch_changes_continuous.js&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4j</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./neo4j_caching_client.js&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">neo4jClient</span> <span class="o">=</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">createClient</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">limit</span><span class="o">:</span> <span class="mi">10</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>  <span class="nx">couchWatcher</span> <span class="o">=</span> <span class="nx">couch</span><span class="p">.</span><span class="nx">createWatcher</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">db</span><span class="o">:</span> <span class="s1">&#39;bands&#39;</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>  <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// feed band information into redis for autocompleter</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">feedBandToRedis</span><span class="p">(</span><span class="nx">band</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">redisClient</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;band-name:&#39;</span> <span class="o">+</span> <span class="nx">band</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">band</span><span class="p">.</span><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">redisClient</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;artist-name:&#39;</span> <span class="o">+</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">artist</span><span class="p">.</span><span class="nx">role</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">role</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">redisClient</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;role-name:&#39;</span> <span class="o">+</span> <span class="nx">role</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * feed band membership and artist/role content from couch to neo4j.</span>
</span><span class='line'><span class="cm"> * @param band A band document from CouchDB.</span>
</span><span class='line'><span class="cm"> * @param progress EventEmitter to emit progress events.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">feedBandToNeo4j</span><span class="p">(</span><span class="nx">band</span><span class="p">,</span> <span class="nx">progress</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span>
</span><span class='line'>    <span class="nx">lookup</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">lookupOrCreateNode</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">relate</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createRelationship</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;bands&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">band</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bandNode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;band&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">band</span><span class="p">.</span><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;artists&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artistNode</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;artist&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">from</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">props</span><span class="p">.</span><span class="nx">from</span> <span class="o">=</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">from</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">to</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">props</span><span class="p">.</span><span class="nx">to</span> <span class="o">=</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">to</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">relate</span><span class="p">(</span><span class="nx">bandNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="nx">artistNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="s1">&#39;member&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;member&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="nx">props</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">artist</span><span class="p">.</span><span class="nx">role</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">role</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;roles&#39;</span><span class="p">,</span> <span class="s1">&#39;role&#39;</span><span class="p">,</span> <span class="nx">role</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">roleNode</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;role&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">relate</span><span class="p">(</span><span class="nx">artistNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="nx">roleNode</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="s1">&#39;plays&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>              <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;plays&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// process only interesting bands (ones with artists who have roles)</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processBand</span><span class="p">(</span><span class="nx">band</span><span class="p">,</span> <span class="nx">progress</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// change this to true to process all bands</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">addBand</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">band</span><span class="p">.</span><span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">artist</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">.</span><span class="nx">role</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">addBand</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">addBand</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">feedBandToRedis</span><span class="p">(</span><span class="nx">band</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">feedBandToNeo4j</span><span class="p">(</span><span class="nx">band</span><span class="p">,</span> <span class="nx">progress</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// progress reporting measures (how much work has been done)</span>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">stats</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">doc</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">band</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">artist</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">member</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">role</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">plays</span><span class="o">:</span><span class="mi">0</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">progress</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">events</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stats</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">progress</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">stats</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">stats</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// start watching couch and processing bands as they come in</span>
</span><span class='line'><span class="nx">couchWatcher</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">progress</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;doc&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">doc</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">processBand</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">progress</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (neo4j_caching_client.js)</span> <a href='/downloads/code/7d7w/redis/day3/from-to/neo4j_caching_client.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">events</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">esc</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;querystring&#39;</span><span class="p">).</span><span class="nx">escape</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4j</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./neo4j_driver.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">createClient</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span>
</span><span class='line'>    <span class="nx">neo4jClient</span> <span class="o">=</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="nx">options</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">pending</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">events</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">pending</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// unlimited</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">expiry</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">expiry</span> <span class="o">||</span> <span class="mi">300</span><span class="p">;</span> <span class="c1">// default 5 min</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Run a gremlin script against the server.</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">runGremlin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">script</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ext/GremlinPlugin/graphdb/execute_script&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="p">{</span> <span class="nx">script</span> <span class="o">:</span> <span class="nx">script</span> <span class="p">},</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// lookup a key/value node by index.</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">lookupNode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;index/node&#39;</span><span class="p">,</span> <span class="nx">esc</span><span class="p">(</span><span class="nx">index</span><span class="p">),</span> <span class="nx">esc</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">esc</span><span class="p">(</span><span class="nx">value</span><span class="p">)];</span>
</span><span class='line'>    <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create a key/value node and index it.</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createNode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">input</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;node&#39;</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">uri</span><span class="o">:</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">self</span><span class="p">,</span> <span class="nx">key</span><span class="o">:</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">value</span> <span class="p">};</span>
</span><span class='line'>      <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">([</span><span class="s1">&#39;index/node&#39;</span><span class="p">,</span> <span class="nx">esc</span><span class="p">(</span><span class="nx">index</span><span class="p">)],</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// lookup a node or create/index and cache it</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">lookupOrCreateNode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span>
</span><span class='line'>      <span class="nx">cacheKey</span> <span class="o">=</span> <span class="s1">&#39;lookup:&#39;</span> <span class="o">+</span> <span class="nx">index</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">ex</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">expiry</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// only one pending lookup for a given index/key/value allowed at a time</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">pending</span><span class="p">.</span><span class="nx">listeners</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// check redis first</span>
</span><span class='line'>      <span class="nx">redisClient</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">text</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span> <span class="o">&amp;&amp;</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// found in redis cache, use it and refresh</span>
</span><span class='line'>          <span class="nx">pending</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">text</span><span class="p">));</span>
</span><span class='line'>          <span class="nx">redisClient</span><span class="p">.</span><span class="nx">expire</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">ex</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// missed redis cache, lookup in neo4j index</span>
</span><span class='line'>          <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">lookupNode</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">list</span> <span class="o">&amp;&amp;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// found in index, use it and cache</span>
</span><span class='line'>              <span class="nx">pending</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>              <span class="nx">redisClient</span><span class="p">.</span><span class="nx">setex</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">ex</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// missed index, create it and cache it</span>
</span><span class='line'>              <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createNode</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">pending</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">redisClient</span><span class="p">.</span><span class="nx">setex</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">ex</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">pending</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create a relationship between two nodes</span>
</span><span class='line'>  <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">createRelationship</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fromNode</span><span class="p">,</span> <span class="nx">toNode</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fromPath</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fromNode</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^.*?\/db\/data\//</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">rel</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">to</span><span class="o">:</span> <span class="nx">toNode</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">type</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">rel</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">fromPath</span><span class="p">,</span> <span class="s1">&#39;relationships&#39;</span><span class="p">],</span> <span class="nx">rel</span><span class="p">,</span> <span class="nx">callback</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">neo4jClient</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (bands.js)</span> <a href='/downloads/code/7d7w/redis/day3/from-to/bands.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">jsonHeader</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span><span class="s1">&#39;application/json&#39;</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">bricks</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bricks&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">mustache</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mustache&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// custom libraries</span>
</span><span class='line'>  <span class="nx">couchUtil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./populate_couch.js&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4j</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./neo4j_caching_client.js&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">couchClient</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">5984</span><span class="p">,</span> <span class="s1">&#39;localhost&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4jClient</span> <span class="o">=</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">gremlin</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">runGremlin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A convenience function for wrapping the</span>
</span><span class='line'><span class="cm"> * reading of JSON reponse data chunks.</span>
</span><span class='line'><span class="cm"> * @param response A Node HTTP response object.</span>
</span><span class='line'><span class="cm"> * @param callback the function to populate and call on completion.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processBuffer</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">callback</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">buffer</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">buffer</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;null&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Post one or more documents into CouchDB.</span>
</span><span class='line'><span class="cm"> * @param url is where we POST to.</span>
</span><span class='line'><span class="cm"> * @param docString a stringified JSON document.</span>
</span><span class='line'><span class="cm"> * @param count the number of documents being inserted.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">getCouchDoc</span><span class="p">(</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="nx">callback</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">couchClient</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">jsonHeader</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">response</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">!=</span> <span class="mi">200</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Value not found&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">processBuffer</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">couchObj</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span> <span class="nx">couchObj</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;postDoc Got error: &#39;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Wraps a block of HTML with a standard template. HTML lives in template.html.</span>
</span><span class='line'><span class="cm"> * @innerHtml populates the body of the template</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">htmlTemplate</span><span class="p">(</span> <span class="nx">innerHtml</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">file_data</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span> <span class="s1">&#39;template.html&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">file_data</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;[[YIELD]]&quot;</span><span class="p">,</span> <span class="nx">innerHtml</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">innerHtml</span><span class="p">,</span> <span class="nx">values</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">mustache</span><span class="p">.</span><span class="nx">to_html</span><span class="p">(</span> <span class="nx">htmlTemplate</span><span class="p">(</span> <span class="nx">innerHtml</span> <span class="p">),</span> <span class="nx">values</span> <span class="p">));</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">columns</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;null&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">obj</span><span class="p">[</span><span class="nx">columns</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// A Nodejs web app utility setup</span>
</span><span class='line'><span class="nx">appServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bricks</span><span class="p">.</span><span class="nx">appserver</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// attach request plugin to easily extract params</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">request</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Just display a blank form if no band is given.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Find a band&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Accepts a band name and displays all artists in the band.</span>
</span><span class='line'><span class="cm"> * Also displays a list of suggested bands where at least</span>
</span><span class='line'><span class="cm"> * one artist has played at one time.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Gremlin: aliases introduced for the same node and/or</span>
</span><span class='line'><span class="cm"> * relationship appear to be used in reverse order in</span>
</span><span class='line'><span class="cm"> * Tables.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/band$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bandName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">bandNodePath</span> <span class="o">=</span> <span class="s1">&#39;/bands/&#39;</span> <span class="o">+</span> <span class="nx">couchUtil</span><span class="p">.</span><span class="nx">couchKeyify</span><span class="p">(</span> <span class="nx">bandName</span> <span class="p">),</span>
</span><span class='line'>      <span class="nx">queryPrefix</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;bands&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">bandName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">otherBandsQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.out(&quot;member&quot;).in(&quot;member&quot;).dedup.name&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">currentMembersQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.outE(&quot;member&quot;).as(&quot;from&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.filter{it.to == null}.inV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table()){it.from}{it.name}.cap()&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">otherMembersQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.outE(&quot;member&quot;).as(&quot;from&quot;).as(&quot;to&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.filter{it.to != null}.inV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table())&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;{it.to}{it.from}{it.name}.cap()&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">gremlin</span><span class="p">(</span><span class="nx">otherBandsQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">graphData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">gremlin</span><span class="p">(</span><span class="nx">currentMembersQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentMembers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">gremlin</span><span class="p">(</span><span class="nx">otherMembersQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">otherMembers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">{</span><span class="nx">band</span><span class="o">:</span> <span class="nx">bandName</span><span class="p">,</span> <span class="nx">bands</span><span class="o">:</span> <span class="nx">graphData</span><span class="p">,</span>
</span><span class='line'>                             <span class="nx">currents</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">currentMembers</span><span class="p">),</span>
</span><span class='line'>                             <span class="nx">others</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">otherMembers</span><span class="p">)};</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;&lt;h2&gt;Current {{band}} Band Members&lt;/h2&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">currentMembers</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#currents}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/artist?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/currents}}&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s2">&quot;&lt;p&gt;No current member (dead band?)&lt;/p&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">otherMembers</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;Other members&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#others}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/artist?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#to}} to {{to}}{{/to}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/others}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;You may also like&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#bands}}&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/band?name={{.}}&quot;&gt;{{.}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/bands}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">values</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Accepts an artist name and displays band and role information</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/artist$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artistName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">queryPrefix</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">rolesQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span> <span class="o">+</span><span class="s1">&#39;.out(&quot;plays&quot;).role.dedup&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">bandsQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.inE(&quot;member&quot;).as(&quot;to&quot;).as(&quot;from&quot;).outV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table()){it.from}{it.to}{it.name}.cap()&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">gremlin</span><span class="p">(</span> <span class="nx">rolesQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">roles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">gremlin</span><span class="p">(</span> <span class="nx">bandsQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">artist</span><span class="o">:</span> <span class="nx">artistName</span><span class="p">,</span> <span class="nx">roles</span><span class="o">:</span> <span class="nx">roles</span><span class="p">,</span>
</span><span class='line'>                           <span class="nx">bands</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;&lt;h3&gt;{{artist}} Performs these Roles&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#roles}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;{{.}}&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/roles}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;Play in Bands&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#bands}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/band?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#to}} to {{to}}{{/to}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/bands}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">values</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * A band name search. Used for autocompletion.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/search$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">redisClient</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="s2">&quot;band-name:&quot;</span><span class="o">+</span><span class="nx">query</span><span class="o">+</span><span class="s2">&quot;*&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bands</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">keys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">bands</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;band-name:&quot;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// catch all unknown routes with a 404</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;.+&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">fourohfour</span><span class="p">);</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;.+&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">loghandler</span><span class="p">,</span> <span class="p">{</span> <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;final&quot;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// start up the server</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Starting Server on port &quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">createServer</span><span class="p">().</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Add Music Samples</h3>

<p>The book (in beta 5.0) suggested to use Riak's Luwak, but this
component has recently been removed, and there seems to be no
replacement at this time. So I went with MongoDB's
<a href="http://www.mongodb.org/display/DOCS/GridFS">GridFS</a> instead. This is
a little more complex than a simple replacement of the client
libraries: MongoDB does not have an HTTP ReST API for GridFS, so I
need to stream the content of the file through the server.</p>

<h4>Overview</h4>

<p>To keep things simple, I load only on sample per band; the file name
must be the same as the CouchDB key, followed by '.mp3'.</p>

<p>To access MongoDB from Node.js, I use
<a href="http://github.com/christkv/node-mongodb-native">node-mongodb-native</a>,
which can be installed with <code>npm</code>. It has all the expected features of
a client, including GridFS support (with one caveat, see below).</p>

<p>To stream the file from the server, I use a dedicated port, for no
better reason than because
<a href="http://bricksjs.com/index.html">Brick.js</a>, that the authors used to
build the service, was giving me trouble, while the standard <code>http</code>
module did not.</p>

<p>When displaying the band information, I check whether a file exists
with the same name as the band's key: if it does, I add a link to the
dedicated streaming port, passing the key as parameter:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Adding Sample Link  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mongoClient</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mongodb</span><span class="p">.</span><span class="nx">GridStore</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">bandKey</span> <span class="o">+</span> <span class="s1">&#39;.mp3&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">exist</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">exist</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&amp;lt;a href=&quot;http://&#39;</span><span class="o">+</span><span class="nx">host</span><span class="o">+</span><span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">streamPort</span><span class="o">+</span><span class="s1">&#39;?band=&quot;&amp;gt;Sample&amp;lt;/a&amp;gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, I create a new <code>http</code> server to send the music:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Streaming Files from GridFS  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">band</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">).</span><span class="nx">query</span><span class="p">.</span><span class="nx">band</span><span class="p">;</span>
</span><span class='line'><span class="nx">mongoClient</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">gs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongodb</span><span class="p">.</span><span class="nx">GridStore</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">band</span><span class="o">+</span><span class="s1">&#39;.mp3&#39;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">gs</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">gs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;streaming...&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">response</span><span class="p">.</span><span class="nx">writeHeader</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;Content-type&#39;</span><span class="o">:</span> <span class="s1">&#39;audio/mpeg, audio/x-mpeg, audio/x-mpeg-3, audio/mpeg3&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">// magic headers to stream mp3...</span>
</span><span class='line'>            <span class="s1">&#39;X-Pad&#39;</span><span class="o">:</span> <span class="s1">&#39;avoid browser bug&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;Cache-Control&#39;</span><span class="o">:</span> <span class="s1">&#39;no-cache&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;Content-Length&#39;</span><span class="o">:</span> <span class="nx">gs</span><span class="p">.</span><span class="nx">length</span><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// cannot use gridstore streams; somehow file always</span>
</span><span class='line'><span class="c1">// truncated - load in memory instead</span>
</span><span class='line'><span class="c1">//            gs.stream(true).pipe(response);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>        <span class="nx">gs</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">gs</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">streamPort</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The only problem I had (but it took me a while to figure it out) was
that the stream support in the MongoDB client for GridFS content is
(as far as I can tell) defective: it will close the stream after just
one or two chunks' worth of data
(<a href="https://github.com/christkv/node-mongodb-native/issues/540">Issue in Github</a>).</p>

<p>So instead I have to load the whole file in memory then write it in
the response... Clearly not the best approach, but hey, it works!</p>

<h4>Full Code</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (bands.js)</span> <a href='/downloads/code/7d7w/redis/day3/mp3/bands.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/***</span>
</span><span class='line'><span class="cm"> * Excerpted from &quot;Seven Databases in Seven Weeks&quot;,</span>
</span><span class='line'><span class="cm"> * published by The Pragmatic Bookshelf.</span>
</span><span class='line'><span class="cm"> * Copyrights apply to this code. It may not be used to create training material, </span>
</span><span class='line'><span class="cm"> * courses, books, articles, and the like. Contact us if you are in doubt.</span>
</span><span class='line'><span class="cm"> * We make no guarantees that this code is fit for any purpose. </span>
</span><span class='line'><span class="cm"> * Visit http://www.pragmaticprogrammer.com/titles/rwdata for more book information.</span>
</span><span class='line'><span class="cm">***/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">streamPort</span> <span class="o">=</span> <span class="mi">8089</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">host</span> <span class="o">=</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">jsonHeader</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span><span class="s1">&#39;application/json&#39;</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// standard libraries</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">bricks</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bricks&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">mustache</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mustache&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// mongodb</span>
</span><span class='line'>  <span class="nx">mongodb</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// custom libraries</span>
</span><span class='line'>  <span class="nx">couchUtil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./populate_couch.js&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4j</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./neo4j_caching_client.js&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// database clients</span>
</span><span class='line'>  <span class="nx">couchClient</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">5984</span><span class="p">,</span> <span class="s1">&#39;localhost&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">neo4jClient</span> <span class="o">=</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">redisClient</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="mi">6379</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">mongoClient</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">mongodb</span><span class="p">.</span><span class="nx">Db</span><span class="p">(</span><span class="s1">&#39;music&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="k">new</span> <span class="nx">mongodb</span><span class="p">.</span><span class="nx">Server</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>                                      <span class="nx">mongodb</span><span class="p">.</span><span class="nx">Connection</span><span class="p">.</span><span class="nx">DEFAULT_PORT</span><span class="p">,</span> <span class="p">{}),</span>
</span><span class='line'>                   <span class="p">{</span><span class="nx">native_parser</span><span class="o">:</span><span class="kc">true</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span>
</span><span class='line'>  <span class="nx">gremlin</span> <span class="o">=</span> <span class="nx">neo4jClient</span><span class="p">.</span><span class="nx">runGremlin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A convenience function for wrapping the</span>
</span><span class='line'><span class="cm"> * reading of JSON reponse data chunks.</span>
</span><span class='line'><span class="cm"> * @param response A Node HTTP response object.</span>
</span><span class='line'><span class="cm"> * @param callback the function to populate and call on completion.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processBuffer</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">callback</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">buffer</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">buffer</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;null&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Post one or more documents into CouchDB.</span>
</span><span class='line'><span class="cm"> * @param url is where we POST to.</span>
</span><span class='line'><span class="cm"> * @param docString a stringified JSON document.</span>
</span><span class='line'><span class="cm"> * @param count the number of documents being inserted.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">getCouchDoc</span><span class="p">(</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="nx">callback</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">couchClient</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">jsonHeader</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">response</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">!=</span> <span class="mi">200</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Value not found&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">processBuffer</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">couchObj</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span> <span class="nx">couchObj</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;postDoc Got error: &#39;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Wraps a block of HTML with a standard template. HTML lives in template.html.</span>
</span><span class='line'><span class="cm"> * @innerHtml populates the body of the template</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">htmlTemplate</span><span class="p">(</span> <span class="nx">innerHtml</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">file_data</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span> <span class="s1">&#39;template.html&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">file_data</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;[[YIELD]]&quot;</span><span class="p">,</span> <span class="nx">innerHtml</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">innerHtml</span><span class="p">,</span> <span class="nx">values</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">mustache</span><span class="p">.</span><span class="nx">to_html</span><span class="p">(</span> <span class="nx">htmlTemplate</span><span class="p">(</span> <span class="nx">innerHtml</span> <span class="p">),</span> <span class="nx">values</span> <span class="p">));</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fromTableToObject</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">columns</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;null&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">obj</span><span class="p">[</span><span class="nx">columns</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// A Nodejs web app utility setup</span>
</span><span class='line'><span class="nx">appServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bricks</span><span class="p">.</span><span class="nx">appserver</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// attach request plugin to easily extract params</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">request</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Just display a blank form if no band is given.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Find a band&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Accepts a band name and displays all artists in the band.</span>
</span><span class='line'><span class="cm"> * Also displays a list of suggested bands where at least</span>
</span><span class='line'><span class="cm"> * one artist has played at one time.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Gremlin: aliases introduced for the same node and/or</span>
</span><span class='line'><span class="cm"> * relationship appear to be used in reverse order in</span>
</span><span class='line'><span class="cm"> * Tables.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/band$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bandName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">bandKey</span> <span class="o">=</span> <span class="nx">couchUtil</span><span class="p">.</span><span class="nx">couchKeyify</span><span class="p">(</span> <span class="nx">bandName</span> <span class="p">),</span>
</span><span class='line'>      <span class="nx">bandNodePath</span> <span class="o">=</span> <span class="s1">&#39;/bands/&#39;</span> <span class="o">+</span> <span class="nx">bandKey</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">queryPrefix</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;bands&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">bandName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">otherBandsQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.out(&quot;member&quot;).in(&quot;member&quot;).dedup.name&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">currentMembersQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.outE(&quot;member&quot;).as(&quot;from&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.filter{it.to == null}.inV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table()){it.from}{it.name}.cap()&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">otherMembersQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.outE(&quot;member&quot;).as(&quot;from&quot;).as(&quot;to&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.filter{it.to != null}.inV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table())&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;{it.to}{it.from}{it.name}.cap()&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">gremlin</span><span class="p">(</span><span class="nx">otherBandsQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">graphData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">gremlin</span><span class="p">(</span><span class="nx">currentMembersQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentMembers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">gremlin</span><span class="p">(</span><span class="nx">otherMembersQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">otherMembers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">{</span><span class="nx">band</span><span class="o">:</span> <span class="nx">bandName</span><span class="p">,</span> <span class="nx">bands</span><span class="o">:</span> <span class="nx">graphData</span><span class="p">,</span>
</span><span class='line'>                             <span class="nx">currents</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">currentMembers</span><span class="p">),</span>
</span><span class='line'>                             <span class="nx">others</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">otherMembers</span><span class="p">),</span>
</span><span class='line'>                             <span class="nx">bandK</span><span class="o">:</span> <span class="nx">bandKey</span><span class="p">};</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;&lt;h2&gt;Current {{band}} Band Members&lt;/h2&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">currentMembers</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#currents}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/artist?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/currents}}&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">body</span> <span class="o">+=</span> <span class="s2">&quot;&lt;p&gt;No current member (dead band?)&lt;/p&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">mongoClient</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">mongodb</span><span class="p">.</span><span class="nx">GridStore</span><span class="p">.</span><span class="nx">exist</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">bandKey</span> <span class="o">+</span> <span class="s1">&#39;.mp3&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">exist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">exist</span><span class="p">)</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;a href=&quot;http://&#39;</span><span class="o">+</span><span class="nx">host</span><span class="o">+</span><span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">streamPort</span><span class="o">+</span><span class="s1">&#39;?band={{bandK}}&quot;&gt;Sample&lt;/a&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">otherMembers</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;Other members&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#others}}&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/artist?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#to}} to {{to}}{{/to}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/others}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;You may also like&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#bands}}&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/band?name={{.}}&quot;&gt;{{.}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>                        <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/bands}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">values</span> <span class="p">);</span>
</span><span class='line'>                        <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>                    <span class="p">});</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Accepts an artist name and displays band and role information</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/artist$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artistName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">queryPrefix</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">rolesQuery</span> <span class="o">=</span> <span class="nx">queryPrefix</span> <span class="o">+</span><span class="s1">&#39;.out(&quot;plays&quot;).role.dedup&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">bandsQuery</span> <span class="o">=</span> <span class="s1">&#39;g.idx(&quot;artists&quot;)[[&quot;name&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">artistName</span><span class="o">+</span><span class="s1">&#39;&quot;]]&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.inE(&quot;member&quot;).as(&quot;to&quot;).as(&quot;from&quot;).outV.as(&quot;name&quot;)&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;.table(new Table()){it.from}{it.to}{it.name}.cap()&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">gremlin</span><span class="p">(</span> <span class="nx">rolesQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">roles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">gremlin</span><span class="p">(</span> <span class="nx">bandsQuery</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">artist</span><span class="o">:</span> <span class="nx">artistName</span><span class="p">,</span> <span class="nx">roles</span><span class="o">:</span> <span class="nx">roles</span><span class="p">,</span>
</span><span class='line'>                           <span class="nx">bands</span><span class="o">:</span> <span class="nx">convertGremlinTable</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;&lt;h3&gt;{{artist}} Performs these Roles&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#roles}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;{{.}}&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/roles}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;h3&gt;Play in Bands&lt;/h3&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;ul&gt;{{#bands}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;/band?name={{name}}&quot;&gt;{{name}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#from}} from {{from}}{{/from}}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{#to}} to {{to}}{{/to}}&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/a&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">body</span> <span class="o">+=</span> <span class="s1">&#39;{{/bands}}&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">writeTemplate</span><span class="p">(</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">values</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * A band name search. Used for autocompletion.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;^/search$&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">redisClient</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="s2">&quot;band-name:&quot;</span><span class="o">+</span><span class="nx">query</span><span class="o">+</span><span class="s2">&quot;*&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bands</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">keys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">bands</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;band-name:&quot;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">bands</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// cannot seem to get bricks to stream data back</span>
</span><span class='line'><span class="c1">// use simple default http server</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">band</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">).</span><span class="nx">query</span><span class="p">.</span><span class="nx">band</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">mongoClient</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">gs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongodb</span><span class="p">.</span><span class="nx">GridStore</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">band</span><span class="o">+</span><span class="s1">&#39;.mp3&#39;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">gs</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">gs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;streaming...&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">response</span><span class="p">.</span><span class="nx">writeHeader</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;Content-type&#39;</span><span class="o">:</span> <span class="s1">&#39;audio/mpeg, audio/x-mpeg, audio/x-mpeg-3, audio/mpeg3&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="c1">// magic headers to stream mp3...</span>
</span><span class='line'>                <span class="s1">&#39;X-Pad&#39;</span><span class="o">:</span> <span class="s1">&#39;avoid browser bug&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;Cache-Control&#39;</span><span class="o">:</span> <span class="s1">&#39;no-cache&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;Content-Length&#39;</span><span class="o">:</span> <span class="nx">gs</span><span class="p">.</span><span class="nx">length</span><span class="p">});</span>
</span><span class='line'><span class="c1">// cannot use gridstore streams; somehow file always</span>
</span><span class='line'><span class="c1">// truncated - load in memory instead</span>
</span><span class='line'><span class="c1">//            gs.stream(true).pipe(response);</span>
</span><span class='line'>            <span class="nx">gs</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">gs</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">streamPort</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// catch all unknown routes with a 404</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;.+&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">fourohfour</span><span class="p">);</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">addRoute</span><span class="p">(</span><span class="s2">&quot;.+&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">loghandler</span><span class="p">,</span> <span class="p">{</span> <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;final&quot;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// start up the server</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Starting Server on port &quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="nx">appServer</span><span class="p">.</span><span class="nx">createServer</span><span class="p">().</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Wrapping Up</h2>

<p>Well, that was a long day. I should have enjoyed it, but the lack of
maturity in some of the tools (Neo4j's always evolving query language
and the GridFS streaming bug) caused hours of frustration. The main
cause, however, was missing knowledge: faced with an unexpected
behaviour, I had no idea whether it was a bug (find a workaround) or
an incorrect invocation (rework the query to correct it).</p>

<p>The exposition of polyglot persistence through the music information
service were pretty good, given the space constraint. Of course it
skipped the really ugly and tedious parts (how to incrementally keep
the databases in sync when the main records are updated, not merely
created); given the variation in data models, data manipulation (or
lack thereof) and query between the different databases, this can
easily become a nightmare (especially if incremental updates are not
part of the initial design).</p>

<p>Another upcoming book, <a href="http://www.manning.com/marz/">Big Data</a>, takes
a very different approach (no updates, only appends). I look forward
to reading it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 2 Basics]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/03/10/concrete-mathematics-chapter-2-basics/"/>
    <updated>2012-03-10T11:10:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/03/10/concrete-mathematics-chapter-2-basics</id>
    <content type="html"><![CDATA[<p>This second batch of exercises builds on the
<a href="/blog/2012/02/28/concrete-mathematics-chapter-2-warmups/">previous one</a>. Once
again, there are no complex manipulations, and very often the solution
just follows from the definitions.</p>

<!--more-->


<h2>Basics</h2>

<h3>$\sum_{0\le k\lt n}(a_{k+1}-a_k)b_k$</h3>

<p>To show that</p>

<div markdown="0">
\begin{align}
\sum_{0\le k\lt n}(a_{k+1}-a_k)b_k &amp; = a_n b_n - a_0 b_0 - \sum_{0 \le k \lt n} a_{k+1}(b_{k+1} - b_k)&amp;&amp;n\ge 0\\\\
\end{align}
</div>


<p>I start by rewriting the sum in the right side of the equation:</p>

<div markdown="0">
\begin{align}
\sum_{0 \le k \lt n} a_{k+1}(b_{k+1} - b_k) &amp; = \sum_{0 \le k \lt n} (a_{k+1}b_{k+1} +  a_{k+1} b_k)\\\\
&amp; = \sum_{0 \le k \lt n} a_{k+1}b_{k+1} +  \sum_{0 \le k \lt n} a_{k+1} b_k&amp;&amp;\text{associative law}\\\\
&amp; = \sum_{0 \le k-1 \lt n} a_k b_k +  \sum_{0 \le k \lt n} a_{k+1} b_k&amp;&amp;k\leftarrow k-1\\\\
&amp; = \sum_{1 \le k \le n} a_k b_k +  \sum_{0 \le k \lt n} a_{k+1} b_k\\\\
\end{align}
</div>


<p>This latest value can now be put back into the original right:</p>

<div markdown="0">
\begin{align}
a_n b_n - a_0 b_0 - \sum_{1 \le k \le n} a_k b_k +  \sum_{0 \le k \lt n} a_{k+1} b_k &amp; = \sum_{0\le k \lt n} a_{k+1} b_k - (a_0 b_0 + \sum_{1 \le k \le n} a_k b_k - a_n b_n)\\\\
&amp; = \sum_{0\le k \lt n} a_{k+1} b_k - \sum_{0\le k \lt n} a_k b_k\\\\
&amp; = \sum_{0\le k \lt n} (a_{k+1} b_k - a_k b_k)\\\\
&amp; = \sum_{0\le k \lt n} (a_{k+1} - a_k) b_k\\\\
\end{align}
</div>


<p>which is indeed the left side of the equation (the but-last step is
permitted under the associative law, but that didn't fit in the margin).</p>

<h3>$p(k) = k + (-1)^k c$</h3>

<p>It is clear that there is a single $p(k)$ for every possible (integer)
$k$. So I need to show that for every $m$, there is a single $k$ such
that $p(k)=m$, defining $p^{-1}$.</p>

<p>The book method is smart, mine clearly less so, but as far as I can
tell, still correct: for $m$, I consider $m-c$ and $m+c$. The
difference is $2c$, so they're either both even, or both
odd.</p>

<p>If they're both even, then $m-c+(-1)^{m-c}c=m$, so $k=m-c$. If they're
both odd, then $m+c+(-1)^{m+c}c=m$, so $k=m+c$. So $k$ is always well
defined for every $m$, and $p$ is indeed a permutation.</p>

<h3>$\sum_{k=0}^n (-1)^k k^2$</h3>

<p>While I found the closed formula for the sum, I could not do it with
the repertoire method.</p>

<p>Solving the sum is not really difficult (although a little bit than
the repertoire method, if you know how to do the latter); one way is
to solve the positive and negative sums separately (they can be broken
down to already solved sums); another one is to compute the sum of an
even number of terms (one positive and one negative), then to compute
sums of odd number of terms (by adding a term to the previous
solution), and finally combining both to find the closed formula.</p>

<p>In both attempts above, I tried to remove the $(-1)^k$ factor from the
terms; when using the repertoire method I tried to do the same, which
is why I failed.</p>

<p>The repertoire method relies on a good intuition: one must have a
sense of general shape of the parametric functions. In retrospect, it
seems obvious, but I just couldn't see it, blinded as I was by$(-1)^k$.</p>

<p>Expressing the sum as a recurrence is easy:</p>

<div markdown="0">
\begin{align}
R_0 &amp; = 0\\\\
R_n &amp; = R_{n-1} + (-1)^n n^2\\\\
\end{align}
</div>


<p>Also, looking at the first few terms of the sum,
$-1, 3, -6, 10, -15, \dots$, it is natural to consider solutions of
the form $(-1)^n F(n)$; it is a little bit trickier to see where a good
generalisation of the recurrence above should put the additional
terms:</p>

<div markdown="0">
\begin{align}
R_0 &amp; = \alpha\\\\
R_n &amp; = R_{n-1} + (-1)^n \left(\beta + \gamma n + \delta n^2 \right)\\\\
\end{align}
</div>


<p>With such a form, plugging in solutions $(-1)^nF(n)$ will
simplify to $F(n) = \beta + \gamma n + \delta n^2 - F(n-1)$.</p>

<p>At this stage, it becomes very easy to find the $A(n)$, $B(n)$, $C(n)$
and $D(n)$ functions (the latter being the solution we are looking
for). In fact, if all you care about is $D(n)$, then it is enough to
use $R_n = (-1)^n n$ and $R_n = (-1)^n n^2$:</p>

<h4>$R_n = (-1)^n n$</h4>

<div markdown="0">
\begin{align}
R_0 &amp; = 0&amp;&amp;\alpha = 0\\\\
n &amp; = \beta + \gamma n + \delta n^n - n + 1\\\\
2n - 1 &amp; = \beta + \gamma n&amp;&amp;\beta = -1, \gamma = 2\\\\
\end{align}
</div>


<p>which gives $-B(n)+2C(n) = (-1)^n n$.</p>

<h4>$R_n = (-1)^n n^2$</h4>

<div markdown="0">
\begin{align}
R_0 &amp; = 0&amp;&amp;\alpha = 0\\\\
n^2 &amp; = \beta + \gamma n + \delta n^2 - (n-1) ^2\\\\
2 n^2 - 2n + 1 &amp; = \beta + \gamma n + \delta n^2&amp;&amp;\beta = 1, \gamma = -2, \delta = 2\\\\
\end{align}
</div>


<p>which gives $B(n)-2C(n)+2D(n) = (-1)^n n^2$. Combining with the
previous answer, we have $2D(n) = (-1)^n (n^2-n)$, or
$D(n) = (-1)^n \frac{n^2-n}{2}$.</p>

<h4>Wrapping up this exercise</h4>

<p>In hindsight, these steps could have helped me solve this
exercise as intended:</p>

<ul>
<li>compute the first few terms to see if there is something obvious
about their shape; in this case, the $(-1)^n$ factor</li>
<li>at first, write the recurrence equations as simply as possible,
with all the "inconvenient" parts; comparing them to the "shapes"
identified in the previous step might give some insight about the
general solutions, and possibly removed these difficult parts</li>
<li>only then, consider how to generalise the recurrence equations. The
base case is always $R_0 = \alpha$; the recurrent case should add
parameters to each term, and additional terms (with their own
parameters) to complete some basic classes of problems (for instance,
if there are any polynomial, there should be a term for each power
smaller than the largest power of the original problem; another basic
class is the generalised radix-based Josephus problem)</li>
<li>each class of problems can be solved independently; this makes it
easier to find potential solutions and to combine them.</li>
</ul>


<h3>$\sum_{k=1}^n k2^k$</h3>

<p>Not overly complicated; at least the introduction of $j$ is not a
mystery (unlike the next exercise).</p>

<div markdown="0">
\begin{align}
\sum_{1\le k\le n}k 2^k &amp; = \sum_{1\le k\le n} 2^k \sum_{1\le j\le k}1\\\\
&amp; = \sum_{1\le k\le n} \sum_{1\le j\le k} 2^k\\\\
&amp; = \sum_{1\le j\le k \le n} 2^k\\\\
&amp; = \sum_{1\le j\le n} \sum_{j\le k\le n}2^k\\\\
\end{align}
</div>


<p>The inner sum can be rewritten as</p>

<div markdown="0">
\begin{align}
\sum_{j\le k\le n}2^k &amp; = \sum_{1\le k\le n}2^k - \sum_{1\le k\lt j}2^k\\\\
&amp; = 2^{n+1} - 2 - 2^j + 2\\\\
&amp; = 2^{n+1} - 2^j\\\\
\end{align}
</div>


<p>Here I use the already known
sum $\sum 2^k$. Putting this last result
in the original sum</p>

<div markdown="0">
\begin{align}
\sum_{1\le j\le n} 2^{n+1} - 2^j &amp; = n2^{n+1} - (2^{n+1} -2)\\\\
\end{align}
</div>


<h3>$\sum_{k=1}^n k^3$</h3>

<p>It took me some time to convince myself that the original rewrite was
legitimate; eventually I did it by induction (the book version is much
shorter, and once you see it, much easier). Clearly it works for
$n=1$, so assuming it does for $n-1$, we have</p>

<div markdown="0">
\begin{align}
2\sum_{1\le j\le k\le n} jk &amp; = 2\sum_{1\le j\le k\le n-1} jk + 2\sum_{1\le j\le k=n} jk\\\\
&amp; = \sum_{1\le k\lt n}(k^3+k^2) + 2n\sum_{1\le j\le n} j\\\\
&amp; = \sum_{1\le k\lt n}(k^3+k^2) + n^2(n+1)\\\\
&amp; = \sum_{1\le k\lt n}(k^3+k^2) + n^3+n^2\\\\
\end{align}
</div>


<p>So the rewrite is correct. At this stage, (2.33) pretty much finishes it:</p>

<div markdown="0">
\begin{align}
\sum_{1\le k\le n}(k^3+k^2) &amp; = (\sum_{1\le k\le n}k)+\sum_{1\le k\le n}k^2\\\\
\end{align}
</div>


<p>so $\sum_{1\le k\le n}k^3=\frac{n^2(n+1)^2}{4}$.</p>

<h3>$\frac{x^{\underline m}}{(x-n)^{\underline m}} = \frac{x^{\underline n}}{(x-m)^{\underline n}}$</h3>

<p>This follows directly from
$\frac{a}{b} = \frac{c}{d} \implies ad = bc$, and the use of equation (2.52).</p>

<h3>Rising and Falling Factorial Powers Conversions</h3>

<p>I'll just do the conversion from raising factorial power to falling
factorial power; the other conversion is just the same.</p>

<p>$x^{\overline m} = \frac{1}{(x-1)^{\underline m}}$ follows from (2.51)
and (2.52).</p>

<p>For the other equalities, by induction on $m$, and using (2.52) and
its raising factorial powers equivalent:</p>

<div markdown="0">
\begin{align}
x^{\underline m} &amp; = x^{\underline{m-1}}(x-m+1)\\\\
&amp; = x^{\underline 1}(x-1)^{\underline{m-1}}\\\\
&amp; = x(x-1)^{\underline{m-1}}\\\\
x^{\overline m} &amp; = x^{\overline{m-1}}(x+m-1)\\\\
&amp; = x^{\overline 1}(x+1)^{\overline{m-1}}\\\\
&amp; = x(x+1)^{\overline{m-1}}\\\\
\end{align}
</div>


<h4>Base case $m=0$</h4>

<p>They all follow from definition:</p>

<div markdown="0">
\begin{align}
x^{\overline 0} &amp; = 1\\\\
(-1)^0 (-x)^{\underline 0} &amp; = 1\\\\
(x+0-1)^{\underline 0} &amp; = 1\\\\
\end{align}
</div>


<h4>Other positive $m$</h4>

<p>Assuming the relations hold for all $k, 0\le k\lt m$:</p>

<div markdown="0">
\begin{align}
(-1)^m(-x)^{\underline m} &amp; = -\left((-1)^{m-1}(-x)^{\underline{m-1}}(-x-m+1)\right)\\\\
&amp; = (x^{\overline{m-1}})(x+m-1)\\\\
(x+m-1)^{\underline m} &amp; = (x+m-1)^{\underline{m-1}}x\\\\
&amp; = (x+1+(m-1)-1)^{\underline{m-1}}x\\\\
&amp; = (x+1)^{\overline{m-1}}x\\\\
\end{align}
</div>


<h4>Negative $m$</h4>

<p>Using the recurrence relations derived from (2.52) and its raising
factorial power equivalent:</p>

<div markdown="0">
\begin{align}
x^{\underline m} &amp; = x^{\underline{(m+1)+(-1)}}\\\\
&amp; = x^{\underline{-1}}(x+1)^{\underline{m+1}}\\\\
&amp; = \frac{(x+1)^{\underline{m+1}}}{x+1}\\\\
&amp; = x^{\underline{m+1}}(x-m-1)^{\underline{-1}}\\\\
&amp; = \frac{x^{\underline{m+1}}}{x-m}\\\\
x^{\overline m} &amp; = x^{\overline{(m+1)+(-1)}}\\\\
&amp; = x^{\overline{-1}}(x-1)^{\overline{m+1}}\\\\
&amp; = \frac{(x-1)^{\overline{m+1}}}{x-1}\\\\
&amp; = x^{\overline{m+1}}(x+m+1)^{\overline{-1}}\\\\
&amp; = \frac{x^{\overline{m+1}}}{x+m}\\\\
\end{align}
</div>


<p>Assuming the relations hold for all $k, m\lt k\le 0$:</p>

<div markdown="0">
\begin{align}
(-1)^m(-x)^{\underline m} &amp; = -\frac{(-1)^{m+1}(-x)^{\underline{m+1}}}{-x-m}\\\\
&amp; = \frac{x^{\overline{m+1}}}{x+m}\\\\
(x+m-1)^{\underline m} &amp; = \frac{(x+m)^{\underline{m+1}}}{x+m-1-m}\\\\
&amp; = \frac{(x-1)^{\overline{m+1}}}{x-1}\\\\
\end{align}
</div>


<p>So the main difficulties is to derive two equalities from (2.52) (four
if we count the negative cases as well), and the identification of the
recurrence equation in the induction step (especially for
$(x+m-1)^{\underline{m\pm 1}}$).</p>

<h3>Absolute Convergence of Complex Sums</h3>

<p>I suppose I could say it follows directly from the equivalence of the
metric functions (if my memory of metric space terminology is correct).</p>

<p>More basically, the equivalence of the propositions follows from the
relationships based on the hypotenuse formula:
$\sqrt{(Rz)^2+(Iz)^2}\le |Rz| + |Iz|$, so the absolute convergence of
the real and imaginary parts implies the absolute convergence of the
absolute value. Conversely, $|Rz|,|Iz|\le\sqrt{(Rz)^2+(Iz)^2}$, so the
absolute convergence of the absolute value also implies the absolute
convergence of both the real and imaginary parts.</p>

<h3>Wrapping up</h3>

<p>This time, I found a solution to all the exercises, which is a
progress of some sort. I still have trouble with the repertoire method,
or perhaps not with the method itself but in identifying suitable
generalisations and candidate solutions. This is something that can
only be developed with practice, so I just have to be patient and
keep trying (I hope I'll get there eventually).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concrete Mathematics Chapter 2 Warmups]]></title>
    <link href="http://blog.wakatta.jp/blog/2012/02/28/concrete-mathematics-chapter-2-warmups/"/>
    <updated>2012-02-28T19:18:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2012/02/28/concrete-mathematics-chapter-2-warmups</id>
    <content type="html"><![CDATA[<p>This first batch of exercises is meant to develop familiarity with
the various concepts and notations introduced in this chapter. There
is no complex manipulation, but the trick is to be aware of the often
unmentioned assumptions about the precise meaning of the expressions.</p>

<!--more-->


<h2>Warmups</h2>

<h3>$\sum_{k=4}^0 q_k$</h3>

<p>The meaning of such an expression is not clear, so there is no real
way to fail this exercise.</p>

<p>A first interpretation, maybe the common one, is that the sum is zero
because the range is empty. In other words, the sum is
$\sum_{4\le k\le 0} q_k$.</p>

<p>A second interpretation, perhaps for those used to programming
languages with very flexible loops could argue that the sum is
$q_4 + q_3 + q_2 + q_1 + q_0$.</p>

<p>I toyed briefly with a negative sum, similar to integrals with
reversed bounds, but I did not come up with the nice book solution
of $\sum_{k=m}^n = \sum_{k\le n} - \sum_{k\lt m}$, which is consistent
with and extends the first interpretation.</p>

<h3>Simplify $x([x\gt 0] - [x\lt 0])$</h3>

<p>It is easy to see that the expression has the same value as $|x|$:</p>

<div markdown="0">
\begin{align}
x([x\gt 0] - [x\lt 0]) &amp; = x (1-0)&amp;&amp;\text{when \(x\gt 0\)}\\\\
&amp; = x\\\\
x([x\gt 0] - [x\lt 0]) &amp; = x (0-1)&amp;&amp;\text{when \(x\lt 0\)}\\\\
&amp; = -x\\\\
x([x\gt 0] - [x\lt 0]) &amp; = 0&amp;&amp;\text{when \(x = 0\)}\\\\
\end{align}
</div>


<h3>Writing out sums</h3>

<p>The first one is easy:</p>

<div markdown="0">
\begin{align}
\sum_{0\le k\le 5}a_k = a_0+a_1+a_2+a_3+a_4+a_5\\\\
\end{align}
</div>


<p>The second one is tricky, is more than one way. One problem is that
$k$ is not explicitly defined, and I had assumed it was a natural,
when the authors thought of it as a integer; now the latter is in line
with the book conventions, so I was wrong and had missing terms. The
right answer is:</p>

<div markdown="0">
\begin{align}
\sum_{0\le k^2 \le 5}a_k = a_4 + a_1 + a_0 + a_1 + a_4\\\\
\end{align}
</div>


<h3>Triple Sum</h3>

<p>Here it is important to restrict the bounds as much as possible (but
no more); otherwise there is a risk of introducing spurious terms.</p>

<div markdown="0">
\begin{align}
\sum_{1\le i \lt j \lt k \le n}a_{ijk} &amp; = \sum_{i=1}^2 \sum_{j=i+1}^3 \sum_{k=j+1}^4 a_{ijk}\\\\
&amp; = \left((a_{123} + a_{124}) + a_{134} \right) + a_{234}\\\\
&amp; = \sum_{k=3}^4 \sum_{j=2}^{k-1} \sum_{i=1}^{j-1} a_{ijk}\\\\
&amp; = a_{123}+\left(a_{124} + (a_{134} + a_{234})\right)\\\\
\end{align}
</div>


<p>The terms appear in the same order, but are grouped in sums differently.</p>

<h3>Incorrect derivation</h3>

<p>The problem is the step</p>

<div markdown="0">
\begin{align}
\sum_{j=1}^n \sum_{k=1}^n = \frac{a_j}{a_k}\sum_{k=1}^n \sum_{k=1}^n \frac{a_k}{a_k}\\\\
\end{align}
</div>


<p>$k$ is already bound in the inner sum, so it is invalid to replace $j$
by $k$ in the outer.</p>

<h3>$\sum_k [1\le j\le k\le n]$</h3>

<p>This can be worked explicitly:</p>

<div markdown="0">
\begin{align}
\sum_k [1 \le j \le k \le n] &amp = \sum_k [1 \le j \le n] [j \le k \le n]\\\\
&amp; = \sum_{j\le k \le n} [1 \le j \le n]\\\\
&amp; = [1 \le j \le n] \sum_{j\le k \le n} 1\\\\
&amp; = [1 \le j \le n] (n-j+1)\\\\
\end{align}
</div>


<h3>$\bigtriangledown f(x)$</h3>

<p>The result is not surprising:</p>

<div markdown="0">
\begin{align}
\bigtriangledown x^{\overline{m}} &amp; = x^{\overline{m}} - (x-1)^{\overline{m}}\\\\
&amp; = x(x+1)\cdots(x+m-1) - (x-1)x\cdots(x+m-2)\\\\
&amp; = x(x+1)\cdots(x+m-2)(x+m-1-(x-1))\\\\
&amp; = m x^{\overline{m-1}}\\\\
\end{align}
</div>


<p>So $\bigtriangledown f(x)$ is the difference operator to use with
rising factorials.</p>

<h3>$0^{\overline{m}}$</h3>

<p>Clearly, when $m\lt 0$, $0^{\overline{m}} = 0$; when $m = 0$,
$0^{\overline{m}} = 1$ (to make the expression
$x^{\underline{1+0}}=x^{\underline 1}(x-1)^{\underline 0}$ work when $x=1$); I
had forgotten about $m&lt;0$, which was perhaps the easiest case, as $\frac{1}{m!}$
(it follows directly from the definition of falling factorials with negative
powers).</p>

<h3>Law of exponents for rising factorials</h3>

<p>It is easy to see that $x^{\overline{m+n}} = x^{\overline m}(x+m)^{\overline n}$:</p>

<div markdown="0">
\begin{align}
x^{\overline{m+n}} &amp; = x\cdots(x+m-1)(x+m)\cdots(x+m+n-1)\\\\
&amp; = \left( x\cdots(x+m-1) \right) \left( (x+m)\cdots(x+m+n-1) \right)\\\\
&amp; = x^{\overline m}(x+m)^{\overline n}\\\\
\end{align}
</div>


<p>From there, the value of rising factorials for negative powers follows quickly:</p>

<div markdown="0">
\begin{align}
1 = x^{\overline{-n+n}} &amp; = x^{\overline{-n}} (x-n)^\overline{n}\\\\
x^{\overline{-1}} &amp; = \frac{1}{(x-n)^\overline{n}}\\\\
&amp; = \frac{1}{(x-n)\cdots(x-1)}\\\\
&amp; = \frac{1}{(x-1)^{\underline{n}}}\\\\
\end{align}
</div>


<h3>Symmetric difference of a product</h3>

<p>To start, I quickly looked up the proof of the original derivative
product rule on
<a href="http://en.wikipedia.org/wiki/Product_rule#Proof_of_the_product_rule">Wikipedia</a>;
the geometric nature of the proof was illuminating (I believe I was
taught the so called
<a href="http://en.wikipedia.org/wiki/Product_rule#A_Brief_Proof">Brief Proof</a>
both in high-school and at university).</p>

<p>This geometric proof can be used for both the infinite and the finite
calculus, and its symmetric nature (there are two ways to compute the
area of the big rectangle:
$f(x)g(x)+(f(w)-f(x))g(w) + f(x)(g(w)-g(x))$ and
$f(x)g(x)+f(w)(g(w)-g(x)) + (f(w)-f(x))g(x)$) can be used in the
finite case. The symmetry (and equality) is restored
because in the infinite calculus, $\lim_{w\rightarrow x}f(w) = f(x)$
and $\lim_{w\rightarrow x}g(w) = g(x)$, a restoration that is not
possible in the finite calculus.</p>

<p>However, the equivalent finite calculus formulas,
$\bigtriangleup(uv) = u\bigtriangleup v + Ev\bigtriangleup u$ and
$\bigtriangleup(uv) = Eu\bigtriangleup v + v\bigtriangleup u$, have
together the symmetry they lack on their own.</p>

<h3>Wrapping up</h3>

<p>OK, that was not entirely bad (two small mistakes, both about negative
numbers blindness). Next step, the basic exercises.</p>
]]></content>
  </entry>
  
</feed>
