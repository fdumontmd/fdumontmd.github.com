<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wakatta!]]></title>
  <link href="http://blog.wakatta.jp/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.wakatta.jp/"/>
  <updated>2011-12-23T16:41:30+09:00</updated>
  <id>http://blog.wakatta.jp/</id>
  <author>
    <name><![CDATA[Frédéric Dumont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks mongoDB Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/23/seven-databases-in-seven-weeks-mongodb-day-1/"/>
    <updated>2011-12-23T08:19:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/23/seven-databases-in-seven-weeks-mongodb-day-1</id>
    <content type="html"><![CDATA[<p>It has been ... a little over a week since I closed with HBase so it
is time to move to the next database in the program:
<a href="http://www.mongodb.org/">mongoDB</a>. It is a so-called
<a href="http://en.wikipedia.org/wiki/Document-oriented_database">document oriented database</a>,
relying on Javascript and JSON like Riak but, mongoDB, unlike Riak,
has a built-in support for querying, and can also perform partial
updates.</p>

<p>Fittingly, this first day is about CRUD and queries.</p>

<!--more-->


<h3>CRUD in mongoDB</h3>

<p>Unlike Riak, mongoDB makes a difference between Create and Update
operations. It is not possible to insert documents with the same id
twice in the same collection:</p>

<p>```</p>

<blockquote><p>db.test.insert( { <em>id: 'one', value: 1 } )
db.test.find()
{ "</em>id" : "one", "value" : 1 }
db.test.insert( { <em>id: 'one', value: 2 } )
E11000 duplicate key error index: book.test.$</em>id_  dup key: { : "one" }
```</p></blockquote>

<p>Like in SQL, the Read, Update and Delete operations all operate on the
result of a search. And because the criteria query for a search is
just a JSON document, it is possible to reuse it in different
contexts. Combined with JavaScript as a query/shell language, this
makes a very flexible combination.</p>

<h3>Reaching into objects</h3>

<p>As documents are naturally nested, it is important to know how to
refer to nested attributes and how to use them in queries.</p>

<p>Using the JSON nesting notation is possible but does not have the
expected semantic (unless you change your expectations):</p>

<p>```</p>

<blockquote><p>db.towns.find( { mayor: { name: 'Sam Adams' } }, {name: 1} )</p>

<p>```</p></blockquote>

<p>The query above returns nothing, despite the fact that there is a town
whose mayor is named 'Sam Adams'. The problem here is that this
specific notation will match documents in the collection whose <code>mayor</code>
attribute has the exact value <code>{ name: 'Sam Adams' }</code>, rather than
merely those whose <code>mayor</code> attribute has a sub-attribute <code>name</code> with
the <code>Sam Adams</code> value (and possible other sub-attributes, a
possibility that the first query denies).</p>

<p>The correct form for the query is
```</p>

<blockquote><p>db.towns.find( { 'mayor.name' : 'Sam Adams' }, {name: 1})
{ "_id" : ObjectId("4eed55b0ef971f5317e68e91"), "name" : "Portland" }</p>

<p>```</p></blockquote>

<p><a href="http://www.mongodb.org/display/DOCS/Dot+Notation+%28Reaching+into+Objects%29">This documentation</a>
from the official website was very useful to me in clarifying this aspect.</p>

<h3>The <a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-Metaoperator%3A%7B%7B%24not%7D%7D"><code>$not</code></a> operator</h3>

<p>I first got curious about this operator because the example from the
book did not work. It generated an error in mongoDB 2.0.2 (the latest
at the time of writing).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;exports.foods&#39;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$not</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;burgers&#39;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="nx">_id</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">name</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The error is</p>

<p><code>
error: { "$err" : "invalid use of $not", "code" : 13034 }
</code></p>

<p>From the
<a href="https://github.com/mongodb/mongo/blob/master/db/queryutil.cpp">source code</a>,
it seems $not cannot be applied to a (implicit) equal operator. So the
book code should be using <code>$ne</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s1">&#39;exports.foods.name&#39;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$ne</span><span class="o">:</span> <span class="s1">&#39;burgers&#39;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It does not help that the online shell (accessible from the 'Try it
out' link on <a href="http://www.mongodb.org/">http://www.mongodb.org/</a>) does
not return an error for the book query. It does not return anything
at all, so it is still not correct.</p>

<p>Still, even with 2.0.2, this query:
```</p>

<blockquote><p>db.countries.find( {$not: { name: 'United States' } } )</p>

<p>```</p></blockquote>

<p>is accepted but does not return every country but US. Yet again it
returns nothing.</p>

<p>As far as I can tell, this query is actually incorrect (the <code>$not</code>
operator should be applied to an operator, not a match), so its value
is irrelevant, but it is worrying that the parser allows this code.</p>

<p>The general problem is that the semantic of <code>$not</code> is not exactly
the same as the similar operator from logic. So basic logic reasoning
cannot help.</p>

<p>I suppose this is just something to keep in mind: be wary of using
<code>$not</code>.</p>

<h2>Exercises</h2>

<h3>The online mongoDB documentation</h3>

<p>is <a href="http://www.mongodb.org/display/DOCS/Manual">here</a>.</p>

<h3>Query using regular expressions</h3>

<p>As explained
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-RegularExpressions">here</a>,
mongoDB supports two notations: a direct JavaScript regexp object
using <code>/.../</code> and slightly more verbose but more flexible <code>$regexp</code>
operator. The syntax for the regular expression in both cases is the
same.</p>

<h3>mongoDB drivers</h3>

<p>The <a href="http://www.mongodb.org/display/DOCS/Drivers">list of drivers</a>.</p>

<h3>Print a JSON document containing <code>{ "hello" : "world" }</code></h3>

<p>The <code>tojson</code> function can display (and pretty-print) JSON documents:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tojson</span><span class="p">({</span> <span class="s2">&quot;hello&quot;</span><span class="o">:</span> <span class="s2">&quot;world&quot;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Find a town by case insensitive regular expression search</h3>

<p>This would be the <code>i</code> option to the regular expression:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="sr">/new/i</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Find all cities whose names contain an ‘e’, and are famous for food or beer.</h3>

<p>A good use for the
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24in"><code>$in</code></a>
operator:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="sr">/e/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">famous_for</span> <span class="o">:</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">$in</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">,</span> <span class="s1">&#39;beer&#39;</span><span class="p">]</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>or the equivalent but verbose:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">towns</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="sr">/e/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">$or</span><span class="o">:</span> <span class="p">[{</span><span class="nx">famous_for</span> <span class="o">:</span> <span class="s1">&#39;food&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">famous_for</span><span class="o">:</span> <span class="s1">&#39;beer&#39;</span><span class="p">}</span> <span class="p">]</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Find all countries that do not export tasty bacon</h3>

<p>To find countries that export tasty bacon, one has to use
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24elemMatch"><code>$elemMatch</code></a>. It
should not come as a surprise that it is used here as well, but with
the dreaded <code>$not</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span><span class="s1">&#39;exports.foods&#39;</span><span class="o">:</span>
</span><span class='line'> <span class="p">{</span> <span class="nx">$not</span><span class="o">:</span>
</span><span class='line'>   <span class="p">{</span><span class="nx">$elemMatch</span><span class="o">:</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bacon&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">tasty</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>produces</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;&lt;em&gt;id&quot;</span> <span class="o">:</span> <span class="s2">&quot;ca&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Canada&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;&lt;/em&gt;id&quot;</span> <span class="o">:</span> <span class="s2">&quot;mx&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Mexico&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(I had not deleted Canada from the database).</p>

<p>The seemingly equivalent</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">countries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">$not</span><span class="o">:</span>
</span><span class='line'>  <span class="p">{</span><span class="s1">&#39;exports.foods&#39;</span><span class="o">:</span>
</span><span class='line'>   <span class="p">{</span> <span class="nx">$elemMatch</span><span class="o">:</span>
</span><span class='line'>     <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bacon&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">tasty</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>will not work. It does not return anything. See above my findings on <code>$not</code>.</p>

<h3>Create a database <code>blogger</code> with a collection of <code>articles</code></h3>

<h4>A new database:</h4>

<p>Creating a new database is extremely easy: just name it when you
launch the <code>mongo</code> shell command:</p>

<p><code>
mongo blogger
</code></p>

<h4>A new collection:</h4>

<p>Like for the database, a collection is created just by inserting
something in it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">articles</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Frederic&#39;</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;my@email.org&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">creation</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">test</span><span class="o">:</span> <span class="s1">&#39;Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...&#39;</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Update the article with an array of comments</h4>

<p>With the operator
<a href="http://www.mongodb.org/display/DOCS/Updating#Updating-%24set"><code>$set</code></a>,
I can specify just what I need to update, not the whole document as in
Riak:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">articles</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span><span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;4ef3c78c7d67f191b06653e4&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="nx">$set</span><span class="o">:</span> <span class="p">{</span> <span class="nx">comments</span><span class="o">:</span>
</span><span class='line'>         <span class="p">[</span> <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Alice&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Me too&#39;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Me three&#39;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Carol&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;I know all your secret&#39;</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>       <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I can check the inserted value with <code>db.articles.findOne()</code> (without
arguments it returns the first element in the collection, and pretty
prints it):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;4ef3c78c7d67f191b06653e4&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s2">&quot;comments&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Alice&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;Me too&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;Me three&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;author&quot;</span> <span class="o">:</span> <span class="s2">&quot;Carol&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="s2">&quot;I know all your secrets&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;creation&quot;</span> <span class="o">:</span> <span class="nx">ISODate</span><span class="p">(</span><span class="s2">&quot;2011-12-23T00:13:00.636Z&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s2">&quot;email&quot;</span> <span class="o">:</span> <span class="s2">&quot;my@email.org&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Frederic&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;test&quot;</span> <span class="o">:</span> <span class="s2">&quot;Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Tomorrow will cover indexing, and more advanced uses of the data (such
as MapReduce).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks Riak on EC2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2/"/>
    <updated>2011-12-17T14:36:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/17/seven-databases-in-seven-weeks-riak-on-ec2</id>
    <content type="html"><![CDATA[<p>The third day with Riak had proposed to deploy Riak on a
<a href="http://aws.amazon.com/ec2/">EC2</a> cluster as an exercise. I could not
do it then due to poor network connectivity and lack of time (I was
traveling), but I did it since and here I explain how.</p>

<!--more-->


<p>EC2 is a service from Amazon to commission a number of virtual
computers with specific performance characteristics, and with use
charged by the hour (the rate depending of the performance).</p>

<p>The whole process is fairly simple and flexible. I got my computers up
and running in minutes. Setting up Riak was a bit more involved (I
should probably had tried on my local network first), but eventually I
was able to load the data and run the queries I wanted.</p>

<p>In outline, here's the process</p>

<ul>
<li>figure out the security requirements</li>
<li>think about the cluster organisation</li>
<li>create a few instances of virtual computers</li>
<li>create the security configuration</li>
<li>connect to each machine and set it up</li>
<li>open an SSL tunnel</li>
<li>...</li>
<li>Profit!</li>
</ul>


<p>And now the details.</p>

<h3>Security requirements</h3>

<p>There will be a few machines, and I need each Riak instance to speak
to each other. This means I need to keep all the required ports open.</p>

<p>As each instance is on a different machine (presumably, I could have
several instances on each machine but I want to keep things simple), I
can use the same ports for each instance. I will just have to give
them different names.</p>

<p>Basho has a helpful
<a href="http://wiki.basho.com/Network-Security-and-Firewall-Configurations.html">page</a>
on this topic. It lists the defaults ports (all of them TCP):</p>

<ul>
<li>epmd's listener: 4369</li>
<li>handoff_port listener: 8099</li>
<li>web_port: 8098</li>
<li>pb_port: 8087</li>
<li>plus a range than can be configured. As I have just a small
network, I restrict this range to 6000-6999.</li>
</ul>


<p>These are the ports I will open in my configuration settings.</p>

<h3>Cluster organisation</h3>

<p>I want a simple setup:</p>

<ul>
<li>3 machines</li>
<li>first one is the ring leader</li>
<li>first one is also my interface for client connections</li>
</ul>


<p>So I need to set 3 machines up, make the last two join the first, and
open an SSL tunnel from my local machine to the ring leader.</p>

<h3>EC2 instances</h3>

<p>First I had to sign up to <a href="http://aws.amazon.com/">AWS</a>.</p>

<p>Once this is done, I can use the console, select the EC2 tab, and
click on "Launch Instance".</p>

<p>I chose "Launch Classic Wizard" to have as much flexibility as possible:</p>

<p><img src="https://lh6.googleusercontent.com/-MKXddn82uO8/Tu23KOzMhGI/AAAAAAAAB6Y/XpOren_ANVk/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.26.png"></p>

<p>Then I select a basic 64bit Amazon Linux:</p>

<p><img src="https://lh3.googleusercontent.com/--F8ajmA-58c/Tu23KHI9YNI/AAAAAAAAB6U/1fCrHF_tqg0/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.34.png"></p>

<p>I request 3 instances of type Micro (I'm just playing; I don't really care about performance):</p>

<p><img src="https://lh4.googleusercontent.com/-w31FLsR0iC8/Tu2222Q_ZtI/AAAAAAAAB58/E-E86lTf7xg/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.36.44.png"></p>

<p>I just click through the next two screens (I do not have any specific need for such tuning):</p>

<p><img src="https://lh5.googleusercontent.com/-kRBmxXnSwRc/Tu222wmgj4I/AAAAAAAAB50/U1Rwuqv6R9o/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.05.png">
<img src="https://lh3.googleusercontent.com/-WiqCpx2PT70/Tu222Iz5nTI/AAAAAAAAB5s/k1ZuuVs1yrE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.08.png"></p>

<p>For the key pair, I just give a name, then download the file. I will use it later to connect to my new machines:</p>

<p><img src="https://lh4.googleusercontent.com/-JEnCFjVIM54/Tu222D8yOGI/AAAAAAAAB5o/qdAleXN-iDU/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.37.28.png"></p>

<p>For the security, I first name my group, then I can use this name as the source parameter for the rules. All the rules are Custom TCP ones; I just need to give the ports (as determined above):</p>

<p><img src="https://lh3.googleusercontent.com/-dSxG8pYQLEc/Tu222KSxpgI/AAAAAAAAB5w/AtiqjF-QTts/s640/Screen%252520Shot%2525202011-12-18%252520at%25252015.41.18.png"></p>

<p>And then I can finally start my new machines.</p>

<p>On my first attempts, two of the machines did not start; I just created a couple of new machines of the same kind (64bit Amazon Linux Micro), and put them in the same security group.</p>

<p>Here are the complete security rules (I had to add some after the initial setup):</p>

<p><img src="https://lh6.googleusercontent.com/-tSUcf1TbrLQ/Tu23KB_o3wI/AAAAAAAAB6Q/2OopRB6HFeE/s640/Screen%252520Shot%2525202011-12-18%252520at%25252017.05.42.png"></p>

<p>With this, I have a small cluster of machines. Time to connect and put
them to good use.</p>

<h3>Configuring each machine</h3>

<p>From the EC2 Dashboard, I can access my instances, and get the address for each.</p>

<p>Using the private key downloaded earlier, I can open an SSH connection
to each machine. Note that the user is by default called <code>ec2-user</code>:</p>

<p><code>
ssh -i riak-private.pem ec2-user@&lt;MACHINE_NAME&gt;
</code></p>

<p>On each, I first need to install riak. I download it directly from
Basho <a href="http://downloads.basho.com/riak/CURRENT/">website</a>.</p>

<p>Each machine has some basic tools, but no Erlang compiler. To avoid
any complications, I chose and retrieved a binary distribution:</p>

<p><code>
wget http://downloads.basho.com/riak/CURRENT/riak-1.0.2-1.el6.x86_64.rpm
</code></p>

<p>Then I  installed the  downloaded package  (<code>ec2-user</code> can  use <code>sudo</code>
without having to provide a password):</p>

<p><code>
sudo rpm -Uvh riak-1.0.2-1.el6.x86_64.rpm
</code></p>

<p>There are a few error messages (or perhaps warnings), but the package
is installed and running.</p>

<p>Riak is installed but not started yet. It is important to get the
configuration right before starting it.</p>

<h4>Common configuration</h4>

<p>For each server, I give it a name that includes the local network IP
address (not the loopback IP address <code>127.0.0.1</code>). It is important,
otherwise the machines cannot talk to each others.</p>

<p>I can get it by running <code>ifconfig</code>. I look for the ethernet setup and especially the <code>inet</code> value:
this is the IP address in Amazon private network. I need to remember
the IP address for what I will call the first machine, so I copy it
somewhere (and call it here <code>&lt;IP_ADDRESS_1&gt;</code>)</p>

<p>Using <code>sudo -e /etc/riak/vm.args</code>, I can edit the name of each node. I set it to <code>riak_ec2_1@&lt;IP_ADDRESS&gt;</code>, (or <code>riak_ec2_2</code>, <code>riak_ec2_3</code>, ...).</p>

<p>Note: the editor will be <code>vi</code>.</p>

<p>I also need to change the <code>app.config</code> file:</p>

<p><code>
sudo -e /etc/riak/app.config`
</code></p>

<p>I first need to insert a range restriction configuration. I insert the
following block near the top:</p>

<p>```
{ kernel, [</p>

<pre><code>        {inet_dist_listen_min, 6000},
        {inet_dist_listen_max, 6999}
        ]},
</code></pre>

<p>```</p>

<p>For the first machine (the one named <code>riak_ec2_1</code>), I also need to
extend the <code>http</code> interface list. By default it only listen to the
loopback interface (<code>127.0.0.1</code>), but I also need it to listen to the
ethernet interface (see above). Otherwise, I will not be able to set
the SSL tunnel up.</p>

<p>So I replace the lines that read
<code>
{http, [ {"127.0.0.1", 8098 } ]},
</code>
by something like
<code>
{http, [ {"127.0.0.1", 8098 }, {"&lt;IP_ADDRESS_1&gt;", 8098} ]},
</code></p>

<p>Once this is done, I started the instances:</p>

<p><code>
sudo riak start
</code></p>

<p>I can test each instance with:
<code>
curl http://localhost:8098/stats | python -mjson.tool
</code></p>

<p>Finally, I can link all instances together by executing on the second
and third machine:</p>

<p><code>
sudo riak-admin join riak_ec2_1@&lt;IP_ADDRESS_1&gt;
</code></p>

<p>Testing again the status should show three instances in the same ring.</p>

<p>In case of error, uninstall riak, delete the <code>/var/lib/riak</code> directory,
and start again (as I did).</p>

<h3>Setting up the SSL tunnel</h3>

<p>Nothing simpler. Using the first machine name (the one I configured
for connection from the ethernet interface):</p>

<p><code>
ssh -i riak-private.pem -f ec2-user@&lt;MACHINE_NAME&gt; \
-L 8098:ec2-user@&lt;MACHINE_NAME&gt;:8098 -N
</code></p>

<p>And now I can run from my local machine</p>

<p><code>
curl http://localhost:8098/stats | python -mjson.tool
</code></p>

<p>and get the status of the Riak server as if it was local.</p>

<h3>Loading data and running queries</h3>

<p>The book suggest to use the example data from Basho's
<a href="http://wiki.basho.com/Loading-Data-and-Running-MapReduce-Queries.html">website</a>,
which is what I did. I downloaded the
<a href="http://wiki.basho.com/attachments/goog.csv"><code>goog.csv</code></a> data file and
the <a href="http://wiki.basho.com/attachments/load_data"><code>load_data</code></a>
script. I changed the port number in the latter to use 8098 instead of
8091, then I just ran it: the data is send through the SSL tunnel and
loaded in my EC2 cluster (but it is very slow).</p>

<p>Once this was done, I checked the various queries proposed on the page, and also implemented the MapReduce Challenge:</p>

<h3>MapReduce Challenge</h3>

<p>The MapReduce Challenge is to compute the days with the highest volume
of dollar traded. This first step is to compute this value, as it is
not part of the initial data.</p>

<p>I use a definition found
<a href="http://wiki.fool.com/Daily_dollar_volume">here</a>, which makes
intuitive sense: <code>Volume*(High - Low)/2</code></p>

<h4>Dollar Traded Volume by Month</h4>

<p>I need to keep both the date and the amount, so my map function will
keep both items in a data structured indexed by month:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dollar Traded by Month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">month</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pair</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">pair</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then when reducing, I can compare the traded amount and keep the best:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Highest by month  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">month</span> <span class="k">in</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">][</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">?</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="nx">acc</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span><span class="p">[</span><span class="nx">month</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">})</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To test the whole, I can use the following command, then copy and
paste the query, and execute with <code>Ctrl-D</code>. The command below is run on
my local machine, but thanks to the SSL tunnel, it will execute on the
cluster:</p>

<p><code>
curl -X POST http://127.0.0.1:8098/mapred \
-H "Content-Type: application/json" -d @-
</code></p>

<p>And the query:
```
{"inputs":"goog",
 "query":[{"map":{"language":"javascript",</p>

<pre><code>              "source":"function(value, keyData, arg) {
</code></pre>

<p>  var data = Riak.mapValuesJson(value)[0];
  var month = value.key.split('-').slice(0,2).join('-');
  var pair = {};
  pair['date'] = value.key;
  pair['traded'] = data.Volume * (data.High - data.Low) / 2;
  var obj = {};
  obj[month] = pair;
  return [obj];
}"}},</p>

<pre><code>     {"reduce":{"language":"javascript",
                "source":"function(values, arg) {
</code></pre>

<p>  return [ values.reduce(function(acc, item) {</p>

<pre><code>for(var month in item) {
  if(acc[month]) {
    acc[month] = acc[month]['traded'] &lt; item[month]['traded'] ?
</code></pre>

<p>  item[month] : acc[month];</p>

<pre><code>  } else acc[month] = item[month];
}
return acc;
</code></pre>

<p>  })
  ];
}",</p>

<pre><code>     "keep":true}}]}
</code></pre>

<p>```</p>

<h4>Day by Highest Dollar Traded</h4>

<p>For this one I use a similar approach: I create pairs with the date
and the amount of dollar traded, but this pair is what I return
directly (instead of returning it indexed by month).</p>

<p>Indexing by date would not work as in the reduce step I would have to
keep the result in a simple (i.e. not indexed) variable, and therefore
would forget the date. By keeping both data items (the date and the
volume traded in dollar) in the same object, I can reduce a list of
such objects to a single item and still retain all the relevant information.</p>

<p>The mapping function creates just a pair object from the data:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dollar Traded by Day  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">keyData</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">value</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Volume</span> <span class="o">*</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">High</span> <span class="o">-</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The reducing function retains the best date by volume traded in dollar
for each batch. It is simpler than the previous one as the values are
simple (i.e. not indexed):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Highest ever  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">arg</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>         <span class="k">if</span><span class="p">(</span><span class="nx">acc</span><span class="p">)</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">item</span><span class="p">[</span><span class="s1">&#39;traded&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nx">item</span> <span class="o">:</span> <span class="nx">acc</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>         <span class="k">else</span> <span class="p">{</span> <span class="nx">acc</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>         <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>     <span class="p">];</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the query:
```
{"inputs":"goog",
 "query":[{"map":{"language":"javascript",</p>

<pre><code>              "source":"function(value, keyData, arg) {
</code></pre>

<p>  var data = Riak.mapValuesJson(value)[0];
  var obj = {};
  obj['date'] = value.key;
  obj['traded'] = data.Volume * (data.High - data.Low) / 2;
  return [obj];
}"}},</p>

<pre><code>     {"reduce":{"language":"javascript",
                "source":"function(values, arg){
</code></pre>

<p>  return [ values.reduce(function(acc, item){</p>

<pre><code>             if(acc) { acc = (acc['traded'] &lt; item['traded']) ? item : acc; }
             else { acc = item[date]; }
         return acc;
        })
     ];
</code></pre>

<p>}",</p>

<pre><code>     "keep":true}}]}
</code></pre>

<p>```</p>

<p>And that's it for today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 3]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3/"/>
    <updated>2011-12-15T16:27:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/15/seven-databases-in-seven-weeks-hbase-day-3</id>
    <content type="html"><![CDATA[<p>The third day with HBase is a bit short, but opens to a world of
possibilities: the Cloud.</p>

<p>This is where HBase belongs. No personal (or even that many corporate)
networks are large enough to let it perform correctly.</p>

<p>HBase depends on a large number of servers running in parallel for
its performance, and there are few other places to find that many
machines.</p>

<!--more-->


<h3>Thrift</h3>

<p>The first topic for today is <a href="http://thrift.apache.org/">Thrift</a>, a
generic remote interface to program servers (and a gift from the new
Evil Empire, Facebook).</p>

<p>It is a tool to document a binary API, and generate client stubs to
use this API. HBase supports such an API, making it possible to write
clients in a variety of languages.</p>

<p>Using Thrift on your own project (on the server side, if you have any)
would make it possible to use different languages on the client side,
depending on whichever better fits the needs (scripting languages for
glue scripts, ...)</p>

<p>When I tried the example from the book, I had to change the connection
address of the <code>thrift_example.rb</code> code from <code>localhost</code> to
<code>127.0.0.1</code>, otherwise Thrift would refuse the connection.</p>

<h3>Whirr</h3>

<p><a href="http://whirr.apache.org/">Whirr</a> is far more exciting. It is a tool
to deploy and configure some specific servers on (among others)
<a href="http://aws.amazon.com/ec2/">Amazon EC2</a>.</p>

<p>The first, and perhaps the most complex step is to open an account on
<a href="http://aws.amazon.com/">AWS</a>. It will require a phone, a credit card,
a computer, and some time. And perhaps a couple of emails if the
account opening remains stuck in "Pending verification" status.</p>

<p>Once this is done, Whirr can be used to create instances (be careful
with that: Amazon will charge at least one hour for each server even
if you take it down after a couple of minutes), download and install
specific servers (mostly from the <a href="http://hadoop.apache.org/">Hadoop</a>
family), configure them, all of this from the comfort of the command
line (which is my case is cosily close to a cup of warm coco, so it is
very comfortable indeed).</p>

<p>All you have to do is retrieve you security token from your AWS
account page, create a public/private key pair, then write a recipe
file (which describes what kind of machines and how many you need,
what to install on each, ...), and Whirr takes care of the rest. The
first two steps only have to be done once; you can deploy as many
recipes as you need.</p>

<p>The setup process takes a few minutes, then you can connect with SSH
to one of your remote servers.</p>

<p>Whirr also creates a security configuration for each recipe, opening
only the ports that are required by the servers in the recipe,
limiting source of the connections to specific servers. You can also
edit the security rules directly in the recipe if you want.</p>

<p>The ease with which this can be done is really surprising. It reminds
me of how easy it was to deploy a Rails application on
<a href="http://www.heroku.com/">Heroku</a>.</p>

<p>Now, I do not have any foreseen uses for such computing capacity, but
I can see how it could be helpful for any organisation to be able to
run occasional large data processing jobs without having to maintain a
permanent data center.</p>

<h2>Exercises</h2>

<p>There is only one exercise today: to open a Thrift connection to an
AWS deployed HBase.</p>

<p>First is to get Thrift to run on the deployed machines. The book
suggest to connect by SSH and start the instance there, but there is a
better way if you know you will need Thrift: ask Whirr to deploy it
automatically.</p>

<p>In the file below, I've added the server <code>hbase-thriftserver</code> to the
master server:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hbase.properties (hbase.properties)</span> <a href='/downloads/code/7d7w/hbase/hbase.properties'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Licensed to the Apache Software Foundation (ASF) under one or more</span>
</span><span class='line'><span class="c"># contributor license agreements.  See the NOTICE file distributed with</span>
</span><span class='line'><span class="c"># this work for additional information regarding copyright ownership.</span>
</span><span class='line'><span class="c"># The ASF licenses this file to You under the Apache License, Version 2.0</span>
</span><span class='line'><span class="c"># (the &quot;License&quot;); you may not use this file except in compliance with</span>
</span><span class='line'><span class="c"># the License.  You may obtain a copy of the License at</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#     http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="c"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="c"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="c"># See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="c"># limitations under the License.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># HBase 0.90.x on Cloudera Hadoop Cluster on AWS EC2</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'>
</span><span class='line'><span class="c"># Read the Configuration Guide for more info:</span>
</span><span class='line'><span class="c"># http://incubator.apache.org/whirr/configuration-guide.html</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the cluster name here</span>
</span><span class='line'><span class="na">whirr.cluster-name</span><span class="o">=</span><span class="s">hbase-0.90</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change the number of machines in the cluster here</span>
</span><span class='line'><span class="na">whirr.instance-templates</span><span class="o">=</span><span class="s">1 zookeeper+hadoop-namenode+hadoop-jobtracker+hbase-master+hbase-thriftserver,1 hadoop-datanode+hadoop-tasktracker+hbase-regionserver</span>
</span><span class='line'>
</span><span class='line'><span class="c"># replication level should not be higher than number of data nodes</span>
</span><span class='line'><span class="na">hbase-site.dfs.replication</span><span class="o">=</span><span class="s">2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For EC2 set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables.</span>
</span><span class='line'><span class="na">whirr.provider</span><span class="o">=</span><span class="s">aws-ec2</span>
</span><span class='line'><span class="na">whirr.identity</span><span class="o">=</span><span class="s">${env:AWS_ACCESS_KEY_ID}</span>
</span><span class='line'><span class="na">whirr.credential</span><span class="o">=</span><span class="s">${env:AWS_SECRET_ACCESS_KEY}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The size of the instance to use. See http://aws.amazon.com/ec2/instance-types/</span>
</span><span class='line'><span class="na">whirr.hardware-id</span><span class="o">=</span><span class="s">c1.xlarge</span>
</span><span class='line'><span class="c"># Ubuntu 10.04 LTS Lucid. See http://alestic.com/</span>
</span><span class='line'><span class="na">whirr.image-id</span><span class="o">=</span><span class="s">us-east-1/ami-da0cf8b3</span>
</span><span class='line'><span class="c"># If you choose a different location, make sure whirr.image-id is updated too</span>
</span><span class='line'><span class="na">whirr.location-id</span><span class="o">=</span><span class="s">us-east-1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># By default use the user system SSH keys. Override them here.</span>
</span><span class='line'><span class="na">whirr.private-key-file</span><span class="o">=</span><span class="s">keys/id_rsa</span>
</span><span class='line'><span class="na">whirr.public-key-file</span><span class="o">=</span><span class="s">keys/id_rsa.pub</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The HBase version to use.</span>
</span><span class='line'><span class="na">whirr.hbase.tarball.url</span><span class="o">=</span><span class="s">http://apache.cu.be/hbase/hbase-0.90.4/hbase-0.90.4.tar.gz</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The Hadoop version to use. See http://hbase.apache.org/book/hadoop.html</span>
</span><span class='line'><span class="c"># The default Hadoop version used by Whirr does not fulfill the HBase 0.90.x requirements.</span>
</span><span class='line'><span class="c"># Whirr will replace the hadoop-core jar in HBase with the one from the actually installed Hadoop.</span>
</span><span class='line'><span class="c"># This example uses Cloudera&#39;s CDH3.</span>
</span><span class='line'><span class="na">whirr.hadoop.tarball.url</span><span class="o">=</span><span class="s">http://archive.cloudera.com/cdh/3/hadoop-0.20.2-cdh3u2.tar.gz</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As for the connection to the Thrift server, the method described in
the book is to open the port 9090 to the world, and to hope to be the
only one to know about this port: a likely possibility, but who would
want to take such a chance in production?</p>

<p>Fortunately, there is a better solution: SSH Tunneling. It is very
easy to set up and requires nothing but what we already have.</p>

<p>The general idea is to open a ssh tunnel between a local port and a
remote port: whatever you puts in the local port is taken by ssh,
transported over the SSH connection; once it reaches the remote
machine, the remote ssh instance will forward the data to the remote
port, as if it was a client running on the remote machine.</p>

<p>The transport between the two machines only requires the remote one to
have the SSH port open (which is both the case, and secure). You have
to use authentication and encryption for the transport.</p>

<p>And what is required to implement this SSH tunneling:</p>

<p><code>
ssh -i keys/id_rsa -f ${USER}@&lt;SERVER_NAME&gt; -L 9090:&lt;SERVER_NAME&gt;:9090 -N
</code></p>

<p>(from the directory where you created the <code>keys</code> directory)</p>

<p>Here I map the local port 9090 to the remote machine's port 9090. That
way I don't even have to change my <code>thrift_example.rb</code> code. But of
course, if I had to connect to different machines, I would use
different ports.</p>

<p>The Thrift server was automatically started by the recipe.</p>

<p>With this in place, and after creating some tables in the remote
HBase:</p>

<p>```
$ ruby thrift_example.rb
links
  from:</p>

<pre><code>maxVersions: 1
compression: NONE
bloomFilterType: ROWCOL
</code></pre>

<p>  to:</p>

<pre><code>maxVersions: 1
compression: NONE
bloomFilterType: ROWCOL
</code></pre>

<p>wiki
  revision:</p>

<pre><code>maxVersions: 2147483647
compression: NONE
bloomFilterType: NONE
</code></pre>

<p>  text:</p>

<pre><code>maxVersions: 2147483647
compression: GZ
bloomFilterType: ROW
</code></pre>

<p>```</p>

<p>(be careful not to use LZO as a compression algorithm in the remote
HBase, as I did when I tried the first time: the default HBase has no
LZO support and will fail when you try to enable a table with LZO compression).</p>

<p>To take a tunnel down, you'll have to find and kill it (as far as I
can tell). If you have no other ssh connections, <code>killall ssh</code> is a
simple solution. In any case, the connection will be cut when the
remote servers are destroyed.</p>

<h2>Wrapping up HBase</h2>

<p>I like what I see with HBase: the project has strong backers among its
users (Yahoo, Facebook, ...); it belongs to a large family of tools
that help to design Big Data solutions, and integrates well with some
Cloud networks</p>

<p>The model is easy to understand (the book mentions the possibility of
eventual consistency due to regional replication, but this remains a
simpler model than Riak's), and close to the original MapReduce
concept.</p>

<p>This is really one tool I will have a closer look to in the near
future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 2]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/12/seven-databases-in-seven-weeks-hbase-day-2/"/>
    <updated>2011-12-12T23:46:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/12/seven-databases-in-seven-weeks-hbase-day-2</id>
    <content type="html"><![CDATA[<p>And on the second day with HBase, we load it with <a href="http://www.wikipedia.org/">Wikipedia</a>. Actually I had to do it twice to get it to work: on my first attempt the process kind of froze at about 200,000 articles.</p>

<!--more-->


<p>After some digging (and finding this very helpful <a href="http://ofps.oreilly.com/titles/9781449396107/installation.html">page</a> from <a href="http://ofps.oreilly.com/titles/9781449396107/">HBase: The Definitive Guide</a>), I tried again with a different setting for the limit on open files:</p>

<p><code>
ulimit -n 10240
</code></p>

<p>With that, HBase was able to keep churning along (the limit is per session, so HBase had to be restarted). I started the import process in the morning, and when I finally stopped it it had passed 10,000,000 pages (not all of them actual articles). Parsing links was equally successful.</p>

<h3>Consistency</h3>

<p>Unlike Riak, which offers <a href="http://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>, HBase ensures row level consistency. This means that each row has only one value, and a write to the row is either entirely successful, or not performed at all (so an update will never be applied partially).</p>

<p>This idea that each row is atomic is a simple yet effective mental model; I feel I should be able to use this model to design reliable solutions on HBase. To make them fast as well is a different matter entirely: I'd first need more experience with the concept of column families and their various options.</p>

<h3>Logging</h3>

<p>HBase uses <a href="http://en.wikipedia.org/wiki/Write-ahead_logging">Write-Ahead Logging</a>, exactly like PostgreSQL and many other databases (Riak too) and file systems. This is a low level mechanism designed to help with consistency: first a description of the updates is written into a log file (and flushed); then the update is performed. If there's a problem during the update, it is always possible to compare the write-ahead log and execute again whatever updates are missing or partial.</p>

<h3>Regions and servers</h3>

<p>I must say I am still a bit unclear on this topic: I have a standalone instance of HBase, so naturally there is no distribution involved.</p>

<p>HBase first keep the data sorted by key, and distributes contiguous chunks of data to each region (growing the number of regions if needed).</p>

<h3>HBase and names</h3>

<p>In a typical relational database, just as in a normal programming language, the name you give to things (tables, columns or variables) is a programmer oriented feature that has no impact on performance.</p>

<p>The idea that you should use short variable names for 'performance reason' is either a joke or a beginner's mistake.</p>

<p>Except in HBase, where the length of names can impact storage performance. See the <a href="http://hbase.apache.org/book.html#rowkey.design">HBase book, Try to minimize row and column sizes</a>.</p>

<h2>Exercises</h2>

<h3>Compression in HBase</h3>

<p>I could not really find any article on the pros and cons of compression in either HBase or Hadoop. I guess the pros and cons here are the same as any other use of compression: trading IO for CPU. Smaller (because compressed) data can be saved to and read from the disk faster, but at the cost of higher CPU usage.</p>

<h3>Bloom filters</h3>

<p>Bloom filters are describe on the always helpful <a href="http://en.wikipedia.org/wiki/Bloom_filter">Wikipedia</a>. Such a filter is a tool to determine quickly if a piece of information in not in a specific storage, with a configurable probability for false positive.</p>

<p>Say you have a key value distributed data store. For each store, you maintain a Bloom filter of the keys.</p>

<p>Assuming you are looking for a key, you can use the Bloom filters to quickly determine where to look further.</p>

<p>If a Bloom filter for a store states the key is not present, you know you can ignore the store. If it says the key is present, it could be wrong, so you have to look. How often it returns yes when it should say no is a trade-off between the size of the filter and the probability of error.</p>

<p>With HBase being distributed by default, knowing where to look for a key or a key, column pair can increase performance.</p>

<h3>Column family options for compression</h3>

<p>There use to be <code>RECORD</code> and <code>BLOCK</code> options, but they appear deprecated. What is left is to specify the compression algorithm for either regular compression, or compacting compression (which happens when HBase reorganize the store). The compacting compression setting can use the same values (i.e. algorithm names) as the compression setting. In the shell, the option is <code>COMPRESSION_COMPACT</code>.</p>

<p>The available algorithms are <code>NONE</code> (no encryption), <code>GZ</code>, <code>LZO</code> and <code>SNAPPY</code> (which is probably better still than LZO).</p>

<h3>Column family compression design consideration</h3>

<p>I could not find any definitive answer to this, but I would guess that:</p>

<ul>
<li>already compressed data (such as JPEG) should be in an uncompressed column family</li>
<li>rarely used by very large data could use a slower but more efficient algorithm such as GZ</li>
<li>small but very often used families should not be compressed</li>
</ul>


<h3>Installing LZO</h3>

<p>To install LZO compression is not exactly trivial, especially on Mac OS X.</p>

<p>The first step is to install the library; I did it with <a href="http://mxcl.github.com/homebrew/">Homebrew</a>. It installs 64 bits versions by default; the only thing to remember is that by default on Mac OS X 10.7, the default compiler is <a href="http://llvm.org">LLVM</a>, but often <a href="http://gcc.gnu.org/">GCC</a> is better.</p>

<p><code>
sudo brew install lzo --use-gcc
</code></p>

<p>and LZO will end up under <code>/usr/local/Cellar/lzo/2.06/</code></p>

<p>Next step is to build the hadoop LZO plugin. The basic information is available on the Hadoop <a href="http://wiki.apache.org/hadoop/UsingLzoCompression">wiki</a>, but the main repository it refers to is obsolete. There is another, maintained <a href="https://github.com/toddlipcon/hadoop-lzo">repository</a> on Github.</p>

<p><code>
git clone https://github.com/toddlipcon/hadoop-lzo
</code></p>

<h4>Mac OS X</h4>

<p>Building on Linux should work right away, but Mac OS X (especially 10.7) is slightly different in frustrating way. The <code>ld</code> command is not GNU, but BSD, so it does not understand the same options.</p>

<p>To get the library to compile, you need to edit the <code>build.xml</code> file and clear the <code>LDFLAGS</code> (by default the value is <code>-Wl,--no-as-needed</code>, it needs to be empty).</p>

<p>Liquid error: ClassNotFound: no lexer for alias 'txt' found</p>

<p>From inside the repository, it can be applied with</p>

<p><code>
patch -p1 &lt; hadoop-lzo.patch
</code></p>

<p>Once this is done, the <code>ant</code> invocation documented in the Wiki should almost work. Two things need to be changed: first is the use of <code>GCC</code> instead of <code>LLVM</code> (by setting the <code>CC</code> variable); second is the strange name of the <code>include</code> directory for Java. The build script expects it under <code>$JAVA_HOME/include</code>, but of course in Mac OS X it had to be somewhere else (<code>/System/Library/Frameworks/JavaVM.framework/Headers</code>, if you need to know), so I added it directly to the include path <code>C_INCLUDE_PATH</code>:</p>

<p><code>
env JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/ \
C_INCLUDE_PATH=/System/Library/Frameworks/JavaVM.framework/Headers:/usr/local/Cellar/lzo/2.06/include/ \
LIBRARY_PATH=/usr/local/Cellar/lzo/2.06/lib/ CFAGS='-arch x86_64' \
CC=/usr/bin/gcc-4.2  ant clean compile-native test tar
</code></p>

<p>Normally, you should now have a <code>build</code> directory with the jar and native libraries.</p>

<p>The final step is to deploy this in HBase. HBase expect everything to be under the <code>$HBASE_HOME/lib</code>. The instructions from the wiki give the right commands (I just added the creation of the <code>$HBASE_HOME/lib/native</code> directory, which does not exist by default):</p>

<p><code>
cp build/hadoop-lzo-0.4.15/hadoop-lzo-0.4.15.jar $HBASE_HOME/lib/
mkdir -p $HBASE_HOME/lib/native
tar -cBf - -C build/hadoop-lzo-0.4.15/lib/native/ . | tar -xBvf - -C $HBASE_HOME/lib/native
</code></p>

<p>Now you can test whether the new library is enabled: run the command:</p>

<p><code>
$ ./bin/hbase org.apache.hadoop.hbase.util.CompressionTest /tmp/data.lzo lzo
</code></p>

<p>and it should output:</p>

<p><code>
11/12/14 09:13:21 INFO lzo.GPLNativeCodeLoader: Loaded native gpl library
11/12/14 09:13:21 INFO lzo.LzoCodec: Successfully loaded &amp; initialized native-lzo library [hadoop-lzo rev c7d54fffe5a853c437ee23413ba71fc6af23c91d]
11/12/14 09:13:21 INFO compress.CodecPool: Got brand-new compressor
SUCCESS
</code></p>

<p>And that's it. The most frustrating part is that HBase will appear to hang when you try to enable a table that uses LZO compression if anything went wrong (and forgot to test as above). The logs will reveal that <code>hadoop-native</code> cannot be found. This means that the native libraries cannot be loaded. So make sure that you have all the files below:</p>

<p><code>
$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.0.dylib
$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.a
$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.dylib
$HBASE_HOME/lib/native/Mac_OS_X-x86_64-64/libgplcompression.la
</code></p>

<p>After that, restart the server, and you can use LZO compression instead of GZ.</p>

<p>And this completes Day 2. Next and final day is about deploying HBase to the cloud. This might take more than just a day as I need some time to figure out how to use <a href="http://aws.amazon.com/ec2/">AWS EC2</a> and which options to choose, but hopefully I'll be able to deploy Riak there as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven Databases in Seven Weeks HBase Day 1]]></title>
    <link href="http://blog.wakatta.jp/blog/2011/12/11/seven-databases-in-seven-weeks-hbase-day-1/"/>
    <updated>2011-12-11T12:57:00+09:00</updated>
    <id>http://blog.wakatta.jp/blog/2011/12/11/seven-databases-in-seven-weeks-hbase-day-1</id>
    <content type="html"><![CDATA[<p>New week, new database. This week is about <a href="">HBase</a>, a product that
has a significant enterprisy feel about it. First it is written in
Java, the de facto enterprise language. Then it is already in
production in very large big data consumers (Facebook among others).</p>

<p>Perhaps more surprising is the fact that it even runs at all on a
single, personal computer (as the book states, 5 dedicated servers is
the recommended minimal configuration).</p>

<!--more-->


<p>Today is a fairly short day. Getting HBase to run, creating a single
table and a couple of rows, and that's it.</p>

<p>As for Riak, I recommend downloading the
<a href="http://www.apache.org/dyn/closer.cgi?path=hbase/hbase-0.90.3/hbase-0.90.3.tar.gz">HBase package</a>
rather than trying your luck with the Homebrew version. HBase runs
directly from the extraction directory, and already includes all the
dependencies.</p>

<p>Just edit the hbase-site.xml configuratio file as the book recommends,
and you're good to go.</p>

<h2>Exercises</h2>

<h3>put_many function</h3>

<p>This function is more an exercise in Ruby than in HBase. The code is
just a variant of what is already in the book.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>put_many.rb  (put_many.rb)</span> <a href='/downloads/code/7d7w/hbase/put_many.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># recap some definition to make this definition self-contained</span>
</span><span class='line'><span class="n">import</span> <span class="s1">&#39;org.apache.hadoop.hbase.client.HTable&#39;</span>
</span><span class='line'><span class="n">import</span> <span class="s1">&#39;org.apache.hadoop.hbase.client.Put&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">jbytes</span><span class="p">(</span> <span class="o">*</span><span class="n">args</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">arg</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_java_bytes</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># actual exercise</span>
</span><span class='line'><span class="k">def</span> <span class="nf">put_many</span><span class="p">(</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">column_values</span><span class="p">)</span>
</span><span class='line'>  <span class="n">table</span> <span class="o">=</span> <span class="no">HTable</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@hbase</span><span class="o">.</span><span class="n">configuration</span><span class="p">,</span> <span class="n">table_name</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">p</span> <span class="o">=</span> <span class="no">Put</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="o">*</span><span class="n">jbytes</span><span class="p">(</span> <span class="n">row</span> <span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">column_values</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="n">kf</span><span class="p">,</span> <span class="n">kn</span><span class="p">)</span> <span class="o">=</span> <span class="n">k</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">kn</span> <span class="o">||=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="nb">p</span><span class="o">.</span><span class="n">add</span><span class="p">(</span> <span class="o">*</span><span class="n">jbytes</span><span class="p">(</span> <span class="n">kf</span><span class="p">,</span> <span class="n">kn</span><span class="p">,</span> <span class="n">v</span> <span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">table</span><span class="o">.</span><span class="n">put</span><span class="p">(</span> <span class="nb">p</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Use the put_many function</h3>

<p>Invoking the <code>put_many</code> function then checking the insert:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Testing put_many  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">put_many</span> <span class="s1">&#39;wiki&#39;</span><span class="p">,</span> <span class="s1">&#39;Some title&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;text:&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Some article text&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;revision:author&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;jschmoe&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;revision:comment&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;no comment&quot;</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;get &#39;wiki&#39;, &#39;Some title&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>generates</p>

<p><code>
COLUMN                CELL                                                      
 revision:author      timestamp=1323575657943, value=jschmoe                    
 revision:comment     timestamp=1323575657943, value=no comment                 
 text:                timestamp=1323575657943, value=Some article text          
3 row(s) in 0.5340 seconds
</code></p>

<p>And that's all for today. Tomorrow will be a bit more fun: first a
significant take on of Wikipedia files, then using HBase to play with
the loaded data.</p>
]]></content>
  </entry>
  
</feed>
